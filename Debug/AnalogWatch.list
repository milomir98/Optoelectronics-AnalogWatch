
AnalogWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f334  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003fe8  0800f508  0800f508  0001f508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080134f0  080134f0  0003009c  2**0
                  CONTENTS
  4 .ARM          00000008  080134f0  080134f0  000234f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080134f8  080134f8  0003009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080134f8  080134f8  000234f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080134fc  080134fc  000234fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08013500  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019534  2000009c  0801359c  0003009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200195d0  0801359c  000395d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf89  00000000  00000000  000300ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003592  00000000  00000000  0004d053  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000ca55  00000000  00000000  000505e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000b20  00000000  00000000  0005d040  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00003b90  00000000  00000000  0005db60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00028fb3  00000000  00000000  000616f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000e8a2  00000000  00000000  0008a6a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000f619a  00000000  00000000  00098f45  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000fd  00000000  00000000  0018f0df  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a58  00000000  00000000  0018f1dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f4ec 	.word	0x0800f4ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	0800f4ec 	.word	0x0800f4ec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b972 	b.w	8000f48 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9e08      	ldr	r6, [sp, #32]
 8000c82:	4604      	mov	r4, r0
 8000c84:	4688      	mov	r8, r1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d14b      	bne.n	8000d22 <__udivmoddi4+0xa6>
 8000c8a:	428a      	cmp	r2, r1
 8000c8c:	4615      	mov	r5, r2
 8000c8e:	d967      	bls.n	8000d60 <__udivmoddi4+0xe4>
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	b14a      	cbz	r2, 8000caa <__udivmoddi4+0x2e>
 8000c96:	f1c2 0720 	rsb	r7, r2, #32
 8000c9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9e:	fa20 f707 	lsr.w	r7, r0, r7
 8000ca2:	4095      	lsls	r5, r2
 8000ca4:	ea47 0803 	orr.w	r8, r7, r3
 8000ca8:	4094      	lsls	r4, r2
 8000caa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cae:	0c23      	lsrs	r3, r4, #16
 8000cb0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb4:	fa1f fc85 	uxth.w	ip, r5
 8000cb8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cbc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cc0:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc4:	4299      	cmp	r1, r3
 8000cc6:	d909      	bls.n	8000cdc <__udivmoddi4+0x60>
 8000cc8:	18eb      	adds	r3, r5, r3
 8000cca:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cce:	f080 811b 	bcs.w	8000f08 <__udivmoddi4+0x28c>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 8118 	bls.w	8000f08 <__udivmoddi4+0x28c>
 8000cd8:	3f02      	subs	r7, #2
 8000cda:	442b      	add	r3, r5
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cf0:	45a4      	cmp	ip, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x8c>
 8000cf4:	192c      	adds	r4, r5, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x290>
 8000cfe:	45a4      	cmp	ip, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x290>
 8000d04:	3802      	subs	r0, #2
 8000d06:	442c      	add	r4, r5
 8000d08:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d0c:	eba4 040c 	sub.w	r4, r4, ip
 8000d10:	2700      	movs	r7, #0
 8000d12:	b11e      	cbz	r6, 8000d1c <__udivmoddi4+0xa0>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xbe>
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	f000 80eb 	beq.w	8000f02 <__udivmoddi4+0x286>
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d32:	4638      	mov	r0, r7
 8000d34:	4639      	mov	r1, r7
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f783 	clz	r7, r3
 8000d3e:	2f00      	cmp	r7, #0
 8000d40:	d147      	bne.n	8000dd2 <__udivmoddi4+0x156>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd0>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80fa 	bhi.w	8000f40 <__udivmoddi4+0x2c4>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	4698      	mov	r8, r3
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa0>
 8000d5a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xe8>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 808f 	bne.w	8000e8c <__udivmoddi4+0x210>
 8000d6e:	1b49      	subs	r1, r1, r5
 8000d70:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d74:	fa1f f885 	uxth.w	r8, r5
 8000d78:	2701      	movs	r7, #1
 8000d7a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7e:	0c23      	lsrs	r3, r4, #16
 8000d80:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb08 f10c 	mul.w	r1, r8, ip
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x124>
 8000d90:	18eb      	adds	r3, r5, r3
 8000d92:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x122>
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	f200 80cd 	bhi.w	8000f38 <__udivmoddi4+0x2bc>
 8000d9e:	4684      	mov	ip, r0
 8000da0:	1a59      	subs	r1, r3, r1
 8000da2:	b2a3      	uxth	r3, r4
 8000da4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000db0:	fb08 f800 	mul.w	r8, r8, r0
 8000db4:	45a0      	cmp	r8, r4
 8000db6:	d907      	bls.n	8000dc8 <__udivmoddi4+0x14c>
 8000db8:	192c      	adds	r4, r5, r4
 8000dba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dbe:	d202      	bcs.n	8000dc6 <__udivmoddi4+0x14a>
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	f200 80b6 	bhi.w	8000f32 <__udivmoddi4+0x2b6>
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	eba4 0408 	sub.w	r4, r4, r8
 8000dcc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dd0:	e79f      	b.n	8000d12 <__udivmoddi4+0x96>
 8000dd2:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd6:	40bb      	lsls	r3, r7
 8000dd8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ddc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000de0:	fa01 f407 	lsl.w	r4, r1, r7
 8000de4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dec:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000df0:	4325      	orrs	r5, r4
 8000df2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df6:	0c2c      	lsrs	r4, r5, #16
 8000df8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dfc:	fa1f fa8e 	uxth.w	sl, lr
 8000e00:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e04:	fb09 f40a 	mul.w	r4, r9, sl
 8000e08:	429c      	cmp	r4, r3
 8000e0a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e12:	d90b      	bls.n	8000e2c <__udivmoddi4+0x1b0>
 8000e14:	eb1e 0303 	adds.w	r3, lr, r3
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1c:	f080 8087 	bcs.w	8000f2e <__udivmoddi4+0x2b2>
 8000e20:	429c      	cmp	r4, r3
 8000e22:	f240 8084 	bls.w	8000f2e <__udivmoddi4+0x2b2>
 8000e26:	f1a9 0902 	sub.w	r9, r9, #2
 8000e2a:	4473      	add	r3, lr
 8000e2c:	1b1b      	subs	r3, r3, r4
 8000e2e:	b2ad      	uxth	r5, r5
 8000e30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e34:	fb08 3310 	mls	r3, r8, r0, r3
 8000e38:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e3c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e40:	45a2      	cmp	sl, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1da>
 8000e44:	eb1e 0404 	adds.w	r4, lr, r4
 8000e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4c:	d26b      	bcs.n	8000f26 <__udivmoddi4+0x2aa>
 8000e4e:	45a2      	cmp	sl, r4
 8000e50:	d969      	bls.n	8000f26 <__udivmoddi4+0x2aa>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4474      	add	r4, lr
 8000e56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	eba4 040a 	sub.w	r4, r4, sl
 8000e62:	454c      	cmp	r4, r9
 8000e64:	46c2      	mov	sl, r8
 8000e66:	464b      	mov	r3, r9
 8000e68:	d354      	bcc.n	8000f14 <__udivmoddi4+0x298>
 8000e6a:	d051      	beq.n	8000f10 <__udivmoddi4+0x294>
 8000e6c:	2e00      	cmp	r6, #0
 8000e6e:	d069      	beq.n	8000f44 <__udivmoddi4+0x2c8>
 8000e70:	ebb1 050a 	subs.w	r5, r1, sl
 8000e74:	eb64 0403 	sbc.w	r4, r4, r3
 8000e78:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e7c:	40fd      	lsrs	r5, r7
 8000e7e:	40fc      	lsrs	r4, r7
 8000e80:	ea4c 0505 	orr.w	r5, ip, r5
 8000e84:	e9c6 5400 	strd	r5, r4, [r6]
 8000e88:	2700      	movs	r7, #0
 8000e8a:	e747      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f703 	lsr.w	r7, r0, r3
 8000e94:	4095      	lsls	r5, r2
 8000e96:	fa01 f002 	lsl.w	r0, r1, r2
 8000e9a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ea2:	4338      	orrs	r0, r7
 8000ea4:	0c01      	lsrs	r1, r0, #16
 8000ea6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eaa:	fa1f f885 	uxth.w	r8, r5
 8000eae:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eb2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb6:	fb07 f308 	mul.w	r3, r7, r8
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x256>
 8000ec2:	1869      	adds	r1, r5, r1
 8000ec4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec8:	d22f      	bcs.n	8000f2a <__udivmoddi4+0x2ae>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d92d      	bls.n	8000f2a <__udivmoddi4+0x2ae>
 8000ece:	3f02      	subs	r7, #2
 8000ed0:	4429      	add	r1, r5
 8000ed2:	1acb      	subs	r3, r1, r3
 8000ed4:	b281      	uxth	r1, r0
 8000ed6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eda:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb00 f308 	mul.w	r3, r0, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d907      	bls.n	8000efa <__udivmoddi4+0x27e>
 8000eea:	1869      	adds	r1, r5, r1
 8000eec:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ef0:	d217      	bcs.n	8000f22 <__udivmoddi4+0x2a6>
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d915      	bls.n	8000f22 <__udivmoddi4+0x2a6>
 8000ef6:	3802      	subs	r0, #2
 8000ef8:	4429      	add	r1, r5
 8000efa:	1ac9      	subs	r1, r1, r3
 8000efc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f00:	e73b      	b.n	8000d7a <__udivmoddi4+0xfe>
 8000f02:	4637      	mov	r7, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e709      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000f08:	4607      	mov	r7, r0
 8000f0a:	e6e7      	b.n	8000cdc <__udivmoddi4+0x60>
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x8c>
 8000f10:	4541      	cmp	r1, r8
 8000f12:	d2ab      	bcs.n	8000e6c <__udivmoddi4+0x1f0>
 8000f14:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f18:	eb69 020e 	sbc.w	r2, r9, lr
 8000f1c:	3801      	subs	r0, #1
 8000f1e:	4613      	mov	r3, r2
 8000f20:	e7a4      	b.n	8000e6c <__udivmoddi4+0x1f0>
 8000f22:	4660      	mov	r0, ip
 8000f24:	e7e9      	b.n	8000efa <__udivmoddi4+0x27e>
 8000f26:	4618      	mov	r0, r3
 8000f28:	e795      	b.n	8000e56 <__udivmoddi4+0x1da>
 8000f2a:	4667      	mov	r7, ip
 8000f2c:	e7d1      	b.n	8000ed2 <__udivmoddi4+0x256>
 8000f2e:	4681      	mov	r9, r0
 8000f30:	e77c      	b.n	8000e2c <__udivmoddi4+0x1b0>
 8000f32:	3802      	subs	r0, #2
 8000f34:	442c      	add	r4, r5
 8000f36:	e747      	b.n	8000dc8 <__udivmoddi4+0x14c>
 8000f38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f3c:	442b      	add	r3, r5
 8000f3e:	e72f      	b.n	8000da0 <__udivmoddi4+0x124>
 8000f40:	4638      	mov	r0, r7
 8000f42:	e708      	b.n	8000d56 <__udivmoddi4+0xda>
 8000f44:	4637      	mov	r7, r6
 8000f46:	e6e9      	b.n	8000d1c <__udivmoddi4+0xa0>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_InitTick+0x3c>)
 8000f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f52:	490e      	ldr	r1, [pc, #56]	; (8000f8c <HAL_InitTick+0x40>)
 8000f54:	7812      	ldrb	r2, [r2, #0]
 8000f56:	fbb3 f3f2 	udiv	r3, r3, r2
{
 8000f5a:	b510      	push	{r4, lr}
 8000f5c:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f5e:	6808      	ldr	r0, [r1, #0]
 8000f60:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f64:	f000 fb12 	bl	800158c <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f68:	b908      	cbnz	r0, 8000f6e <HAL_InitTick+0x22>
 8000f6a:	2c0f      	cmp	r4, #15
 8000f6c:	d901      	bls.n	8000f72 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000f6e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000f70:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f72:	2200      	movs	r2, #0
 8000f74:	4621      	mov	r1, r4
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7a:	f000 fac3 	bl	8001504 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <HAL_InitTick+0x44>)
 8000f80:	2000      	movs	r0, #0
 8000f82:	601c      	str	r4, [r3, #0]
}
 8000f84:	bd10      	pop	{r4, pc}
 8000f86:	bf00      	nop
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000004 	.word	0x20000004

08000f94 <HAL_Init>:
{
 8000f94:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f96:	2003      	movs	r0, #3
 8000f98:	f000 faa0 	bl	80014dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f7ff ffd5 	bl	8000f4c <HAL_InitTick>
  HAL_MspInit();
 8000fa2:	f003 fb83 	bl	80046ac <HAL_MspInit>
}
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	bd08      	pop	{r3, pc}
 8000faa:	bf00      	nop

08000fac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fac:	4a03      	ldr	r2, [pc, #12]	; (8000fbc <HAL_IncTick+0x10>)
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <HAL_IncTick+0x14>)
 8000fb0:	6811      	ldr	r1, [r2, #0]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	440b      	add	r3, r1
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	200192c8 	.word	0x200192c8
 8000fc0:	20000000 	.word	0x20000000

08000fc4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fc4:	4b01      	ldr	r3, [pc, #4]	; (8000fcc <HAL_GetTick+0x8>)
 8000fc6:	6818      	ldr	r0, [r3, #0]
}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	200192c8 	.word	0x200192c8

08000fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd0:	b538      	push	{r3, r4, r5, lr}
 8000fd2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff fff6 	bl	8000fc4 <HAL_GetTick>
 8000fd8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fda:	1c63      	adds	r3, r4, #1
 8000fdc:	d002      	beq.n	8000fe4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fde:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <HAL_Delay+0x20>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fe4:	f7ff ffee 	bl	8000fc4 <HAL_GetTick>
 8000fe8:	1b40      	subs	r0, r0, r5
 8000fea:	42a0      	cmp	r0, r4
 8000fec:	d3fa      	bcc.n	8000fe4 <HAL_Delay+0x14>
  {
  }
}
 8000fee:	bd38      	pop	{r3, r4, r5, pc}
 8000ff0:	20000000 	.word	0x20000000

08000ff4 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	f000 8092 	beq.w	800111e <HAL_ADC_Init+0x12a>
{
 8000ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ffc:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000ffe:	4604      	mov	r4, r0
 8001000:	2d00      	cmp	r5, #0
 8001002:	f000 8082 	beq.w	800110a <HAL_ADC_Init+0x116>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001006:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001008:	06db      	lsls	r3, r3, #27
 800100a:	d504      	bpl.n	8001016 <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800100c:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 800100e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001010:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8001014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8001016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001018:	4a4e      	ldr	r2, [pc, #312]	; (8001154 <HAL_ADC_Init+0x160>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800101a:	494f      	ldr	r1, [pc, #316]	; (8001158 <HAL_ADC_Init+0x164>)
    ADC_STATE_CLR_SET(hadc->State,
 800101c:	401a      	ands	r2, r3
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800101e:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001020:	4d4e      	ldr	r5, [pc, #312]	; (800115c <HAL_ADC_Init+0x168>)
    ADC_STATE_CLR_SET(hadc->State,
 8001022:	f042 0202 	orr.w	r2, r2, #2
 8001026:	6422      	str	r2, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001028:	684a      	ldr	r2, [r1, #4]
 800102a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800102e:	604a      	str	r2, [r1, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001030:	684a      	ldr	r2, [r1, #4]
 8001032:	6860      	ldr	r0, [r4, #4]
 8001034:	4302      	orrs	r2, r0
 8001036:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001038:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800103a:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800103c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001040:	f8d4 c008 	ldr.w	ip, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001044:	68e7      	ldr	r7, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001046:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001048:	6858      	ldr	r0, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800104a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800104c:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001050:	42ae      	cmp	r6, r5
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001052:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001054:	6858      	ldr	r0, [r3, #4]
 8001056:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800105a:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800105c:	6859      	ldr	r1, [r3, #4]
 800105e:	ea41 010c 	orr.w	r1, r1, ip
 8001062:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001064:	6899      	ldr	r1, [r3, #8]
 8001066:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800106a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	ea42 0207 	orr.w	r2, r2, r7
 8001072:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001074:	d055      	beq.n	8001122 <HAL_ADC_Init+0x12e>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001076:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001078:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800107a:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800107e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	4316      	orrs	r6, r2
 8001084:	609e      	str	r6, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001086:	6899      	ldr	r1, [r3, #8]
 8001088:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800108c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	4302      	orrs	r2, r0
 8001092:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001094:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001096:	69a5      	ldr	r5, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001098:	f021 0102 	bic.w	r1, r1, #2
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800109c:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80010a0:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 80010a8:	609a      	str	r2, [r3, #8]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80010aa:	2800      	cmp	r0, #0
 80010ac:	d142      	bne.n	8001134 <HAL_ADC_Init+0x140>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010b4:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010b6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 80010b8:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010ba:	69e5      	ldr	r5, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010bc:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010c0:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010c4:	1e6a      	subs	r2, r5, #1
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010c6:	6967      	ldr	r7, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010c8:	62d8      	str	r0, [r3, #44]	; 0x2c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ca:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010cc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80010ce:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 80010d2:	62dd      	str	r5, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010d4:	689d      	ldr	r5, [r3, #8]
 80010d6:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 80010da:	609d      	str	r5, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010dc:	6899      	ldr	r1, [r3, #8]
 80010de:	ea41 214c 	orr.w	r1, r1, ip, lsl #9
 80010e2:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010e4:	6899      	ldr	r1, [r3, #8]
 80010e6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80010ea:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80010f2:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80010f4:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80010f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010f8:	f023 0303 	bic.w	r3, r3, #3
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001102:	2300      	movs	r3, #0
 8001104:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 800110a:	f003 fae7 	bl	80046dc <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800110e:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001110:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8001112:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001116:	06db      	lsls	r3, r3, #27
 8001118:	f53f af78 	bmi.w	800100c <HAL_ADC_Init+0x18>
 800111c:	e77b      	b.n	8001016 <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 800111e:	2001      	movs	r0, #1
}
 8001120:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001128:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	e7af      	b.n	8001094 <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001134:	6858      	ldr	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001136:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001138:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800113c:	1e51      	subs	r1, r2, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800113e:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001146:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	e7b1      	b.n	80010b6 <HAL_ADC_Init+0xc2>
 8001152:	bf00      	nop
 8001154:	ffffeefd 	.word	0xffffeefd
 8001158:	40012300 	.word	0x40012300
 800115c:	0f000001 	.word	0x0f000001

08001160 <HAL_ADC_Start_DMA>:
{
 8001160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001162:	4604      	mov	r4, r0
 8001164:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 8001166:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8001168:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  __IO uint32_t counter = 0;
 800116c:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800116e:	2b01      	cmp	r3, #1
 8001170:	f000 8089 	beq.w	8001286 <HAL_ADC_Start_DMA+0x126>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001174:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hadc);
 8001176:	2001      	movs	r0, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001178:	68ab      	ldr	r3, [r5, #8]
  __HAL_LOCK(hadc);
 800117a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800117e:	07de      	lsls	r6, r3, #31
 8001180:	d414      	bmi.n	80011ac <HAL_ADC_Start_DMA+0x4c>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001182:	4b47      	ldr	r3, [pc, #284]	; (80012a0 <HAL_ADC_Start_DMA+0x140>)
 8001184:	4e47      	ldr	r6, [pc, #284]	; (80012a4 <HAL_ADC_Start_DMA+0x144>)
 8001186:	6818      	ldr	r0, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8001188:	68ab      	ldr	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800118a:	fba6 6000 	umull	r6, r0, r6, r0
    __HAL_ADC_ENABLE(hadc);
 800118e:	f043 0301 	orr.w	r3, r3, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001192:	0c80      	lsrs	r0, r0, #18
    __HAL_ADC_ENABLE(hadc);
 8001194:	60ab      	str	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001196:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800119a:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 800119c:	9b01      	ldr	r3, [sp, #4]
 800119e:	b12b      	cbz	r3, 80011ac <HAL_ADC_Start_DMA+0x4c>
      counter--;
 80011a0:	9801      	ldr	r0, [sp, #4]
 80011a2:	3801      	subs	r0, #1
 80011a4:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 80011a6:	9801      	ldr	r0, [sp, #4]
 80011a8:	2800      	cmp	r0, #0
 80011aa:	d1f9      	bne.n	80011a0 <HAL_ADC_Start_DMA+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011ac:	68a8      	ldr	r0, [r5, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80011ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011b0:	f010 0001 	ands.w	r0, r0, #1
 80011b4:	d044      	beq.n	8001240 <HAL_ADC_Start_DMA+0xe0>
    ADC_STATE_CLR_SET(hadc->State,
 80011b6:	483c      	ldr	r0, [pc, #240]	; (80012a8 <HAL_ADC_Start_DMA+0x148>)
 80011b8:	4018      	ands	r0, r3
 80011ba:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80011be:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011c0:	686b      	ldr	r3, [r5, #4]
 80011c2:	0558      	lsls	r0, r3, #21
 80011c4:	d505      	bpl.n	80011d2 <HAL_ADC_Start_DMA+0x72>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011d0:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011d4:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80011d8:	d047      	beq.n	800126a <HAL_ADC_Start_DMA+0x10a>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011dc:	f023 0306 	bic.w	r3, r3, #6
 80011e0:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011e2:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 80011e4:	4613      	mov	r3, r2
 80011e6:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 80012c0 <HAL_ADC_Start_DMA+0x160>
 80011ea:	460a      	mov	r2, r1
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011ec:	f06f 0c22 	mvn.w	ip, #34	; 0x22
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011f0:	482e      	ldr	r0, [pc, #184]	; (80012ac <HAL_ADC_Start_DMA+0x14c>)
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011f2:	492f      	ldr	r1, [pc, #188]	; (80012b0 <HAL_ADC_Start_DMA+0x150>)
    __HAL_UNLOCK(hadc);   
 80011f4:	2600      	movs	r6, #0
 80011f6:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011fa:	64f9      	str	r1, [r7, #76]	; 0x4c
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011fc:	f105 014c 	add.w	r1, r5, #76	; 0x4c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001200:	e9c7 e00f 	strd	lr, r0, [r7, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001204:	f8c5 c000 	str.w	ip, [r5]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001208:	4638      	mov	r0, r7
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800120a:	686f      	ldr	r7, [r5, #4]
 800120c:	f047 6780 	orr.w	r7, r7, #67108864	; 0x4000000
 8001210:	606f      	str	r7, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001212:	68af      	ldr	r7, [r5, #8]
 8001214:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 8001218:	60af      	str	r7, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800121a:	f000 fa6f 	bl	80016fc <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800121e:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <HAL_ADC_Start_DMA+0x154>)
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001220:	6822      	ldr	r2, [r4, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001222:	6858      	ldr	r0, [r3, #4]
 8001224:	f010 001f 	ands.w	r0, r0, #31
 8001228:	d113      	bne.n	8001252 <HAL_ADC_Start_DMA+0xf2>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800122a:	6893      	ldr	r3, [r2, #8]
 800122c:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8001230:	d10d      	bne.n	800124e <HAL_ADC_Start_DMA+0xee>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001232:	6891      	ldr	r1, [r2, #8]
  return HAL_OK;
 8001234:	4618      	mov	r0, r3
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001236:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800123a:	6091      	str	r1, [r2, #8]
}
 800123c:	b003      	add	sp, #12
 800123e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001240:	f043 0310 	orr.w	r3, r3, #16
 8001244:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001246:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6463      	str	r3, [r4, #68]	; 0x44
}
 800124e:	b003      	add	sp, #12
 8001250:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001252:	4919      	ldr	r1, [pc, #100]	; (80012b8 <HAL_ADC_Start_DMA+0x158>)
 8001254:	428a      	cmp	r2, r1
 8001256:	d00a      	beq.n	800126e <HAL_ADC_Start_DMA+0x10e>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001258:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800125a:	06db      	lsls	r3, r3, #27
 800125c:	d402      	bmi.n	8001264 <HAL_ADC_Start_DMA+0x104>
 800125e:	4917      	ldr	r1, [pc, #92]	; (80012bc <HAL_ADC_Start_DMA+0x15c>)
 8001260:	428a      	cmp	r2, r1
 8001262:	d013      	beq.n	800128c <HAL_ADC_Start_DMA+0x12c>
  return HAL_OK;
 8001264:	2000      	movs	r0, #0
}
 8001266:	b003      	add	sp, #12
 8001268:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 800126a:	6463      	str	r3, [r4, #68]	; 0x44
 800126c:	e7b9      	b.n	80011e2 <HAL_ADC_Start_DMA+0x82>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800126e:	6893      	ldr	r3, [r2, #8]
 8001270:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8001274:	d103      	bne.n	800127e <HAL_ADC_Start_DMA+0x11e>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001276:	6893      	ldr	r3, [r2, #8]
 8001278:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800127c:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <HAL_ADC_Start_DMA+0x154>)
  return HAL_OK;
 8001280:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	e7e3      	b.n	800124e <HAL_ADC_Start_DMA+0xee>
  __HAL_LOCK(hadc);
 8001286:	2002      	movs	r0, #2
}
 8001288:	b003      	add	sp, #12
 800128a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800128c:	6888      	ldr	r0, [r1, #8]
 800128e:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001292:	d1e7      	bne.n	8001264 <HAL_ADC_Start_DMA+0x104>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001294:	688b      	ldr	r3, [r1, #8]
 8001296:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800129a:	608b      	str	r3, [r1, #8]
 800129c:	e7d7      	b.n	800124e <HAL_ADC_Start_DMA+0xee>
 800129e:	bf00      	nop
 80012a0:	20000008 	.word	0x20000008
 80012a4:	431bde83 	.word	0x431bde83
 80012a8:	fffff8fe 	.word	0xfffff8fe
 80012ac:	080012c9 	.word	0x080012c9
 80012b0:	080012d9 	.word	0x080012d9
 80012b4:	40012300 	.word	0x40012300
 80012b8:	40012000 	.word	0x40012000
 80012bc:	40012200 	.word	0x40012200
 80012c0:	080012f1 	.word	0x080012f1

080012c4 <HAL_ADC_ConvHalfCpltCallback>:
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop

080012c8 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80012c8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80012ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80012cc:	f7ff fffa 	bl	80012c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012d0:	bd08      	pop	{r3, pc}
 80012d2:	bf00      	nop

080012d4 <HAL_ADC_ErrorCallback>:
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop

080012d8 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80012d8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80012da:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80012de:	641a      	str	r2, [r3, #64]	; 0x40
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80012e0:	4618      	mov	r0, r3
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80012e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012e4:	f042 0204 	orr.w	r2, r2, #4
 80012e8:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc);
 80012ea:	f7ff fff3 	bl	80012d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012ee:	bd08      	pop	{r3, pc}

080012f0 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80012f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012f4:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80012fa:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80012fc:	d123      	bne.n	8001346 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001302:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001304:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001306:	688a      	ldr	r2, [r1, #8]
 8001308:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800130c:	d117      	bne.n	800133e <ADC_DMAConvCplt+0x4e>
 800130e:	699a      	ldr	r2, [r3, #24]
 8001310:	b9aa      	cbnz	r2, 800133e <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001312:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001314:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001318:	d002      	beq.n	8001320 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800131a:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800131c:	0550      	lsls	r0, r2, #21
 800131e:	d40e      	bmi.n	800133e <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001320:	684a      	ldr	r2, [r1, #4]
 8001322:	f022 0220 	bic.w	r2, r2, #32
 8001326:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800132a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800132e:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001332:	04d1      	lsls	r1, r2, #19
 8001334:	d403      	bmi.n	800133e <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001338:	f042 0201 	orr.w	r2, r2, #1
 800133c:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800133e:	4618      	mov	r0, r3
 8001340:	f002 fc06 	bl	8003b50 <HAL_ADC_ConvCpltCallback>
}
 8001344:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001346:	06d2      	lsls	r2, r2, #27
 8001348:	d404      	bmi.n	8001354 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800134a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800134c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ffbd 	bl	80012d4 <HAL_ADC_ErrorCallback>
}
 800135a:	bd10      	pop	{r4, pc}

0800135c <HAL_ADC_ConfigChannel>:
  __HAL_LOCK(hadc);
 800135c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  __IO uint32_t counter = 0;
 8001360:	2200      	movs	r2, #0
{
 8001362:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8001364:	2b01      	cmp	r3, #1
{
 8001366:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 8001368:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800136a:	f000 809d 	beq.w	80014a8 <HAL_ADC_ConfigChannel+0x14c>
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800136e:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8001370:	2201      	movs	r2, #1
 8001372:	6803      	ldr	r3, [r0, #0]
 8001374:	b2b7      	uxth	r7, r6
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001376:	2e09      	cmp	r6, #9
  __HAL_LOCK(hadc);
 8001378:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 800137c:	eb07 0547 	add.w	r5, r7, r7, lsl #1
 8001380:	688a      	ldr	r2, [r1, #8]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001382:	d92f      	bls.n	80013e4 <HAL_ADC_ConfigChannel+0x88>
 8001384:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8001388:	d02c      	beq.n	80013e4 <HAL_ADC_ConfigChannel+0x88>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800138a:	3d1e      	subs	r5, #30
 800138c:	f04f 0c07 	mov.w	ip, #7
 8001390:	68dc      	ldr	r4, [r3, #12]
 8001392:	fa0c fc05 	lsl.w	ip, ip, r5
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001396:	f8df e138 	ldr.w	lr, [pc, #312]	; 80014d0 <HAL_ADC_ConfigChannel+0x174>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800139a:	ea24 040c 	bic.w	r4, r4, ip
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800139e:	4576      	cmp	r6, lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013a0:	60dc      	str	r4, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013a2:	f000 8084 	beq.w	80014ae <HAL_ADC_ConfigChannel+0x152>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013a6:	fa02 f505 	lsl.w	r5, r2, r5
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	4315      	orrs	r5, r2
 80013ae:	60dd      	str	r5, [r3, #12]
  if (sConfig->Rank < 7)
 80013b0:	6849      	ldr	r1, [r1, #4]
 80013b2:	2906      	cmp	r1, #6
 80013b4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80013b8:	d826      	bhi.n	8001408 <HAL_ADC_ConfigChannel+0xac>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013ba:	3a05      	subs	r2, #5
 80013bc:	241f      	movs	r4, #31
 80013be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013c0:	4094      	lsls	r4, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013c2:	fa07 f202 	lsl.w	r2, r7, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013c6:	ea21 0104 	bic.w	r1, r1, r4
 80013ca:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013ce:	430a      	orrs	r2, r1
 80013d0:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80013d2:	4a3e      	ldr	r2, [pc, #248]	; (80014cc <HAL_ADC_ConfigChannel+0x170>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d029      	beq.n	800142c <HAL_ADC_ConfigChannel+0xd0>
  __HAL_UNLOCK(hadc);
 80013d8:	2300      	movs	r3, #0
 80013da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80013de:	4618      	mov	r0, r3
}
 80013e0:	b003      	add	sp, #12
 80013e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013e4:	f04f 0c07 	mov.w	ip, #7
 80013e8:	691c      	ldr	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013ea:	40aa      	lsls	r2, r5
  if (sConfig->Rank < 7)
 80013ec:	6849      	ldr	r1, [r1, #4]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013ee:	fa0c f505 	lsl.w	r5, ip, r5
  if (sConfig->Rank < 7)
 80013f2:	2906      	cmp	r1, #6
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013f4:	ea24 0505 	bic.w	r5, r4, r5
 80013f8:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013fa:	691d      	ldr	r5, [r3, #16]
 80013fc:	ea45 0502 	orr.w	r5, r5, r2
 8001400:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001404:	611d      	str	r5, [r3, #16]
  if (sConfig->Rank < 7)
 8001406:	d9d8      	bls.n	80013ba <HAL_ADC_ConfigChannel+0x5e>
  else if (sConfig->Rank < 13)
 8001408:	290c      	cmp	r1, #12
 800140a:	d838      	bhi.n	800147e <HAL_ADC_ConfigChannel+0x122>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800140c:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 8001410:	251f      	movs	r5, #31
 8001412:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001414:	40a5      	lsls	r5, r4
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001416:	fa07 f204 	lsl.w	r2, r7, r4
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800141a:	ea21 0105 	bic.w	r1, r1, r5
 800141e:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001420:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001422:	4314      	orrs	r4, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001424:	4a29      	ldr	r2, [pc, #164]	; (80014cc <HAL_ADC_ConfigChannel+0x170>)
 8001426:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001428:	631c      	str	r4, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800142a:	d1d5      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x7c>
 800142c:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8001430:	d033      	beq.n	800149a <HAL_ADC_ConfigChannel+0x13e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001432:	2e12      	cmp	r6, #18
 8001434:	d040      	beq.n	80014b8 <HAL_ADC_ConfigChannel+0x15c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001436:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <HAL_ADC_ConfigChannel+0x174>)
 8001438:	429e      	cmp	r6, r3
 800143a:	d143      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x168>
    ADC->CCR |= ADC_CCR_TSVREFE;
 800143c:	4a25      	ldr	r2, [pc, #148]	; (80014d4 <HAL_ADC_ConfigChannel+0x178>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800143e:	4924      	ldr	r1, [pc, #144]	; (80014d0 <HAL_ADC_ConfigChannel+0x174>)
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001440:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001442:	428e      	cmp	r6, r1
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001444:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001448:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800144a:	d1c5      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x7c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800144c:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8001450:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <HAL_ADC_ConfigChannel+0x17c>)
 8001452:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f202 3283 	addw	r2, r2, #899	; 0x383
 800145c:	fba2 2303 	umull	r2, r3, r2, r3
 8001460:	0c9b      	lsrs	r3, r3, #18
 8001462:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 800146a:	9b01      	ldr	r3, [sp, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0b3      	beq.n	80013d8 <HAL_ADC_ConfigChannel+0x7c>
        counter--;
 8001470:	9b01      	ldr	r3, [sp, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001476:	9b01      	ldr	r3, [sp, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f9      	bne.n	8001470 <HAL_ADC_ConfigChannel+0x114>
 800147c:	e7ac      	b.n	80013d8 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800147e:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8001482:	251f      	movs	r5, #31
 8001484:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001486:	408d      	lsls	r5, r1
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001488:	fa07 f201 	lsl.w	r2, r7, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800148c:	ea24 0405 	bic.w	r4, r4, r5
 8001490:	62dc      	str	r4, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001492:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001494:	430a      	orrs	r2, r1
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c
 8001498:	e79b      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x76>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800149a:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800149e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80014a2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 80014a6:	e797      	b.n	80013d8 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 80014a8:	2002      	movs	r0, #2
}
 80014aa:	b003      	add	sp, #12
 80014ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80014ae:	68dd      	ldr	r5, [r3, #12]
 80014b0:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 80014b4:	60dd      	str	r5, [r3, #12]
 80014b6:	e77b      	b.n	80013b0 <HAL_ADC_ConfigChannel+0x54>
    ADC->CCR |= ADC_CCR_VBATE;
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <HAL_ADC_ConfigChannel+0x178>)
 80014ba:	6853      	ldr	r3, [r2, #4]
 80014bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014c0:	6053      	str	r3, [r2, #4]
 80014c2:	e789      	b.n	80013d8 <HAL_ADC_ConfigChannel+0x7c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014c4:	2e11      	cmp	r6, #17
 80014c6:	d0b9      	beq.n	800143c <HAL_ADC_ConfigChannel+0xe0>
 80014c8:	e786      	b.n	80013d8 <HAL_ADC_ConfigChannel+0x7c>
 80014ca:	bf00      	nop
 80014cc:	40012000 	.word	0x40012000
 80014d0:	10000012 	.word	0x10000012
 80014d4:	40012300 	.word	0x40012300
 80014d8:	20000008 	.word	0x20000008

080014dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014dc:	4907      	ldr	r1, [pc, #28]	; (80014fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014de:	0200      	lsls	r0, r0, #8
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e2:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ea:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80014ee:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80014f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014f4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f6:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 80014f8:	60c8      	str	r0, [r1, #12]
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00
 8001500:	05fa0000 	.word	0x05fa0000

08001504 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <HAL_NVIC_SetPriority+0x60>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150e:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001512:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	2d04      	cmp	r5, #4
 8001516:	bf28      	it	cs
 8001518:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	2c06      	cmp	r4, #6
 800151c:	d918      	bls.n	8001550 <HAL_NVIC_SetPriority+0x4c>
 800151e:	3b03      	subs	r3, #3
 8001520:	f04f 34ff 	mov.w	r4, #4294967295
 8001524:	409c      	lsls	r4, r3
 8001526:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152a:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800152e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	fa02 f205 	lsl.w	r2, r2, r5
 8001534:	ea21 0102 	bic.w	r1, r1, r2
 8001538:	fa01 f203 	lsl.w	r2, r1, r3
 800153c:	ea42 0204 	orr.w	r2, r2, r4
 8001540:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8001544:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 8001546:	db06      	blt.n	8001556 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <HAL_NVIC_SetPriority+0x64>)
 800154a:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800154c:	bc30      	pop	{r4, r5}
 800154e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001550:	2400      	movs	r4, #0
 8001552:	4623      	mov	r3, r4
 8001554:	e7e9      	b.n	800152a <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001556:	f000 000f 	and.w	r0, r0, #15
 800155a:	4b04      	ldr	r3, [pc, #16]	; (800156c <HAL_NVIC_SetPriority+0x68>)
 800155c:	541a      	strb	r2, [r3, r0]
 800155e:	bc30      	pop	{r4, r5}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00
 8001568:	e000e400 	.word	0xe000e400
 800156c:	e000ed14 	.word	0xe000ed14

08001570 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001570:	2800      	cmp	r0, #0
 8001572:	db07      	blt.n	8001584 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001574:	f000 011f 	and.w	r1, r0, #31
 8001578:	2301      	movs	r3, #1
 800157a:	0940      	lsrs	r0, r0, #5
 800157c:	4a02      	ldr	r2, [pc, #8]	; (8001588 <HAL_NVIC_EnableIRQ+0x18>)
 800157e:	408b      	lsls	r3, r1
 8001580:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000e100 	.word	0xe000e100

0800158c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800158c:	3801      	subs	r0, #1
 800158e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001592:	d20d      	bcs.n	80015b0 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001596:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001598:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159a:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	25f0      	movs	r5, #240	; 0xf0
 800159e:	4c06      	ldr	r4, [pc, #24]	; (80015b8 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a0:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a2:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015aa:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80015ac:	bc30      	pop	{r4, r5}
 80015ae:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015b0:	2001      	movs	r0, #1
 80015b2:	4770      	bx	lr
 80015b4:	e000e010 	.word	0xe000e010
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80015bc:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80015be:	f002 fabf 	bl	8003b40 <HAL_SYSTICK_Callback>
}
 80015c2:	bd08      	pop	{r3, pc}

080015c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015c6:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80015c8:	f7ff fcfc 	bl	8000fc4 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015cc:	2c00      	cmp	r4, #0
 80015ce:	d053      	beq.n	8001678 <HAL_DMA_Init+0xb4>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015d0:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015d2:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80015d4:	2100      	movs	r1, #0
 80015d6:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80015d8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80015dc:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 80015de:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80015e2:	f022 0201 	bic.w	r2, r2, #1
 80015e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015e8:	e005      	b.n	80015f6 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ea:	f7ff fceb 	bl	8000fc4 <HAL_GetTick>
 80015ee:	1b40      	subs	r0, r0, r5
 80015f0:	2805      	cmp	r0, #5
 80015f2:	d83a      	bhi.n	800166a <HAL_DMA_Init+0xa6>
 80015f4:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	07d1      	lsls	r1, r2, #31
 80015fa:	d4f6      	bmi.n	80015ea <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015fc:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8001600:	68e1      	ldr	r1, [r4, #12]
 8001602:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 8001604:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001606:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800160a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800160c:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 800160e:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001610:	e9d4 6106 	ldrd	r6, r1, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001614:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001616:	4d35      	ldr	r5, [pc, #212]	; (80016ec <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001618:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800161a:	403d      	ands	r5, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800161c:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800161e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 8001620:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001622:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001624:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001628:	d028      	beq.n	800167c <HAL_DMA_Init+0xb8>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800162a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800162c:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800162e:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001632:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4d2e      	ldr	r5, [pc, #184]	; (80016f0 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 8001638:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800163a:	3a10      	subs	r2, #16
 800163c:	492d      	ldr	r1, [pc, #180]	; (80016f4 <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800163e:	482e      	ldr	r0, [pc, #184]	; (80016f8 <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001640:	fba5 5202 	umull	r5, r2, r5, r2
 8001644:	4019      	ands	r1, r3
  hdma->State = HAL_DMA_STATE_READY;
 8001646:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001648:	0913      	lsrs	r3, r2, #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800164a:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800164c:	5cc0      	ldrb	r0, [r0, r3]
  
  if (stream_number > 3U)
 800164e:	2b03      	cmp	r3, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001650:	f04f 033f 	mov.w	r3, #63	; 0x3f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001654:	bf88      	it	hi
 8001656:	3104      	addhi	r1, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001658:	65e0      	str	r0, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800165a:	4083      	lsls	r3, r0
  return HAL_OK;
 800165c:	4610      	mov	r0, r2
 800165e:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001660:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001662:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001664:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8001668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800166a:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800166c:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800166e:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001670:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001672:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001678:	2001      	movs	r0, #1
}
 800167a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800167c:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001680:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001682:	ea45 0001 	orr.w	r0, r5, r1
    tmp |= hdma->Init.FIFOThreshold;
 8001686:	f047 0104 	orr.w	r1, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800168a:	4302      	orrs	r2, r0
  hdma->Instance->CR = tmp;  
 800168c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800168e:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001690:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8001694:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001696:	2d00      	cmp	r5, #0
 8001698:	d0cc      	beq.n	8001634 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800169a:	b17e      	cbz	r6, 80016bc <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800169c:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80016a0:	d016      	beq.n	80016d0 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016a2:	2f02      	cmp	r7, #2
 80016a4:	d903      	bls.n	80016ae <HAL_DMA_Init+0xea>
 80016a6:	2f03      	cmp	r7, #3
 80016a8:	d1c4      	bne.n	8001634 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016aa:	01ea      	lsls	r2, r5, #7
 80016ac:	d5c2      	bpl.n	8001634 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 80016ae:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016b0:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 80016b2:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016b4:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80016b6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80016ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 80016bc:	2f01      	cmp	r7, #1
 80016be:	d003      	beq.n	80016c8 <HAL_DMA_Init+0x104>
 80016c0:	d3f3      	bcc.n	80016aa <HAL_DMA_Init+0xe6>
 80016c2:	2f02      	cmp	r7, #2
 80016c4:	d1b6      	bne.n	8001634 <HAL_DMA_Init+0x70>
 80016c6:	e7f0      	b.n	80016aa <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016c8:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80016cc:	d1b2      	bne.n	8001634 <HAL_DMA_Init+0x70>
 80016ce:	e7ee      	b.n	80016ae <HAL_DMA_Init+0xea>
    switch (tmp)
 80016d0:	2f03      	cmp	r7, #3
 80016d2:	d8af      	bhi.n	8001634 <HAL_DMA_Init+0x70>
 80016d4:	a201      	add	r2, pc, #4	; (adr r2, 80016dc <HAL_DMA_Init+0x118>)
 80016d6:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 80016da:	bf00      	nop
 80016dc:	080016af 	.word	0x080016af
 80016e0:	080016ab 	.word	0x080016ab
 80016e4:	080016af 	.word	0x080016af
 80016e8:	080016c9 	.word	0x080016c9
 80016ec:	f010803f 	.word	0xf010803f
 80016f0:	aaaaaaab 	.word	0xaaaaaaab
 80016f4:	fffffc00 	.word	0xfffffc00
 80016f8:	0800f550 	.word	0x0800f550

080016fc <HAL_DMA_Start_IT>:
{
 80016fc:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 80016fe:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001702:	2c01      	cmp	r4, #1
 8001704:	d038      	beq.n	8001778 <HAL_DMA_Start_IT+0x7c>
 8001706:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001708:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800170c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800170e:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8001710:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001714:	d129      	bne.n	800176a <HAL_DMA_Start_IT+0x6e>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001716:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8001718:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800171a:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800171c:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001720:	6545      	str	r5, [r0, #84]	; 0x54
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001722:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001724:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001726:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001728:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800172c:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800172e:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001730:	d026      	beq.n	8001780 <HAL_DMA_Start_IT+0x84>
    hdma->Instance->PAR = SrcAddress;
 8001732:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001734:	60e2      	str	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001736:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8001738:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 800173a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800173c:	408b      	lsls	r3, r1
 800173e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	f043 0316 	orr.w	r3, r3, #22
 8001746:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001748:	6963      	ldr	r3, [r4, #20]
 800174a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800174e:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001750:	b11a      	cbz	r2, 800175a <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800175a:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800175c:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 800175e:	f042 0201 	orr.w	r2, r2, #1
}
 8001762:	4618      	mov	r0, r3
    __HAL_DMA_ENABLE(hdma);
 8001764:	6022      	str	r2, [r4, #0]
}
 8001766:	bcf0      	pop	{r4, r5, r6, r7}
 8001768:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 800176a:	2200      	movs	r2, #0
    status = HAL_BUSY;
 800176c:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);	  
 800176e:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 8001772:	4618      	mov	r0, r3
 8001774:	bcf0      	pop	{r4, r5, r6, r7}
 8001776:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8001778:	2302      	movs	r3, #2
}
 800177a:	bcf0      	pop	{r4, r5, r6, r7}
 800177c:	4618      	mov	r0, r3
 800177e:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8001780:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001782:	60e1      	str	r1, [r4, #12]
 8001784:	e7d7      	b.n	8001736 <HAL_DMA_Start_IT+0x3a>
 8001786:	bf00      	nop

08001788 <HAL_DMA_IRQHandler>:
{
 8001788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178a:	4604      	mov	r4, r0
 800178c:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 800178e:	2000      	movs	r0, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001790:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8001792:	4966      	ldr	r1, [pc, #408]	; (800192c <HAL_DMA_IRQHandler+0x1a4>)
  __IO uint32_t count = 0;
 8001794:	9001      	str	r0, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8001796:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001798:	e9d4 7316 	ldrd	r7, r3, [r4, #88]	; 0x58
 800179c:	409a      	lsls	r2, r3
  tmpisr = regs->ISR;
 800179e:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017a0:	422a      	tst	r2, r5
 80017a2:	d003      	beq.n	80017ac <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017a4:	6821      	ldr	r1, [r4, #0]
 80017a6:	6808      	ldr	r0, [r1, #0]
 80017a8:	0740      	lsls	r0, r0, #29
 80017aa:	d459      	bmi.n	8001860 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ac:	2201      	movs	r2, #1
 80017ae:	409a      	lsls	r2, r3
 80017b0:	422a      	tst	r2, r5
 80017b2:	d003      	beq.n	80017bc <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017b4:	6821      	ldr	r1, [r4, #0]
 80017b6:	6949      	ldr	r1, [r1, #20]
 80017b8:	0608      	lsls	r0, r1, #24
 80017ba:	d474      	bmi.n	80018a6 <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017bc:	2204      	movs	r2, #4
 80017be:	409a      	lsls	r2, r3
 80017c0:	422a      	tst	r2, r5
 80017c2:	d003      	beq.n	80017cc <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017c4:	6821      	ldr	r1, [r4, #0]
 80017c6:	6809      	ldr	r1, [r1, #0]
 80017c8:	0789      	lsls	r1, r1, #30
 80017ca:	d466      	bmi.n	800189a <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017cc:	2210      	movs	r2, #16
 80017ce:	409a      	lsls	r2, r3
 80017d0:	422a      	tst	r2, r5
 80017d2:	d003      	beq.n	80017dc <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017d4:	6821      	ldr	r1, [r4, #0]
 80017d6:	6808      	ldr	r0, [r1, #0]
 80017d8:	0700      	lsls	r0, r0, #28
 80017da:	d44b      	bmi.n	8001874 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017dc:	2220      	movs	r2, #32
 80017de:	409a      	lsls	r2, r3
 80017e0:	422a      	tst	r2, r5
 80017e2:	d014      	beq.n	800180e <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017e4:	6821      	ldr	r1, [r4, #0]
 80017e6:	6808      	ldr	r0, [r1, #0]
 80017e8:	06c0      	lsls	r0, r0, #27
 80017ea:	d510      	bpl.n	800180e <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017ec:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017ee:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80017f2:	2a05      	cmp	r2, #5
 80017f4:	d063      	beq.n	80018be <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017f6:	680b      	ldr	r3, [r1, #0]
 80017f8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017fc:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017fe:	d07e      	beq.n	80018fe <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001800:	0319      	lsls	r1, r3, #12
 8001802:	f140 8089 	bpl.w	8001918 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8001806:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001808:	b10b      	cbz	r3, 800180e <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 800180a:	4620      	mov	r0, r4
 800180c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800180e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001810:	b323      	cbz	r3, 800185c <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001812:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001814:	07da      	lsls	r2, r3, #31
 8001816:	d51a      	bpl.n	800184e <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 8001818:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800181a:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 800181c:	4b44      	ldr	r3, [pc, #272]	; (8001930 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 800181e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8001822:	fba3 3606 	umull	r3, r6, r3, r6
      __HAL_DMA_DISABLE(hdma);
 8001826:	6813      	ldr	r3, [r2, #0]
 8001828:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 800182c:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	e002      	b.n	8001838 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001832:	6813      	ldr	r3, [r2, #0]
 8001834:	07db      	lsls	r3, r3, #31
 8001836:	d504      	bpl.n	8001842 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8001838:	9b01      	ldr	r3, [sp, #4]
 800183a:	3301      	adds	r3, #1
 800183c:	42b3      	cmp	r3, r6
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	d9f7      	bls.n	8001832 <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 8001842:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001844:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8001846:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800184a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800184e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001850:	b123      	cbz	r3, 800185c <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8001852:	4620      	mov	r0, r4
}
 8001854:	b003      	add	sp, #12
 8001856:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800185a:	4718      	bx	r3
}
 800185c:	b003      	add	sp, #12
 800185e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001860:	6808      	ldr	r0, [r1, #0]
 8001862:	f020 0004 	bic.w	r0, r0, #4
 8001866:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001868:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800186a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800186c:	f042 0201 	orr.w	r2, r2, #1
 8001870:	6562      	str	r2, [r4, #84]	; 0x54
 8001872:	e79b      	b.n	80017ac <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001874:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001876:	680a      	ldr	r2, [r1, #0]
 8001878:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800187c:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800187e:	d118      	bne.n	80018b2 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001880:	05d2      	lsls	r2, r2, #23
 8001882:	d403      	bmi.n	800188c <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001884:	680a      	ldr	r2, [r1, #0]
 8001886:	f022 0208 	bic.w	r2, r2, #8
 800188a:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800188c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800188e:	2a00      	cmp	r2, #0
 8001890:	d0a4      	beq.n	80017dc <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8001892:	4620      	mov	r0, r4
 8001894:	4790      	blx	r2
 8001896:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001898:	e7a0      	b.n	80017dc <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800189a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800189c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800189e:	f042 0204 	orr.w	r2, r2, #4
 80018a2:	6562      	str	r2, [r4, #84]	; 0x54
 80018a4:	e792      	b.n	80017cc <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018a6:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018a8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80018aa:	f042 0202 	orr.w	r2, r2, #2
 80018ae:	6562      	str	r2, [r4, #84]	; 0x54
 80018b0:	e784      	b.n	80017bc <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018b2:	0311      	lsls	r1, r2, #12
 80018b4:	d5ea      	bpl.n	800188c <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018b6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80018b8:	2a00      	cmp	r2, #0
 80018ba:	d1ea      	bne.n	8001892 <HAL_DMA_IRQHandler+0x10a>
 80018bc:	e78e      	b.n	80017dc <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018be:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018c0:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018c2:	f022 0216 	bic.w	r2, r2, #22
 80018c6:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018c8:	694a      	ldr	r2, [r1, #20]
 80018ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018ce:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018d0:	b338      	cbz	r0, 8001922 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018d2:	680a      	ldr	r2, [r1, #0]
 80018d4:	f022 0208 	bic.w	r2, r2, #8
 80018d8:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018da:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 80018dc:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 80018de:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 80018e4:	6d22      	ldr	r2, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e6:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80018e8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80018ec:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80018f0:	2a00      	cmp	r2, #0
 80018f2:	d0b3      	beq.n	800185c <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 80018f4:	4620      	mov	r0, r4
}
 80018f6:	b003      	add	sp, #12
 80018f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 80018fc:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018fe:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001902:	d180      	bne.n	8001806 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001904:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001906:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001908:	f022 0210 	bic.w	r2, r2, #16
 800190c:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 800190e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001912:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8001916:	e776      	b.n	8001806 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8001918:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800191a:	2b00      	cmp	r3, #0
 800191c:	f47f af75 	bne.w	800180a <HAL_DMA_IRQHandler+0x82>
 8001920:	e775      	b.n	800180e <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001922:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001924:	2a00      	cmp	r2, #0
 8001926:	d1d4      	bne.n	80018d2 <HAL_DMA_IRQHandler+0x14a>
 8001928:	e7d7      	b.n	80018da <HAL_DMA_IRQHandler+0x152>
 800192a:	bf00      	nop
 800192c:	20000008 	.word	0x20000008
 8001930:	1b4e81b5 	.word	0x1b4e81b5

08001934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001938:	4688      	mov	r8, r1
 800193a:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800193c:	2400      	movs	r4, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193e:	f8d1 9000 	ldr.w	r9, [r1]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001942:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8001b3c <HAL_GPIO_Init+0x208>
 8001946:	e003      	b.n	8001950 <HAL_GPIO_Init+0x1c>
  for(position = 0; position < GPIO_NUMBER; position++)
 8001948:	3401      	adds	r4, #1
 800194a:	2c10      	cmp	r4, #16
 800194c:	f000 80b6 	beq.w	8001abc <HAL_GPIO_Init+0x188>
    ioposition = ((uint32_t)0x01) << position;
 8001950:	2301      	movs	r3, #1
 8001952:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001954:	ea09 0203 	and.w	r2, r9, r3
    if(iocurrent == ioposition)
 8001958:	4293      	cmp	r3, r2
 800195a:	d1f5      	bne.n	8001948 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800195c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8001960:	0067      	lsls	r7, r4, #1
 8001962:	2103      	movs	r1, #3
 8001964:	f025 0c10 	bic.w	ip, r5, #16
 8001968:	40b9      	lsls	r1, r7
 800196a:	f10c 33ff 	add.w	r3, ip, #4294967295
 800196e:	43c9      	mvns	r1, r1
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001970:	2b01      	cmp	r3, #1
 8001972:	d810      	bhi.n	8001996 <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR; 
 8001974:	6886      	ldr	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001976:	f3c5 1300 	ubfx	r3, r5, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800197a:	ea06 0a01 	and.w	sl, r6, r1
        temp |= (GPIO_Init->Speed << (position * 2));
 800197e:	f8d8 600c 	ldr.w	r6, [r8, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001982:	40a3      	lsls	r3, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001984:	40be      	lsls	r6, r7
 8001986:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 800198a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800198c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800198e:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001992:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8001994:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8001996:	68c3      	ldr	r3, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001998:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800199c:	f8d8 6008 	ldr.w	r6, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019a0:	ea03 0301 	and.w	r3, r3, r1
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80019a4:	fa06 f607 	lsl.w	r6, r6, r7
 80019a8:	ea46 0603 	orr.w	r6, r6, r3
      GPIOx->PUPDR = temp;
 80019ac:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ae:	d115      	bne.n	80019dc <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3];
 80019b0:	08e3      	lsrs	r3, r4, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019b2:	f004 0c07 	and.w	ip, r4, #7
 80019b6:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019ba:	f8d8 6010 	ldr.w	r6, [r8, #16]
 80019be:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019c2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80019c6:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019ca:	fa0b fb0c 	lsl.w	fp, fp, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019ce:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019d2:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019d6:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3] = temp;
 80019da:	621e      	str	r6, [r3, #32]
      temp = GPIOx->MODER;
 80019dc:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019de:	f005 0303 	and.w	r3, r5, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019e2:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019e4:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019e6:	00ef      	lsls	r7, r5, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019e8:	ea43 0301 	orr.w	r3, r3, r1
      GPIOx->MODER = temp;
 80019ec:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ee:	d5ab      	bpl.n	8001948 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f0:	4b48      	ldr	r3, [pc, #288]	; (8001b14 <HAL_GPIO_Init+0x1e0>)
 80019f2:	f024 0603 	bic.w	r6, r4, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019f6:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80019fc:	4619      	mov	r1, r3
 80019fe:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a02:	f004 0303 	and.w	r3, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001a0a:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a0e:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a10:	644f      	str	r7, [r1, #68]	; 0x44
 8001a12:	6c4f      	ldr	r7, [r1, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a14:	fa0c f103 	lsl.w	r1, ip, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a18:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001a1c:	9701      	str	r7, [sp, #4]
 8001a1e:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001a20:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a22:	ea27 0101 	bic.w	r1, r7, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a26:	4f3c      	ldr	r7, [pc, #240]	; (8001b18 <HAL_GPIO_Init+0x1e4>)
 8001a28:	42b8      	cmp	r0, r7
 8001a2a:	d020      	beq.n	8001a6e <HAL_GPIO_Init+0x13a>
 8001a2c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001a30:	42b8      	cmp	r0, r7
 8001a32:	d046      	beq.n	8001ac2 <HAL_GPIO_Init+0x18e>
 8001a34:	4f39      	ldr	r7, [pc, #228]	; (8001b1c <HAL_GPIO_Init+0x1e8>)
 8001a36:	42b8      	cmp	r0, r7
 8001a38:	d048      	beq.n	8001acc <HAL_GPIO_Init+0x198>
 8001a3a:	4f39      	ldr	r7, [pc, #228]	; (8001b20 <HAL_GPIO_Init+0x1ec>)
 8001a3c:	42b8      	cmp	r0, r7
 8001a3e:	d04a      	beq.n	8001ad6 <HAL_GPIO_Init+0x1a2>
 8001a40:	4f38      	ldr	r7, [pc, #224]	; (8001b24 <HAL_GPIO_Init+0x1f0>)
 8001a42:	42b8      	cmp	r0, r7
 8001a44:	d04c      	beq.n	8001ae0 <HAL_GPIO_Init+0x1ac>
 8001a46:	4f38      	ldr	r7, [pc, #224]	; (8001b28 <HAL_GPIO_Init+0x1f4>)
 8001a48:	42b8      	cmp	r0, r7
 8001a4a:	d053      	beq.n	8001af4 <HAL_GPIO_Init+0x1c0>
 8001a4c:	4f37      	ldr	r7, [pc, #220]	; (8001b2c <HAL_GPIO_Init+0x1f8>)
 8001a4e:	42b8      	cmp	r0, r7
 8001a50:	d055      	beq.n	8001afe <HAL_GPIO_Init+0x1ca>
 8001a52:	4f37      	ldr	r7, [pc, #220]	; (8001b30 <HAL_GPIO_Init+0x1fc>)
 8001a54:	42b8      	cmp	r0, r7
 8001a56:	d048      	beq.n	8001aea <HAL_GPIO_Init+0x1b6>
 8001a58:	4f36      	ldr	r7, [pc, #216]	; (8001b34 <HAL_GPIO_Init+0x200>)
 8001a5a:	42b8      	cmp	r0, r7
 8001a5c:	d054      	beq.n	8001b08 <HAL_GPIO_Init+0x1d4>
 8001a5e:	4f36      	ldr	r7, [pc, #216]	; (8001b38 <HAL_GPIO_Init+0x204>)
 8001a60:	42b8      	cmp	r0, r7
 8001a62:	bf0c      	ite	eq
 8001a64:	2709      	moveq	r7, #9
 8001a66:	270a      	movne	r7, #10
 8001a68:	fa07 f303 	lsl.w	r3, r7, r3
 8001a6c:	4319      	orrs	r1, r3
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a6e:	60b1      	str	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001a70:	43d1      	mvns	r1, r2
        temp = EXTI->IMR;
 8001a72:	f8de 3000 	ldr.w	r3, [lr]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a76:	03ee      	lsls	r6, r5, #15
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a78:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 8001a7c:	bf54      	ite	pl
 8001a7e:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001a80:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a82:	03af      	lsls	r7, r5, #14
        EXTI->IMR = temp;
 8001a84:	f8ce 3000 	str.w	r3, [lr]
        temp = EXTI->EMR;
 8001a88:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 8001a8c:	bf54      	ite	pl
 8001a8e:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001a90:	4313      	orrmi	r3, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a92:	02ee      	lsls	r6, r5, #11
        EXTI->EMR = temp;
 8001a94:	f8ce 3004 	str.w	r3, [lr, #4]
        temp = EXTI->RTSR;
 8001a98:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 8001a9c:	bf54      	ite	pl
 8001a9e:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001aa0:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aa2:	02ad      	lsls	r5, r5, #10
        EXTI->RTSR = temp;
 8001aa4:	f8ce 3008 	str.w	r3, [lr, #8]
        temp = EXTI->FTSR;
 8001aa8:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	bf54      	ite	pl
 8001aae:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001ab0:	4313      	orrmi	r3, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ab2:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 8001ab4:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ab8:	f47f af4a 	bne.w	8001950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001abc:	b003      	add	sp, #12
 8001abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ac2:	2701      	movs	r7, #1
 8001ac4:	fa07 f303 	lsl.w	r3, r7, r3
 8001ac8:	4319      	orrs	r1, r3
 8001aca:	e7d0      	b.n	8001a6e <HAL_GPIO_Init+0x13a>
 8001acc:	2702      	movs	r7, #2
 8001ace:	fa07 f303 	lsl.w	r3, r7, r3
 8001ad2:	4319      	orrs	r1, r3
 8001ad4:	e7cb      	b.n	8001a6e <HAL_GPIO_Init+0x13a>
 8001ad6:	2703      	movs	r7, #3
 8001ad8:	fa07 f303 	lsl.w	r3, r7, r3
 8001adc:	4319      	orrs	r1, r3
 8001ade:	e7c6      	b.n	8001a6e <HAL_GPIO_Init+0x13a>
 8001ae0:	2704      	movs	r7, #4
 8001ae2:	fa07 f303 	lsl.w	r3, r7, r3
 8001ae6:	4319      	orrs	r1, r3
 8001ae8:	e7c1      	b.n	8001a6e <HAL_GPIO_Init+0x13a>
 8001aea:	2707      	movs	r7, #7
 8001aec:	fa07 f303 	lsl.w	r3, r7, r3
 8001af0:	4319      	orrs	r1, r3
 8001af2:	e7bc      	b.n	8001a6e <HAL_GPIO_Init+0x13a>
 8001af4:	2705      	movs	r7, #5
 8001af6:	fa07 f303 	lsl.w	r3, r7, r3
 8001afa:	4319      	orrs	r1, r3
 8001afc:	e7b7      	b.n	8001a6e <HAL_GPIO_Init+0x13a>
 8001afe:	2706      	movs	r7, #6
 8001b00:	fa07 f303 	lsl.w	r3, r7, r3
 8001b04:	4319      	orrs	r1, r3
 8001b06:	e7b2      	b.n	8001a6e <HAL_GPIO_Init+0x13a>
 8001b08:	2708      	movs	r7, #8
 8001b0a:	fa07 f303 	lsl.w	r3, r7, r3
 8001b0e:	4319      	orrs	r1, r3
 8001b10:	e7ad      	b.n	8001a6e <HAL_GPIO_Init+0x13a>
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	40020800 	.word	0x40020800
 8001b20:	40020c00 	.word	0x40020c00
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40021400 	.word	0x40021400
 8001b2c:	40021800 	.word	0x40021800
 8001b30:	40021c00 	.word	0x40021c00
 8001b34:	40022000 	.word	0x40022000
 8001b38:	40022400 	.word	0x40022400
 8001b3c:	40013c00 	.word	0x40013c00

08001b40 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b40:	b902      	cbnz	r2, 8001b44 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b42:	0409      	lsls	r1, r1, #16
 8001b44:	6181      	str	r1, [r0, #24]
  }
}
 8001b46:	4770      	bx	lr

08001b48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b48:	b570      	push	{r4, r5, r6, lr}
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	460d      	mov	r5, r1
 8001b4e:	4616      	mov	r6, r2
 8001b50:	1c6a      	adds	r2, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	d12c      	bne.n	8001bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 8001b56:	699a      	ldr	r2, [r3, #24]
 8001b58:	0790      	lsls	r0, r2, #30
 8001b5a:	d427      	bmi.n	8001bac <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	06d1      	lsls	r1, r2, #27
 8001b60:	d5f9      	bpl.n	8001b56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b62:	699a      	ldr	r2, [r3, #24]
 8001b64:	0691      	lsls	r1, r2, #26
 8001b66:	d5fc      	bpl.n	8001b62 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b68:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b6a:	2110      	movs	r1, #16
 8001b6c:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b6e:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b70:	699a      	ldr	r2, [r3, #24]
 8001b72:	0790      	lsls	r0, r2, #30
 8001b74:	d501      	bpl.n	8001b7a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 8001b76:	2200      	movs	r2, #0
 8001b78:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b7a:	699a      	ldr	r2, [r3, #24]
 8001b7c:	07d1      	lsls	r1, r2, #31
 8001b7e:	d403      	bmi.n	8001b88 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b80:	699a      	ldr	r2, [r3, #24]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b88:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b8a:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8001b8c:	4e1b      	ldr	r6, [pc, #108]	; (8001bfc <I2C_WaitOnTXISFlagUntilTimeout+0xb4>)
    hi2c->State = HAL_I2C_STATE_READY;
 8001b8e:	2520      	movs	r5, #32
      return HAL_ERROR;
 8001b90:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8001b92:	4032      	ands	r2, r6
 8001b94:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b96:	6c63      	ldr	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b98:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b9c:	f043 0304 	orr.w	r3, r3, #4
 8001ba0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ba2:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba6:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8001baa:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001bac:	2000      	movs	r0, #0
}
 8001bae:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bb0:	699a      	ldr	r2, [r3, #24]
 8001bb2:	0792      	lsls	r2, r2, #30
 8001bb4:	d4fa      	bmi.n	8001bac <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bb6:	699a      	ldr	r2, [r3, #24]
 8001bb8:	06d0      	lsls	r0, r2, #27
 8001bba:	d41b      	bmi.n	8001bf4 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bbc:	f7ff fa02 	bl	8000fc4 <HAL_GetTick>
 8001bc0:	1b80      	subs	r0, r0, r6
 8001bc2:	42a8      	cmp	r0, r5
 8001bc4:	d801      	bhi.n	8001bca <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8001bc6:	2d00      	cmp	r5, #0
 8001bc8:	d1c2      	bne.n	8001b50 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bca:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bcc:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bce:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8001bd0:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bd2:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8001bd4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bd8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bda:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bde:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8001be2:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001be4:	f7ff f9ee 	bl	8000fc4 <HAL_GetTick>
 8001be8:	1b80      	subs	r0, r0, r6
 8001bea:	4285      	cmp	r5, r0
 8001bec:	d3ed      	bcc.n	8001bca <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8001bee:	2d00      	cmp	r5, #0
 8001bf0:	d0eb      	beq.n	8001bca <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8001bf2:	6823      	ldr	r3, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bf4:	699a      	ldr	r2, [r3, #24]
 8001bf6:	0692      	lsls	r2, r2, #26
 8001bf8:	d5f4      	bpl.n	8001be4 <I2C_WaitOnTXISFlagUntilTimeout+0x9c>
 8001bfa:	e7b5      	b.n	8001b68 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 8001bfc:	fe00e800 	.word	0xfe00e800

08001c00 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001c00:	b570      	push	{r4, r5, r6, lr}
 8001c02:	4604      	mov	r4, r0
 8001c04:	460d      	mov	r5, r1
 8001c06:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	699a      	ldr	r2, [r3, #24]
 8001c0c:	0692      	lsls	r2, r2, #26
 8001c0e:	d449      	bmi.n	8001ca4 <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	06d2      	lsls	r2, r2, #27
 8001c14:	d526      	bpl.n	8001c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
 8001c16:	1c68      	adds	r0, r5, #1
 8001c18:	d138      	bne.n	8001c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c1a:	699a      	ldr	r2, [r3, #24]
 8001c1c:	0691      	lsls	r1, r2, #26
 8001c1e:	d5fc      	bpl.n	8001c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c20:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c22:	2110      	movs	r1, #16
 8001c24:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c26:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c28:	699a      	ldr	r2, [r3, #24]
 8001c2a:	0790      	lsls	r0, r2, #30
 8001c2c:	d501      	bpl.n	8001c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 8001c2e:	2200      	movs	r2, #0
 8001c30:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c32:	699a      	ldr	r2, [r3, #24]
 8001c34:	07d1      	lsls	r1, r2, #31
 8001c36:	d403      	bmi.n	8001c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c38:	699a      	ldr	r2, [r3, #24]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8001c40:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c42:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8001c44:	4e18      	ldr	r6, [pc, #96]	; (8001ca8 <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
    hi2c->State = HAL_I2C_STATE_READY;
 8001c46:	2520      	movs	r5, #32
      return HAL_ERROR;
 8001c48:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8001c4a:	4032      	ands	r2, r6
 8001c4c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8001c50:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c5a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8001c62:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c64:	f7ff f9ae 	bl	8000fc4 <HAL_GetTick>
 8001c68:	1b80      	subs	r0, r0, r6
 8001c6a:	42a8      	cmp	r0, r5
 8001c6c:	d801      	bhi.n	8001c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 8001c6e:	2d00      	cmp	r5, #0
 8001c70:	d1ca      	bne.n	8001c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c72:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c74:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c76:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8001c78:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c7a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8001c7c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c80:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c82:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c86:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8001c8a:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c8c:	699a      	ldr	r2, [r3, #24]
 8001c8e:	0692      	lsls	r2, r2, #26
 8001c90:	d4c6      	bmi.n	8001c20 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c92:	f7ff f997 	bl	8000fc4 <HAL_GetTick>
 8001c96:	1b80      	subs	r0, r0, r6
 8001c98:	4285      	cmp	r5, r0
 8001c9a:	d3ea      	bcc.n	8001c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 8001c9c:	2d00      	cmp	r5, #0
 8001c9e:	d0e8      	beq.n	8001c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 8001ca0:	6823      	ldr	r3, [r4, #0]
 8001ca2:	e7b8      	b.n	8001c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8001ca4:	2000      	movs	r0, #0
}
 8001ca6:	bd70      	pop	{r4, r5, r6, pc}
 8001ca8:	fe00e800 	.word	0xfe00e800

08001cac <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001cac:	2800      	cmp	r0, #0
 8001cae:	d04d      	beq.n	8001d4c <HAL_I2C_Init+0xa0>
{
 8001cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cb2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d040      	beq.n	8001d42 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc0:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cc2:	68e5      	ldr	r5, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cc4:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ccc:	2d01      	cmp	r5, #1
  __HAL_I2C_DISABLE(hi2c);
 8001cce:	6818      	ldr	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cd0:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
 8001cd4:	68a2      	ldr	r2, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8001cd6:	f020 0001 	bic.w	r0, r0, #1
 8001cda:	6018      	str	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cdc:	6119      	str	r1, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cde:	6899      	ldr	r1, [r3, #8]
 8001ce0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8001ce4:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ce6:	d028      	beq.n	8001d3a <HAL_I2C_Init+0x8e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ce8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cec:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cee:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cf0:	d102      	bne.n	8001cf8 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001cf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cf6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cf8:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cfa:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cfc:	4814      	ldr	r0, [pc, #80]	; (8001d50 <HAL_I2C_Init+0xa4>)
  hi2c->State = HAL_I2C_STATE_READY;
 8001cfe:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d00:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d02:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d04:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d08:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d0a:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d0c:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d0e:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d10:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d14:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d16:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d1a:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d1c:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 8001d1e:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d20:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d22:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	f042 0201 	orr.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d2c:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d2e:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d32:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8001d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	e7da      	b.n	8001cf8 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8001d42:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001d46:	f002 fd21 	bl	800478c <HAL_I2C_MspInit>
 8001d4a:	e7b9      	b.n	8001cc0 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8001d4c:	2001      	movs	r0, #1
}
 8001d4e:	4770      	bx	lr
 8001d50:	02008000 	.word	0x02008000

08001d54 <HAL_I2C_Master_Transmit>:
{
 8001d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d58:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8001d5c:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d5e:	2c20      	cmp	r4, #32
 8001d60:	d16f      	bne.n	8001e42 <HAL_I2C_Master_Transmit+0xee>
    __HAL_LOCK(hi2c);
 8001d62:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8001d66:	2c01      	cmp	r4, #1
 8001d68:	d06b      	beq.n	8001e42 <HAL_I2C_Master_Transmit+0xee>
 8001d6a:	4698      	mov	r8, r3
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	4691      	mov	r9, r2
 8001d70:	460f      	mov	r7, r1
 8001d72:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8001d76:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8001d78:	f7ff f924 	bl	8000fc4 <HAL_GetTick>
 8001d7c:	4605      	mov	r5, r0
 8001d7e:	e004      	b.n	8001d8a <HAL_I2C_Master_Transmit+0x36>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d80:	f7ff f920 	bl	8000fc4 <HAL_GetTick>
 8001d84:	1b40      	subs	r0, r0, r5
 8001d86:	2819      	cmp	r0, #25
 8001d88:	d875      	bhi.n	8001e76 <HAL_I2C_Master_Transmit+0x122>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	6998      	ldr	r0, [r3, #24]
 8001d8e:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8001d92:	d1f5      	bne.n	8001d80 <HAL_I2C_Master_Transmit+0x2c>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d94:	2210      	movs	r2, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d96:	2121      	movs	r1, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8001d98:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8001d9c:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001da0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001da4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8001daa:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001db0:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001db2:	2aff      	cmp	r2, #255	; 0xff
 8001db4:	d848      	bhi.n	8001e48 <HAL_I2C_Master_Transmit+0xf4>
      hi2c->XferSize = hi2c->XferCount;
 8001db6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001db8:	4a48      	ldr	r2, [pc, #288]	; (8001edc <HAL_I2C_Master_Transmit+0x188>)
      hi2c->XferSize = hi2c->XferCount;
 8001dba:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
 8001dbc:	6858      	ldr	r0, [r3, #4]
 8001dbe:	433a      	orrs	r2, r7
 8001dc0:	f8df e124 	ldr.w	lr, [pc, #292]	; 8001ee8 <HAL_I2C_Master_Transmit+0x194>
 8001dc4:	fa5f fc81 	uxtb.w	ip, r1
      hi2c->XferSize = hi2c->XferCount;
 8001dc8:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8001dca:	ea00 010e 	and.w	r1, r0, lr
 8001dce:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8001eec <HAL_I2C_Master_Transmit+0x198>
 8001dda:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8001ef0 <HAL_I2C_Master_Transmit+0x19c>
 8001dde:	ea47 0808 	orr.w	r8, r7, r8
    while (hi2c->XferCount > 0U)
 8001de2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de4:	462a      	mov	r2, r5
 8001de6:	4631      	mov	r1, r6
 8001de8:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d062      	beq.n	8001eb6 <HAL_I2C_Master_Transmit+0x162>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001df0:	f7ff feaa 	bl	8001b48 <I2C_WaitOnTXISFlagUntilTimeout>
 8001df4:	2800      	cmp	r0, #0
 8001df6:	d15b      	bne.n	8001eb0 <HAL_I2C_Master_Transmit+0x15c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001df8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001dfa:	6821      	ldr	r1, [r4, #0]
 8001dfc:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 8001e00:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e02:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 8001e04:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001e06:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8001e08:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001e0a:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 8001e0c:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8001e0e:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8001e10:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001e12:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e14:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001e16:	b292      	uxth	r2, r2
 8001e18:	2a00      	cmp	r2, #0
 8001e1a:	d0e2      	beq.n	8001de2 <HAL_I2C_Master_Transmit+0x8e>
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1e0      	bne.n	8001de2 <HAL_I2C_Master_Transmit+0x8e>
 8001e20:	1c70      	adds	r0, r6, #1
 8001e22:	d11d      	bne.n	8001e60 <HAL_I2C_Master_Transmit+0x10c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e24:	698b      	ldr	r3, [r1, #24]
 8001e26:	061a      	lsls	r2, r3, #24
 8001e28:	d5fc      	bpl.n	8001e24 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e2c:	2bff      	cmp	r3, #255	; 0xff
 8001e2e:	d930      	bls.n	8001e92 <HAL_I2C_Master_Transmit+0x13e>
  MODIFY_REG(hi2c->Instance->CR2,
 8001e30:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e32:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 8001e34:	ea03 0309 	and.w	r3, r3, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e38:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8001e3a:	ea43 0308 	orr.w	r3, r3, r8
 8001e3e:	604b      	str	r3, [r1, #4]
 8001e40:	e7cf      	b.n	8001de2 <HAL_I2C_Master_Transmit+0x8e>
    return HAL_BUSY;
 8001e42:	2002      	movs	r0, #2
}
 8001e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  MODIFY_REG(hi2c->Instance->CR2,
 8001e48:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e4a:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 8001e4c:	f8df c098 	ldr.w	ip, [pc, #152]	; 8001ee8 <HAL_I2C_Master_Transmit+0x194>
 8001e50:	4923      	ldr	r1, [pc, #140]	; (8001ee0 <HAL_I2C_Master_Transmit+0x18c>)
 8001e52:	ea02 020c 	and.w	r2, r2, ip
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e56:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8001e58:	4339      	orrs	r1, r7
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	e7ba      	b.n	8001dd6 <HAL_I2C_Master_Transmit+0x82>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e60:	698b      	ldr	r3, [r1, #24]
 8001e62:	061b      	lsls	r3, r3, #24
 8001e64:	d4e1      	bmi.n	8001e2a <HAL_I2C_Master_Transmit+0xd6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e66:	f7ff f8ad 	bl	8000fc4 <HAL_GetTick>
 8001e6a:	1b40      	subs	r0, r0, r5
 8001e6c:	4286      	cmp	r6, r0
 8001e6e:	d302      	bcc.n	8001e76 <HAL_I2C_Master_Transmit+0x122>
 8001e70:	b10e      	cbz	r6, 8001e76 <HAL_I2C_Master_Transmit+0x122>
 8001e72:	6821      	ldr	r1, [r4, #0]
 8001e74:	e7d4      	b.n	8001e20 <HAL_I2C_Master_Transmit+0xcc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e76:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e78:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e7a:	2200      	movs	r2, #0
          return HAL_ERROR;
 8001e7c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e7e:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8001e80:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e84:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e86:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8001e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          hi2c->XferSize = hi2c->XferCount;
 8001e92:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8001e94:	f047 7300 	orr.w	r3, r7, #33554432	; 0x2000000
 8001e98:	6848      	ldr	r0, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 8001e9a:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2,
 8001e9c:	ea00 0009 	and.w	r0, r0, r9
 8001ea0:	fa5f fc82 	uxtb.w	ip, r2
          hi2c->XferSize = hi2c->XferCount;
 8001ea4:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8001ea6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8001eaa:	4303      	orrs	r3, r0
 8001eac:	604b      	str	r3, [r1, #4]
 8001eae:	e798      	b.n	8001de2 <HAL_I2C_Master_Transmit+0x8e>
        return HAL_ERROR;
 8001eb0:	2001      	movs	r0, #1
}
 8001eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eb6:	f7ff fea3 	bl	8001c00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001eba:	2800      	cmp	r0, #0
 8001ebc:	d1f8      	bne.n	8001eb0 <HAL_I2C_Master_Transmit+0x15c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ebe:	6823      	ldr	r3, [r4, #0]
 8001ec0:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8001ec2:	4d08      	ldr	r5, [pc, #32]	; (8001ee4 <HAL_I2C_Master_Transmit+0x190>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ec4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	402a      	ands	r2, r5
 8001eca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ecc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001ed0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ed4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001ed8:	e7b4      	b.n	8001e44 <HAL_I2C_Master_Transmit+0xf0>
 8001eda:	bf00      	nop
 8001edc:	82002000 	.word	0x82002000
 8001ee0:	81ff2000 	.word	0x81ff2000
 8001ee4:	fe00e800 	.word	0xfe00e800
 8001ee8:	fc009800 	.word	0xfc009800
 8001eec:	01ff0000 	.word	0x01ff0000
 8001ef0:	fc009c00 	.word	0xfc009c00

08001ef4 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ef4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b20      	cmp	r3, #32
{
 8001efc:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001efe:	d11f      	bne.n	8001f40 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f00:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8001f04:	2a01      	cmp	r2, #1
 8001f06:	d01b      	beq.n	8001f40 <HAL_I2CEx_ConfigAnalogFilter+0x4c>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f08:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f0a:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f0c:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f0e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8001f12:	6815      	ldr	r5, [r2, #0]

    return HAL_OK;
 8001f14:	4634      	mov	r4, r6
    __HAL_I2C_DISABLE(hi2c);
 8001f16:	f025 0501 	bic.w	r5, r5, #1
 8001f1a:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f1c:	6815      	ldr	r5, [r2, #0]
 8001f1e:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8001f22:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f24:	6815      	ldr	r5, [r2, #0]
 8001f26:	4329      	orrs	r1, r5
 8001f28:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001f2a:	6811      	ldr	r1, [r2, #0]
 8001f2c:	f041 0101 	orr.w	r1, r1, #1
 8001f30:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8001f32:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001f36:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	bc70      	pop	{r4, r5, r6}
 8001f3e:	4770      	bx	lr
    return HAL_BUSY;
 8001f40:	2402      	movs	r4, #2
}
 8001f42:	4620      	mov	r0, r4
 8001f44:	bc70      	pop	{r4, r5, r6}
 8001f46:	4770      	bx	lr

08001f48 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f48:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b20      	cmp	r3, #32
{
 8001f50:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f52:	d11e      	bne.n	8001f92 <HAL_I2CEx_ConfigDigitalFilter+0x4a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f54:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8001f58:	2a01      	cmp	r2, #1
 8001f5a:	d01a      	beq.n	8001f92 <HAL_I2CEx_ConfigDigitalFilter+0x4a>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f5c:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f5e:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f60:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f62:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8001f66:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
 8001f68:	4635      	mov	r5, r6
    __HAL_I2C_DISABLE(hi2c);
 8001f6a:	f024 0401 	bic.w	r4, r4, #1
 8001f6e:	6014      	str	r4, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8001f70:	6814      	ldr	r4, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001f72:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8001f76:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8001f7a:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001f7c:	6811      	ldr	r1, [r2, #0]
 8001f7e:	f041 0101 	orr.w	r1, r1, #1
 8001f82:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8001f84:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001f88:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001f8c:	4628      	mov	r0, r5
 8001f8e:	bc70      	pop	{r4, r5, r6}
 8001f90:	4770      	bx	lr
    return HAL_BUSY;
 8001f92:	2502      	movs	r5, #2
}
 8001f94:	4628      	mov	r0, r5
 8001f96:	bc70      	pop	{r4, r5, r6}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop

08001f9c <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f9c:	4a02      	ldr	r2, [pc, #8]	; (8001fa8 <HAL_PWR_EnableBkUpAccess+0xc>)
 8001f9e:	6813      	ldr	r3, [r2, #0]
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	6013      	str	r3, [r2, #0]
}
 8001fa6:	4770      	bx	lr
 8001fa8:	40007000 	.word	0x40007000

08001fac <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fac:	4a1b      	ldr	r2, [pc, #108]	; (800201c <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fae:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001fb2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8001fb6:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb8:	6411      	str	r1, [r2, #64]	; 0x40
{
 8001fba:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fbc:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fbe:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001fc4:	9201      	str	r2, [sp, #4]
 8001fc6:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001fce:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001fd0:	f7fe fff8 	bl	8000fc4 <HAL_GetTick>
 8001fd4:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fd6:	e005      	b.n	8001fe4 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fd8:	f7fe fff4 	bl	8000fc4 <HAL_GetTick>
 8001fdc:	1b40      	subs	r0, r0, r5
 8001fde:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001fe2:	d817      	bhi.n	8002014 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fe4:	6863      	ldr	r3, [r4, #4]
 8001fe6:	03da      	lsls	r2, r3, #15
 8001fe8:	d5f6      	bpl.n	8001fd8 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fea:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fec:	4d0c      	ldr	r5, [pc, #48]	; (8002020 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff2:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001ff4:	f7fe ffe6 	bl	8000fc4 <HAL_GetTick>
 8001ff8:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ffa:	e005      	b.n	8002008 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ffc:	f7fe ffe2 	bl	8000fc4 <HAL_GetTick>
 8002000:	1b00      	subs	r0, r0, r4
 8002002:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002006:	d805      	bhi.n	8002014 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002008:	686b      	ldr	r3, [r5, #4]
 800200a:	039b      	lsls	r3, r3, #14
 800200c:	d5f6      	bpl.n	8001ffc <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800200e:	2000      	movs	r0, #0
}
 8002010:	b003      	add	sp, #12
 8002012:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8002014:	2003      	movs	r0, #3
}
 8002016:	b003      	add	sp, #12
 8002018:	bd30      	pop	{r4, r5, pc}
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800
 8002020:	40007000 	.word	0x40007000

08002024 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002024:	2800      	cmp	r0, #0
 8002026:	f000 814c 	beq.w	80022c2 <HAL_RCC_OscConfig+0x29e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202a:	6803      	ldr	r3, [r0, #0]
{
 800202c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002030:	07dd      	lsls	r5, r3, #31
{
 8002032:	b082      	sub	sp, #8
 8002034:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002036:	d535      	bpl.n	80020a4 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002038:	49ac      	ldr	r1, [pc, #688]	; (80022ec <HAL_RCC_OscConfig+0x2c8>)
 800203a:	688a      	ldr	r2, [r1, #8]
 800203c:	f002 020c 	and.w	r2, r2, #12
 8002040:	2a04      	cmp	r2, #4
 8002042:	f000 80ff 	beq.w	8002244 <HAL_RCC_OscConfig+0x220>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002046:	688a      	ldr	r2, [r1, #8]
 8002048:	f002 020c 	and.w	r2, r2, #12
 800204c:	2a08      	cmp	r2, #8
 800204e:	f000 80f5 	beq.w	800223c <HAL_RCC_OscConfig+0x218>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002052:	6863      	ldr	r3, [r4, #4]
 8002054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002058:	d010      	beq.n	800207c <HAL_RCC_OscConfig+0x58>
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 811a 	beq.w	8002294 <HAL_RCC_OscConfig+0x270>
 8002060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002064:	4ba1      	ldr	r3, [pc, #644]	; (80022ec <HAL_RCC_OscConfig+0x2c8>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	f000 8164 	beq.w	8002334 <HAL_RCC_OscConfig+0x310>
 800206c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	e004      	b.n	8002086 <HAL_RCC_OscConfig+0x62>
 800207c:	4a9b      	ldr	r2, [pc, #620]	; (80022ec <HAL_RCC_OscConfig+0x2c8>)
 800207e:	6813      	ldr	r3, [r2, #0]
 8002080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002084:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7fe ff9d 	bl	8000fc4 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	4d98      	ldr	r5, [pc, #608]	; (80022ec <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800208c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	e005      	b.n	800209c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7fe ff98 	bl	8000fc4 <HAL_GetTick>
 8002094:	1b80      	subs	r0, r0, r6
 8002096:	2864      	cmp	r0, #100	; 0x64
 8002098:	f200 80ef 	bhi.w	800227a <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209c:	682b      	ldr	r3, [r5, #0]
 800209e:	039a      	lsls	r2, r3, #14
 80020a0:	d5f6      	bpl.n	8002090 <HAL_RCC_OscConfig+0x6c>
 80020a2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a4:	079f      	lsls	r7, r3, #30
 80020a6:	d442      	bmi.n	800212e <HAL_RCC_OscConfig+0x10a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a8:	071a      	lsls	r2, r3, #28
 80020aa:	d517      	bpl.n	80020dc <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020ac:	6963      	ldr	r3, [r4, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80b1 	beq.w	8002216 <HAL_RCC_OscConfig+0x1f2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b4:	4b8d      	ldr	r3, [pc, #564]	; (80022ec <HAL_RCC_OscConfig+0x2c8>)
 80020b6:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b8:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80020c0:	f7fe ff80 	bl	8000fc4 <HAL_GetTick>
 80020c4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c6:	e005      	b.n	80020d4 <HAL_RCC_OscConfig+0xb0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c8:	f7fe ff7c 	bl	8000fc4 <HAL_GetTick>
 80020cc:	1b80      	subs	r0, r0, r6
 80020ce:	2802      	cmp	r0, #2
 80020d0:	f200 80d3 	bhi.w	800227a <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80020d6:	079b      	lsls	r3, r3, #30
 80020d8:	d5f6      	bpl.n	80020c8 <HAL_RCC_OscConfig+0xa4>
 80020da:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020dc:	075d      	lsls	r5, r3, #29
 80020de:	d56b      	bpl.n	80021b8 <HAL_RCC_OscConfig+0x194>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e0:	4b82      	ldr	r3, [pc, #520]	; (80022ec <HAL_RCC_OscConfig+0x2c8>)
 80020e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020e4:	00d0      	lsls	r0, r2, #3
 80020e6:	f100 80ee 	bmi.w	80022c6 <HAL_RCC_OscConfig+0x2a2>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80020ec:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020fe:	4b7c      	ldr	r3, [pc, #496]	; (80022f0 <HAL_RCC_OscConfig+0x2cc>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	05d1      	lsls	r1, r2, #23
 8002104:	f140 80a8 	bpl.w	8002258 <HAL_RCC_OscConfig+0x234>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002108:	68a3      	ldr	r3, [r4, #8]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d039      	beq.n	8002182 <HAL_RCC_OscConfig+0x15e>
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 80db 	beq.w	80022ca <HAL_RCC_OscConfig+0x2a6>
 8002114:	2b05      	cmp	r3, #5
 8002116:	4b75      	ldr	r3, [pc, #468]	; (80022ec <HAL_RCC_OscConfig+0x2c8>)
 8002118:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800211a:	f000 8113 	beq.w	8002344 <HAL_RCC_OscConfig+0x320>
 800211e:	f022 0201 	bic.w	r2, r2, #1
 8002122:	671a      	str	r2, [r3, #112]	; 0x70
 8002124:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002126:	f022 0204 	bic.w	r2, r2, #4
 800212a:	671a      	str	r2, [r3, #112]	; 0x70
 800212c:	e02e      	b.n	800218c <HAL_RCC_OscConfig+0x168>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800212e:	4a6f      	ldr	r2, [pc, #444]	; (80022ec <HAL_RCC_OscConfig+0x2c8>)
 8002130:	6891      	ldr	r1, [r2, #8]
 8002132:	f011 0f0c 	tst.w	r1, #12
 8002136:	d063      	beq.n	8002200 <HAL_RCC_OscConfig+0x1dc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002138:	6891      	ldr	r1, [r2, #8]
 800213a:	f001 010c 	and.w	r1, r1, #12
 800213e:	2908      	cmp	r1, #8
 8002140:	d05b      	beq.n	80021fa <HAL_RCC_OscConfig+0x1d6>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002142:	68e3      	ldr	r3, [r4, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80e1 	beq.w	800230c <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 800214a:	4b68      	ldr	r3, [pc, #416]	; (80022ec <HAL_RCC_OscConfig+0x2c8>)
 800214c:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214e:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8002150:	f042 0201 	orr.w	r2, r2, #1
 8002154:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002156:	f7fe ff35 	bl	8000fc4 <HAL_GetTick>
 800215a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215c:	e005      	b.n	800216a <HAL_RCC_OscConfig+0x146>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800215e:	f7fe ff31 	bl	8000fc4 <HAL_GetTick>
 8002162:	1b80      	subs	r0, r0, r6
 8002164:	2802      	cmp	r0, #2
 8002166:	f200 8088 	bhi.w	800227a <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216a:	682b      	ldr	r3, [r5, #0]
 800216c:	0798      	lsls	r0, r3, #30
 800216e:	d5f6      	bpl.n	800215e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002170:	682b      	ldr	r3, [r5, #0]
 8002172:	6922      	ldr	r2, [r4, #16]
 8002174:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002178:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800217c:	602b      	str	r3, [r5, #0]
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	e792      	b.n	80020a8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002182:	4a5a      	ldr	r2, [pc, #360]	; (80022ec <HAL_RCC_OscConfig+0x2c8>)
 8002184:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218c:	f7fe ff1a 	bl	8000fc4 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002190:	4e56      	ldr	r6, [pc, #344]	; (80022ec <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8002192:	4680      	mov	r8, r0
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002194:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002198:	e005      	b.n	80021a6 <HAL_RCC_OscConfig+0x182>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219a:	f7fe ff13 	bl	8000fc4 <HAL_GetTick>
 800219e:	eba0 0008 	sub.w	r0, r0, r8
 80021a2:	42b8      	cmp	r0, r7
 80021a4:	d869      	bhi.n	800227a <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80021a8:	079b      	lsls	r3, r3, #30
 80021aa:	d5f6      	bpl.n	800219a <HAL_RCC_OscConfig+0x176>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021ac:	b125      	cbz	r5, 80021b8 <HAL_RCC_OscConfig+0x194>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ae:	4a4f      	ldr	r2, [pc, #316]	; (80022ec <HAL_RCC_OscConfig+0x2c8>)
 80021b0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80021b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b8:	69a0      	ldr	r0, [r4, #24]
 80021ba:	b1d0      	cbz	r0, 80021f2 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021bc:	4b4b      	ldr	r3, [pc, #300]	; (80022ec <HAL_RCC_OscConfig+0x2c8>)
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	f002 020c 	and.w	r2, r2, #12
 80021c4:	2a08      	cmp	r2, #8
 80021c6:	f000 80c5 	beq.w	8002354 <HAL_RCC_OscConfig+0x330>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ca:	2802      	cmp	r0, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021cc:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ce:	f000 80eb 	beq.w	80023a8 <HAL_RCC_OscConfig+0x384>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d6:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 80021d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021da:	f7fe fef3 	bl	8000fc4 <HAL_GetTick>
 80021de:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e0:	e004      	b.n	80021ec <HAL_RCC_OscConfig+0x1c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e2:	f7fe feef 	bl	8000fc4 <HAL_GetTick>
 80021e6:	1b40      	subs	r0, r0, r5
 80021e8:	2802      	cmp	r0, #2
 80021ea:	d846      	bhi.n	800227a <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ec:	6823      	ldr	r3, [r4, #0]
 80021ee:	019b      	lsls	r3, r3, #6
 80021f0:	d4f7      	bmi.n	80021e2 <HAL_RCC_OscConfig+0x1be>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80021f2:	2000      	movs	r0, #0
}
 80021f4:	b002      	add	sp, #8
 80021f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021fa:	6852      	ldr	r2, [r2, #4]
 80021fc:	0256      	lsls	r6, r2, #9
 80021fe:	d4a0      	bmi.n	8002142 <HAL_RCC_OscConfig+0x11e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002200:	4a3a      	ldr	r2, [pc, #232]	; (80022ec <HAL_RCC_OscConfig+0x2c8>)
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	0795      	lsls	r5, r2, #30
 8002206:	d53c      	bpl.n	8002282 <HAL_RCC_OscConfig+0x25e>
 8002208:	68e2      	ldr	r2, [r4, #12]
 800220a:	2a01      	cmp	r2, #1
 800220c:	d039      	beq.n	8002282 <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 800220e:	2001      	movs	r0, #1
}
 8002210:	b002      	add	sp, #8
 8002212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002216:	4b35      	ldr	r3, [pc, #212]	; (80022ec <HAL_RCC_OscConfig+0x2c8>)
 8002218:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221a:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 800221c:	f022 0201 	bic.w	r2, r2, #1
 8002220:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002222:	f7fe fecf 	bl	8000fc4 <HAL_GetTick>
 8002226:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002228:	e004      	b.n	8002234 <HAL_RCC_OscConfig+0x210>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222a:	f7fe fecb 	bl	8000fc4 <HAL_GetTick>
 800222e:	1b80      	subs	r0, r0, r6
 8002230:	2802      	cmp	r0, #2
 8002232:	d822      	bhi.n	800227a <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002234:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002236:	079f      	lsls	r7, r3, #30
 8002238:	d4f7      	bmi.n	800222a <HAL_RCC_OscConfig+0x206>
 800223a:	e74e      	b.n	80020da <HAL_RCC_OscConfig+0xb6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800223c:	684a      	ldr	r2, [r1, #4]
 800223e:	0250      	lsls	r0, r2, #9
 8002240:	f57f af07 	bpl.w	8002052 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	4a29      	ldr	r2, [pc, #164]	; (80022ec <HAL_RCC_OscConfig+0x2c8>)
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	0391      	lsls	r1, r2, #14
 800224a:	f57f af2b 	bpl.w	80020a4 <HAL_RCC_OscConfig+0x80>
 800224e:	6862      	ldr	r2, [r4, #4]
 8002250:	2a00      	cmp	r2, #0
 8002252:	f47f af27 	bne.w	80020a4 <HAL_RCC_OscConfig+0x80>
 8002256:	e7da      	b.n	800220e <HAL_RCC_OscConfig+0x1ea>
      PWR->CR1 |= PWR_CR1_DBP;
 8002258:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800225a:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 800225c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002260:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002262:	f7fe feaf 	bl	8000fc4 <HAL_GetTick>
 8002266:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002268:	6833      	ldr	r3, [r6, #0]
 800226a:	05da      	lsls	r2, r3, #23
 800226c:	f53f af4c 	bmi.w	8002108 <HAL_RCC_OscConfig+0xe4>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002270:	f7fe fea8 	bl	8000fc4 <HAL_GetTick>
 8002274:	1bc0      	subs	r0, r0, r7
 8002276:	2864      	cmp	r0, #100	; 0x64
 8002278:	d9f6      	bls.n	8002268 <HAL_RCC_OscConfig+0x244>
            return HAL_TIMEOUT;
 800227a:	2003      	movs	r0, #3
}
 800227c:	b002      	add	sp, #8
 800227e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002282:	491a      	ldr	r1, [pc, #104]	; (80022ec <HAL_RCC_OscConfig+0x2c8>)
 8002284:	6920      	ldr	r0, [r4, #16]
 8002286:	680a      	ldr	r2, [r1, #0]
 8002288:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800228c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002290:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002292:	e709      	b.n	80020a8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002294:	4b15      	ldr	r3, [pc, #84]	; (80022ec <HAL_RCC_OscConfig+0x2c8>)
 8002296:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002298:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800229a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022a8:	f7fe fe8c 	bl	8000fc4 <HAL_GetTick>
 80022ac:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ae:	e004      	b.n	80022ba <HAL_RCC_OscConfig+0x296>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b0:	f7fe fe88 	bl	8000fc4 <HAL_GetTick>
 80022b4:	1b80      	subs	r0, r0, r6
 80022b6:	2864      	cmp	r0, #100	; 0x64
 80022b8:	d8df      	bhi.n	800227a <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ba:	682b      	ldr	r3, [r5, #0]
 80022bc:	039b      	lsls	r3, r3, #14
 80022be:	d4f7      	bmi.n	80022b0 <HAL_RCC_OscConfig+0x28c>
 80022c0:	e6ef      	b.n	80020a2 <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 80022c2:	2001      	movs	r0, #1
}
 80022c4:	4770      	bx	lr
  FlagStatus pwrclkchanged = RESET;
 80022c6:	2500      	movs	r5, #0
 80022c8:	e719      	b.n	80020fe <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <HAL_RCC_OscConfig+0x2c8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022cc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d2:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d4:	f022 0201 	bic.w	r2, r2, #1
 80022d8:	671a      	str	r2, [r3, #112]	; 0x70
 80022da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022dc:	f022 0204 	bic.w	r2, r2, #4
 80022e0:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80022e2:	f7fe fe6f 	bl	8000fc4 <HAL_GetTick>
 80022e6:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e8:	e009      	b.n	80022fe <HAL_RCC_OscConfig+0x2da>
 80022ea:	bf00      	nop
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f4:	f7fe fe66 	bl	8000fc4 <HAL_GetTick>
 80022f8:	1bc0      	subs	r0, r0, r7
 80022fa:	4540      	cmp	r0, r8
 80022fc:	d8bd      	bhi.n	800227a <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fe:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002300:	0798      	lsls	r0, r3, #30
 8002302:	d4f7      	bmi.n	80022f4 <HAL_RCC_OscConfig+0x2d0>
    if (pwrclkchanged == SET)
 8002304:	2d00      	cmp	r5, #0
 8002306:	f43f af57 	beq.w	80021b8 <HAL_RCC_OscConfig+0x194>
 800230a:	e750      	b.n	80021ae <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_DISABLE();
 800230c:	4b41      	ldr	r3, [pc, #260]	; (8002414 <HAL_RCC_OscConfig+0x3f0>)
 800230e:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002310:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8002312:	f022 0201 	bic.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002318:	f7fe fe54 	bl	8000fc4 <HAL_GetTick>
 800231c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231e:	e004      	b.n	800232a <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002320:	f7fe fe50 	bl	8000fc4 <HAL_GetTick>
 8002324:	1b80      	subs	r0, r0, r6
 8002326:	2802      	cmp	r0, #2
 8002328:	d8a7      	bhi.n	800227a <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	682b      	ldr	r3, [r5, #0]
 800232c:	0799      	lsls	r1, r3, #30
 800232e:	d4f7      	bmi.n	8002320 <HAL_RCC_OscConfig+0x2fc>
 8002330:	6823      	ldr	r3, [r4, #0]
 8002332:	e6b9      	b.n	80020a8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002334:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	e6a0      	b.n	8002086 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002344:	f042 0204 	orr.w	r2, r2, #4
 8002348:	671a      	str	r2, [r3, #112]	; 0x70
 800234a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800234c:	f042 0201 	orr.w	r2, r2, #1
 8002350:	671a      	str	r2, [r3, #112]	; 0x70
 8002352:	e71b      	b.n	800218c <HAL_RCC_OscConfig+0x168>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002354:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8002356:	685a      	ldr	r2, [r3, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002358:	f43f af5a 	beq.w	8002210 <HAL_RCC_OscConfig+0x1ec>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002360:	69e1      	ldr	r1, [r4, #28]
 8002362:	428b      	cmp	r3, r1
 8002364:	f47f af53 	bne.w	800220e <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002368:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236c:	6a21      	ldr	r1, [r4, #32]
 800236e:	428b      	cmp	r3, r1
 8002370:	f47f af4d 	bne.w	800220e <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002374:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002378:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800237a:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800237c:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8002380:	f47f af45 	bne.w	800220e <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002384:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002386:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800238a:	085b      	lsrs	r3, r3, #1
 800238c:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800238e:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8002392:	f47f af3c 	bne.w	800220e <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002396:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002398:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800239c:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
    return HAL_ERROR;
 80023a0:	bf14      	ite	ne
 80023a2:	2001      	movne	r0, #1
 80023a4:	2000      	moveq	r0, #0
 80023a6:	e733      	b.n	8002210 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_PLL_DISABLE();
 80023a8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ac:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 80023ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023b0:	f7fe fe08 	bl	8000fc4 <HAL_GetTick>
 80023b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b6:	e005      	b.n	80023c4 <HAL_RCC_OscConfig+0x3a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b8:	f7fe fe04 	bl	8000fc4 <HAL_GetTick>
 80023bc:	1b80      	subs	r0, r0, r6
 80023be:	2802      	cmp	r0, #2
 80023c0:	f63f af5b 	bhi.w	800227a <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c4:	682b      	ldr	r3, [r5, #0]
 80023c6:	0199      	lsls	r1, r3, #6
 80023c8:	d4f6      	bmi.n	80023b8 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ca:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80023ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80023d0:	4313      	orrs	r3, r2
 80023d2:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 80023d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023da:	4c0e      	ldr	r4, [pc, #56]	; (8002414 <HAL_RCC_OscConfig+0x3f0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023dc:	0852      	lsrs	r2, r2, #1
 80023de:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80023e2:	3a01      	subs	r2, #1
 80023e4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80023e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80023ec:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80023ee:	682b      	ldr	r3, [r5, #0]
 80023f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80023f6:	f7fe fde5 	bl	8000fc4 <HAL_GetTick>
 80023fa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fc:	e005      	b.n	800240a <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fe:	f7fe fde1 	bl	8000fc4 <HAL_GetTick>
 8002402:	1b40      	subs	r0, r0, r5
 8002404:	2802      	cmp	r0, #2
 8002406:	f63f af38 	bhi.w	800227a <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240a:	6823      	ldr	r3, [r4, #0]
 800240c:	019a      	lsls	r2, r3, #6
 800240e:	d5f6      	bpl.n	80023fe <HAL_RCC_OscConfig+0x3da>
 8002410:	e6ef      	b.n	80021f2 <HAL_RCC_OscConfig+0x1ce>
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800

08002418 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002418:	b178      	cbz	r0, 800243a <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800241a:	4a5e      	ldr	r2, [pc, #376]	; (8002594 <HAL_RCC_ClockConfig+0x17c>)
 800241c:	6813      	ldr	r3, [r2, #0]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	428b      	cmp	r3, r1
 8002424:	d20b      	bcs.n	800243e <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002426:	6813      	ldr	r3, [r2, #0]
 8002428:	f023 030f 	bic.w	r3, r3, #15
 800242c:	430b      	orrs	r3, r1
 800242e:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002430:	6813      	ldr	r3, [r2, #0]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	428b      	cmp	r3, r1
 8002438:	d001      	beq.n	800243e <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800243a:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 800243c:	4770      	bx	lr
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800243e:	6803      	ldr	r3, [r0, #0]
{
 8002440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002444:	079d      	lsls	r5, r3, #30
 8002446:	d514      	bpl.n	8002472 <HAL_RCC_ClockConfig+0x5a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	075c      	lsls	r4, r3, #29
 800244a:	d504      	bpl.n	8002456 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800244c:	4c52      	ldr	r4, [pc, #328]	; (8002598 <HAL_RCC_ClockConfig+0x180>)
 800244e:	68a2      	ldr	r2, [r4, #8]
 8002450:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002454:	60a2      	str	r2, [r4, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002456:	071a      	lsls	r2, r3, #28
 8002458:	d504      	bpl.n	8002464 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800245a:	4c4f      	ldr	r4, [pc, #316]	; (8002598 <HAL_RCC_ClockConfig+0x180>)
 800245c:	68a2      	ldr	r2, [r4, #8]
 800245e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8002462:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4c4c      	ldr	r4, [pc, #304]	; (8002598 <HAL_RCC_ClockConfig+0x180>)
 8002466:	6885      	ldr	r5, [r0, #8]
 8002468:	68a2      	ldr	r2, [r4, #8]
 800246a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800246e:	432a      	orrs	r2, r5
 8002470:	60a2      	str	r2, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002472:	07df      	lsls	r7, r3, #31
 8002474:	4604      	mov	r4, r0
 8002476:	460d      	mov	r5, r1
 8002478:	d521      	bpl.n	80024be <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247a:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247c:	4b46      	ldr	r3, [pc, #280]	; (8002598 <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002480:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002482:	d063      	beq.n	800254c <HAL_RCC_ClockConfig+0x134>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002484:	2a02      	cmp	r2, #2
 8002486:	d079      	beq.n	800257c <HAL_RCC_ClockConfig+0x164>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002488:	0799      	lsls	r1, r3, #30
 800248a:	d528      	bpl.n	80024de <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800248c:	4942      	ldr	r1, [pc, #264]	; (8002598 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002492:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002494:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002496:	f023 0303 	bic.w	r3, r3, #3
 800249a:	4313      	orrs	r3, r2
 800249c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800249e:	f7fe fd91 	bl	8000fc4 <HAL_GetTick>
 80024a2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a4:	e004      	b.n	80024b0 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a6:	f7fe fd8d 	bl	8000fc4 <HAL_GetTick>
 80024aa:	1bc0      	subs	r0, r0, r7
 80024ac:	4540      	cmp	r0, r8
 80024ae:	d863      	bhi.n	8002578 <HAL_RCC_ClockConfig+0x160>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b0:	68b3      	ldr	r3, [r6, #8]
 80024b2:	6862      	ldr	r2, [r4, #4]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80024bc:	d1f3      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024be:	4a35      	ldr	r2, [pc, #212]	; (8002594 <HAL_RCC_ClockConfig+0x17c>)
 80024c0:	6813      	ldr	r3, [r2, #0]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	42ab      	cmp	r3, r5
 80024c8:	d90c      	bls.n	80024e4 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	6813      	ldr	r3, [r2, #0]
 80024cc:	f023 030f 	bic.w	r3, r3, #15
 80024d0:	432b      	orrs	r3, r5
 80024d2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d4:	6813      	ldr	r3, [r2, #0]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	42ab      	cmp	r3, r5
 80024dc:	d002      	beq.n	80024e4 <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 80024de:	2001      	movs	r0, #1
}
 80024e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	6823      	ldr	r3, [r4, #0]
 80024e6:	075a      	lsls	r2, r3, #29
 80024e8:	d506      	bpl.n	80024f8 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ea:	492b      	ldr	r1, [pc, #172]	; (8002598 <HAL_RCC_ClockConfig+0x180>)
 80024ec:	68e0      	ldr	r0, [r4, #12]
 80024ee:	688a      	ldr	r2, [r1, #8]
 80024f0:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80024f4:	4302      	orrs	r2, r0
 80024f6:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f8:	071b      	lsls	r3, r3, #28
 80024fa:	d507      	bpl.n	800250c <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024fc:	4a26      	ldr	r2, [pc, #152]	; (8002598 <HAL_RCC_ClockConfig+0x180>)
 80024fe:	6921      	ldr	r1, [r4, #16]
 8002500:	6893      	ldr	r3, [r2, #8]
 8002502:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002506:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800250a:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800250c:	4922      	ldr	r1, [pc, #136]	; (8002598 <HAL_RCC_ClockConfig+0x180>)
 800250e:	688b      	ldr	r3, [r1, #8]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b04      	cmp	r3, #4
 8002516:	d01c      	beq.n	8002552 <HAL_RCC_ClockConfig+0x13a>
 8002518:	2b08      	cmp	r3, #8
 800251a:	d12b      	bne.n	8002574 <HAL_RCC_ClockConfig+0x15c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800251c:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800251e:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002520:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002524:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002526:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800252a:	d12a      	bne.n	8002582 <HAL_RCC_ClockConfig+0x16a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800252c:	481b      	ldr	r0, [pc, #108]	; (800259c <HAL_RCC_ClockConfig+0x184>)
 800252e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002532:	fba1 0100 	umull	r0, r1, r1, r0
 8002536:	f7fe fb89 	bl	8000c4c <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800253a:	4b17      	ldr	r3, [pc, #92]	; (8002598 <HAL_RCC_ClockConfig+0x180>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002542:	3301      	adds	r3, #1
 8002544:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002546:	fbb0 f3f3 	udiv	r3, r0, r3
 800254a:	e003      	b.n	8002554 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254c:	039e      	lsls	r6, r3, #14
 800254e:	d49d      	bmi.n	800248c <HAL_RCC_ClockConfig+0x74>
 8002550:	e7c5      	b.n	80024de <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSE_VALUE;
 8002552:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002554:	4a10      	ldr	r2, [pc, #64]	; (8002598 <HAL_RCC_ClockConfig+0x180>)
 8002556:	4c13      	ldr	r4, [pc, #76]	; (80025a4 <HAL_RCC_ClockConfig+0x18c>)
 8002558:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 800255a:	4813      	ldr	r0, [pc, #76]	; (80025a8 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800255c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002560:	4912      	ldr	r1, [pc, #72]	; (80025ac <HAL_RCC_ClockConfig+0x194>)
  HAL_InitTick(uwTickPrio);
 8002562:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002564:	5ca2      	ldrb	r2, [r4, r2]
 8002566:	40d3      	lsrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 800256a:	f7fe fcef 	bl	8000f4c <HAL_InitTick>
  return HAL_OK;
 800256e:	2000      	movs	r0, #0
}
 8002570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSI_VALUE;
 8002574:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_RCC_ClockConfig+0x184>)
 8002576:	e7ed      	b.n	8002554 <HAL_RCC_ClockConfig+0x13c>
        return HAL_TIMEOUT;
 8002578:	2003      	movs	r0, #3
 800257a:	e7b1      	b.n	80024e0 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257c:	0198      	lsls	r0, r3, #6
 800257e:	d485      	bmi.n	800248c <HAL_RCC_ClockConfig+0x74>
 8002580:	e7ad      	b.n	80024de <HAL_RCC_ClockConfig+0xc6>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002582:	4807      	ldr	r0, [pc, #28]	; (80025a0 <HAL_RCC_ClockConfig+0x188>)
 8002584:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002588:	2300      	movs	r3, #0
 800258a:	fba1 0100 	umull	r0, r1, r1, r0
 800258e:	f7fe fb5d 	bl	8000c4c <__aeabi_uldivmod>
 8002592:	e7d2      	b.n	800253a <HAL_RCC_ClockConfig+0x122>
 8002594:	40023c00 	.word	0x40023c00
 8002598:	40023800 	.word	0x40023800
 800259c:	00f42400 	.word	0x00f42400
 80025a0:	017d7840 	.word	0x017d7840
 80025a4:	0800f6a0 	.word	0x0800f6a0
 80025a8:	20000004 	.word	0x20000004
 80025ac:	20000008 	.word	0x20000008

080025b0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80025b0:	6803      	ldr	r3, [r0, #0]
{
 80025b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80025b6:	f013 0601 	ands.w	r6, r3, #1
{
 80025ba:	b083      	sub	sp, #12
 80025bc:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80025be:	d00b      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025c0:	4ab6      	ldr	r2, [pc, #728]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80025c2:	6891      	ldr	r1, [r2, #8]
 80025c4:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80025c8:	6091      	str	r1, [r2, #8]
 80025ca:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80025cc:	6891      	ldr	r1, [r2, #8]
 80025ce:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80025d0:	fab6 f686 	clz	r6, r6
 80025d4:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025d6:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025d8:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80025dc:	d010      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025de:	49af      	ldr	r1, [pc, #700]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80025e0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80025e2:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025e6:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025ea:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80025ee:	ea42 0205 	orr.w	r2, r2, r5
 80025f2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025f6:	f000 821a 	beq.w	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x47e>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025fa:	fab5 f585 	clz	r5, r5
 80025fe:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002600:	02d9      	lsls	r1, r3, #11
 8002602:	d510      	bpl.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002604:	48a5      	ldr	r0, [pc, #660]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002606:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002608:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800260c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002610:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002614:	ea42 0201 	orr.w	r2, r2, r1
 8002618:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800261c:	f000 820a 	beq.w	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x484>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8002620:	2900      	cmp	r1, #0
 8002622:	bf08      	it	eq
 8002624:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8002626:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800262a:	bf18      	it	ne
 800262c:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800262e:	069a      	lsls	r2, r3, #26
 8002630:	f100 81b7 	bmi.w	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002634:	06d9      	lsls	r1, r3, #27
 8002636:	d50c      	bpl.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002638:	4a98      	ldr	r2, [pc, #608]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800263a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800263e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8002642:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8002646:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800264a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800264c:	4301      	orrs	r1, r0
 800264e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002652:	045a      	lsls	r2, r3, #17
 8002654:	d508      	bpl.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002656:	4991      	ldr	r1, [pc, #580]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002658:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800265a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800265e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002662:	4302      	orrs	r2, r0
 8002664:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002668:	041f      	lsls	r7, r3, #16
 800266a:	d508      	bpl.n	800267e <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800266c:	498b      	ldr	r1, [pc, #556]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800266e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002670:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002674:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002678:	4302      	orrs	r2, r0
 800267a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800267e:	03d8      	lsls	r0, r3, #15
 8002680:	d508      	bpl.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002682:	4986      	ldr	r1, [pc, #536]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002684:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002686:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800268a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800268e:	4302      	orrs	r2, r0
 8002690:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002694:	0399      	lsls	r1, r3, #14
 8002696:	d508      	bpl.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002698:	4980      	ldr	r1, [pc, #512]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800269a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800269c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80026a0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80026a4:	4302      	orrs	r2, r0
 80026a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026aa:	065a      	lsls	r2, r3, #25
 80026ac:	d508      	bpl.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ae:	497b      	ldr	r1, [pc, #492]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80026b0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80026b2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80026b6:	f022 0203 	bic.w	r2, r2, #3
 80026ba:	4302      	orrs	r2, r0
 80026bc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026c0:	061f      	lsls	r7, r3, #24
 80026c2:	d508      	bpl.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026c4:	4975      	ldr	r1, [pc, #468]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80026c6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80026c8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80026cc:	f022 020c 	bic.w	r2, r2, #12
 80026d0:	4302      	orrs	r2, r0
 80026d2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026d6:	05d8      	lsls	r0, r3, #23
 80026d8:	d508      	bpl.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026da:	4970      	ldr	r1, [pc, #448]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80026dc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80026de:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80026e2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80026e6:	4302      	orrs	r2, r0
 80026e8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026ec:	0599      	lsls	r1, r3, #22
 80026ee:	d508      	bpl.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026f0:	496a      	ldr	r1, [pc, #424]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80026f2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80026f4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80026f8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80026fc:	4302      	orrs	r2, r0
 80026fe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002702:	055a      	lsls	r2, r3, #21
 8002704:	d508      	bpl.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002706:	4965      	ldr	r1, [pc, #404]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002708:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800270a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800270e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002712:	4302      	orrs	r2, r0
 8002714:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002718:	051f      	lsls	r7, r3, #20
 800271a:	d508      	bpl.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800271c:	495f      	ldr	r1, [pc, #380]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800271e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002720:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002724:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002728:	4302      	orrs	r2, r0
 800272a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800272e:	04d8      	lsls	r0, r3, #19
 8002730:	d508      	bpl.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002732:	495a      	ldr	r1, [pc, #360]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002734:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002736:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800273a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800273e:	4302      	orrs	r2, r0
 8002740:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002744:	0499      	lsls	r1, r3, #18
 8002746:	d508      	bpl.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002748:	4954      	ldr	r1, [pc, #336]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800274a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800274c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002750:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002754:	4302      	orrs	r2, r0
 8002756:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800275a:	025a      	lsls	r2, r3, #9
 800275c:	d508      	bpl.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800275e:	494f      	ldr	r1, [pc, #316]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002760:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002762:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002766:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800276a:	4302      	orrs	r2, r0
 800276c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002770:	029f      	lsls	r7, r3, #10
 8002772:	d50c      	bpl.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002774:	4949      	ldr	r1, [pc, #292]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002776:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002778:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800277c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002780:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8002784:	bf08      	it	eq
 8002786:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002788:	4302      	orrs	r2, r0
 800278a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800278e:	f013 0f08 	tst.w	r3, #8
 8002792:	bf18      	it	ne
 8002794:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002796:	0358      	lsls	r0, r3, #13
 8002798:	d508      	bpl.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800279a:	4940      	ldr	r1, [pc, #256]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800279c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800279e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80027a2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027a6:	4302      	orrs	r2, r0
 80027a8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80027ac:	0219      	lsls	r1, r3, #8
 80027ae:	f100 80ed 	bmi.w	800298c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80027b2:	2e01      	cmp	r6, #1
 80027b4:	d001      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80027b6:	019a      	lsls	r2, r3, #6
 80027b8:	d560      	bpl.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027ba:	4b38      	ldr	r3, [pc, #224]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80027bc:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027be:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_DISABLE();
 80027c0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80027c4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80027c6:	f7fe fbfd 	bl	8000fc4 <HAL_GetTick>
 80027ca:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027cc:	e005      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027ce:	f7fe fbf9 	bl	8000fc4 <HAL_GetTick>
 80027d2:	1bc0      	subs	r0, r0, r7
 80027d4:	2864      	cmp	r0, #100	; 0x64
 80027d6:	f200 80d5 	bhi.w	8002984 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027da:	6833      	ldr	r3, [r6, #0]
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	d4f6      	bmi.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x21e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80027e0:	6823      	ldr	r3, [r4, #0]
 80027e2:	07df      	lsls	r7, r3, #31
 80027e4:	d512      	bpl.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x25c>
 80027e6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80027e8:	b982      	cbnz	r2, 800280c <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027ea:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027ee:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80027f2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80027f6:	6860      	ldr	r0, [r4, #4]
 80027f8:	f007 6770 	and.w	r7, r7, #251658240	; 0xf000000
 80027fc:	68a1      	ldr	r1, [r4, #8]
 80027fe:	433a      	orrs	r2, r7
 8002800:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002804:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8002808:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800280c:	031e      	lsls	r6, r3, #12
 800280e:	d504      	bpl.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002810:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002812:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002816:	f000 811e 	beq.w	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800281a:	02d8      	lsls	r0, r3, #11
 800281c:	d504      	bpl.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x278>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800281e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002820:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002824:	f000 8117 	beq.w	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002828:	01d9      	lsls	r1, r3, #7
 800282a:	d511      	bpl.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800282c:	4e1b      	ldr	r6, [pc, #108]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800282e:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002830:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002834:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002838:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800283c:	6921      	ldr	r1, [r4, #16]
 800283e:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8002842:	433a      	orrs	r2, r7
 8002844:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002848:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800284c:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002850:	019a      	lsls	r2, r3, #6
 8002852:	f100 80f1 	bmi.w	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x488>
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002856:	4b11      	ldr	r3, [pc, #68]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002858:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800285a:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_ENABLE();
 800285c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002860:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002862:	f7fe fbaf 	bl	8000fc4 <HAL_GetTick>
 8002866:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002868:	e005      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800286a:	f7fe fbab 	bl	8000fc4 <HAL_GetTick>
 800286e:	1bc0      	subs	r0, r0, r7
 8002870:	2864      	cmp	r0, #100	; 0x64
 8002872:	f200 8087 	bhi.w	8002984 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002876:	6833      	ldr	r3, [r6, #0]
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	d5f6      	bpl.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800287c:	2d01      	cmp	r5, #1
 800287e:	d003      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002880:	2000      	movs	r0, #0
}
 8002882:	b003      	add	sp, #12
 8002884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800288a:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800288c:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE();
 800288e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002892:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002894:	f7fe fb96 	bl	8000fc4 <HAL_GetTick>
 8002898:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800289a:	e006      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800289c:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028a0:	f7fe fb90 	bl	8000fc4 <HAL_GetTick>
 80028a4:	1b80      	subs	r0, r0, r6
 80028a6:	2864      	cmp	r0, #100	; 0x64
 80028a8:	d86c      	bhi.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028aa:	682b      	ldr	r3, [r5, #0]
 80028ac:	009f      	lsls	r7, r3, #2
 80028ae:	d4f7      	bmi.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028b0:	6823      	ldr	r3, [r4, #0]
 80028b2:	031d      	lsls	r5, r3, #12
 80028b4:	d501      	bpl.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80028b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80028b8:	b11a      	cbz	r2, 80028c2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80028ba:	02d8      	lsls	r0, r3, #11
 80028bc:	d51d      	bpl.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80028c0:	b9da      	cbnz	r2, 80028fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028c2:	4982      	ldr	r1, [pc, #520]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80028c4:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028ca:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80028ce:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80028d2:	69a0      	ldr	r0, [r4, #24]
 80028d4:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 80028d8:	4332      	orrs	r2, r6
 80028da:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 80028de:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80028e2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80028e6:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80028ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80028ec:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80028f0:	3801      	subs	r0, #1
 80028f2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80028f6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80028fa:	0299      	lsls	r1, r3, #10
 80028fc:	d515      	bpl.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80028fe:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002900:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8002904:	d111      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002906:	4971      	ldr	r1, [pc, #452]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002908:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800290a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800290e:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002912:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002916:	6a20      	ldr	r0, [r4, #32]
 8002918:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800291c:	4332      	orrs	r2, r6
 800291e:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8002922:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002926:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800292a:	071a      	lsls	r2, r3, #28
 800292c:	d519      	bpl.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800292e:	4a67      	ldr	r2, [pc, #412]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002930:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002932:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002936:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800293a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800293e:	69e0      	ldr	r0, [r4, #28]
 8002940:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002944:	430b      	orrs	r3, r1
 8002946:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800294a:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 800294e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002952:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002956:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002958:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800295c:	430b      	orrs	r3, r1
 800295e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8002962:	4b5a      	ldr	r3, [pc, #360]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002964:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002966:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 8002968:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800296c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800296e:	f7fe fb29 	bl	8000fc4 <HAL_GetTick>
 8002972:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002974:	6823      	ldr	r3, [r4, #0]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	d482      	bmi.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800297a:	f7fe fb23 	bl	8000fc4 <HAL_GetTick>
 800297e:	1b40      	subs	r0, r0, r5
 8002980:	2864      	cmp	r0, #100	; 0x64
 8002982:	d9f7      	bls.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        return HAL_TIMEOUT;
 8002984:	2003      	movs	r0, #3
}
 8002986:	b003      	add	sp, #12
 8002988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800298c:	494f      	ldr	r1, [pc, #316]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 800298e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002992:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002996:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800299a:	4302      	orrs	r2, r0
 800299c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 80029a0:	e707      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x202>
    __HAL_RCC_PWR_CLK_ENABLE();
 80029a2:	4a4a      	ldr	r2, [pc, #296]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
    PWR->CR1 |= PWR_CR1_DBP;
 80029a4:	4b4a      	ldr	r3, [pc, #296]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x520>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029a8:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80029ae:	6411      	str	r1, [r2, #64]	; 0x40
 80029b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029b2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80029b6:	9201      	str	r2, [sp, #4]
 80029b8:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029c0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80029c2:	f7fe faff 	bl	8000fc4 <HAL_GetTick>
 80029c6:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029c8:	e005      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x426>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ca:	f7fe fafb 	bl	8000fc4 <HAL_GetTick>
 80029ce:	eba0 0008 	sub.w	r0, r0, r8
 80029d2:	2864      	cmp	r0, #100	; 0x64
 80029d4:	d8d6      	bhi.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	05db      	lsls	r3, r3, #23
 80029da:	d5f6      	bpl.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029dc:	4a3b      	ldr	r2, [pc, #236]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80029de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029e0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80029e2:	f403 7040 	and.w	r0, r3, #768	; 0x300
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029e6:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 80029ea:	d010      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80029ec:	4281      	cmp	r1, r0
 80029ee:	d00e      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x45e>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029f0:	6f11      	ldr	r1, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80029f2:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029f4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80029f8:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 80029fc:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029fe:	6f17      	ldr	r7, [r2, #112]	; 0x70
 8002a00:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 8002a04:	6717      	str	r7, [r2, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002a06:	6711      	str	r1, [r2, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a08:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002a0a:	07cf      	lsls	r7, r1, #31
 8002a0c:	d448      	bmi.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a0e:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8002a12:	d03c      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002a14:	492d      	ldr	r1, [pc, #180]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002a16:	688a      	ldr	r2, [r1, #8]
 8002a18:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002a1c:	608a      	str	r2, [r1, #8]
 8002a1e:	4a2b      	ldr	r2, [pc, #172]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a24:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002a26:	430b      	orrs	r3, r1
 8002a28:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	e602      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x84>
  uint32_t pllsaiused = 0;
 8002a2e:	2500      	movs	r5, #0
      plli2sused = 1;
 8002a30:	2601      	movs	r6, #1
 8002a32:	e5e5      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x50>
      plli2sused = 1;
 8002a34:	2601      	movs	r6, #1
 8002a36:	e5f6      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a38:	6923      	ldr	r3, [r4, #16]
 8002a3a:	6862      	ldr	r2, [r4, #4]
 8002a3c:	041b      	lsls	r3, r3, #16
 8002a3e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8002a42:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002a46:	4a21      	ldr	r2, [pc, #132]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002a48:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002a4c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002a50:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8002a54:	e6ff      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a56:	4e1d      	ldr	r6, [pc, #116]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a58:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a5a:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a5e:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a62:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002a66:	68e1      	ldr	r1, [r4, #12]
 8002a68:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8002a6c:	433a      	orrs	r2, r7
 8002a6e:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002a72:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002a76:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a7a:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8002a7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a80:	f021 011f 	bic.w	r1, r1, #31
 8002a84:	3a01      	subs	r2, #1
 8002a86:	430a      	orrs	r2, r1
 8002a88:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 8002a8c:	e6cc      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a8e:	480f      	ldr	r0, [pc, #60]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002a90:	4910      	ldr	r1, [pc, #64]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x524>)
 8002a92:	6882      	ldr	r2, [r0, #8]
 8002a94:	4019      	ands	r1, r3
 8002a96:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	6082      	str	r2, [r0, #8]
 8002a9e:	e7be      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa0:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa2:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002aa6:	f7fe fa8d 	bl	8000fc4 <HAL_GetTick>
 8002aaa:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aac:	e006      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x50c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aae:	f7fe fa89 	bl	8000fc4 <HAL_GetTick>
 8002ab2:	eba0 0009 	sub.w	r0, r0, r9
 8002ab6:	4540      	cmp	r0, r8
 8002ab8:	f63f af64 	bhi.w	8002984 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002abc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002abe:	0798      	lsls	r0, r3, #30
 8002ac0:	d5f5      	bpl.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8002ac2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ac4:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8002ac8:	e7a1      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40007000 	.word	0x40007000
 8002ad4:	0ffffcff 	.word	0x0ffffcff

08002ad8 <HAL_RTC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	d066      	beq.n	8002baa <HAL_RTC_Init+0xd2>
{
 8002adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002ade:	7f43      	ldrb	r3, [r0, #29]
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d043      	beq.n	8002b72 <HAL_RTC_Init+0x9a>

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002aea:	6823      	ldr	r3, [r4, #0]
 8002aec:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002aee:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002af0:	21ca      	movs	r1, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002af2:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002af4:	6259      	str	r1, [r3, #36]	; 0x24
 8002af6:	625a      	str	r2, [r3, #36]	; 0x24
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	0655      	lsls	r5, r2, #25
 8002afc:	d527      	bpl.n	8002b4e <HAL_RTC_Init+0x76>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002afe:	6898      	ldr	r0, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b00:	6925      	ldr	r5, [r4, #16]
 8002b02:	6862      	ldr	r2, [r4, #4]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002b04:	492a      	ldr	r1, [pc, #168]	; (8002bb0 <HAL_RTC_Init+0xd8>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b06:	432a      	orrs	r2, r5
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002b08:	4001      	ands	r1, r0
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b0a:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002b0c:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b0e:	4302      	orrs	r2, r0
 8002b10:	689d      	ldr	r5, [r3, #8]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002b12:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b16:	432a      	orrs	r2, r5
 8002b18:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002b1a:	6118      	str	r0, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002b22:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b2a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	0691      	lsls	r1, r2, #26
 8002b30:	d523      	bpl.n	8002b7a <HAL_RTC_Init+0xa2>
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8002b32:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b34:	26ff      	movs	r6, #255	; 0xff
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8002b36:	69a7      	ldr	r7, [r4, #24]
    hrtc->State = HAL_RTC_STATE_READY;
 8002b38:	2501      	movs	r5, #1
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8002b3a:	f021 0108 	bic.w	r1, r1, #8
    return HAL_OK;
 8002b3e:	2000      	movs	r0, #0
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8002b40:	64d9      	str	r1, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8002b42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b44:	433a      	orrs	r2, r7
 8002b46:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b48:	625e      	str	r6, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002b4a:	7765      	strb	r5, [r4, #29]
}
 8002b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b52:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b54:	f7fe fa36 	bl	8000fc4 <HAL_GetTick>
 8002b58:	4605      	mov	r5, r0
 8002b5a:	e005      	b.n	8002b68 <HAL_RTC_Init+0x90>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002b5c:	f7fe fa32 	bl	8000fc4 <HAL_GetTick>
 8002b60:	1b40      	subs	r0, r0, r5
 8002b62:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002b66:	d819      	bhi.n	8002b9c <HAL_RTC_Init+0xc4>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002b68:	6823      	ldr	r3, [r4, #0]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	0650      	lsls	r0, r2, #25
 8002b6e:	d5f5      	bpl.n	8002b5c <HAL_RTC_Init+0x84>
 8002b70:	e7c5      	b.n	8002afe <HAL_RTC_Init+0x26>
    hrtc->Lock = HAL_UNLOCKED;
 8002b72:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002b74:	f001 fe42 	bl	80047fc <HAL_RTC_MspInit>
 8002b78:	e7b7      	b.n	8002aea <HAL_RTC_Init+0x12>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b80:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002b82:	f7fe fa1f 	bl	8000fc4 <HAL_GetTick>
 8002b86:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002b88:	6823      	ldr	r3, [r4, #0]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	0692      	lsls	r2, r2, #26
 8002b8e:	d4d0      	bmi.n	8002b32 <HAL_RTC_Init+0x5a>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002b90:	f7fe fa18 	bl	8000fc4 <HAL_GetTick>
 8002b94:	1b40      	subs	r0, r0, r5
 8002b96:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002b9a:	d9f5      	bls.n	8002b88 <HAL_RTC_Init+0xb0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b9c:	6822      	ldr	r2, [r4, #0]
 8002b9e:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ba0:	2304      	movs	r3, #4
        return HAL_ERROR;
 8002ba2:	2001      	movs	r0, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ba4:	6251      	str	r1, [r2, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ba6:	7763      	strb	r3, [r4, #29]
}
 8002ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     return HAL_ERROR;
 8002baa:	2001      	movs	r0, #1
}
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	ff8fffbf 	.word	0xff8fffbf

08002bb4 <HAL_RTC_SetTime>:
{
 8002bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hrtc);
 8002bb8:	7f03      	ldrb	r3, [r0, #28]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	f000 808c 	beq.w	8002cd8 <HAL_RTC_SetTime+0x124>
 8002bc0:	460d      	mov	r5, r1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bc2:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	6806      	ldr	r6, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bc8:	7743      	strb	r3, [r0, #29]
 8002bca:	4604      	mov	r4, r0
  __HAL_LOCK(hrtc);
 8002bcc:	7701      	strb	r1, [r0, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002bce:	68b7      	ldr	r7, [r6, #8]
  if(Format == RTC_FORMAT_BIN)
 8002bd0:	2a00      	cmp	r2, #0
 8002bd2:	d030      	beq.n	8002c36 <HAL_RTC_SetTime+0x82>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002bd4:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8002bd8:	d07a      	beq.n	8002cd0 <HAL_RTC_SetTime+0x11c>
 8002bda:	7b2f      	ldrb	r7, [r5, #12]
 8002bdc:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002bde:	7868      	ldrb	r0, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002be0:	782a      	ldrb	r2, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002be2:	0200      	lsls	r0, r0, #8
              ((uint32_t)sTime->Seconds) | \
 8002be4:	78ab      	ldrb	r3, [r5, #2]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002be6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002bea:	4318      	orrs	r0, r3
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002bec:	4307      	orrs	r7, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bee:	22ca      	movs	r2, #202	; 0xca
 8002bf0:	2353      	movs	r3, #83	; 0x53
 8002bf2:	6272      	str	r2, [r6, #36]	; 0x24
 8002bf4:	6273      	str	r3, [r6, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002bf6:	68f3      	ldr	r3, [r6, #12]
 8002bf8:	065a      	lsls	r2, r3, #25
 8002bfa:	d54d      	bpl.n	8002c98 <HAL_RTC_SetTime+0xe4>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002bfc:	4a46      	ldr	r2, [pc, #280]	; (8002d18 <HAL_RTC_SetTime+0x164>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002bfe:	692b      	ldr	r3, [r5, #16]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002c00:	403a      	ands	r2, r7
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002c02:	6969      	ldr	r1, [r5, #20]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002c04:	6032      	str	r2, [r6, #0]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002c06:	430b      	orrs	r3, r1
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002c08:	68b2      	ldr	r2, [r6, #8]
 8002c0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c0e:	60b2      	str	r2, [r6, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002c10:	68b2      	ldr	r2, [r6, #8]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60b3      	str	r3, [r6, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002c16:	68f3      	ldr	r3, [r6, #12]
 8002c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c1c:	60f3      	str	r3, [r6, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002c1e:	68b3      	ldr	r3, [r6, #8]
 8002c20:	069b      	lsls	r3, r3, #26
 8002c22:	d55c      	bpl.n	8002cde <HAL_RTC_SetTime+0x12a>
   __HAL_UNLOCK(hrtc);
 8002c24:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c26:	21ff      	movs	r1, #255	; 0xff
   hrtc->State = HAL_RTC_STATE_READY;
 8002c28:	2201      	movs	r2, #1
   return HAL_OK;
 8002c2a:	4618      	mov	r0, r3
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c2c:	6271      	str	r1, [r6, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002c2e:	7762      	strb	r2, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8002c30:	7723      	strb	r3, [r4, #28]
}
 8002c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002c36:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8002c3a:	d04b      	beq.n	8002cd4 <HAL_RTC_SetTime+0x120>
 8002c3c:	7b2f      	ldrb	r7, [r5, #12]
 8002c3e:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002c40:	782b      	ldrb	r3, [r5, #0]
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8002c42:	2100      	movs	r1, #0

  while(Value >= 10)
 8002c44:	2b09      	cmp	r3, #9
 8002c46:	d906      	bls.n	8002c56 <HAL_RTC_SetTime+0xa2>
  {
    bcdhigh++;
    Value -= 10;
 8002c48:	3b0a      	subs	r3, #10
    bcdhigh++;
 8002c4a:	3101      	adds	r1, #1
    Value -= 10;
 8002c4c:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8002c4e:	2b09      	cmp	r3, #9
 8002c50:	d8fa      	bhi.n	8002c48 <HAL_RTC_SetTime+0x94>
 8002c52:	0109      	lsls	r1, r1, #4
 8002c54:	b2c9      	uxtb	r1, r1
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002c56:	4319      	orrs	r1, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002c58:	786b      	ldrb	r3, [r5, #1]
  uint32_t bcdhigh = 0;
 8002c5a:	2000      	movs	r0, #0
  while(Value >= 10)
 8002c5c:	2b09      	cmp	r3, #9
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002c5e:	ea4f 4101 	mov.w	r1, r1, lsl #16
  while(Value >= 10)
 8002c62:	d906      	bls.n	8002c72 <HAL_RTC_SetTime+0xbe>
    Value -= 10;
 8002c64:	3b0a      	subs	r3, #10
    bcdhigh++;
 8002c66:	3001      	adds	r0, #1
    Value -= 10;
 8002c68:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8002c6a:	2b09      	cmp	r3, #9
 8002c6c:	d8fa      	bhi.n	8002c64 <HAL_RTC_SetTime+0xb0>
 8002c6e:	0100      	lsls	r0, r0, #4
 8002c70:	b2c0      	uxtb	r0, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002c72:	4303      	orrs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002c74:	78a8      	ldrb	r0, [r5, #2]
  while(Value >= 10)
 8002c76:	2809      	cmp	r0, #9
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002c78:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10)
 8002c7c:	d949      	bls.n	8002d12 <HAL_RTC_SetTime+0x15e>
    Value -= 10;
 8002c7e:	380a      	subs	r0, #10
    bcdhigh++;
 8002c80:	3201      	adds	r2, #1
    Value -= 10;
 8002c82:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8002c84:	2809      	cmp	r0, #9
 8002c86:	d8fa      	bhi.n	8002c7e <HAL_RTC_SetTime+0xca>
 8002c88:	0112      	lsls	r2, r2, #4
 8002c8a:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002c8c:	430f      	orrs	r7, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002c8e:	4310      	orrs	r0, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002c90:	433b      	orrs	r3, r7
 8002c92:	ea43 0700 	orr.w	r7, r3, r0
 8002c96:	e7aa      	b.n	8002bee <HAL_RTC_SetTime+0x3a>
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002c98:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9c:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8002c9e:	f7fe f991 	bl	8000fc4 <HAL_GetTick>
 8002ca2:	4681      	mov	r9, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002ca4:	6826      	ldr	r6, [r4, #0]
 8002ca6:	68f3      	ldr	r3, [r6, #12]
 8002ca8:	f013 0840 	ands.w	r8, r3, #64	; 0x40
 8002cac:	d1a6      	bne.n	8002bfc <HAL_RTC_SetTime+0x48>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002cae:	f7fe f989 	bl	8000fc4 <HAL_GetTick>
 8002cb2:	eba0 0009 	sub.w	r0, r0, r9
 8002cb6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002cba:	d9f3      	bls.n	8002ca4 <HAL_RTC_SetTime+0xf0>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cbc:	6822      	ldr	r2, [r4, #0]
 8002cbe:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002cc0:	2304      	movs	r3, #4
    return HAL_ERROR;
 8002cc2:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cc4:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_UNLOCK(hrtc);
 8002cc6:	f884 801c 	strb.w	r8, [r4, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002cca:	7763      	strb	r3, [r4, #29]
}
 8002ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      sTime->TimeFormat = 0x00;
 8002cd0:	732f      	strb	r7, [r5, #12]
 8002cd2:	e784      	b.n	8002bde <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 8002cd4:	732f      	strb	r7, [r5, #12]
 8002cd6:	e7b3      	b.n	8002c40 <HAL_RTC_SetTime+0x8c>
  __HAL_LOCK(hrtc);
 8002cd8:	2002      	movs	r0, #2
}
 8002cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002cde:	68f3      	ldr	r3, [r6, #12]
 8002ce0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ce4:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8002ce6:	f7fe f96d 	bl	8000fc4 <HAL_GetTick>
 8002cea:	4607      	mov	r7, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002cec:	6826      	ldr	r6, [r4, #0]
 8002cee:	68f5      	ldr	r5, [r6, #12]
 8002cf0:	f015 0520 	ands.w	r5, r5, #32
 8002cf4:	d196      	bne.n	8002c24 <HAL_RTC_SetTime+0x70>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002cf6:	f7fe f965 	bl	8000fc4 <HAL_GetTick>
 8002cfa:	1bc0      	subs	r0, r0, r7
 8002cfc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d00:	d9f4      	bls.n	8002cec <HAL_RTC_SetTime+0x138>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d02:	6822      	ldr	r2, [r4, #0]
 8002d04:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d06:	2304      	movs	r3, #4
        return HAL_ERROR;
 8002d08:	2001      	movs	r0, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d0a:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8002d0c:	7725      	strb	r5, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d0e:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8002d10:	e78f      	b.n	8002c32 <HAL_RTC_SetTime+0x7e>
  while(Value >= 10)
 8002d12:	2200      	movs	r2, #0
 8002d14:	e7ba      	b.n	8002c8c <HAL_RTC_SetTime+0xd8>
 8002d16:	bf00      	nop
 8002d18:	007f7f7f 	.word	0x007f7f7f

08002d1c <HAL_RTC_GetTime>:
{
 8002d1c:	b470      	push	{r4, r5, r6}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002d1e:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002d20:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <HAL_RTC_GetTime+0x68>)
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002d22:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002d24:	6920      	ldr	r0, [r4, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002d26:	6824      	ldr	r4, [r4, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002d28:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002d2c:	604d      	str	r5, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002d2e:	4023      	ands	r3, r4
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002d30:	6088      	str	r0, [r1, #8]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8002d32:	0c18      	lsrs	r0, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8002d34:	f3c3 2406 	ubfx	r4, r3, #8, #7
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002d38:	b2db      	uxtb	r3, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8002d3a:	f000 0640 	and.w	r6, r0, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8002d3e:	f000 053f 	and.w	r5, r0, #63	; 0x3f
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8002d42:	704c      	strb	r4, [r1, #1]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8002d44:	730e      	strb	r6, [r1, #12]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8002d46:	700d      	strb	r5, [r1, #0]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002d48:	708b      	strb	r3, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 8002d4a:	b9ba      	cbnz	r2, 8002d7c <HAL_RTC_GetTime+0x60>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002d4c:	0926      	lsrs	r6, r4, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8002d4e:	f000 000f 	and.w	r0, r0, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002d52:	091a      	lsrs	r2, r3, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8002d54:	f004 040f 	and.w	r4, r4, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002d58:	092d      	lsrs	r5, r5, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8002d5a:	f003 030f 	and.w	r3, r3, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002d5e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8002d62:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002d66:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8002d6a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 8002d6e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8002d72:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002d76:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002d78:	704c      	strb	r4, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002d7a:	708b      	strb	r3, [r1, #2]
}
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	bc70      	pop	{r4, r5, r6}
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	007f7f7f 	.word	0x007f7f7f

08002d88 <HAL_RTC_SetDate>:
{
 8002d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8002d8a:	7f03      	ldrb	r3, [r0, #28]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d074      	beq.n	8002e7a <HAL_RTC_SetDate+0xf2>
 8002d90:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d92:	2302      	movs	r3, #2
 __HAL_LOCK(hrtc);
 8002d94:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d96:	776b      	strb	r3, [r5, #29]
 __HAL_LOCK(hrtc);
 8002d98:	7728      	strb	r0, [r5, #28]
 8002d9a:	780e      	ldrb	r6, [r1, #0]
 8002d9c:	78cb      	ldrb	r3, [r1, #3]
 8002d9e:	0376      	lsls	r6, r6, #13
 8002da0:	7848      	ldrb	r0, [r1, #1]
 8002da2:	788c      	ldrb	r4, [r1, #2]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002da4:	bb8a      	cbnz	r2, 8002e0a <HAL_RTC_SetDate+0x82>
 8002da6:	06c7      	lsls	r7, r0, #27
 8002da8:	d504      	bpl.n	8002db4 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002daa:	f020 0010 	bic.w	r0, r0, #16
 8002dae:	300a      	adds	r0, #10
 8002db0:	b2c0      	uxtb	r0, r0
 8002db2:	7048      	strb	r0, [r1, #1]
  while(Value >= 10)
 8002db4:	2b09      	cmp	r3, #9
  uint32_t bcdhigh = 0;
 8002db6:	f04f 0100 	mov.w	r1, #0
  while(Value >= 10)
 8002dba:	d906      	bls.n	8002dca <HAL_RTC_SetDate+0x42>
    Value -= 10;
 8002dbc:	3b0a      	subs	r3, #10
    bcdhigh++;
 8002dbe:	3101      	adds	r1, #1
    Value -= 10;
 8002dc0:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8002dc2:	2b09      	cmp	r3, #9
 8002dc4:	d8fa      	bhi.n	8002dbc <HAL_RTC_SetDate+0x34>
 8002dc6:	0109      	lsls	r1, r1, #4
 8002dc8:	b2c9      	uxtb	r1, r1
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002dca:	430b      	orrs	r3, r1
  while(Value >= 10)
 8002dcc:	2809      	cmp	r0, #9
  uint32_t bcdhigh = 0;
 8002dce:	f04f 0100 	mov.w	r1, #0
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002dd2:	ea4f 4303 	mov.w	r3, r3, lsl #16
  while(Value >= 10)
 8002dd6:	d906      	bls.n	8002de6 <HAL_RTC_SetDate+0x5e>
    Value -= 10;
 8002dd8:	380a      	subs	r0, #10
    bcdhigh++;
 8002dda:	3101      	adds	r1, #1
    Value -= 10;
 8002ddc:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8002dde:	2809      	cmp	r0, #9
 8002de0:	d8fa      	bhi.n	8002dd8 <HAL_RTC_SetDate+0x50>
 8002de2:	0109      	lsls	r1, r1, #4
 8002de4:	b2c9      	uxtb	r1, r1
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8002de6:	4308      	orrs	r0, r1
  while(Value >= 10)
 8002de8:	2c09      	cmp	r4, #9
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8002dea:	ea4f 2100 	mov.w	r1, r0, lsl #8
  while(Value >= 10)
 8002dee:	d960      	bls.n	8002eb2 <HAL_RTC_SetDate+0x12a>
    Value -= 10;
 8002df0:	3c0a      	subs	r4, #10
    bcdhigh++;
 8002df2:	3201      	adds	r2, #1
    Value -= 10;
 8002df4:	b2e4      	uxtb	r4, r4
  while(Value >= 10)
 8002df6:	2c09      	cmp	r4, #9
 8002df8:	d8fa      	bhi.n	8002df0 <HAL_RTC_SetDate+0x68>
 8002dfa:	0112      	lsls	r2, r2, #4
 8002dfc:	b2d0      	uxtb	r0, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002dfe:	431e      	orrs	r6, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002e00:	4304      	orrs	r4, r0
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002e02:	ea46 0001 	orr.w	r0, r6, r1
 8002e06:	4304      	orrs	r4, r0
 8002e08:	e004      	b.n	8002e14 <HAL_RTC_SetDate+0x8c>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002e0a:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8002e0e:	431c      	orrs	r4, r3
 8002e10:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e14:	682b      	ldr	r3, [r5, #0]
 8002e16:	21ca      	movs	r1, #202	; 0xca
 8002e18:	2253      	movs	r2, #83	; 0x53
 8002e1a:	6259      	str	r1, [r3, #36]	; 0x24
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	0651      	lsls	r1, r2, #25
 8002e22:	d511      	bpl.n	8002e48 <HAL_RTC_SetDate+0xc0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002e24:	4a24      	ldr	r2, [pc, #144]	; (8002eb8 <HAL_RTC_SetDate+0x130>)
 8002e26:	4022      	ands	r2, r4
 8002e28:	605a      	str	r2, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e30:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	0692      	lsls	r2, r2, #26
 8002e36:	d522      	bpl.n	8002e7e <HAL_RTC_SetDate+0xf6>
    __HAL_UNLOCK(hrtc);
 8002e38:	2200      	movs	r2, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e3a:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 8002e3c:	2101      	movs	r1, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e3e:	6258      	str	r0, [r3, #36]	; 0x24
    return HAL_OK;
 8002e40:	4610      	mov	r0, r2
    hrtc->State = HAL_RTC_STATE_READY ;
 8002e42:	7769      	strb	r1, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8002e44:	772a      	strb	r2, [r5, #28]
}
 8002e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002e48:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002e4e:	f7fe f8b9 	bl	8000fc4 <HAL_GetTick>
 8002e52:	4606      	mov	r6, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e54:	682b      	ldr	r3, [r5, #0]
 8002e56:	68df      	ldr	r7, [r3, #12]
 8002e58:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8002e5c:	d1e2      	bne.n	8002e24 <HAL_RTC_SetDate+0x9c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e5e:	f7fe f8b1 	bl	8000fc4 <HAL_GetTick>
 8002e62:	1b80      	subs	r0, r0, r6
 8002e64:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002e68:	d9f4      	bls.n	8002e54 <HAL_RTC_SetDate+0xcc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e6a:	682a      	ldr	r2, [r5, #0]
 8002e6c:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e6e:	2304      	movs	r3, #4
    return HAL_ERROR;
 8002e70:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e72:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_UNLOCK(hrtc);
 8002e74:	772f      	strb	r7, [r5, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e76:	776b      	strb	r3, [r5, #29]
}
 8002e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 __HAL_LOCK(hrtc);
 8002e7a:	2002      	movs	r0, #2
}
 8002e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e84:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002e86:	f7fe f89d 	bl	8000fc4 <HAL_GetTick>
 8002e8a:	4606      	mov	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002e8c:	682b      	ldr	r3, [r5, #0]
 8002e8e:	68dc      	ldr	r4, [r3, #12]
 8002e90:	f014 0420 	ands.w	r4, r4, #32
 8002e94:	d1d0      	bne.n	8002e38 <HAL_RTC_SetDate+0xb0>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e96:	f7fe f895 	bl	8000fc4 <HAL_GetTick>
 8002e9a:	1b80      	subs	r0, r0, r6
 8002e9c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002ea0:	d9f4      	bls.n	8002e8c <HAL_RTC_SetDate+0x104>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ea2:	682a      	ldr	r2, [r5, #0]
 8002ea4:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ea6:	2304      	movs	r3, #4
        return HAL_ERROR;
 8002ea8:	2001      	movs	r0, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eaa:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8002eac:	772c      	strb	r4, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002eae:	776b      	strb	r3, [r5, #29]
}
 8002eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while(Value >= 10)
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	e7a3      	b.n	8002dfe <HAL_RTC_SetDate+0x76>
 8002eb6:	bf00      	nop
 8002eb8:	00ffff3f 	.word	0x00ffff3f

08002ebc <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002ebc:	6800      	ldr	r0, [r0, #0]
 8002ebe:	4b16      	ldr	r3, [pc, #88]	; (8002f18 <HAL_RTC_GetDate+0x5c>)
 8002ec0:	6840      	ldr	r0, [r0, #4]
 8002ec2:	4003      	ands	r3, r0
{
 8002ec4:	b4f0      	push	{r4, r5, r6, r7}
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8002ec6:	f3c3 2407 	ubfx	r4, r3, #8, #8
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8002eca:	f3c3 3642 	ubfx	r6, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8002ece:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8002ed0:	f004 051f 	and.w	r5, r4, #31
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002ed4:	b2db      	uxtb	r3, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8002ed6:	700e      	strb	r6, [r1, #0]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8002ed8:	704d      	strb	r5, [r1, #1]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8002eda:	70c8      	strb	r0, [r1, #3]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002edc:	708b      	strb	r3, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 8002ede:	b9ba      	cbnz	r2, 8002f10 <HAL_RTC_GetDate+0x54>
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002ee0:	092d      	lsrs	r5, r5, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8002ee2:	f003 060f 	and.w	r6, r3, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002ee6:	0902      	lsrs	r2, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8002ee8:	f004 040f 	and.w	r4, r4, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002eec:	00af      	lsls	r7, r5, #2
  return (tmp + (Value & (uint8_t)0x0F));
 8002eee:	f000 000f 	and.w	r0, r0, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	443d      	add	r5, r7
 8002ef6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002efa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8002efe:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8002f02:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8002f06:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002f0a:	704c      	strb	r4, [r1, #1]
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002f0c:	70c8      	strb	r0, [r1, #3]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002f0e:	708b      	strb	r3, [r1, #2]
}
 8002f10:	2000      	movs	r0, #0
 8002f12:	bcf0      	pop	{r4, r5, r6, r7}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	00ffff3f 	.word	0x00ffff3f

08002f1c <Init_LCD_GPIO>:
//=============================================================================
void Init_LCD_GPIO(void)
{
	  GPIO_InitTypeDef GPIO_InitStruct;

	  __HAL_RCC_CRC_CLK_ENABLE();
 8002f1c:	4b37      	ldr	r3, [pc, #220]	; (8002ffc <Init_LCD_GPIO+0xe0>)
	  __HAL_RCC_GPIOE_CLK_ENABLE();
	  __HAL_RCC_GPIOF_CLK_ENABLE();
	  __HAL_RCC_GPIOG_CLK_ENABLE();


	  HAL_GPIO_WritePin(GDISP_CMD_PORT, GCMD, GPIO_PIN_RESET);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f44f 4178 	mov.w	r1, #63488	; 0xf800
{
 8002f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  __HAL_RCC_CRC_CLK_ENABLE();
 8002f28:	6b1d      	ldr	r5, [r3, #48]	; 0x30
{
 8002f2a:	b08b      	sub	sp, #44	; 0x2c
	  HAL_GPIO_WritePin(GDISP_CMD_PORT, GCMD, GPIO_PIN_RESET);
 8002f2c:	4c34      	ldr	r4, [pc, #208]	; (8003000 <Init_LCD_GPIO+0xe4>)
	  HAL_GPIO_WritePin(GDISP_DATA_LO_PORT, GDATA_LO, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GDISP_DATA_HI_PORT, GDATA_HI, GPIO_PIN_RESET);

	  GPIO_InitStruct.Pin = GCMD;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2e:	4616      	mov	r6, r2
	  __HAL_RCC_CRC_CLK_ENABLE();
 8002f30:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
	  HAL_GPIO_WritePin(GDISP_DATA_LO_PORT, GDATA_LO, GPIO_PIN_RESET);
 8002f34:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8003004 <Init_LCD_GPIO+0xe8>
	  HAL_GPIO_WritePin(GDISP_CMD_PORT, GCMD, GPIO_PIN_RESET);
 8002f38:	4620      	mov	r0, r4
	  HAL_GPIO_WritePin(GDISP_DATA_HI_PORT, GDATA_HI, GPIO_PIN_RESET);
 8002f3a:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8003008 <Init_LCD_GPIO+0xec>
	  __HAL_RCC_CRC_CLK_ENABLE();
 8002f3e:	631d      	str	r5, [r3, #48]	; 0x30
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f40:	2701      	movs	r7, #1
	  __HAL_RCC_CRC_CLK_ENABLE();
 8002f42:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8002f44:	f405 5580 	and.w	r5, r5, #4096	; 0x1000
 8002f48:	9501      	str	r5, [sp, #4]
 8002f4a:	9d01      	ldr	r5, [sp, #4]
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f4c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8002f4e:	f045 0510 	orr.w	r5, r5, #16
 8002f52:	631d      	str	r5, [r3, #48]	; 0x30
 8002f54:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8002f56:	f005 0510 	and.w	r5, r5, #16
 8002f5a:	9502      	str	r5, [sp, #8]
 8002f5c:	9d02      	ldr	r5, [sp, #8]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f5e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8002f60:	f045 0520 	orr.w	r5, r5, #32
 8002f64:	631d      	str	r5, [r3, #48]	; 0x30
 8002f66:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8002f68:	f005 0520 	and.w	r5, r5, #32
 8002f6c:	9503      	str	r5, [sp, #12]
 8002f6e:	9d03      	ldr	r5, [sp, #12]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f70:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8002f72:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8002f76:	631d      	str	r5, [r3, #48]	; 0x30
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f78:	2503      	movs	r5, #3
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f80:	9304      	str	r3, [sp, #16]
 8002f82:	9b04      	ldr	r3, [sp, #16]
	  HAL_GPIO_WritePin(GDISP_CMD_PORT, GCMD, GPIO_PIN_RESET);
 8002f84:	f7fe fddc 	bl	8001b40 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GDISP_DATA_LO_PORT, GDATA_LO, GPIO_PIN_RESET);
 8002f88:	4648      	mov	r0, r9
 8002f8a:	4632      	mov	r2, r6
 8002f8c:	21ff      	movs	r1, #255	; 0xff
 8002f8e:	f7fe fdd7 	bl	8001b40 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GDISP_DATA_HI_PORT, GDATA_HI, GPIO_PIN_RESET);
 8002f92:	4632      	mov	r2, r6
 8002f94:	4640      	mov	r0, r8
 8002f96:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002f9a:	f7fe fdd1 	bl	8001b40 <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Pin = GCMD;
 8002f9e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
	  HAL_GPIO_Init(GDISP_CMD_PORT, &GPIO_InitStruct);
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	a905      	add	r1, sp, #20
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa6:	e9cd 3705 	strd	r3, r7, [sp, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002faa:	e9cd 6507 	strd	r6, r5, [sp, #28]
	  HAL_GPIO_Init(GDISP_CMD_PORT, &GPIO_InitStruct);
 8002fae:	f7fe fcc1 	bl	8001934 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GDATA_LO;
 8002fb2:	23ff      	movs	r3, #255	; 0xff
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(GDISP_DATA_LO_PORT, &GPIO_InitStruct);
 8002fb4:	4648      	mov	r0, r9
 8002fb6:	a905      	add	r1, sp, #20
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb8:	9508      	str	r5, [sp, #32]
	  GPIO_InitStruct.Pin = GDATA_LO;
 8002fba:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbc:	e9cd 7606 	strd	r7, r6, [sp, #24]
	  HAL_GPIO_Init(GDISP_DATA_LO_PORT, &GPIO_InitStruct);
 8002fc0:	f7fe fcb8 	bl	8001934 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GDATA_HI;
 8002fc4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(GDISP_DATA_HI_PORT, &GPIO_InitStruct);
 8002fc8:	a905      	add	r1, sp, #20
 8002fca:	4640      	mov	r0, r8
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fcc:	9508      	str	r5, [sp, #32]

	  SET_CS; SET_WR; SET_RD; SET_DC; SET_RST;
 8002fce:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	  GPIO_InitStruct.Pin = GDATA_HI;
 8002fd2:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	e9cd 7606 	strd	r7, r6, [sp, #24]
	  HAL_GPIO_Init(GDISP_DATA_HI_PORT, &GPIO_InitStruct);
 8002fd8:	f7fe fcac 	bl	8001934 <HAL_GPIO_Init>
	  SET_CS; SET_WR; SET_RD; SET_DC; SET_RST;
 8002fdc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002fe0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fe4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002fe8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fec:	61a5      	str	r5, [r4, #24]
 8002fee:	61a0      	str	r0, [r4, #24]
 8002ff0:	61a1      	str	r1, [r4, #24]
 8002ff2:	61a2      	str	r2, [r4, #24]
 8002ff4:	61a3      	str	r3, [r4, #24]
}
 8002ff6:	b00b      	add	sp, #44	; 0x2c
 8002ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40021400 	.word	0x40021400
 8003004:	40021800 	.word	0x40021800
 8003008:	40021000 	.word	0x40021000

0800300c <SSD1963_WriteCommand>:
//=============================================================================
// Write command to display
//=============================================================================
void SSD1963_WriteCommand(uint16_t Data)
{
	uint16_t _Data=~Data;
 800300c:	43c3      	mvns	r3, r0

	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800300e:	4911      	ldr	r1, [pc, #68]	; (8003054 <SSD1963_WriteCommand+0x48>)

	CLR_CS;
 8003010:	4a11      	ldr	r2, [pc, #68]	; (8003058 <SSD1963_WriteCommand+0x4c>)
	CLR_DC;
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003012:	041b      	lsls	r3, r3, #16
{
 8003014:	b470      	push	{r4, r5, r6}
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003016:	f04f 457f 	mov.w	r5, #4278190080	; 0xff000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800301a:	b2c4      	uxtb	r4, r0
 800301c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003020:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003024:	618d      	str	r5, [r1, #24]
	CLR_CS;
 8003026:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800302a:	4323      	orrs	r3, r4
 800302c:	4c0b      	ldr	r4, [pc, #44]	; (800305c <SSD1963_WriteCommand+0x50>)
	CLR_CS;
 800302e:	6195      	str	r5, [r2, #24]
	CLR_DC;
 8003030:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8003034:	6195      	str	r5, [r2, #24]
	writeStrobe;
 8003036:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800303a:	61a3      	str	r3, [r4, #24]
	writeStrobe;
 800303c:	f44f 6400 	mov.w	r4, #2048	; 0x800
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003040:	694e      	ldr	r6, [r1, #20]
	SET_CS;
 8003042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003046:	4330      	orrs	r0, r6
 8003048:	6148      	str	r0, [r1, #20]
	writeStrobe;
 800304a:	6195      	str	r5, [r2, #24]
 800304c:	6194      	str	r4, [r2, #24]
	SET_CS;
 800304e:	6193      	str	r3, [r2, #24]
}
 8003050:	bc70      	pop	{r4, r5, r6}
 8003052:	4770      	bx	lr
 8003054:	40021000 	.word	0x40021000
 8003058:	40021400 	.word	0x40021400
 800305c:	40021800 	.word	0x40021800

08003060 <SSD1963_WriteData>:
// Write data to display
//=============================================================================

void SSD1963_WriteData(uint16_t Data)
{
	uint16_t _Data=~Data;
 8003060:	43c3      	mvns	r3, r0

	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003062:	4911      	ldr	r1, [pc, #68]	; (80030a8 <SSD1963_WriteData+0x48>)

	CLR_CS;
 8003064:	4a11      	ldr	r2, [pc, #68]	; (80030ac <SSD1963_WriteData+0x4c>)
	SET_DC;
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003066:	041b      	lsls	r3, r3, #16
{
 8003068:	b470      	push	{r4, r5, r6}
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800306a:	f04f 457f 	mov.w	r5, #4278190080	; 0xff000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800306e:	b2c4      	uxtb	r4, r0
 8003070:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003074:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003078:	618d      	str	r5, [r1, #24]
	CLR_CS;
 800307a:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800307e:	4323      	orrs	r3, r4
 8003080:	4c0b      	ldr	r4, [pc, #44]	; (80030b0 <SSD1963_WriteData+0x50>)
	CLR_CS;
 8003082:	6195      	str	r5, [r2, #24]
	SET_DC;
 8003084:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8003088:	6195      	str	r5, [r2, #24]
	writeStrobe;
 800308a:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800308e:	61a3      	str	r3, [r4, #24]
	writeStrobe;
 8003090:	f44f 6400 	mov.w	r4, #2048	; 0x800
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003094:	694e      	ldr	r6, [r1, #20]
	SET_CS;
 8003096:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800309a:	4330      	orrs	r0, r6
 800309c:	6148      	str	r0, [r1, #20]
	writeStrobe;
 800309e:	6195      	str	r5, [r2, #24]
 80030a0:	6194      	str	r4, [r2, #24]
	SET_CS;
 80030a2:	6193      	str	r3, [r2, #24]

}
 80030a4:	bc70      	pop	{r4, r5, r6}
 80030a6:	4770      	bx	lr
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40021400 	.word	0x40021400
 80030b0:	40021800 	.word	0x40021800

080030b4 <SSD1963_WriteDataMultiple>:
//=============================================================================
// Write multiple data to display
//=============================================================================
void SSD1963_WriteDataMultiple(uint16_t * Data, int NumItems)
{
  while (NumItems)
 80030b4:	b399      	cbz	r1, 800311e <SSD1963_WriteDataMultiple+0x6a>
 80030b6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	writeStrobe;
 80030ba:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
{
 80030be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80030c2:	4d17      	ldr	r5, [pc, #92]	; (8003120 <SSD1963_WriteDataMultiple+0x6c>)
 80030c4:	f04f 4a7f 	mov.w	sl, #4278190080	; 0xff000000
	CLR_CS;
 80030c8:	4c16      	ldr	r4, [pc, #88]	; (8003124 <SSD1963_WriteDataMultiple+0x70>)
 80030ca:	f04f 5900 	mov.w	r9, #536870912	; 0x20000000
	SET_DC;
 80030ce:	f44f 4800 	mov.w	r8, #32768	; 0x8000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80030d2:	f8df e054 	ldr.w	lr, [pc, #84]	; 8003128 <SSD1963_WriteDataMultiple+0x74>
	writeStrobe;
 80030d6:	f44f 6700 	mov.w	r7, #2048	; 0x800
	SET_CS;
 80030da:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  {
	  SSD1963_WriteData(*Data);
 80030de:	f830 3b02 	ldrh.w	r3, [r0], #2
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80030e2:	f8c5 a018 	str.w	sl, [r5, #24]
	uint16_t _Data=~Data;
 80030e6:	43da      	mvns	r2, r3
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80030e8:	fa5f fb83 	uxtb.w	fp, r3
	CLR_CS;
 80030ec:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80030f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80030f4:	0412      	lsls	r2, r2, #16
	SET_DC;
 80030f6:	f8c4 8018 	str.w	r8, [r4, #24]
  while (NumItems)
 80030fa:	4288      	cmp	r0, r1
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80030fc:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8003100:	ea42 020b 	orr.w	r2, r2, fp
 8003104:	f8ce 2018 	str.w	r2, [lr, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003108:	696a      	ldr	r2, [r5, #20]
 800310a:	ea43 0302 	orr.w	r3, r3, r2
 800310e:	616b      	str	r3, [r5, #20]
	writeStrobe;
 8003110:	f8c4 c018 	str.w	ip, [r4, #24]
 8003114:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003116:	61a6      	str	r6, [r4, #24]
  while (NumItems)
 8003118:	d1e1      	bne.n	80030de <SSD1963_WriteDataMultiple+0x2a>
	  Data++;
	  NumItems--;
  }
}
 800311a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800311e:	4770      	bx	lr
 8003120:	40021000 	.word	0x40021000
 8003124:	40021400 	.word	0x40021400
 8003128:	40021800 	.word	0x40021800

0800312c <SSD1963_Init>:
//=============================================================================
// Display initialization
//=============================================================================

void SSD1963_Init (void)
{
 800312c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	CLR_RST;  // reset
 8003130:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003134:	4cbd      	ldr	r4, [pc, #756]	; (800342c <SSD1963_Init+0x300>)
{
 8003136:	b083      	sub	sp, #12
	HAL_Delay(500);
 8003138:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	CLR_RST;  // reset
 800313c:	61a3      	str	r3, [r4, #24]
	SET_RST;
 800313e:	f44f 4680 	mov.w	r6, #16384	; 0x4000
	HAL_Delay(500);
 8003142:	f7fd ff45 	bl	8000fd0 <HAL_Delay>
	CLR_CS;
 8003146:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	writeStrobe;
 800314a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
	HAL_Delay(100);
 800314e:	2064      	movs	r0, #100	; 0x64
	CLR_CS;
 8003150:	9201      	str	r2, [sp, #4]
	CLR_DC;
 8003152:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
	writeStrobe;
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	f44f 6700 	mov.w	r7, #2048	; 0x800
	SET_RST;
 800315c:	61a6      	str	r6, [r4, #24]
	SET_CS;
 800315e:	f44f 5600 	mov.w	r6, #8192	; 0x2000
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003162:	4db3      	ldr	r5, [pc, #716]	; (8003430 <SSD1963_Init+0x304>)
	HAL_Delay(100);
 8003164:	f7fd ff34 	bl	8000fd0 <HAL_Delay>
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003168:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800316c:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 8003444 <SSD1963_Init+0x318>
	CLR_CS;
 8003170:	9a01      	ldr	r2, [sp, #4]

	SSD1963_WriteCommand(SSD1963_SOFT_RESET);
	HAL_Delay(10);
 8003172:	200a      	movs	r0, #10
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003174:	61ab      	str	r3, [r5, #24]
	SET_DC;
 8003176:	f44f 4900 	mov.w	r9, #32768	; 0x8000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800317a:	4bae      	ldr	r3, [pc, #696]	; (8003434 <SSD1963_Init+0x308>)
	CLR_CS;
 800317c:	61a2      	str	r2, [r4, #24]
 800317e:	9201      	str	r2, [sp, #4]
	CLR_DC;
 8003180:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003184:	f8c8 3018 	str.w	r3, [r8, #24]
	writeStrobe;
 8003188:	9b00      	ldr	r3, [sp, #0]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800318a:	f8d5 c014 	ldr.w	ip, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800318e:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 8003448 <SSD1963_Init+0x31c>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003192:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 8003196:	61a3      	str	r3, [r4, #24]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800319c:	61a6      	str	r6, [r4, #24]
	HAL_Delay(10);
 800319e:	f7fd ff17 	bl	8000fd0 <HAL_Delay>
	CLR_CS;
 80031a2:	9a01      	ldr	r2, [sp, #4]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80031a4:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 800344c <SSD1963_Init+0x320>
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80031a8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80031ac:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80031b0:	f8df c29c 	ldr.w	ip, [pc, #668]	; 8003450 <SSD1963_Init+0x324>
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80031b4:	61ab      	str	r3, [r5, #24]
	SSD1963_WriteData(4);  	// dummy

	SSD1963_WriteCommand(SSD1963_SET_PLL);
	SSD1963_WriteData(0x0001);

	HAL_Delay(100);
 80031b6:	2064      	movs	r0, #100	; 0x64
	CLR_CS;
 80031b8:	61a2      	str	r2, [r4, #24]
	writeStrobe;
 80031ba:	9b00      	ldr	r3, [sp, #0]
	CLR_DC;
 80031bc:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80031c0:	f8c8 e018 	str.w	lr, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80031c4:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80031c8:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 80031cc:	61a3      	str	r3, [r4, #24]
 80031ce:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80031d0:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80031d2:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80031d4:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80031d6:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80031da:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80031de:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80031e2:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 80031e6:	61a3      	str	r3, [r4, #24]
 80031e8:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80031ea:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80031ec:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80031ee:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80031f0:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80031f4:	f8c8 b018 	str.w	fp, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80031f8:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80031fc:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 8003200:	61a3      	str	r3, [r4, #24]
 8003202:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003204:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003206:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003208:	498b      	ldr	r1, [pc, #556]	; (8003438 <SSD1963_Init+0x30c>)
	CLR_CS;
 800320a:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800320c:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003210:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003214:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003218:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800321c:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 8003220:	61a3      	str	r3, [r4, #24]
 8003222:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003224:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003226:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003228:	4984      	ldr	r1, [pc, #528]	; (800343c <SSD1963_Init+0x310>)
	CLR_CS;
 800322a:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 800322c:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003230:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003234:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003238:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800323c:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 8003240:	61a3      	str	r3, [r4, #24]
 8003242:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003244:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003246:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8003248:	61a2      	str	r2, [r4, #24]
 800324a:	9201      	str	r2, [sp, #4]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800324c:	4a79      	ldr	r2, [pc, #484]	; (8003434 <SSD1963_Init+0x308>)
	SET_DC;
 800324e:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003252:	f8c8 2018 	str.w	r2, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003256:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800325a:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 800325e:	61a3      	str	r3, [r4, #24]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003264:	61a6      	str	r6, [r4, #24]
	HAL_Delay(100);
 8003266:	f7fd feb3 	bl	8000fd0 <HAL_Delay>
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800326a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
	CLR_CS;
 800326e:	9a01      	ldr	r2, [sp, #4]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003270:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003274:	61ab      	str	r3, [r5, #24]
	SSD1963_WriteData(0x0000);
	SSD1963_WriteData(0x0000);

	SSD1963_WriteCommand(SSD1963_SET_DISPLAY_ON);//SET display on

	HAL_Delay(10);
 8003276:	200a      	movs	r0, #10
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003278:	4b70      	ldr	r3, [pc, #448]	; (800343c <SSD1963_Init+0x310>)
	CLR_CS;
 800327a:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 800327c:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003280:	f8c8 3018 	str.w	r3, [r8, #24]
	writeStrobe;
 8003284:	9b00      	ldr	r3, [sp, #0]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003286:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800328a:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 800328e:	61a3      	str	r3, [r4, #24]
 8003290:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003292:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003294:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003296:	496a      	ldr	r1, [pc, #424]	; (8003440 <SSD1963_Init+0x314>)
	CLR_CS;
 8003298:	61a2      	str	r2, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800329a:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8003454 <SSD1963_Init+0x328>
	SET_DC;
 800329e:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80032a2:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80032a6:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80032aa:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80032ae:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 80032b2:	61a3      	str	r3, [r4, #24]
 80032b4:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80032b6:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80032b8:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80032ba:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 80032bc:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80032c0:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80032c4:	f8df c190 	ldr.w	ip, [pc, #400]	; 8003458 <SSD1963_Init+0x32c>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80032c8:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80032cc:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 80032d0:	61a3      	str	r3, [r4, #24]
 80032d2:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80032d4:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80032d6:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80032d8:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80032da:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80032de:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80032e2:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80032e6:	f8c5 c014 	str.w	ip, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80032ea:	f44f 0c7f 	mov.w	ip, #16711680	; 0xff0000
	writeStrobe;
 80032ee:	61a3      	str	r3, [r4, #24]
 80032f0:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80032f2:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80032f4:	61a9      	str	r1, [r5, #24]
 80032f6:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 80032fa:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80032fc:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003300:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003304:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8003308:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 800330c:	61a3      	str	r3, [r4, #24]
 800330e:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003310:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003312:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003314:	4947      	ldr	r1, [pc, #284]	; (8003434 <SSD1963_Init+0x308>)
	CLR_CS;
 8003316:	61a2      	str	r2, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003318:	f8df c140 	ldr.w	ip, [pc, #320]	; 800345c <SSD1963_Init+0x330>
	SET_DC;
 800331c:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003320:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003324:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003328:	f8d5 e014 	ldr.w	lr, [r5, #20]
 800332c:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8003330:	61a3      	str	r3, [r4, #24]
 8003332:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003334:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003336:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8003338:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800333a:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800333e:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003342:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8003346:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 800334a:	61a3      	str	r3, [r4, #24]
 800334c:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800334e:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003350:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003352:	4938      	ldr	r1, [pc, #224]	; (8003434 <SSD1963_Init+0x308>)
	CLR_CS;
 8003354:	61a2      	str	r2, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003356:	f8df c108 	ldr.w	ip, [pc, #264]	; 8003460 <SSD1963_Init+0x334>
	SET_DC;
 800335a:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800335e:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003362:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003366:	f8d5 e014 	ldr.w	lr, [r5, #20]
 800336a:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 800336e:	61a3      	str	r3, [r4, #24]
 8003370:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003372:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003374:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8003376:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8003378:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800337c:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003380:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8003384:	f8c5 c014 	str.w	ip, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003388:	f44f 0c7f 	mov.w	ip, #16711680	; 0xff0000
	writeStrobe;
 800338c:	61a3      	str	r3, [r4, #24]
 800338e:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003390:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003392:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003394:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 8003398:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800339a:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800339e:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80033a2:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8003464 <SSD1963_Init+0x338>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80033a6:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80033aa:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 80033ae:	61a3      	str	r3, [r4, #24]
 80033b0:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80033b2:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80033b4:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80033b6:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 80033b8:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80033bc:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80033c0:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80033c4:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 80033c8:	61a3      	str	r3, [r4, #24]
 80033ca:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80033cc:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80033ce:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80033d0:	491b      	ldr	r1, [pc, #108]	; (8003440 <SSD1963_Init+0x314>)
	CLR_CS;
 80033d2:	61a2      	str	r2, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80033d4:	f8df c090 	ldr.w	ip, [pc, #144]	; 8003468 <SSD1963_Init+0x33c>
	SET_DC;
 80033d8:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80033dc:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80033e0:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80033e4:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80033e8:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 80033ec:	61a3      	str	r3, [r4, #24]
 80033ee:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80033f0:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80033f2:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80033f4:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 80033f6:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80033fa:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80033fe:	f8d5 e014 	ldr.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003402:	f8df c068 	ldr.w	ip, [pc, #104]	; 800346c <SSD1963_Init+0x340>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003406:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 800340a:	61a3      	str	r3, [r4, #24]
 800340c:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800340e:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003410:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003412:	4908      	ldr	r1, [pc, #32]	; (8003434 <SSD1963_Init+0x308>)
	CLR_CS;
 8003414:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8003416:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800341a:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800341e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003422:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8003426:	f8c5 e014 	str.w	lr, [r5, #20]
 800342a:	e021      	b.n	8003470 <SSD1963_Init+0x344>
 800342c:	40021400 	.word	0x40021400
 8003430:	40021000 	.word	0x40021000
 8003434:	00fe0001 	.word	0x00fe0001
 8003438:	00fb0004 	.word	0x00fb0004
 800343c:	001f00e0 	.word	0x001f00e0
 8003440:	00fc0003 	.word	0x00fc0003
 8003444:	40021800 	.word	0x40021800
 8003448:	00fd0002 	.word	0x00fd0002
 800344c:	001d00e2 	.word	0x001d00e2
 8003450:	00e2001d 	.word	0x00e2001d
 8003454:	004f00b0 	.word	0x004f00b0
 8003458:	00df0020 	.word	0x00df0020
 800345c:	002000df 	.word	0x002000df
 8003460:	00f0000f 	.word	0x00f0000f
 8003464:	000f00f0 	.word	0x000f00f0
 8003468:	001900e6 	.word	0x001900e6
 800346c:	008a0075 	.word	0x008a0075
	writeStrobe;
 8003470:	61a3      	str	r3, [r4, #24]
 8003472:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003474:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003476:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8003478:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800347a:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800347e:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003482:	f8d5 e014 	ldr.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003486:	f8df c344 	ldr.w	ip, [pc, #836]	; 80037cc <SSD1963_Init+0x6a0>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800348a:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 800348e:	61a3      	str	r3, [r4, #24]
 8003490:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003492:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003494:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8003496:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8003498:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800349c:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80034a0:	f8df c32c 	ldr.w	ip, [pc, #812]	; 80037d0 <SSD1963_Init+0x6a4>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80034a4:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80034a8:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 80034ac:	61a3      	str	r3, [r4, #24]
 80034ae:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80034b0:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80034b2:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80034b4:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 80034b6:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80034ba:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80034be:	f8d5 e014 	ldr.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80034c2:	f8df c310 	ldr.w	ip, [pc, #784]	; 80037d4 <SSD1963_Init+0x6a8>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80034c6:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 80034ca:	61a3      	str	r3, [r4, #24]
 80034cc:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80034ce:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80034d0:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80034d2:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80034d4:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80034d8:	f8c8 b018 	str.w	fp, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80034dc:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80034e0:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 80034e4:	61a3      	str	r3, [r4, #24]
 80034e6:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80034e8:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80034ea:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80034ec:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80034ee:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80034f2:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80034f6:	f8d5 e014 	ldr.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80034fa:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 80037d8 <SSD1963_Init+0x6ac>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80034fe:	f8c5 e014 	str.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003502:	f44f 0e7f 	mov.w	lr, #16711680	; 0xff0000
	writeStrobe;
 8003506:	61a3      	str	r3, [r4, #24]
 8003508:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800350a:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800350c:	61a9      	str	r1, [r5, #24]
 800350e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 8003512:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8003514:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003518:	f8c8 e018 	str.w	lr, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800351c:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8003520:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8003524:	61a3      	str	r3, [r4, #24]
 8003526:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003528:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800352a:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 800352c:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800352e:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003532:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003536:	f8d5 e014 	ldr.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800353a:	f8df c2a0 	ldr.w	ip, [pc, #672]	; 80037dc <SSD1963_Init+0x6b0>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800353e:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8003542:	61a3      	str	r3, [r4, #24]
 8003544:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003546:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003548:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 800354a:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800354c:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003550:	f8c8 b018 	str.w	fp, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003554:	f8d5 b014 	ldr.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003558:	f8df e284 	ldr.w	lr, [pc, #644]	; 80037e0 <SSD1963_Init+0x6b4>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800355c:	f8c5 b014 	str.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003560:	f44f 0b7f 	mov.w	fp, #16711680	; 0xff0000
	writeStrobe;
 8003564:	61a3      	str	r3, [r4, #24]
 8003566:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003568:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800356a:	61a9      	str	r1, [r5, #24]
 800356c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 8003570:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8003572:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003576:	f8c8 b018 	str.w	fp, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800357a:	f8d5 b014 	ldr.w	fp, [r5, #20]
 800357e:	f8c5 b014 	str.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003582:	f44f 0b7f 	mov.w	fp, #16711680	; 0xff0000
	writeStrobe;
 8003586:	61a3      	str	r3, [r4, #24]
 8003588:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800358a:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800358c:	61a9      	str	r1, [r5, #24]
 800358e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 8003592:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8003594:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003598:	f8c8 b018 	str.w	fp, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800359c:	f8d5 b014 	ldr.w	fp, [r5, #20]
 80035a0:	f8c5 b014 	str.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80035a4:	f44f 0b7f 	mov.w	fp, #16711680	; 0xff0000
	writeStrobe;
 80035a8:	61a3      	str	r3, [r4, #24]
 80035aa:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80035ac:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80035ae:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80035b0:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 80035b4:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80035b6:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80035ba:	f8c8 b018 	str.w	fp, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80035be:	f8d5 b014 	ldr.w	fp, [r5, #20]
 80035c2:	f8c5 b014 	str.w	fp, [r5, #20]
	writeStrobe;
 80035c6:	61a3      	str	r3, [r4, #24]
 80035c8:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80035ca:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80035cc:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80035ce:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 80035d0:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80035d4:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80035d8:	f8d5 b014 	ldr.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80035dc:	f8df c204 	ldr.w	ip, [pc, #516]	; 80037e4 <SSD1963_Init+0x6b8>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80035e0:	f8c5 b014 	str.w	fp, [r5, #20]
	writeStrobe;
 80035e4:	61a3      	str	r3, [r4, #24]
 80035e6:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80035e8:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80035ea:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80035ec:	4973      	ldr	r1, [pc, #460]	; (80037bc <SSD1963_Init+0x690>)
	CLR_CS;
 80035ee:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80035f0:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80035f4:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80035f8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80035fc:	f8d5 b014 	ldr.w	fp, [r5, #20]
 8003600:	f8c5 b014 	str.w	fp, [r5, #20]
	writeStrobe;
 8003604:	61a3      	str	r3, [r4, #24]
 8003606:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003608:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800360a:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 800360c:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800360e:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003612:	f8c8 e018 	str.w	lr, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003616:	f8d5 b014 	ldr.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800361a:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 80037e8 <SSD1963_Init+0x6bc>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800361e:	f8c5 b014 	str.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003622:	f44f 0b7f 	mov.w	fp, #16711680	; 0xff0000
	writeStrobe;
 8003626:	61a3      	str	r3, [r4, #24]
 8003628:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800362a:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800362c:	61a9      	str	r1, [r5, #24]
 800362e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 8003632:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8003634:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003638:	f8c8 b018 	str.w	fp, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800363c:	f8d5 b014 	ldr.w	fp, [r5, #20]
 8003640:	f8c5 b014 	str.w	fp, [r5, #20]
	writeStrobe;
 8003644:	61a3      	str	r3, [r4, #24]
 8003646:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003648:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800364a:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 800364c:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800364e:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003652:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003656:	f8d5 b014 	ldr.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800365a:	f8df c190 	ldr.w	ip, [pc, #400]	; 80037ec <SSD1963_Init+0x6c0>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800365e:	f8c5 b014 	str.w	fp, [r5, #20]
	writeStrobe;
 8003662:	61a3      	str	r3, [r4, #24]
 8003664:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003666:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003668:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 800366a:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800366c:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003670:	f8c8 e018 	str.w	lr, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003674:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8003678:	f8c5 e014 	str.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800367c:	f44f 0e7f 	mov.w	lr, #16711680	; 0xff0000
	writeStrobe;
 8003680:	61a3      	str	r3, [r4, #24]
 8003682:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003684:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003686:	61a9      	str	r1, [r5, #24]
 8003688:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 800368c:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800368e:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003692:	f8c8 e018 	str.w	lr, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003696:	f8d5 e014 	ldr.w	lr, [r5, #20]
 800369a:	f8c5 e014 	str.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800369e:	f44f 0e7f 	mov.w	lr, #16711680	; 0xff0000
	writeStrobe;
 80036a2:	61a3      	str	r3, [r4, #24]
 80036a4:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80036a6:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80036a8:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80036aa:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 80036ae:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80036b0:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80036b4:	f8c8 e018 	str.w	lr, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80036b8:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80036bc:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 80036c0:	61a3      	str	r3, [r4, #24]
 80036c2:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80036c4:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80036c6:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80036c8:	61a2      	str	r2, [r4, #24]
 80036ca:	9201      	str	r2, [sp, #4]
	CLR_DC;
 80036cc:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80036d0:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80036d4:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80036d8:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 80036dc:	61a3      	str	r3, [r4, #24]
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80036e2:	61a6      	str	r6, [r4, #24]
	HAL_Delay(10);
 80036e4:	f7fd fc74 	bl	8000fd0 <HAL_Delay>
	CLR_CS;
 80036e8:	9a01      	ldr	r2, [sp, #4]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80036ea:	4835      	ldr	r0, [pc, #212]	; (80037c0 <SSD1963_Init+0x694>)
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80036ec:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80036f0:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80036f4:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80037f0 <SSD1963_Init+0x6c4>
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80036f8:	61ab      	str	r3, [r5, #24]
	CLR_CS;
 80036fa:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 80036fc:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003700:	f8c8 0018 	str.w	r0, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003704:	6968      	ldr	r0, [r5, #20]
	writeStrobe;
 8003706:	9b00      	ldr	r3, [sp, #0]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003708:	6168      	str	r0, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800370a:	482e      	ldr	r0, [pc, #184]	; (80037c4 <SSD1963_Init+0x698>)
	writeStrobe;
 800370c:	61a3      	str	r3, [r4, #24]
 800370e:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003710:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003712:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8003714:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8003716:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800371a:	f8c8 0018 	str.w	r0, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800371e:	f8d5 e014 	ldr.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003722:	4829      	ldr	r0, [pc, #164]	; (80037c8 <SSD1963_Init+0x69c>)
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003724:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8003728:	61a3      	str	r3, [r4, #24]
 800372a:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800372c:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800372e:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8003730:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8003732:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003736:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800373a:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800373e:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 8003742:	61a3      	str	r3, [r4, #24]
 8003744:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003746:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003748:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800374a:	491c      	ldr	r1, [pc, #112]	; (80037bc <SSD1963_Init+0x690>)
	CLR_CS;
 800374c:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800374e:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003752:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003756:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800375a:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800375e:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 8003762:	61a3      	str	r3, [r4, #24]
 8003764:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8003766:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8003768:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 800376a:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800376c:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003770:	f8c8 0018 	str.w	r0, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003774:	6968      	ldr	r0, [r5, #20]
 8003776:	6168      	str	r0, [r5, #20]
	writeStrobe;
 8003778:	61a3      	str	r3, [r4, #24]
 800377a:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800377c:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800377e:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8003780:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
	CLR_CS;
 8003784:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8003786:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800378a:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800378e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8003792:	6968      	ldr	r0, [r5, #20]
 8003794:	6168      	str	r0, [r5, #20]
	writeStrobe;
 8003796:	61a3      	str	r3, [r4, #24]
 8003798:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800379a:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800379c:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 800379e:	61a2      	str	r2, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80037a0:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
	SET_DC;
 80037a4:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80037a8:	f8c8 2018 	str.w	r2, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80037ac:	696a      	ldr	r2, [r5, #20]
 80037ae:	616a      	str	r2, [r5, #20]
	writeStrobe;
 80037b0:	61a3      	str	r3, [r4, #24]
 80037b2:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80037b4:	61a6      	str	r6, [r4, #24]
	SSD1963_WriteData(0x0040); 					// brightness level 0x00 - 0xFF
	SSD1963_WriteData(0x0000); 					// minimum brightness level =  0x00 - 0xFF
	SSD1963_WriteData(0x0000);					// brightness prescalar 0x0 - 0xF


}
 80037b6:	b003      	add	sp, #12
 80037b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037bc:	00fe0001 	.word	0x00fe0001
 80037c0:	004100be 	.word	0x004100be
 80037c4:	00fb0004 	.word	0x00fb0004
 80037c8:	00bf0040 	.word	0x00bf0040
 80037cc:	001200ed 	.word	0x001200ed
 80037d0:	004b00b4 	.word	0x004b00b4
 80037d4:	00eb0014 	.word	0x00eb0014
 80037d8:	00d3002c 	.word	0x00d3002c
 80037dc:	004900b6 	.word	0x004900b6
 80037e0:	00e1001e 	.word	0x00e1001e
 80037e4:	00f3000c 	.word	0x00f3000c
 80037e8:	00f90006 	.word	0x00f90006
 80037ec:	00d60029 	.word	0x00d60029
 80037f0:	003f00c0 	.word	0x003f00c0

080037f4 <Init_TOUCH_GPIO>:

I2C_HandleTypeDef hi2c;


void Init_TOUCH_GPIO(I2C_HandleTypeDef i2c_handle)
{
 80037f4:	b084      	sub	sp, #16
 80037f6:	b508      	push	{r3, lr}
 80037f8:	f10d 0c08 	add.w	ip, sp, #8
 80037fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c=i2c_handle;
 8003800:	224c      	movs	r2, #76	; 0x4c
 8003802:	4661      	mov	r1, ip
 8003804:	4803      	ldr	r0, [pc, #12]	; (8003814 <Init_TOUCH_GPIO+0x20>)
 8003806:	f00a f98b 	bl	800db20 <memcpy>
}
 800380a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800380e:	b004      	add	sp, #16
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	200192cc 	.word	0x200192cc

08003818 <STMPE610_Init>:

	return (((uint16_t)rxbuf[0]) << 8) | rxbuf[1];
}

void STMPE610_Init(void)
{
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	b084      	sub	sp, #16
	txbuf[0]=reg;
 800381c:	f240 2303 	movw	r3, #515	; 0x203
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8003820:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8003824:	4d81      	ldr	r5, [pc, #516]	; (8003a2c <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8003826:	ac04      	add	r4, sp, #16
 8003828:	f824 3d04 	strh.w	r3, [r4, #-4]!
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 800382c:	9600      	str	r6, [sp, #0]
 800382e:	2302      	movs	r3, #2
 8003830:	4622      	mov	r2, r4
 8003832:	2188      	movs	r1, #136	; 0x88
 8003834:	4628      	mov	r0, r5
 8003836:	f7fe fa8d 	bl	8001d54 <HAL_I2C_Master_Transmit>
 800383a:	2800      	cmp	r0, #0
 800383c:	d1f6      	bne.n	800382c <STMPE610_Init+0x14>
	STMPE610_Write(STMPE610_REG_SYS_CTRL1, 0x02);		// Software chip reset
	HAL_Delay(10);
 800383e:	200a      	movs	r0, #10
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8003840:	f44f 5640 	mov.w	r6, #12288	; 0x3000
	HAL_Delay(10);
 8003844:	f7fd fbc4 	bl	8000fd0 <HAL_Delay>
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8003848:	4d78      	ldr	r5, [pc, #480]	; (8003a2c <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 800384a:	f240 4304 	movw	r3, #1028	; 0x404
 800384e:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8003852:	9600      	str	r6, [sp, #0]
 8003854:	2302      	movs	r3, #2
 8003856:	4622      	mov	r2, r4
 8003858:	2188      	movs	r1, #136	; 0x88
 800385a:	4628      	mov	r0, r5
 800385c:	f7fe fa7a 	bl	8001d54 <HAL_I2C_Master_Transmit>
 8003860:	2800      	cmp	r0, #0
 8003862:	d1f6      	bne.n	8003852 <STMPE610_Init+0x3a>
	txbuf[0]=reg;
 8003864:	f240 330a 	movw	r3, #778	; 0x30a
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8003868:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 800386c:	4d6f      	ldr	r5, [pc, #444]	; (8003a2c <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 800386e:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8003872:	9600      	str	r6, [sp, #0]
 8003874:	2302      	movs	r3, #2
 8003876:	4622      	mov	r2, r4
 8003878:	2188      	movs	r1, #136	; 0x88
 800387a:	4628      	mov	r0, r5
 800387c:	f7fe fa6a 	bl	8001d54 <HAL_I2C_Master_Transmit>
 8003880:	2800      	cmp	r0, #0
 8003882:	d1f6      	bne.n	8003872 <STMPE610_Init+0x5a>
	txbuf[0]=reg;
 8003884:	f644 0320 	movw	r3, #18464	; 0x4820
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8003888:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 800388c:	4d67      	ldr	r5, [pc, #412]	; (8003a2c <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 800388e:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8003892:	9600      	str	r6, [sp, #0]
 8003894:	2302      	movs	r3, #2
 8003896:	4622      	mov	r2, r4
 8003898:	2188      	movs	r1, #136	; 0x88
 800389a:	4628      	mov	r0, r5
 800389c:	f7fe fa5a 	bl	8001d54 <HAL_I2C_Master_Transmit>
 80038a0:	2800      	cmp	r0, #0
 80038a2:	d1f6      	bne.n	8003892 <STMPE610_Init+0x7a>
	
	STMPE610_Write(STMPE610_REG_SYS_CTRL2, 0x04);		// Temperature sensor clock off, GPIO clock off, touch clock on, ADC clock on
	STMPE610_Write(STMPE610_REG_INT_EN, 0x03);			// Interrupt on INT pin when there is a sample or a touch transition.
	//STMPE610_write_reg(STMPE610_REG_INT_EN, 0x00);						// Don't Interrupt on INT pin
	STMPE610_Write(STMPE610_REG_ADC_CTRL1, 0x48);		// ADC conversion time = 80 clock ticks, 12-bit ADC, internal voltage refernce
	HAL_Delay(2);
 80038a4:	2002      	movs	r0, #2
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80038a6:	f44f 5640 	mov.w	r6, #12288	; 0x3000
	HAL_Delay(2);
 80038aa:	f7fd fb91 	bl	8000fd0 <HAL_Delay>
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80038ae:	4d5f      	ldr	r5, [pc, #380]	; (8003a2c <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 80038b0:	f240 1321 	movw	r3, #289	; 0x121
 80038b4:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80038b8:	9600      	str	r6, [sp, #0]
 80038ba:	2302      	movs	r3, #2
 80038bc:	4622      	mov	r2, r4
 80038be:	2188      	movs	r1, #136	; 0x88
 80038c0:	4628      	mov	r0, r5
 80038c2:	f7fe fa47 	bl	8001d54 <HAL_I2C_Master_Transmit>
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d1f6      	bne.n	80038b8 <STMPE610_Init+0xa0>
	txbuf[0]=reg;
 80038ca:	2317      	movs	r3, #23
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80038cc:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 80038d0:	4d56      	ldr	r5, [pc, #344]	; (8003a2c <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 80038d2:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80038d6:	9600      	str	r6, [sp, #0]
 80038d8:	2302      	movs	r3, #2
 80038da:	4622      	mov	r2, r4
 80038dc:	2188      	movs	r1, #136	; 0x88
 80038de:	4628      	mov	r0, r5
 80038e0:	f7fe fa38 	bl	8001d54 <HAL_I2C_Master_Transmit>
 80038e4:	2800      	cmp	r0, #0
 80038e6:	d1f6      	bne.n	80038d6 <STMPE610_Init+0xbe>
	txbuf[0]=reg;
 80038e8:	f24a 3341 	movw	r3, #41793	; 0xa341
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80038ec:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 80038f0:	4d4e      	ldr	r5, [pc, #312]	; (8003a2c <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 80038f2:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80038f6:	9600      	str	r6, [sp, #0]
 80038f8:	2302      	movs	r3, #2
 80038fa:	4622      	mov	r2, r4
 80038fc:	2188      	movs	r1, #136	; 0x88
 80038fe:	4628      	mov	r0, r5
 8003900:	f7fe fa28 	bl	8001d54 <HAL_I2C_Master_Transmit>
 8003904:	2800      	cmp	r0, #0
 8003906:	d1f6      	bne.n	80038f6 <STMPE610_Init+0xde>
	txbuf[0]=reg;
 8003908:	f44f 73a5 	mov.w	r3, #330	; 0x14a
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 800390c:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8003910:	4d46      	ldr	r5, [pc, #280]	; (8003a2c <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8003912:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8003916:	9600      	str	r6, [sp, #0]
 8003918:	2302      	movs	r3, #2
 800391a:	4622      	mov	r2, r4
 800391c:	2188      	movs	r1, #136	; 0x88
 800391e:	4628      	mov	r0, r5
 8003920:	f7fe fa18 	bl	8001d54 <HAL_I2C_Master_Transmit>
 8003924:	2800      	cmp	r0, #0
 8003926:	d1f6      	bne.n	8003916 <STMPE610_Init+0xfe>
	txbuf[0]=reg;
 8003928:	f240 134b 	movw	r3, #331	; 0x14b
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 800392c:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8003930:	4d3e      	ldr	r5, [pc, #248]	; (8003a2c <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8003932:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8003936:	9600      	str	r6, [sp, #0]
 8003938:	2302      	movs	r3, #2
 800393a:	4622      	mov	r2, r4
 800393c:	2188      	movs	r1, #136	; 0x88
 800393e:	4628      	mov	r0, r5
 8003940:	f7fe fa08 	bl	8001d54 <HAL_I2C_Master_Transmit>
 8003944:	2800      	cmp	r0, #0
 8003946:	d1f6      	bne.n	8003936 <STMPE610_Init+0x11e>
	txbuf[0]=reg;
 8003948:	234b      	movs	r3, #75	; 0x4b
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 800394a:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 800394e:	4d37      	ldr	r5, [pc, #220]	; (8003a2c <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8003950:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8003954:	9600      	str	r6, [sp, #0]
 8003956:	2302      	movs	r3, #2
 8003958:	4622      	mov	r2, r4
 800395a:	2188      	movs	r1, #136	; 0x88
 800395c:	4628      	mov	r0, r5
 800395e:	f7fe f9f9 	bl	8001d54 <HAL_I2C_Master_Transmit>
 8003962:	2800      	cmp	r0, #0
 8003964:	d1f6      	bne.n	8003954 <STMPE610_Init+0x13c>
	txbuf[0]=reg;
 8003966:	f240 7356 	movw	r3, #1878	; 0x756
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 800396a:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 800396e:	4d2f      	ldr	r5, [pc, #188]	; (8003a2c <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8003970:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8003974:	9600      	str	r6, [sp, #0]
 8003976:	2302      	movs	r3, #2
 8003978:	4622      	mov	r2, r4
 800397a:	2188      	movs	r1, #136	; 0x88
 800397c:	4628      	mov	r0, r5
 800397e:	f7fe f9e9 	bl	8001d54 <HAL_I2C_Master_Transmit>
 8003982:	2800      	cmp	r0, #0
 8003984:	d1f6      	bne.n	8003974 <STMPE610_Init+0x15c>
	txbuf[0]=reg;
 8003986:	f44f 73ac 	mov.w	r3, #344	; 0x158
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 800398a:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 800398e:	4d27      	ldr	r5, [pc, #156]	; (8003a2c <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8003990:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8003994:	9600      	str	r6, [sp, #0]
 8003996:	2302      	movs	r3, #2
 8003998:	4622      	mov	r2, r4
 800399a:	2188      	movs	r1, #136	; 0x88
 800399c:	4628      	mov	r0, r5
 800399e:	f7fe f9d9 	bl	8001d54 <HAL_I2C_Master_Transmit>
 80039a2:	2800      	cmp	r0, #0
 80039a4:	d1f6      	bne.n	8003994 <STMPE610_Init+0x17c>
	txbuf[0]=reg;
 80039a6:	f44f 5341 	mov.w	r3, #12352	; 0x3040
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80039aa:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 80039ae:	4d1f      	ldr	r5, [pc, #124]	; (8003a2c <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 80039b0:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80039b4:	9600      	str	r6, [sp, #0]
 80039b6:	2302      	movs	r3, #2
 80039b8:	4622      	mov	r2, r4
 80039ba:	2188      	movs	r1, #136	; 0x88
 80039bc:	4628      	mov	r0, r5
 80039be:	f7fe f9c9 	bl	8001d54 <HAL_I2C_Master_Transmit>
 80039c2:	2800      	cmp	r0, #0
 80039c4:	d1f6      	bne.n	80039b4 <STMPE610_Init+0x19c>
	txbuf[0]=reg;
 80039c6:	f44f 5345 	mov.w	r3, #12608	; 0x3140
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80039ca:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 80039ce:	4d17      	ldr	r5, [pc, #92]	; (8003a2c <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 80039d0:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80039d4:	9600      	str	r6, [sp, #0]
 80039d6:	2302      	movs	r3, #2
 80039d8:	4622      	mov	r2, r4
 80039da:	2188      	movs	r1, #136	; 0x88
 80039dc:	4628      	mov	r0, r5
 80039de:	f7fe f9b9 	bl	8001d54 <HAL_I2C_Master_Transmit>
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d1f6      	bne.n	80039d4 <STMPE610_Init+0x1bc>
	txbuf[0]=reg;
 80039e6:	f64f 730b 	movw	r3, #65291	; 0xff0b
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80039ea:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 80039ee:	4d0f      	ldr	r5, [pc, #60]	; (8003a2c <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 80039f0:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80039f4:	9600      	str	r6, [sp, #0]
 80039f6:	2302      	movs	r3, #2
 80039f8:	4622      	mov	r2, r4
 80039fa:	2188      	movs	r1, #136	; 0x88
 80039fc:	4628      	mov	r0, r5
 80039fe:	f7fe f9a9 	bl	8001d54 <HAL_I2C_Master_Transmit>
 8003a02:	2800      	cmp	r0, #0
 8003a04:	d1f6      	bne.n	80039f4 <STMPE610_Init+0x1dc>
	txbuf[0]=reg;
 8003a06:	f240 1309 	movw	r3, #265	; 0x109
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8003a0a:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8003a0e:	4d07      	ldr	r5, [pc, #28]	; (8003a2c <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8003a10:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8003a14:	9600      	str	r6, [sp, #0]
 8003a16:	2302      	movs	r3, #2
 8003a18:	4622      	mov	r2, r4
 8003a1a:	2188      	movs	r1, #136	; 0x88
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	f7fe f999 	bl	8001d54 <HAL_I2C_Master_Transmit>
 8003a22:	2800      	cmp	r0, #0
 8003a24:	d1f6      	bne.n	8003a14 <STMPE610_Init+0x1fc>
	//STMPE610_write_reg(STMPE610_REG_TSC_CTRL, 0x32);						// X&Y, 16 reading window
	//STMPE610_write_reg(TMPE610_REG_TSC_CTRL, 0x33);						// X&Y, 16 reading window, TSC enable

	STMPE610_Write(STMPE610_REG_INT_STA, 0xFF);		// Clear all interrupts
	STMPE610_Write(STMPE610_REG_INT_CTRL, 0x01);		// Level interrupt, enable interrupts
}
 8003a26:	b004      	add	sp, #16
 8003a28:	bd70      	pop	{r4, r5, r6, pc}
 8003a2a:	bf00      	nop
 8003a2c:	200192cc 	.word	0x200192cc

08003a30 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8003a30:	b508      	push	{r3, lr}
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8003a32:	4805      	ldr	r0, [pc, #20]	; (8003a48 <GUI_X_Config+0x18>)
 8003a34:	f44f 31c8 	mov.w	r1, #102400	; 0x19000
 8003a38:	f007 fb4c 	bl	800b0d4 <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8003a3c:	4803      	ldr	r0, [pc, #12]	; (8003a4c <GUI_X_Config+0x1c>)
}
 8003a3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8003a42:	f006 bc47 	b.w	800a2d4 <GUI_SetDefaultFont>
 8003a46:	bf00      	nop
 8003a48:	200000b8 	.word	0x200000b8
 8003a4c:	0800f738 	.word	0x0800f738

08003a50 <GUI_X_GetTime>:
  and delay function. Default time unit (tick), normally is
  1 ms.
*/

GUI_TIMER_TIME GUI_X_GetTime(void) { 
  return OS_TimeMS; 
 8003a50:	4b01      	ldr	r3, [pc, #4]	; (8003a58 <GUI_X_GetTime+0x8>)
 8003a52:	6818      	ldr	r0, [r3, #0]
}
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	20019318 	.word	0x20019318

08003a5c <GUI_X_Delay>:

void GUI_X_Delay(int ms) { 
  int tEnd = OS_TimeMS + ms;
 8003a5c:	4a03      	ldr	r2, [pc, #12]	; (8003a6c <GUI_X_Delay+0x10>)
 8003a5e:	6813      	ldr	r3, [r2, #0]
 8003a60:	4418      	add	r0, r3
  while ((tEnd - OS_TimeMS) > 0);
 8003a62:	6813      	ldr	r3, [r2, #0]
 8003a64:	1ac3      	subs	r3, r0, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	dcfb      	bgt.n	8003a62 <GUI_X_Delay+0x6>
}
 8003a6a:	4770      	bx	lr
 8003a6c:	20019318 	.word	0x20019318

08003a70 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop

08003a74 <LCD_X_Config>:
* Function description:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*
*/
void LCD_X_Config(void) {
 8003a74:	b5f0      	push	{r4, r5, r6, r7, lr}
  GUI_DEVICE * pDevice;
  CONFIG_FLEXCOLOR Config = {0};
 8003a76:	2400      	movs	r4, #0
void LCD_X_Config(void) {
 8003a78:	b0a3      	sub	sp, #140	; 0x8c
  GUI_PORT_API PortAPI = {0};
 8003a7a:	2268      	movs	r2, #104	; 0x68
  GUIDRV_FlexColor_Config(pDevice, &Config);
  //
  // Set controller and operation mode
  //
  PortAPI.pfWrite16_A0  = SSD1963_WriteCommand;
  PortAPI.pfWrite16_A1  = SSD1963_WriteData;
 8003a7c:	4f23      	ldr	r7, [pc, #140]	; (8003b0c <LCD_X_Config+0x98>)
  GUI_PORT_API PortAPI = {0};
 8003a7e:	4621      	mov	r1, r4
 8003a80:	a808      	add	r0, sp, #32
  CONFIG_FLEXCOLOR Config = {0};
 8003a82:	9407      	str	r4, [sp, #28]
  PortAPI.pfWriteM16_A1 = SSD1963_WriteDataMultiple;
 8003a84:	4e22      	ldr	r6, [pc, #136]	; (8003b10 <LCD_X_Config+0x9c>)
  CONFIG_FLEXCOLOR Config = {0};
 8003a86:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003a8a:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GUI_PORT_API PortAPI = {0};
 8003a8e:	f00a f86b 	bl	800db68 <memset>
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_M565, 0, 0);
 8003a92:	4623      	mov	r3, r4
 8003a94:	4622      	mov	r2, r4
 8003a96:	491f      	ldr	r1, [pc, #124]	; (8003b14 <LCD_X_Config+0xa0>)
 8003a98:	481f      	ldr	r0, [pc, #124]	; (8003b18 <LCD_X_Config+0xa4>)
 8003a9a:	f006 fbb1 	bl	800a200 <GUI_DEVICE_CreateAndLink>
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 8003a9e:	f44f 7288 	mov.w	r2, #272	; 0x110
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_M565, 0, 0);
 8003aa2:	4605      	mov	r5, r0
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 8003aa4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f004 fbd5 	bl	8008258 <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS);
 8003aae:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003ab8:	f004 fbb6 	bl	8008228 <LCD_SetVSizeEx>
  GUIDRV_FlexColor_Config(pDevice, &Config);
 8003abc:	a903      	add	r1, sp, #12
 8003abe:	4628      	mov	r0, r5
  Config.Orientation = 0;
 8003ac0:	9405      	str	r4, [sp, #20]
  GUIDRV_FlexColor_Config(pDevice, &Config);
 8003ac2:	f004 fb50 	bl	8008166 <GUIDRV_FlexColor_Config>
  PortAPI.pfWrite16_A0  = SSD1963_WriteCommand;
 8003ac6:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8003b24 <LCD_X_Config+0xb0>
 // PortAPI.pfReadM16_A1  = SSD1963_ReadData;
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66720, GUIDRV_FLEXCOLOR_M16C0B16);
 8003aca:	a908      	add	r1, sp, #32
 8003acc:	4628      	mov	r0, r5
 8003ace:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <LCD_X_Config+0xa8>)
 8003ad0:	4a13      	ldr	r2, [pc, #76]	; (8003b20 <LCD_X_Config+0xac>)
  PortAPI.pfWriteM16_A1 = SSD1963_WriteDataMultiple;
 8003ad2:	9613      	str	r6, [sp, #76]	; 0x4c
  PortAPI.pfWrite16_A1  = SSD1963_WriteData;
 8003ad4:	e9cd c710 	strd	ip, r7, [sp, #64]	; 0x40
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66720, GUIDRV_FLEXCOLOR_M16C0B16);
 8003ad8:	f004 fb63 	bl	80081a2 <GUIDRV_FlexColor_SetFunc>

  GUI_TOUCH_Calibrate(GUI_COORD_X, 0, 480, GUI_TOUCH_AD_LEFT , GUI_TOUCH_AD_RIGHT);
 8003adc:	f640 7274 	movw	r2, #3956	; 0xf74
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	9200      	str	r2, [sp, #0]
 8003ae6:	2392      	movs	r3, #146	; 0x92
 8003ae8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003aec:	f005 fbf0 	bl	80092d0 <GUI_TOUCH_Calibrate>
  GUI_TOUCH_Calibrate(GUI_COORD_Y, 0, 272, GUI_TOUCH_AD_TOP, GUI_TOUCH_AD_BOTTOM);
 8003af0:	f640 7203 	movw	r2, #3843	; 0xf03
 8003af4:	4621      	mov	r1, r4
 8003af6:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8003afa:	9200      	str	r2, [sp, #0]
 8003afc:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003b00:	2001      	movs	r0, #1
 8003b02:	f005 fbe5 	bl	80092d0 <GUI_TOUCH_Calibrate>

}
 8003b06:	b023      	add	sp, #140	; 0x8c
 8003b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	08003061 	.word	0x08003061
 8003b10:	080030b5 	.word	0x080030b5
 8003b14:	08012e30 	.word	0x08012e30
 8003b18:	08012ca4 	.word	0x08012ca4
 8003b1c:	08007b6d 	.word	0x08007b6d
 8003b20:	080074d1 	.word	0x080074d1
 8003b24:	0800300d 	.word	0x0800300d

08003b28 <LCD_X_DisplayDriver>:
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
  int r;
  (void) LayerIndex;
  (void) pData;
  
  switch (Cmd) {
 8003b28:	2901      	cmp	r1, #1
 8003b2a:	d106      	bne.n	8003b3a <LCD_X_DisplayDriver+0x12>
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 8003b2c:	b508      	push	{r3, lr}
    // display controller and put it into operation. If the display
    // controller is not initialized by any external routine this needs
    // to be adapted by the customer...
    //
    // ...
	  SSD1963_Init();
 8003b2e:	f7ff fafd 	bl	800312c <SSD1963_Init>
	  STMPE610_Init();
 8003b32:	f7ff fe71 	bl	8003818 <STMPE610_Init>
    return 0;
 8003b36:	2000      	movs	r0, #0
  }
  default:
    r = -1;
  }
  return r;
}
 8003b38:	bd08      	pop	{r3, pc}
  return r;
 8003b3a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003b3e:	4770      	bx	lr

08003b40 <HAL_SYSTICK_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_SYSTICK_Callback(void)
{
	OS_TimeMS++;
 8003b40:	4a02      	ldr	r2, [pc, #8]	; (8003b4c <HAL_SYSTICK_Callback+0xc>)
 8003b42:	6813      	ldr	r3, [r2, #0]
 8003b44:	3301      	adds	r3, #1
 8003b46:	6013      	str	r3, [r2, #0]
}
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	20019318 	.word	0x20019318

08003b50 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)  //ova fja se pozove kad se izvrsi jedna konverzija
{
	if(hadc->Instance == ADC3)
 8003b50:	6802      	ldr	r2, [r0, #0]
 8003b52:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <HAL_ADC_ConvCpltCallback+0x14>)
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d103      	bne.n	8003b60 <HAL_ADC_ConvCpltCallback+0x10>
	{
		temperatura_ADC_sirovo = ADC_BUF[0];
 8003b58:	4a03      	ldr	r2, [pc, #12]	; (8003b68 <HAL_ADC_ConvCpltCallback+0x18>)
 8003b5a:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <HAL_ADC_ConvCpltCallback+0x1c>)
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	601a      	str	r2, [r3, #0]
	}
}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40012200 	.word	0x40012200
 8003b68:	20019440 	.word	0x20019440
 8003b6c:	2001943c 	.word	0x2001943c

08003b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b70:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b72:	2400      	movs	r4, #0
{
 8003b74:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b76:	2230      	movs	r2, #48	; 0x30
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003b78:	2609      	movs	r6, #9
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	a807      	add	r0, sp, #28
 8003b7e:	f009 fff3 	bl	800db68 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b82:	4621      	mov	r1, r4
 8003b84:	2284      	movs	r2, #132	; 0x84
 8003b86:	a813      	add	r0, sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b88:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b8a:	2502      	movs	r5, #2
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b8c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003b90:	e9cd 4404 	strd	r4, r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b94:	f009 ffe8 	bl	800db68 <memset>
  HAL_PWR_EnableBkUpAccess();
 8003b98:	f7fe fa00 	bl	8001f9c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b9c:	4a22      	ldr	r2, [pc, #136]	; (8003c28 <SystemClock_Config+0xb8>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b9e:	4b23      	ldr	r3, [pc, #140]	; (8003c2c <SystemClock_Config+0xbc>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 384;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ba0:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ba2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003ba4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003ba8:	6411      	str	r1, [r2, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003baa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bb0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003bb4:	9200      	str	r2, [sp, #0]
 8003bb6:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003bbe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003bc0:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bc2:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003bc4:	9607      	str	r6, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003bc6:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bce:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003bd0:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003bd2:	2119      	movs	r1, #25
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bd4:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLN = 384;
 8003bd6:	f44f 72c0 	mov.w	r2, #384	; 0x180
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bda:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003bdc:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLN = 384;
 8003bde:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003be0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003be2:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003be4:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003be6:	e9cd 610e 	strd	r6, r1, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bea:	f7fe fa1b 	bl	8002024 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bee:	260f      	movs	r6, #15
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003bf0:	f7fe f9dc 	bl	8001fac <HAL_PWREx_EnableOverDrive>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003bf4:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003bfc:	2106      	movs	r1, #6
 8003bfe:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c00:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003c02:	e9cd 2305 	strd	r2, r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c06:	e9cd 5403 	strd	r5, r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003c0a:	f7fe fc05 	bl	8002418 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1;
 8003c0e:	f244 0220 	movw	r2, #16416	; 0x4020
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003c12:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c16:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003c18:	942c      	str	r4, [sp, #176]	; 0xb0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1;
 8003c1a:	9213      	str	r2, [sp, #76]	; 0x4c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003c1c:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c1e:	f7fe fcc7 	bl	80025b0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8003c22:	b034      	add	sp, #208	; 0xd0
 8003c24:	bd70      	pop	{r4, r5, r6, pc}
 8003c26:	bf00      	nop
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	40007000 	.word	0x40007000

08003c30 <draw_display>:
	return temperatura;
}

void draw_display(void)
{
	hMem = GUI_MEMDEV_Create(0,0,480,272);
 8003c30:	2100      	movs	r1, #0
 8003c32:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003c36:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003c3a:	4608      	mov	r0, r1
{
 8003c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hMem = GUI_MEMDEV_Create(0,0,480,272);
 8003c40:	f8df b34c 	ldr.w	fp, [pc, #844]	; 8003f90 <draw_display+0x360>
{
 8003c44:	b085      	sub	sp, #20
	hMem = GUI_MEMDEV_Create(0,0,480,272);
 8003c46:	f003 f9ad 	bl	8006fa4 <GUI_MEMDEV_Create>

	GUI_SetPenSize( 8 );
	angle = 90;
	angle=(angle/57.29577951) ; //Convert degrees to radians
	x_coordinate=(136+(sin(angle)*120));
	y_coordinate=(136-(cos(angle)*120));
 8003c4a:	f04f 0888 	mov.w	r8, #136	; 0x88
	hMem = GUI_MEMDEV_Create(0,0,480,272);
 8003c4e:	f8cb 0000 	str.w	r0, [fp]
	GUI_MEMDEV_Select(hMem);
 8003c52:	f003 f9af 	bl	8006fb4 <GUI_MEMDEV_Select>
	GUI_SetBkColor(GUI_WHITE);
 8003c56:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
	x_coordinate=(136+(sin(angle)*120));
 8003c5a:	f04f 0aff 	mov.w	sl, #255	; 0xff
	GUI_SetBkColor(GUI_WHITE);
 8003c5e:	f005 fe17 	bl	8009890 <GUI_SetBkColor>
	x_coordinate=(136+(sin(angle)*120));
 8003c62:	4da2      	ldr	r5, [pc, #648]	; (8003eec <draw_display+0x2bc>)
	GUI_Clear();
 8003c64:	f006 fb6e 	bl	800a344 <GUI_Clear>
	GUI_SetColor(GUI_BLACK);
 8003c68:	2000      	movs	r0, #0
 8003c6a:	f005 fe13 	bl	8009894 <GUI_SetColor>
	GUI_SetDrawMode(GUI_DRAWMODE_NORMAL);
 8003c6e:	2000      	movs	r0, #0
 8003c70:	f005 fdec 	bl	800984c <GUI_SetDrawMode>
	GUI_SetPenSize( 5 );
 8003c74:	2005      	movs	r0, #5
 8003c76:	f005 fe73 	bl	8009960 <GUI_SetPenSize>
	GUI_DrawArc(136, 136, 130, 130, -90, 280);
 8003c7a:	2382      	movs	r3, #130	; 0x82
 8003c7c:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003c80:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8003c84:	4641      	mov	r1, r8
	y_coordinate=(136-(cos(angle)*120));
 8003c86:	4c9a      	ldr	r4, [pc, #616]	; (8003ef0 <draw_display+0x2c0>)
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003c88:	4e9a      	ldr	r6, [pc, #616]	; (8003ef4 <draw_display+0x2c4>)

	GUI_SetPenSize( 6 );
	angle = 60;
	angle=(angle/57.29577951) ; //Convert degrees to radians
	x_coordinate=(136+(sin(angle)*120));
	y_coordinate=(136-(cos(angle)*120));
 8003c8a:	f04f 094c 	mov.w	r9, #76	; 0x4c
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003c8e:	4f9a      	ldr	r7, [pc, #616]	; (8003ef8 <draw_display+0x2c8>)
	GUI_DrawArc(136, 136, 130, 130, -90, 280);
 8003c90:	e9cd 2000 	strd	r2, r0, [sp]
 8003c94:	461a      	mov	r2, r3
 8003c96:	4640      	mov	r0, r8
 8003c98:	f007 f8d4 	bl	800ae44 <GUI_DrawArc>
	GUI_SetPenSize( 8 );
 8003c9c:	2008      	movs	r0, #8
 8003c9e:	f005 fe5f 	bl	8009960 <GUI_SetPenSize>
	y_coordinate=(136-(cos(angle)*120));
 8003ca2:	2387      	movs	r3, #135	; 0x87
 8003ca4:	2210      	movs	r2, #16
	GUI_DrawPoint(x_coordinate, y_coordinate); //3
 8003ca6:	4650      	mov	r0, sl
 8003ca8:	4641      	mov	r1, r8
	x_coordinate=(136+(sin(angle)*120));
 8003caa:	f8c5 a000 	str.w	sl, [r5]
	y_coordinate=(136-(cos(angle)*120));
 8003cae:	f8c4 8000 	str.w	r8, [r4]
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003cb2:	6037      	str	r7, [r6, #0]
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003cb4:	4f91      	ldr	r7, [pc, #580]	; (8003efc <draw_display+0x2cc>)
	y_coordinate=(136-(cos(angle)*120));
 8003cb6:	e9cd 3202 	strd	r3, r2, [sp, #8]
	GUI_DrawPoint(x_coordinate, y_coordinate); //3
 8003cba:	f005 ff07 	bl	8009acc <GUI_DrawPoint>
	GUI_DrawPoint(x_coordinate, y_coordinate); //9
 8003cbe:	9b02      	ldr	r3, [sp, #8]
 8003cc0:	9a03      	ldr	r2, [sp, #12]
 8003cc2:	4619      	mov	r1, r3
	y_coordinate=(136-(cos(angle)*120));
 8003cc4:	6023      	str	r3, [r4, #0]
	GUI_DrawPoint(x_coordinate, y_coordinate); //9
 8003cc6:	4610      	mov	r0, r2
	x_coordinate=(136+(sin(angle)*120));
 8003cc8:	602a      	str	r2, [r5, #0]
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003cca:	6037      	str	r7, [r6, #0]
	GUI_DrawPoint(x_coordinate, y_coordinate); //9
 8003ccc:	f005 fefe 	bl	8009acc <GUI_DrawPoint>
	y_coordinate=(136-(cos(angle)*120));
 8003cd0:	9a03      	ldr	r2, [sp, #12]
	angle = 0;
 8003cd2:	2100      	movs	r1, #0
	GUI_SetFont(&GUI_Font16B_ASCII);
 8003cd4:	488a      	ldr	r0, [pc, #552]	; (8003f00 <draw_display+0x2d0>)
	x_coordinate=(136+(sin(angle)*120));
 8003cd6:	27ef      	movs	r7, #239	; 0xef
	x_coordinate=(136+(sin(angle)*120));
 8003cd8:	f8c5 8000 	str.w	r8, [r5]
	GUI_DrawPoint(x_coordinate, y_coordinate); //2

	angle = 300;
	angle=(angle/57.29577951) ; //Convert degrees to radians
	x_coordinate=(136+(sin(angle)*120));
 8003cdc:	f04f 0820 	mov.w	r8, #32
	y_coordinate=(136-(cos(angle)*120));
 8003ce0:	6022      	str	r2, [r4, #0]
	angle = 0;
 8003ce2:	6031      	str	r1, [r6, #0]
	GUI_SetFont(&GUI_Font16B_ASCII);
 8003ce4:	f005 fda8 	bl	8009838 <GUI_SetFont>
	GUI_DispStringHCenterAt("XII", x_coordinate, y_coordinate-5);
 8003ce8:	6822      	ldr	r2, [r4, #0]
 8003cea:	6829      	ldr	r1, [r5, #0]
 8003cec:	3a05      	subs	r2, #5
 8003cee:	4885      	ldr	r0, [pc, #532]	; (8003f04 <draw_display+0x2d4>)
 8003cf0:	f006 f958 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DrawPoint(x_coordinate, y_coordinate); //6
 8003cf4:	9b02      	ldr	r3, [sp, #8]
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003cf6:	4a84      	ldr	r2, [pc, #528]	; (8003f08 <draw_display+0x2d8>)
	GUI_DrawPoint(x_coordinate, y_coordinate); //6
 8003cf8:	4651      	mov	r1, sl
 8003cfa:	4618      	mov	r0, r3
	x_coordinate=(136+(sin(angle)*120));
 8003cfc:	602b      	str	r3, [r5, #0]
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003cfe:	6032      	str	r2, [r6, #0]
	y_coordinate=(136-(cos(angle)*120));
 8003d00:	f8c4 a000 	str.w	sl, [r4]
	GUI_DrawPoint(x_coordinate, y_coordinate); //6
 8003d04:	f005 fee2 	bl	8009acc <GUI_DrawPoint>
	GUI_SetPenSize( 6 );
 8003d08:	2006      	movs	r0, #6
	GUI_DrawPoint(x_coordinate, y_coordinate); //10

	angle = 120;
	angle=(angle/57.29577951) ; //Convert degrees to radians
	x_coordinate=(136+(sin(angle)*120));
	y_coordinate=(136-(cos(angle)*120));
 8003d0a:	f04f 0ac4 	mov.w	sl, #196	; 0xc4
	GUI_SetPenSize( 6 );
 8003d0e:	f005 fe27 	bl	8009960 <GUI_SetPenSize>
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003d12:	4b7e      	ldr	r3, [pc, #504]	; (8003f0c <draw_display+0x2dc>)
	GUI_DrawPoint(x_coordinate, y_coordinate); //2
 8003d14:	4638      	mov	r0, r7
 8003d16:	4649      	mov	r1, r9
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003d18:	6033      	str	r3, [r6, #0]
	x_coordinate=(136+(sin(angle)*120));
 8003d1a:	602f      	str	r7, [r5, #0]
	y_coordinate=(136-(cos(angle)*120));
 8003d1c:	f8c4 9000 	str.w	r9, [r4]
	GUI_DrawPoint(x_coordinate, y_coordinate); //2
 8003d20:	f005 fed4 	bl	8009acc <GUI_DrawPoint>
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003d24:	4b7a      	ldr	r3, [pc, #488]	; (8003f10 <draw_display+0x2e0>)
	GUI_DrawPoint(x_coordinate, y_coordinate); //10
 8003d26:	4649      	mov	r1, r9
 8003d28:	4640      	mov	r0, r8
	y_coordinate=(136-(cos(angle)*120));
 8003d2a:	f8c4 9000 	str.w	r9, [r4]
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003d2e:	6033      	str	r3, [r6, #0]
	x_coordinate=(136+(sin(angle)*120));
 8003d30:	f8c5 8000 	str.w	r8, [r5]
	GUI_DrawPoint(x_coordinate, y_coordinate); //10
 8003d34:	f005 feca 	bl	8009acc <GUI_DrawPoint>
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003d38:	4b76      	ldr	r3, [pc, #472]	; (8003f14 <draw_display+0x2e4>)
	GUI_DrawPoint(x_coordinate, y_coordinate); //4
 8003d3a:	4638      	mov	r0, r7
 8003d3c:	4651      	mov	r1, sl
	x_coordinate=(136+(sin(angle)*120));
 8003d3e:	602f      	str	r7, [r5, #0]
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003d40:	6033      	str	r3, [r6, #0]
	y_coordinate=(136-(cos(angle)*120));
 8003d42:	f8c4 a000 	str.w	sl, [r4]
	GUI_DrawPoint(x_coordinate, y_coordinate); //4
 8003d46:	f005 fec1 	bl	8009acc <GUI_DrawPoint>

	angle = 240;
	angle=(angle/57.29577951) ; //Convert degrees to radians
	x_coordinate=(136+(sin(angle)*120));
	y_coordinate=(136-(cos(angle)*120));
 8003d4a:	23c3      	movs	r3, #195	; 0xc3
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003d4c:	4a72      	ldr	r2, [pc, #456]	; (8003f18 <draw_display+0x2e8>)
	GUI_DrawPoint(x_coordinate, y_coordinate); //8
 8003d4e:	4640      	mov	r0, r8
	x_coordinate=(136+(sin(angle)*120));
 8003d50:	f8c5 8000 	str.w	r8, [r5]
	GUI_DrawPoint(x_coordinate, y_coordinate); //8
 8003d54:	4619      	mov	r1, r3
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003d56:	6032      	str	r2, [r6, #0]
	y_coordinate=(136-(cos(angle)*120));
 8003d58:	6023      	str	r3, [r4, #0]
	GUI_DrawPoint(x_coordinate, y_coordinate); //8
 8003d5a:	f005 feb7 	bl	8009acc <GUI_DrawPoint>

	angle = 30;
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003d5e:	4b6f      	ldr	r3, [pc, #444]	; (8003f1c <draw_display+0x2ec>)
	x_coordinate=(136+(sin(angle)*120));
	y_coordinate=(136-(cos(angle)*120));
	GUI_DrawPoint(x_coordinate, y_coordinate); //1
 8003d60:	4641      	mov	r1, r8
 8003d62:	4650      	mov	r0, sl
	x_coordinate=(136+(sin(angle)*120));
 8003d64:	f8c5 a000 	str.w	sl, [r5]
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003d68:	6033      	str	r3, [r6, #0]
	y_coordinate=(136-(cos(angle)*120));
 8003d6a:	f8c4 8000 	str.w	r8, [r4]
	GUI_DrawPoint(x_coordinate, y_coordinate); //1
 8003d6e:	f005 fead 	bl	8009acc <GUI_DrawPoint>

	angle = 150;
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003d72:	4b6b      	ldr	r3, [pc, #428]	; (8003f20 <draw_display+0x2f0>)
	x_coordinate=(136+(sin(angle)*120));
	y_coordinate=(136-(cos(angle)*120));
	GUI_DrawPoint(x_coordinate, y_coordinate); //5
 8003d74:	4650      	mov	r0, sl
 8003d76:	4639      	mov	r1, r7
	x_coordinate=(136+(sin(angle)*120));
 8003d78:	f8c5 a000 	str.w	sl, [r5]
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003d7c:	6033      	str	r3, [r6, #0]
	y_coordinate=(136-(cos(angle)*120));
 8003d7e:	6027      	str	r7, [r4, #0]
	GUI_DrawPoint(x_coordinate, y_coordinate); //5
 8003d80:	f005 fea4 	bl	8009acc <GUI_DrawPoint>

	angle = 330;
	angle=(angle/57.29577951) ; //Convert degrees to radians
	x_coordinate=(136+(sin(angle)*120));
 8003d84:	234b      	movs	r3, #75	; 0x4b
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003d86:	4a67      	ldr	r2, [pc, #412]	; (8003f24 <draw_display+0x2f4>)
	y_coordinate=(136-(cos(angle)*120));
	GUI_DrawPoint(x_coordinate, y_coordinate); //11
 8003d88:	4641      	mov	r1, r8
	y_coordinate=(136-(cos(angle)*120));
 8003d8a:	f8c4 8000 	str.w	r8, [r4]
	GUI_DrawPoint(x_coordinate, y_coordinate); //11
 8003d8e:	4618      	mov	r0, r3
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003d90:	6032      	str	r2, [r6, #0]
	x_coordinate=(136+(sin(angle)*120));
 8003d92:	602b      	str	r3, [r5, #0]
	GUI_DrawPoint(x_coordinate, y_coordinate); //11
 8003d94:	f005 fe9a 	bl	8009acc <GUI_DrawPoint>

	angle = 210;
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003d98:	4b63      	ldr	r3, [pc, #396]	; (8003f28 <draw_display+0x2f8>)
	x_coordinate=(136+(sin(angle)*120));
	y_coordinate=(136-(cos(angle)*120));
	GUI_DrawPoint(x_coordinate, y_coordinate); //7
 8003d9a:	4639      	mov	r1, r7
 8003d9c:	4648      	mov	r0, r9
	x_coordinate=(136+(sin(angle)*120));
 8003d9e:	f8c5 9000 	str.w	r9, [r5]
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003da2:	6033      	str	r3, [r6, #0]
	y_coordinate=(136-(cos(angle)*120));
 8003da4:	6027      	str	r7, [r4, #0]
	GUI_DrawPoint(x_coordinate, y_coordinate); //7
 8003da6:	f005 fe91 	bl	8009acc <GUI_DrawPoint>


	GUI_SetFont(&GUI_Font13_ASCII);
 8003daa:	4860      	ldr	r0, [pc, #384]	; (8003f2c <draw_display+0x2fc>)
 8003dac:	f005 fd44 	bl	8009838 <GUI_SetFont>
	GUI_SetTextMode(GUI_TM_TRANS);
 8003db0:	2002      	movs	r0, #2
 8003db2:	f005 fd37 	bl	8009824 <GUI_SetTextMode>
	GUI_DispStringHCenterAt("00 - 01 :", 350, 10);
 8003db6:	220a      	movs	r2, #10
 8003db8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003dbc:	485c      	ldr	r0, [pc, #368]	; (8003f30 <draw_display+0x300>)
 8003dbe:	f006 f8f1 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("01 - 02 :", 350, 20);
 8003dc2:	2214      	movs	r2, #20
 8003dc4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003dc8:	485a      	ldr	r0, [pc, #360]	; (8003f34 <draw_display+0x304>)
 8003dca:	f006 f8eb 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("02 - 03 :", 350, 30);
 8003dce:	221e      	movs	r2, #30
 8003dd0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003dd4:	4858      	ldr	r0, [pc, #352]	; (8003f38 <draw_display+0x308>)
 8003dd6:	f006 f8e5 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("03 - 04 :", 350, 40);
 8003dda:	2228      	movs	r2, #40	; 0x28
 8003ddc:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003de0:	4856      	ldr	r0, [pc, #344]	; (8003f3c <draw_display+0x30c>)
 8003de2:	f006 f8df 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("04 - 05 :", 350, 50);
 8003de6:	2232      	movs	r2, #50	; 0x32
 8003de8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003dec:	4854      	ldr	r0, [pc, #336]	; (8003f40 <draw_display+0x310>)
 8003dee:	f006 f8d9 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("05 - 06 :", 350, 60);
 8003df2:	223c      	movs	r2, #60	; 0x3c
 8003df4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003df8:	4852      	ldr	r0, [pc, #328]	; (8003f44 <draw_display+0x314>)
 8003dfa:	f006 f8d3 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("06 - 07 :", 350, 70);
 8003dfe:	2246      	movs	r2, #70	; 0x46
 8003e00:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003e04:	4850      	ldr	r0, [pc, #320]	; (8003f48 <draw_display+0x318>)
 8003e06:	f006 f8cd 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("07 - 08 :", 350, 80);
 8003e0a:	2250      	movs	r2, #80	; 0x50
 8003e0c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003e10:	484e      	ldr	r0, [pc, #312]	; (8003f4c <draw_display+0x31c>)
 8003e12:	f006 f8c7 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("08 - 09 :", 350, 90);
 8003e16:	225a      	movs	r2, #90	; 0x5a
 8003e18:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003e1c:	484c      	ldr	r0, [pc, #304]	; (8003f50 <draw_display+0x320>)
 8003e1e:	f006 f8c1 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("09 - 10 :", 350, 100);
 8003e22:	2264      	movs	r2, #100	; 0x64
 8003e24:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003e28:	484a      	ldr	r0, [pc, #296]	; (8003f54 <draw_display+0x324>)
 8003e2a:	f006 f8bb 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("10 - 11 :", 350, 110);
 8003e2e:	226e      	movs	r2, #110	; 0x6e
 8003e30:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003e34:	4848      	ldr	r0, [pc, #288]	; (8003f58 <draw_display+0x328>)
 8003e36:	f006 f8b5 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("11 - 12 :", 350, 120);
 8003e3a:	2278      	movs	r2, #120	; 0x78
 8003e3c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003e40:	4846      	ldr	r0, [pc, #280]	; (8003f5c <draw_display+0x32c>)
 8003e42:	f006 f8af 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("12 - 13 :", 350, 130);
 8003e46:	2282      	movs	r2, #130	; 0x82
 8003e48:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003e4c:	4844      	ldr	r0, [pc, #272]	; (8003f60 <draw_display+0x330>)
 8003e4e:	f006 f8a9 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("13 - 14 :", 350, 140);
 8003e52:	228c      	movs	r2, #140	; 0x8c
 8003e54:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003e58:	4842      	ldr	r0, [pc, #264]	; (8003f64 <draw_display+0x334>)
 8003e5a:	f006 f8a3 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("14 - 15 :", 350, 150);
 8003e5e:	2296      	movs	r2, #150	; 0x96
 8003e60:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003e64:	4840      	ldr	r0, [pc, #256]	; (8003f68 <draw_display+0x338>)
 8003e66:	f006 f89d 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("15 - 16 :", 350, 160);
 8003e6a:	22a0      	movs	r2, #160	; 0xa0
 8003e6c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003e70:	483e      	ldr	r0, [pc, #248]	; (8003f6c <draw_display+0x33c>)
 8003e72:	f006 f897 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("16 - 17 :", 350, 170);
 8003e76:	22aa      	movs	r2, #170	; 0xaa
 8003e78:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003e7c:	483c      	ldr	r0, [pc, #240]	; (8003f70 <draw_display+0x340>)
 8003e7e:	f006 f891 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("17 - 18 :", 350, 180);
 8003e82:	22b4      	movs	r2, #180	; 0xb4
 8003e84:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003e88:	483a      	ldr	r0, [pc, #232]	; (8003f74 <draw_display+0x344>)
 8003e8a:	f006 f88b 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("18 - 19 :", 350, 190);
 8003e8e:	22be      	movs	r2, #190	; 0xbe
 8003e90:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003e94:	4838      	ldr	r0, [pc, #224]	; (8003f78 <draw_display+0x348>)
 8003e96:	f006 f885 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("19 - 20 :", 350, 200);
 8003e9a:	22c8      	movs	r2, #200	; 0xc8
 8003e9c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003ea0:	4836      	ldr	r0, [pc, #216]	; (8003f7c <draw_display+0x34c>)
 8003ea2:	f006 f87f 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("20 - 21 :", 350, 210);
 8003ea6:	22d2      	movs	r2, #210	; 0xd2
 8003ea8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003eac:	4834      	ldr	r0, [pc, #208]	; (8003f80 <draw_display+0x350>)
 8003eae:	f006 f879 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("21 - 22 :", 350, 220);
 8003eb2:	22dc      	movs	r2, #220	; 0xdc
 8003eb4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003eb8:	4832      	ldr	r0, [pc, #200]	; (8003f84 <draw_display+0x354>)
 8003eba:	f006 f873 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("22 - 23 :", 350, 230);
 8003ebe:	22e6      	movs	r2, #230	; 0xe6
 8003ec0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003ec4:	4830      	ldr	r0, [pc, #192]	; (8003f88 <draw_display+0x358>)
 8003ec6:	f006 f86d 	bl	8009fa4 <GUI_DispStringHCenterAt>
	GUI_DispStringHCenterAt("23 - 00 :", 350, 240);
 8003eca:	22f0      	movs	r2, #240	; 0xf0
 8003ecc:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003ed0:	482e      	ldr	r0, [pc, #184]	; (8003f8c <draw_display+0x35c>)
 8003ed2:	f006 f867 	bl	8009fa4 <GUI_DispStringHCenterAt>


	GUI_MEMDEV_CopyToLCD(hMem);
 8003ed6:	f8db 0000 	ldr.w	r0, [fp]
 8003eda:	f003 f8e3 	bl	80070a4 <GUI_MEMDEV_CopyToLCD>
	GUI_MEMDEV_Delete(hMem);
 8003ede:	f8db 0000 	ldr.w	r0, [fp]
}
 8003ee2:	b005      	add	sp, #20
 8003ee4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	GUI_MEMDEV_Delete(hMem);
 8003ee8:	f002 bffe 	b.w	8006ee8 <GUI_MEMDEV_Delete>
 8003eec:	200190bc 	.word	0x200190bc
 8003ef0:	200190c0 	.word	0x200190c0
 8003ef4:	200190b8 	.word	0x200190b8
 8003ef8:	3fc90fdb 	.word	0x3fc90fdb
 8003efc:	4096cbe4 	.word	0x4096cbe4
 8003f00:	080111dc 	.word	0x080111dc
 8003f04:	0800f574 	.word	0x0800f574
 8003f08:	40490fdb 	.word	0x40490fdb
 8003f0c:	3f860a92 	.word	0x3f860a92
 8003f10:	40a78d36 	.word	0x40a78d36
 8003f14:	40060a92 	.word	0x40060a92
 8003f18:	40860a92 	.word	0x40860a92
 8003f1c:	3f060a92 	.word	0x3f060a92
 8003f20:	40278d36 	.word	0x40278d36
 8003f24:	40b84e88 	.word	0x40b84e88
 8003f28:	406a927f 	.word	0x406a927f
 8003f2c:	08011d18 	.word	0x08011d18
 8003f30:	0800f578 	.word	0x0800f578
 8003f34:	0800f584 	.word	0x0800f584
 8003f38:	0800f590 	.word	0x0800f590
 8003f3c:	0800f59c 	.word	0x0800f59c
 8003f40:	0800f5a8 	.word	0x0800f5a8
 8003f44:	0800f5b4 	.word	0x0800f5b4
 8003f48:	0800f5c0 	.word	0x0800f5c0
 8003f4c:	0800f5cc 	.word	0x0800f5cc
 8003f50:	0800f5d8 	.word	0x0800f5d8
 8003f54:	0800f5e4 	.word	0x0800f5e4
 8003f58:	0800f5f0 	.word	0x0800f5f0
 8003f5c:	0800f5fc 	.word	0x0800f5fc
 8003f60:	0800f608 	.word	0x0800f608
 8003f64:	0800f614 	.word	0x0800f614
 8003f68:	0800f620 	.word	0x0800f620
 8003f6c:	0800f62c 	.word	0x0800f62c
 8003f70:	0800f638 	.word	0x0800f638
 8003f74:	0800f644 	.word	0x0800f644
 8003f78:	0800f650 	.word	0x0800f650
 8003f7c:	0800f65c 	.word	0x0800f65c
 8003f80:	0800f668 	.word	0x0800f668
 8003f84:	0800f674 	.word	0x0800f674
 8003f88:	0800f680 	.word	0x0800f680
 8003f8c:	0800f68c 	.word	0x0800f68c
 8003f90:	2001936c 	.word	0x2001936c
 8003f94:	00000000 	.word	0x00000000

08003f98 <draw_clock>:
void draw_clock(void)
{
	int date_tmp[3];
	char date[12];

	hMem_clock = GUI_MEMDEV_Create(46,46,180,180);
 8003f98:	23b4      	movs	r3, #180	; 0xb4
 8003f9a:	212e      	movs	r1, #46	; 0x2e
{
 8003f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hMem_clock = GUI_MEMDEV_Create(46,46,180,180);
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4608      	mov	r0, r1
 8003fa4:	f8df 8320 	ldr.w	r8, [pc, #800]	; 80042c8 <draw_clock+0x330>
	GUI_SetPenSize( 10 );
	GUI_DrawLine(136, 136, x_coordinate, y_coordinate);//sat


	// ---------- MINUT ---------- //
	angle = 6 * (get_time(MINUTES_TYPE)) + (get_time(SECONDS_TYPE)/10);
 8003fa8:	f04f 0b06 	mov.w	fp, #6
	GUI_SetFont(&GUI_Font24B_ASCII);
 8003fac:	f8df a31c 	ldr.w	sl, [pc, #796]	; 80042cc <draw_clock+0x334>
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8003fb0:	4db9      	ldr	r5, [pc, #740]	; (8004298 <draw_clock+0x300>)
	angle=(angle/57.29577951) ; //Convert degrees to radians
 8003fb2:	f8df 931c 	ldr.w	r9, [pc, #796]	; 80042d0 <draw_clock+0x338>
	x_coordinate=(136+(sin(angle)*50));
 8003fb6:	4eb9      	ldr	r6, [pc, #740]	; (800429c <draw_clock+0x304>)
	y_coordinate=(136-(cos(angle)*50));
 8003fb8:	4fb9      	ldr	r7, [pc, #740]	; (80042a0 <draw_clock+0x308>)
{
 8003fba:	ed2d 8b02 	vpush	{d8}
 8003fbe:	b089      	sub	sp, #36	; 0x24
	hMem_clock = GUI_MEMDEV_Create(46,46,180,180);
 8003fc0:	f002 fff0 	bl	8006fa4 <GUI_MEMDEV_Create>
 8003fc4:	f8c8 0000 	str.w	r0, [r8]
	GUI_MEMDEV_Select(hMem_clock);
 8003fc8:	f002 fff4 	bl	8006fb4 <GUI_MEMDEV_Select>
	GUI_Clear();
 8003fcc:	f006 f9ba 	bl	800a344 <GUI_Clear>
	GUI_SetColor(GUI_BLACK);
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	f005 fc5f 	bl	8009894 <GUI_SetColor>
	GUI_SetFont(&GUI_Font24B_ASCII);
 8003fd6:	4650      	mov	r0, sl
 8003fd8:	f005 fc2e 	bl	8009838 <GUI_SetFont>
	GUI_SetTextMode(GUI_TM_TRANS);
 8003fdc:	2002      	movs	r0, #2
 8003fde:	f005 fc21 	bl	8009824 <GUI_SetTextMode>
	GUI_DispStringHCenterAt("SEIKO", 136, 80);
 8003fe2:	2250      	movs	r2, #80	; 0x50
 8003fe4:	2188      	movs	r1, #136	; 0x88
 8003fe6:	48af      	ldr	r0, [pc, #700]	; (80042a4 <draw_clock+0x30c>)
 8003fe8:	f005 ffdc 	bl	8009fa4 <GUI_DispStringHCenterAt>
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8003fec:	a902      	add	r1, sp, #8
 8003fee:	4628      	mov	r0, r5
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f7fe fe93 	bl	8002d1c <HAL_RTC_GetTime>
 8003ff6:	a902      	add	r1, sp, #8
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	4628      	mov	r0, r5
		return gTime.Hours;
 8003ffc:	f89d 4008 	ldrb.w	r4, [sp, #8]
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8004000:	f7fe fe8c 	bl	8002d1c <HAL_RTC_GetTime>
	angle = 30 * (get_time(HOURS_TYPE) % 12) + (get_time(MINUTES_TYPE)/2) + (get_time(SECONDS_TYPE)/30);
 8004004:	4ba8      	ldr	r3, [pc, #672]	; (80042a8 <draw_clock+0x310>)
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8004006:	a902      	add	r1, sp, #8
		return gTime.Minutes;
 8004008:	f89d c009 	ldrb.w	ip, [sp, #9]
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800400c:	4628      	mov	r0, r5
	angle = 30 * (get_time(HOURS_TYPE) % 12) + (get_time(MINUTES_TYPE)/2) + (get_time(SECONDS_TYPE)/30);
 800400e:	fba3 2304 	umull	r2, r3, r3, r4
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8004012:	2200      	movs	r2, #0
	angle = 30 * (get_time(HOURS_TYPE) % 12) + (get_time(MINUTES_TYPE)/2) + (get_time(SECONDS_TYPE)/30);
 8004014:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 8004018:	08db      	lsrs	r3, r3, #3
 800401a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800401e:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
 8004022:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8004026:	eb0c 0443 	add.w	r4, ip, r3, lsl #1
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800402a:	f7fe fe77 	bl	8002d1c <HAL_RTC_GetTime>
	return gTime.Seconds;
 800402e:	f89d c00a 	ldrb.w	ip, [sp, #10]
	angle = 30 * (get_time(HOURS_TYPE) % 12) + (get_time(MINUTES_TYPE)/2) + (get_time(SECONDS_TYPE)/30);
 8004032:	489e      	ldr	r0, [pc, #632]	; (80042ac <draw_clock+0x314>)
 8004034:	fba0 3c0c 	umull	r3, ip, r0, ip
 8004038:	eb04 101c 	add.w	r0, r4, ip, lsr #4
	angle=(angle/57.29577951) ; //Convert degrees to radians
 800403c:	ee07 0a90 	vmov	s15, r0
 8004040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004044:	ee17 0a90 	vmov	r0, s15
 8004048:	f7fc fa96 	bl	8000578 <__aeabi_f2d>
 800404c:	a390      	add	r3, pc, #576	; (adr r3, 8004290 <draw_clock+0x2f8>)
 800404e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004052:	f7fc fc13 	bl	800087c <__aeabi_ddiv>
 8004056:	f7fc fda9 	bl	8000bac <__aeabi_d2f>
 800405a:	f8c9 0000 	str.w	r0, [r9]
	x_coordinate=(136+(sin(angle)*50));
 800405e:	f7fc fa8b 	bl	8000578 <__aeabi_f2d>
 8004062:	ec41 0b10 	vmov	d0, r0, r1
 8004066:	ec41 0b18 	vmov	d8, r0, r1
 800406a:	f00a fab1 	bl	800e5d0 <sin>
 800406e:	2200      	movs	r2, #0
 8004070:	4b8f      	ldr	r3, [pc, #572]	; (80042b0 <draw_clock+0x318>)
 8004072:	ec51 0b10 	vmov	r0, r1, d0
 8004076:	f7fc fad7 	bl	8000628 <__aeabi_dmul>
 800407a:	2200      	movs	r2, #0
 800407c:	4b8d      	ldr	r3, [pc, #564]	; (80042b4 <draw_clock+0x31c>)
 800407e:	f7fc f91d 	bl	80002bc <__adddf3>
 8004082:	f7fc fd6b 	bl	8000b5c <__aeabi_d2iz>
	y_coordinate=(136-(cos(angle)*50));
 8004086:	eeb0 0a48 	vmov.f32	s0, s16
 800408a:	eef0 0a68 	vmov.f32	s1, s17
	x_coordinate=(136+(sin(angle)*50));
 800408e:	6030      	str	r0, [r6, #0]
	y_coordinate=(136-(cos(angle)*50));
 8004090:	f00a f9d6 	bl	800e440 <cos>
 8004094:	2200      	movs	r2, #0
 8004096:	4b86      	ldr	r3, [pc, #536]	; (80042b0 <draw_clock+0x318>)
 8004098:	ec51 0b10 	vmov	r0, r1, d0
 800409c:	f7fc fac4 	bl	8000628 <__aeabi_dmul>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	2000      	movs	r0, #0
 80040a6:	4983      	ldr	r1, [pc, #524]	; (80042b4 <draw_clock+0x31c>)
 80040a8:	f7fc f906 	bl	80002b8 <__aeabi_dsub>
 80040ac:	f7fc fd56 	bl	8000b5c <__aeabi_d2iz>
 80040b0:	6038      	str	r0, [r7, #0]
	GUI_SetColor(GUI_BLACK);
 80040b2:	2000      	movs	r0, #0
 80040b4:	f005 fbee 	bl	8009894 <GUI_SetColor>
	GUI_SetPenSize( 10 );
 80040b8:	200a      	movs	r0, #10
 80040ba:	f005 fc51 	bl	8009960 <GUI_SetPenSize>
	GUI_DrawLine(136, 136, x_coordinate, y_coordinate);//sat
 80040be:	2188      	movs	r1, #136	; 0x88
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	6832      	ldr	r2, [r6, #0]
 80040c4:	4608      	mov	r0, r1
 80040c6:	f005 ff4f 	bl	8009f68 <GUI_DrawLine>
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80040ca:	a902      	add	r1, sp, #8
 80040cc:	4628      	mov	r0, r5
 80040ce:	2200      	movs	r2, #0
 80040d0:	f7fe fe24 	bl	8002d1c <HAL_RTC_GetTime>
 80040d4:	a902      	add	r1, sp, #8
 80040d6:	2200      	movs	r2, #0
 80040d8:	4628      	mov	r0, r5
		return gTime.Minutes;
 80040da:	f89d 4009 	ldrb.w	r4, [sp, #9]
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80040de:	f7fe fe1d 	bl	8002d1c <HAL_RTC_GetTime>
	return gTime.Seconds;
 80040e2:	f89d 000a 	ldrb.w	r0, [sp, #10]
	angle = 6 * (get_time(MINUTES_TYPE)) + (get_time(SECONDS_TYPE)/10);
 80040e6:	4b74      	ldr	r3, [pc, #464]	; (80042b8 <draw_clock+0x320>)
 80040e8:	fba3 3000 	umull	r3, r0, r3, r0
 80040ec:	08c0      	lsrs	r0, r0, #3
 80040ee:	fb1b 0004 	smlabb	r0, fp, r4, r0
	angle=(angle/57.29577951) ; //Convert degrees to radians
 80040f2:	ee07 0a90 	vmov	s15, r0
 80040f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040fa:	ee17 0a90 	vmov	r0, s15
 80040fe:	f7fc fa3b 	bl	8000578 <__aeabi_f2d>
 8004102:	a363      	add	r3, pc, #396	; (adr r3, 8004290 <draw_clock+0x2f8>)
 8004104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004108:	f7fc fbb8 	bl	800087c <__aeabi_ddiv>
 800410c:	f7fc fd4e 	bl	8000bac <__aeabi_d2f>
 8004110:	f8c9 0000 	str.w	r0, [r9]
	x_coordinate=(136+(sin(angle)*80));
 8004114:	f7fc fa30 	bl	8000578 <__aeabi_f2d>
 8004118:	ec41 0b10 	vmov	d0, r0, r1
 800411c:	ec41 0b18 	vmov	d8, r0, r1
 8004120:	f00a fa56 	bl	800e5d0 <sin>
 8004124:	2200      	movs	r2, #0
 8004126:	4b65      	ldr	r3, [pc, #404]	; (80042bc <draw_clock+0x324>)
 8004128:	ec51 0b10 	vmov	r0, r1, d0
 800412c:	f7fc fa7c 	bl	8000628 <__aeabi_dmul>
 8004130:	2200      	movs	r2, #0
 8004132:	4b60      	ldr	r3, [pc, #384]	; (80042b4 <draw_clock+0x31c>)
 8004134:	f7fc f8c2 	bl	80002bc <__adddf3>
 8004138:	f7fc fd10 	bl	8000b5c <__aeabi_d2iz>
	y_coordinate=(136-(cos(angle)*80));
 800413c:	eeb0 0a48 	vmov.f32	s0, s16
 8004140:	eef0 0a68 	vmov.f32	s1, s17
	x_coordinate=(136+(sin(angle)*80));
 8004144:	6030      	str	r0, [r6, #0]
	y_coordinate=(136-(cos(angle)*80));
 8004146:	f00a f97b 	bl	800e440 <cos>
 800414a:	2200      	movs	r2, #0
 800414c:	4b5b      	ldr	r3, [pc, #364]	; (80042bc <draw_clock+0x324>)
 800414e:	ec51 0b10 	vmov	r0, r1, d0
 8004152:	f7fc fa69 	bl	8000628 <__aeabi_dmul>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	2000      	movs	r0, #0
 800415c:	4955      	ldr	r1, [pc, #340]	; (80042b4 <draw_clock+0x31c>)
 800415e:	f7fc f8ab 	bl	80002b8 <__aeabi_dsub>
 8004162:	f7fc fcfb 	bl	8000b5c <__aeabi_d2iz>
 8004166:	6038      	str	r0, [r7, #0]

	GUI_SetPenSize( 6 );
 8004168:	4658      	mov	r0, fp
 800416a:	f005 fbf9 	bl	8009960 <GUI_SetPenSize>
	GUI_DrawLine(136, 136, x_coordinate, y_coordinate);//minut
 800416e:	2188      	movs	r1, #136	; 0x88
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	6832      	ldr	r2, [r6, #0]
 8004174:	4608      	mov	r0, r1
 8004176:	f005 fef7 	bl	8009f68 <GUI_DrawLine>
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800417a:	a902      	add	r1, sp, #8
 800417c:	2200      	movs	r2, #0
 800417e:	4628      	mov	r0, r5
 8004180:	f7fe fdcc 	bl	8002d1c <HAL_RTC_GetTime>


	// ---------- SEKUND ---------- //
	angle = 6 * (get_time(SECONDS_TYPE));
 8004184:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8004188:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800418c:	0040      	lsls	r0, r0, #1
	angle=(angle/57.29577951) ; //Convert degrees to radians
 800418e:	ee07 0a90 	vmov	s15, r0
 8004192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004196:	ee17 0a90 	vmov	r0, s15
 800419a:	f7fc f9ed 	bl	8000578 <__aeabi_f2d>
 800419e:	a33c      	add	r3, pc, #240	; (adr r3, 8004290 <draw_clock+0x2f8>)
 80041a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a4:	f7fc fb6a 	bl	800087c <__aeabi_ddiv>
 80041a8:	f7fc fd00 	bl	8000bac <__aeabi_d2f>
 80041ac:	f8c9 0000 	str.w	r0, [r9]
	x_coordinate=(136+(sin(angle)*90));
 80041b0:	f7fc f9e2 	bl	8000578 <__aeabi_f2d>
 80041b4:	ec41 0b10 	vmov	d0, r0, r1
 80041b8:	ec41 0b18 	vmov	d8, r0, r1
 80041bc:	f00a fa08 	bl	800e5d0 <sin>
 80041c0:	2200      	movs	r2, #0
 80041c2:	4b3f      	ldr	r3, [pc, #252]	; (80042c0 <draw_clock+0x328>)
 80041c4:	ec51 0b10 	vmov	r0, r1, d0
 80041c8:	f7fc fa2e 	bl	8000628 <__aeabi_dmul>
 80041cc:	2200      	movs	r2, #0
 80041ce:	4b39      	ldr	r3, [pc, #228]	; (80042b4 <draw_clock+0x31c>)
 80041d0:	f7fc f874 	bl	80002bc <__adddf3>
 80041d4:	f7fc fcc2 	bl	8000b5c <__aeabi_d2iz>
	y_coordinate=(136-(cos(angle)*90));
 80041d8:	eeb0 0a48 	vmov.f32	s0, s16
 80041dc:	eef0 0a68 	vmov.f32	s1, s17
	x_coordinate=(136+(sin(angle)*90));
 80041e0:	6030      	str	r0, [r6, #0]
	y_coordinate=(136-(cos(angle)*90));
 80041e2:	f00a f92d 	bl	800e440 <cos>
 80041e6:	2200      	movs	r2, #0
 80041e8:	4b35      	ldr	r3, [pc, #212]	; (80042c0 <draw_clock+0x328>)
 80041ea:	ec51 0b10 	vmov	r0, r1, d0
 80041ee:	f7fc fa1b 	bl	8000628 <__aeabi_dmul>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	2000      	movs	r0, #0
 80041f8:	492e      	ldr	r1, [pc, #184]	; (80042b4 <draw_clock+0x31c>)
 80041fa:	f7fc f85d 	bl	80002b8 <__aeabi_dsub>
 80041fe:	f7fc fcad 	bl	8000b5c <__aeabi_d2iz>
 8004202:	6038      	str	r0, [r7, #0]

	GUI_SetColor(GUI_RED);
 8004204:	20ff      	movs	r0, #255	; 0xff
 8004206:	f005 fb45 	bl	8009894 <GUI_SetColor>
	GUI_SetPenSize( 4 );
 800420a:	2004      	movs	r0, #4
 800420c:	f005 fba8 	bl	8009960 <GUI_SetPenSize>
	GUI_DrawLine(136, 136, x_coordinate, y_coordinate);//sekund
 8004210:	2188      	movs	r1, #136	; 0x88
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6832      	ldr	r2, [r6, #0]
 8004216:	4608      	mov	r0, r1
 8004218:	f005 fea6 	bl	8009f68 <GUI_DrawLine>


	// ---------- DATUM ---------- //
	GUI_SetColor(GUI_BLACK);
 800421c:	2000      	movs	r0, #0
 800421e:	f005 fb39 	bl	8009894 <GUI_SetColor>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8004222:	a902      	add	r1, sp, #8
 8004224:	4628      	mov	r0, r5
 8004226:	2200      	movs	r2, #0
 8004228:	f7fe fe48 	bl	8002ebc <HAL_RTC_GetDate>
 800422c:	a902      	add	r1, sp, #8
 800422e:	4628      	mov	r0, r5
 8004230:	2200      	movs	r2, #0
		return gDate.Date;
 8004232:	f89d 400a 	ldrb.w	r4, [sp, #10]
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8004236:	f7fe fe41 	bl	8002ebc <HAL_RTC_GetDate>
 800423a:	a902      	add	r1, sp, #8
 800423c:	4628      	mov	r0, r5
 800423e:	2200      	movs	r2, #0
		return gDate.Month;
 8004240:	f89d 5009 	ldrb.w	r5, [sp, #9]
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8004244:	f7fe fe3a 	bl	8002ebc <HAL_RTC_GetDate>
	return gDate.Year;
 8004248:	f89d 100b 	ldrb.w	r1, [sp, #11]
	date_tmp[0] = get_date(DATE_TYPE);
	date_tmp[1] = get_date(MONTH_TYPE);
	date_tmp[2] = get_date(YEAR_TYPE);
	sprintf((char*)date, "%02d:%02d:20%02d\r", date_tmp[0], date_tmp[1], date_tmp[2]);
 800424c:	462b      	mov	r3, r5
 800424e:	4622      	mov	r2, r4
 8004250:	9100      	str	r1, [sp, #0]
 8004252:	a802      	add	r0, sp, #8
 8004254:	491b      	ldr	r1, [pc, #108]	; (80042c4 <draw_clock+0x32c>)
 8004256:	f009 fc8f 	bl	800db78 <siprintf>
	GUI_SetFont(&GUI_Font24B_ASCII);
 800425a:	4650      	mov	r0, sl
 800425c:	f005 faec 	bl	8009838 <GUI_SetFont>
	GUI_SetTextMode(GUI_TM_TRANS);
 8004260:	2002      	movs	r0, #2
 8004262:	f005 fadf 	bl	8009824 <GUI_SetTextMode>
	GUI_DispStringHCenterAt(date, 136, 200);
 8004266:	22c8      	movs	r2, #200	; 0xc8
 8004268:	2188      	movs	r1, #136	; 0x88
 800426a:	a802      	add	r0, sp, #8
 800426c:	f005 fe9a 	bl	8009fa4 <GUI_DispStringHCenterAt>


	GUI_MEMDEV_CopyToLCD(hMem_clock);
 8004270:	f8d8 0000 	ldr.w	r0, [r8]
 8004274:	f002 ff16 	bl	80070a4 <GUI_MEMDEV_CopyToLCD>
	GUI_MEMDEV_Delete(hMem_clock);
 8004278:	f8d8 0000 	ldr.w	r0, [r8]
 800427c:	f002 fe34 	bl	8006ee8 <GUI_MEMDEV_Delete>
}
 8004280:	b009      	add	sp, #36	; 0x24
 8004282:	ecbd 8b02 	vpop	{d8}
 8004286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800428a:	bf00      	nop
 800428c:	f3af 8000 	nop.w
 8004290:	1a5d2372 	.word	0x1a5d2372
 8004294:	404ca5dc 	.word	0x404ca5dc
 8004298:	2001941c 	.word	0x2001941c
 800429c:	200190bc 	.word	0x200190bc
 80042a0:	200190c0 	.word	0x200190c0
 80042a4:	0800f558 	.word	0x0800f558
 80042a8:	aaaaaaab 	.word	0xaaaaaaab
 80042ac:	88888889 	.word	0x88888889
 80042b0:	40490000 	.word	0x40490000
 80042b4:	40610000 	.word	0x40610000
 80042b8:	cccccccd 	.word	0xcccccccd
 80042bc:	40540000 	.word	0x40540000
 80042c0:	40568000 	.word	0x40568000
 80042c4:	0800f560 	.word	0x0800f560
 80042c8:	20019418 	.word	0x20019418
 80042cc:	080105a4 	.word	0x080105a4
 80042d0:	200190b8 	.word	0x200190b8

080042d4 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d4:	f04f 0a00 	mov.w	sl, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042d8:	f04f 0901 	mov.w	r9, #1
  hi2c1.Instance = I2C1;
 80042dc:	4edf      	ldr	r6, [pc, #892]	; (800465c <main+0x388>)
 80042de:	4ce0      	ldr	r4, [pc, #896]	; (8004660 <main+0x38c>)
{
 80042e0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042e4:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 8004694 <main+0x3c0>
{
 80042e8:	b0a3      	sub	sp, #140	; 0x8c
  HAL_Init();
 80042ea:	f7fc fe53 	bl	8000f94 <HAL_Init>
  hadc3.Instance = ADC3;
 80042ee:	4fdd      	ldr	r7, [pc, #884]	; (8004664 <main+0x390>)
  SystemClock_Config();
 80042f0:	f7ff fc3e 	bl	8003b70 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042f4:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
 80042f8:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_RESET);
 80042fc:	4652      	mov	r2, sl
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042fe:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_RESET);
 8004302:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004306:	48d8      	ldr	r0, [pc, #864]	; (8004668 <main+0x394>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004308:	f10d 0888 	add.w	r8, sp, #136	; 0x88
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800430c:	e9cd aa1c 	strd	sl, sl, [sp, #112]	; 0x70
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004310:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 8004314:	f043 0304 	orr.w	r3, r3, #4
 8004318:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
 800431c:	f8db 5030 	ldr.w	r5, [fp, #48]	; 0x30
  hrtc.Instance = RTC;
 8004320:	4bd2      	ldr	r3, [pc, #840]	; (800466c <main+0x398>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004322:	f005 0504 	and.w	r5, r5, #4
 8004326:	9514      	str	r5, [sp, #80]	; 0x50
 8004328:	9d14      	ldr	r5, [sp, #80]	; 0x50
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800432a:	461d      	mov	r5, r3
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800432c:	f8db c030 	ldr.w	ip, [fp, #48]	; 0x30
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8004330:	9311      	str	r3, [sp, #68]	; 0x44
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004332:	f04c 0c20 	orr.w	ip, ip, #32
 8004336:	f8cb c030 	str.w	ip, [fp, #48]	; 0x30
 800433a:	f8db c030 	ldr.w	ip, [fp, #48]	; 0x30
 800433e:	f00c 0c20 	and.w	ip, ip, #32
 8004342:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8004346:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800434a:	f8db c030 	ldr.w	ip, [fp, #48]	; 0x30
 800434e:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8004352:	f8cb c030 	str.w	ip, [fp, #48]	; 0x30
 8004356:	f8db c030 	ldr.w	ip, [fp, #48]	; 0x30
 800435a:	f00c 0c80 	and.w	ip, ip, #128	; 0x80
 800435e:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 8004362:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004366:	f8db c030 	ldr.w	ip, [fp, #48]	; 0x30
 800436a:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 800436e:	f8cb c030 	str.w	ip, [fp, #48]	; 0x30
 8004372:	f8db c030 	ldr.w	ip, [fp, #48]	; 0x30
 8004376:	f00c 0c40 	and.w	ip, ip, #64	; 0x40
 800437a:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800437e:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004382:	f8db c030 	ldr.w	ip, [fp, #48]	; 0x30
 8004386:	f04c 0c02 	orr.w	ip, ip, #2
 800438a:	f8cb c030 	str.w	ip, [fp, #48]	; 0x30
 800438e:	f8db c030 	ldr.w	ip, [fp, #48]	; 0x30
 8004392:	f00c 0c02 	and.w	ip, ip, #2
 8004396:	f8cd c060 	str.w	ip, [sp, #96]	; 0x60
 800439a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_RESET);
 800439e:	f7fd fbcf 	bl	8001b40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80043a2:	4652      	mov	r2, sl
 80043a4:	2108      	movs	r1, #8
 80043a6:	48b2      	ldr	r0, [pc, #712]	; (8004670 <main+0x39c>)
 80043a8:	f7fd fbca 	bl	8001b40 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80043ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043b0:	a91c      	add	r1, sp, #112	; 0x70
 80043b2:	48ad      	ldr	r0, [pc, #692]	; (8004668 <main+0x394>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043b4:	e9cd 291c 	strd	r2, r9, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b8:	e9cd aa1e 	strd	sl, sl, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043bc:	f7fd faba 	bl	8001934 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80043c0:	2208      	movs	r2, #8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043c2:	a91c      	add	r1, sp, #112	; 0x70
 80043c4:	48aa      	ldr	r0, [pc, #680]	; (8004670 <main+0x39c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c6:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80043ca:	921c      	str	r2, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043cc:	e9cd 9a1d 	strd	r9, sl, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043d0:	f7fd fab0 	bl	8001934 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80043d4:	2010      	movs	r0, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d6:	2202      	movs	r2, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043d8:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80043da:	901c      	str	r0, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043dc:	48a4      	ldr	r0, [pc, #656]	; (8004670 <main+0x39c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043de:	921d      	str	r2, [sp, #116]	; 0x74
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80043e0:	9220      	str	r2, [sp, #128]	; 0x80
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e2:	e9cd aa1e 	strd	sl, sl, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043e6:	f7fd faa5 	bl	8001934 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80043ea:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80043ee:	4652      	mov	r2, sl
 80043f0:	4651      	mov	r1, sl
  __HAL_RCC_DMA2_CLK_ENABLE();
 80043f2:	f440 0c80 	orr.w	ip, r0, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80043f6:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 80043f8:	f8cb c030 	str.w	ip, [fp, #48]	; 0x30
 80043fc:	f8db c030 	ldr.w	ip, [fp, #48]	; 0x30
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004400:	f04f 0b00 	mov.w	fp, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004404:	f40c 0c80 	and.w	ip, ip, #4194304	; 0x400000
 8004408:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 800440c:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004410:	f7fd f878 	bl	8001504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004414:	2038      	movs	r0, #56	; 0x38
 8004416:	f7fd f8ab 	bl	8001570 <HAL_NVIC_EnableIRQ>
  hi2c1.Init.Timing = 0x20303E5D;
 800441a:	4a96      	ldr	r2, [pc, #600]	; (8004674 <main+0x3a0>)
  hi2c1.Instance = I2C1;
 800441c:	4996      	ldr	r1, [pc, #600]	; (8004678 <main+0x3a4>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800441e:	4630      	mov	r0, r6
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004420:	f8c6 a020 	str.w	sl, [r6, #32]
  hi2c1.Init.Timing = 0x20303E5D;
 8004424:	e9c6 1200 	strd	r1, r2, [r6]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004428:	e9c6 a902 	strd	sl, r9, [r6, #8]
  hi2c1.Init.OwnAddress2 = 0;
 800442c:	e9c6 aa04 	strd	sl, sl, [r6, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004430:	e9c6 aa06 	strd	sl, sl, [r6, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004434:	f7fd fc3a 	bl	8001cac <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004438:	4651      	mov	r1, sl
 800443a:	4630      	mov	r0, r6
 800443c:	f7fd fd5a 	bl	8001ef4 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004440:	4651      	mov	r1, sl
 8004442:	4630      	mov	r0, r6
 8004444:	f7fd fd80 	bl	8001f48 <HAL_I2CEx_ConfigDigitalFilter>
  hadc3.Instance = ADC3;
 8004448:	f8df c24c 	ldr.w	ip, [pc, #588]	; 8004698 <main+0x3c4>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800444c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004450:	4a8a      	ldr	r2, [pc, #552]	; (800467c <main+0x3a8>)
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004452:	4638      	mov	r0, r7
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004454:	f8c7 a008 	str.w	sl, [r7, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004458:	f8c7 9010 	str.w	r9, [r7, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800445c:	f8c7 9018 	str.w	r9, [r7, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004460:	f887 a020 	strb.w	sl, [r7, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004464:	f8c7 a02c 	str.w	sl, [r7, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004468:	f8c7 a00c 	str.w	sl, [r7, #12]
  hadc3.Init.NbrOfConversion = 1;
 800446c:	f8c7 901c 	str.w	r9, [r7, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8004470:	f887 9030 	strb.w	r9, [r7, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004474:	f8c7 a014 	str.w	sl, [r7, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004478:	62ba      	str	r2, [r7, #40]	; 0x28
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800447a:	e9c7 c100 	strd	ip, r1, [r7]
  ADC_ChannelConfTypeDef sConfig = {0};
 800447e:	e9cd aa1c 	strd	sl, sl, [sp, #112]	; 0x70
 8004482:	e9cd aa1e 	strd	sl, sl, [sp, #120]	; 0x78
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004486:	f7fc fdb5 	bl	8000ff4 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_6;
 800448a:	f04f 0c06 	mov.w	ip, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800448e:	2207      	movs	r2, #7
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004490:	a91c      	add	r1, sp, #112	; 0x70
 8004492:	4638      	mov	r0, r7
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004494:	921e      	str	r2, [sp, #120]	; 0x78
  sConfig.Channel = ADC_CHANNEL_6;
 8004496:	e9cd c91c 	strd	ip, r9, [sp, #112]	; 0x70
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800449a:	f7fc ff5f 	bl	800135c <HAL_ADC_ConfigChannel>
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800449e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  hrtc.Instance = RTC;
 80044a0:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 800469c <main+0x3c8>
  hrtc.Init.AsynchPrediv = 127;
 80044a4:	217f      	movs	r1, #127	; 0x7f
  hrtc.Init.SynchPrediv = 255;
 80044a6:	22ff      	movs	r2, #255	; 0xff
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80044a8:	4618      	mov	r0, r3
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80044aa:	f8c3 a004 	str.w	sl, [r3, #4]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80044ae:	f8c3 a018 	str.w	sl, [r3, #24]
  hrtc.Instance = RTC;
 80044b2:	f8c3 c000 	str.w	ip, [r3]
  RTC_DateTypeDef sDate = {0};
 80044b6:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  hrtc.Init.SynchPrediv = 255;
 80044ba:	e9c3 1202 	strd	r1, r2, [r3, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80044be:	e9c3 aa04 	strd	sl, sl, [r3, #16]
  RTC_TimeTypeDef sTime = {0};
 80044c2:	e9cd aa1c 	strd	sl, sl, [sp, #112]	; 0x70
 80044c6:	e9cd aa1e 	strd	sl, sl, [sp, #120]	; 0x78
 80044ca:	e9cd aa20 	strd	sl, sl, [sp, #128]	; 0x80
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80044ce:	f7fe fb03 	bl	8002ad8 <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80044d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  sTime.Hours = 0x0;
 80044d4:	f44f 4eb2 	mov.w	lr, #22784	; 0x5900
  sTime.Minutes = 0x59;
 80044d8:	f04f 0c55 	mov.w	ip, #85	; 0x55
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80044dc:	f04f 0a00 	mov.w	sl, #0
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80044e0:	464a      	mov	r2, r9
 80044e2:	a91c      	add	r1, sp, #112	; 0x70
 80044e4:	4618      	mov	r0, r3
  sTime.Hours = 0x0;
 80044e6:	f8ad e070 	strh.w	lr, [sp, #112]	; 0x70
  sTime.Minutes = 0x59;
 80044ea:	f88d c072 	strb.w	ip, [sp, #114]	; 0x72
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80044ee:	e9cd ab20 	strd	sl, fp, [sp, #128]	; 0x80
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80044f2:	f7fe fb5f 	bl	8002bb4 <HAL_RTC_SetTime>
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80044f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80044f8:	4961      	ldr	r1, [pc, #388]	; (8004680 <main+0x3ac>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80044fa:	464a      	mov	r2, r9
 80044fc:	4618      	mov	r0, r3
 80044fe:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 80046a0 <main+0x3cc>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004502:	f848 1d24 	str.w	r1, [r8, #-36]!
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004506:	4641      	mov	r1, r8
 8004508:	f7fe fc3e 	bl	8002d88 <HAL_RTC_SetDate>
  HAL_ADC_Start_DMA(&hadc3,ADC_BUF,1);
 800450c:	464a      	mov	r2, r9
 800450e:	495d      	ldr	r1, [pc, #372]	; (8004684 <main+0x3b0>)
 8004510:	4638      	mov	r0, r7
 8004512:	f7fc fe25 	bl	8001160 <HAL_ADC_Start_DMA>
  Init_TOUCH_GPIO(hi2c1);
 8004516:	466f      	mov	r7, sp
  Init_LCD_GPIO();
 8004518:	f7fe fd00 	bl	8002f1c <Init_LCD_GPIO>
  Init_TOUCH_GPIO(hi2c1);
 800451c:	f106 0c10 	add.w	ip, r6, #16
	{
		if(get_time(HOURS_TYPE) == 1)
			GUI_Clear();
		GUI_SetColor(GUI_BLACK);
		tmp = get_temp();
		sprintf( (char *)temperatura_string, "%02d C\r", tmp);
 8004520:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80046a4 <main+0x3d0>
  Init_TOUCH_GPIO(hi2c1);
 8004524:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004528:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800452a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800452e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004530:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004534:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004536:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800453a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800453e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004542:	f7ff f957 	bl	80037f4 <Init_TOUCH_GPIO>
	temperatura = (100.0*(((float)temperatura_ADC_sirovo)/(2048.0)-0.5));
 8004546:	2600      	movs	r6, #0
  STMPE610_Init();
 8004548:	f7ff f966 	bl	8003818 <STMPE610_Init>
	temperatura = (100.0*(((float)temperatura_ADC_sirovo)/(2048.0)-0.5));
 800454c:	4f4e      	ldr	r7, [pc, #312]	; (8004688 <main+0x3b4>)
  GUI_Init();
 800454e:	f005 ff33 	bl	800a3b8 <GUI_Init>
  draw_display();
 8004552:	f7ff fb6d 	bl	8003c30 <draw_display>
 8004556:	e005      	b.n	8004564 <main+0x290>
			GUI_DispStringHCenterAt(temperatura_string, 390, 10*get_time(HOURS_TYPE));
		GUI_Delay(1000);
	}


	GUI_MEMDEV_CopyToLCD(hMem_temp);
 8004558:	6820      	ldr	r0, [r4, #0]
 800455a:	f002 fda3 	bl	80070a4 <GUI_MEMDEV_CopyToLCD>
	GUI_MEMDEV_Delete(hMem_temp);
 800455e:	6820      	ldr	r0, [r4, #0]
 8004560:	f002 fcc2 	bl	8006ee8 <GUI_MEMDEV_Delete>
	draw_clock();
 8004564:	f7ff fd18 	bl	8003f98 <draw_clock>
	hMem_temp = GUI_MEMDEV_Create(375, 0, 80, 255);
 8004568:	23ff      	movs	r3, #255	; 0xff
 800456a:	2250      	movs	r2, #80	; 0x50
 800456c:	2100      	movs	r1, #0
 800456e:	f240 1077 	movw	r0, #375	; 0x177
 8004572:	f002 fd17 	bl	8006fa4 <GUI_MEMDEV_Create>
 8004576:	6020      	str	r0, [r4, #0]
	GUI_MEMDEV_Select(hMem_temp);
 8004578:	f002 fd1c 	bl	8006fb4 <GUI_MEMDEV_Select>
	GUI_SetColor(GUI_BLACK);
 800457c:	2000      	movs	r0, #0
 800457e:	f005 f989 	bl	8009894 <GUI_SetColor>
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8004582:	2200      	movs	r2, #0
 8004584:	a91c      	add	r1, sp, #112	; 0x70
 8004586:	4628      	mov	r0, r5
 8004588:	f7fe fbc8 	bl	8002d1c <HAL_RTC_GetTime>
		return gTime.Minutes;
 800458c:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
	if( (get_time(MINUTES_TYPE) == 0) && (get_time(SECONDS_TYPE) == 0) )
 8004590:	2a00      	cmp	r2, #0
 8004592:	d1e1      	bne.n	8004558 <main+0x284>
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8004594:	a91c      	add	r1, sp, #112	; 0x70
 8004596:	4628      	mov	r0, r5
 8004598:	f7fe fbc0 	bl	8002d1c <HAL_RTC_GetTime>
	return gTime.Seconds;
 800459c:	f89d 2072 	ldrb.w	r2, [sp, #114]	; 0x72
	if( (get_time(MINUTES_TYPE) == 0) && (get_time(SECONDS_TYPE) == 0) )
 80045a0:	2a00      	cmp	r2, #0
 80045a2:	d1d9      	bne.n	8004558 <main+0x284>
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80045a4:	a91c      	add	r1, sp, #112	; 0x70
 80045a6:	4628      	mov	r0, r5
 80045a8:	f7fe fbb8 	bl	8002d1c <HAL_RTC_GetTime>
		return gTime.Hours;
 80045ac:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
		if(get_time(HOURS_TYPE) == 1)
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d050      	beq.n	8004656 <main+0x382>
		GUI_SetColor(GUI_BLACK);
 80045b4:	2000      	movs	r0, #0
 80045b6:	f005 f96d 	bl	8009894 <GUI_SetColor>
	temperatura = (100.0*(((float)temperatura_ADC_sirovo)/(2048.0)-0.5));
 80045ba:	edda 7a00 	vldr	s15, [sl]
 80045be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c2:	ee17 0a90 	vmov	r0, s15
 80045c6:	f7fb ffd7 	bl	8000578 <__aeabi_f2d>
 80045ca:	2200      	movs	r2, #0
 80045cc:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80045d0:	f7fc f82a 	bl	8000628 <__aeabi_dmul>
 80045d4:	2200      	movs	r2, #0
 80045d6:	4b2d      	ldr	r3, [pc, #180]	; (800468c <main+0x3b8>)
 80045d8:	f7fb fe6e 	bl	80002b8 <__aeabi_dsub>
 80045dc:	463b      	mov	r3, r7
 80045de:	4632      	mov	r2, r6
 80045e0:	f7fc f822 	bl	8000628 <__aeabi_dmul>
 80045e4:	f7fc fae2 	bl	8000bac <__aeabi_d2f>
	temperatura = (int)temperatura;
 80045e8:	ee07 0a90 	vmov	s15, r0
		sprintf( (char *)temperatura_string, "%02d C\r", tmp);
 80045ec:	4649      	mov	r1, r9
 80045ee:	4640      	mov	r0, r8
	temperatura = (int)temperatura;
 80045f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		sprintf( (char *)temperatura_string, "%02d C\r", tmp);
 80045f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045fc:	ee17 2a90 	vmov	r2, s15
 8004600:	f009 faba 	bl	800db78 <siprintf>
		GUI_SetFont(&GUI_Font13B_ASCII);
 8004604:	4822      	ldr	r0, [pc, #136]	; (8004690 <main+0x3bc>)
 8004606:	f005 f917 	bl	8009838 <GUI_SetFont>
		GUI_SetTextMode(GUI_TM_TRANS);
 800460a:	2002      	movs	r0, #2
 800460c:	f005 f90a 	bl	8009824 <GUI_SetTextMode>
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8004610:	2200      	movs	r2, #0
 8004612:	a91c      	add	r1, sp, #112	; 0x70
 8004614:	4628      	mov	r0, r5
 8004616:	f7fe fb81 	bl	8002d1c <HAL_RTC_GetTime>
		return gTime.Hours;
 800461a:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800461e:	a91c      	add	r1, sp, #112	; 0x70
 8004620:	2200      	movs	r2, #0
 8004622:	4628      	mov	r0, r5
		if(get_time(HOURS_TYPE) == 0)
 8004624:	b953      	cbnz	r3, 800463c <main+0x368>
			GUI_DispStringHCenterAt(temperatura_string, 390, 240);
 8004626:	22f0      	movs	r2, #240	; 0xf0
 8004628:	f44f 71c3 	mov.w	r1, #390	; 0x186
 800462c:	4640      	mov	r0, r8
 800462e:	f005 fcb9 	bl	8009fa4 <GUI_DispStringHCenterAt>
		GUI_Delay(1000);
 8004632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004636:	f004 fe36 	bl	80092a6 <GUI_Delay>
 800463a:	e78d      	b.n	8004558 <main+0x284>
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800463c:	f7fe fb6e 	bl	8002d1c <HAL_RTC_GetTime>
			GUI_DispStringHCenterAt(temperatura_string, 390, 10*get_time(HOURS_TYPE));
 8004640:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 8004644:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8004648:	4640      	mov	r0, r8
 800464a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800464e:	0052      	lsls	r2, r2, #1
 8004650:	f005 fca8 	bl	8009fa4 <GUI_DispStringHCenterAt>
 8004654:	e7ed      	b.n	8004632 <main+0x35e>
			GUI_Clear();
 8004656:	f005 fe75 	bl	800a344 <GUI_Clear>
 800465a:	e7ab      	b.n	80045b4 <main+0x2e0>
 800465c:	2001931c 	.word	0x2001931c
 8004660:	20019368 	.word	0x20019368
 8004664:	200193d0 	.word	0x200193d0
 8004668:	40021800 	.word	0x40021800
 800466c:	2001941c 	.word	0x2001941c
 8004670:	40020400 	.word	0x40020400
 8004674:	20303e5d 	.word	0x20303e5d
 8004678:	40005400 	.word	0x40005400
 800467c:	0f000001 	.word	0x0f000001
 8004680:	22010101 	.word	0x22010101
 8004684:	20019440 	.word	0x20019440
 8004688:	40590000 	.word	0x40590000
 800468c:	3fe00000 	.word	0x3fe00000
 8004690:	080123fc 	.word	0x080123fc
 8004694:	40023800 	.word	0x40023800
 8004698:	40012200 	.word	0x40012200
 800469c:	40002800 	.word	0x40002800
 80046a0:	2001943c 	.word	0x2001943c
 80046a4:	0800f698 	.word	0x0800f698

080046a8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop

080046ac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80046ac:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <HAL_MspInit+0x2c>)
{
 80046ae:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80046b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40
 80046b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ba:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80046be:	9200      	str	r2, [sp, #0]
 80046c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046c8:	645a      	str	r2, [r3, #68]	; 0x44
 80046ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d0:	9301      	str	r3, [sp, #4]
 80046d2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046d4:	b002      	add	sp, #8
 80046d6:	4770      	bx	lr
 80046d8:	40023800 	.word	0x40023800

080046dc <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC3)
 80046dc:	4b27      	ldr	r3, [pc, #156]	; (800477c <HAL_ADC_MspInit+0xa0>)
 80046de:	6802      	ldr	r2, [r0, #0]
{
 80046e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC3)
 80046e2:	429a      	cmp	r2, r3
{
 80046e4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e6:	f04f 0400 	mov.w	r4, #0
 80046ea:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80046ee:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80046f2:	9407      	str	r4, [sp, #28]
  if(hadc->Instance==ADC3)
 80046f4:	d001      	beq.n	80046fa <HAL_ADC_MspInit+0x1e>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80046f6:	b009      	add	sp, #36	; 0x24
 80046f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 80046fa:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
 80046fe:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004700:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004704:	2503      	movs	r5, #3
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004706:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004708:	a903      	add	r1, sp, #12
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800470a:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_RCC_ADC3_CLK_ENABLE();
 800470e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004712:	645a      	str	r2, [r3, #68]	; 0x44
 8004714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004716:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800471a:	9201      	str	r2, [sp, #4]
 800471c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800471e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004720:	f042 0220 	orr.w	r2, r2, #32
 8004724:	631a      	str	r2, [r3, #48]	; 0x30
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004728:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800472a:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800472e:	4814      	ldr	r0, [pc, #80]	; (8004780 <HAL_ADC_MspInit+0xa4>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004730:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004732:	9302      	str	r3, [sp, #8]
    hdma_adc3.Instance = DMA2_Stream0;
 8004734:	4d13      	ldr	r5, [pc, #76]	; (8004784 <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004736:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004738:	f7fd f8fc 	bl	8001934 <HAL_GPIO_Init>
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800473c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hdma_adc3.Instance = DMA2_Stream0;
 8004740:	f8df c044 	ldr.w	ip, [pc, #68]	; 8004788 <HAL_ADC_MspInit+0xac>
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004744:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004748:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800474c:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004750:	60ac      	str	r4, [r5, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004752:	60ec      	str	r4, [r5, #12]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8004754:	e9c5 c000 	strd	ip, r0, [r5]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8004758:	4628      	mov	r0, r5
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800475a:	e9c5 4408 	strd	r4, r4, [r5, #32]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800475e:	e9c5 7104 	strd	r7, r1, [r5, #16]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8004762:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8004766:	f7fc ff2d 	bl	80015c4 <HAL_DMA_Init>
 800476a:	b918      	cbnz	r0, 8004774 <HAL_ADC_MspInit+0x98>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800476c:	63b5      	str	r5, [r6, #56]	; 0x38
 800476e:	63ae      	str	r6, [r5, #56]	; 0x38
}
 8004770:	b009      	add	sp, #36	; 0x24
 8004772:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8004774:	f7ff ff98 	bl	80046a8 <Error_Handler>
 8004778:	e7f8      	b.n	800476c <HAL_ADC_MspInit+0x90>
 800477a:	bf00      	nop
 800477c:	40012200 	.word	0x40012200
 8004780:	40021400 	.word	0x40021400
 8004784:	20019370 	.word	0x20019370
 8004788:	40026410 	.word	0x40026410

0800478c <HAL_I2C_MspInit>:
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 800478c:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800478e:	2300      	movs	r3, #0
  if(hi2c->Instance==I2C1)
 8004790:	4a17      	ldr	r2, [pc, #92]	; (80047f0 <HAL_I2C_MspInit+0x64>)
{
 8004792:	b570      	push	{r4, r5, r6, lr}
  if(hi2c->Instance==I2C1)
 8004794:	4291      	cmp	r1, r2
{
 8004796:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004798:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800479c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80047a0:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 80047a2:	d001      	beq.n	80047a8 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80047a4:	b008      	add	sp, #32
 80047a6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047a8:	4c12      	ldr	r4, [pc, #72]	; (80047f4 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047aa:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047ac:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80047ae:	26c0      	movs	r6, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047b2:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047b4:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047b6:	f043 0302 	orr.w	r3, r3, #2
 80047ba:	6323      	str	r3, [r4, #48]	; 0x30
 80047bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047be:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80047c0:	2204      	movs	r2, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047c2:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047c6:	9005      	str	r0, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047c8:	480b      	ldr	r0, [pc, #44]	; (80047f8 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047ca:	9301      	str	r3, [sp, #4]
 80047cc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80047ce:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80047d0:	e9cd 5206 	strd	r5, r2, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047d4:	f7fd f8ae 	bl	8001934 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80047d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047de:	6423      	str	r3, [r4, #64]	; 0x40
 80047e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047e6:	9302      	str	r3, [sp, #8]
 80047e8:	9b02      	ldr	r3, [sp, #8]
}
 80047ea:	b008      	add	sp, #32
 80047ec:	bd70      	pop	{r4, r5, r6, pc}
 80047ee:	bf00      	nop
 80047f0:	40005400 	.word	0x40005400
 80047f4:	40023800 	.word	0x40023800
 80047f8:	40020400 	.word	0x40020400

080047fc <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80047fc:	6802      	ldr	r2, [r0, #0]
 80047fe:	4b04      	ldr	r3, [pc, #16]	; (8004810 <HAL_RTC_MspInit+0x14>)
 8004800:	429a      	cmp	r2, r3
 8004802:	d104      	bne.n	800480e <HAL_RTC_MspInit+0x12>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004804:	4a03      	ldr	r2, [pc, #12]	; (8004814 <HAL_RTC_MspInit+0x18>)
 8004806:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800480c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800480e:	4770      	bx	lr
 8004810:	40002800 	.word	0x40002800
 8004814:	40023800 	.word	0x40023800

08004818 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop

0800481c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800481c:	e7fe      	b.n	800481c <HardFault_Handler>
 800481e:	bf00      	nop

08004820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004820:	e7fe      	b.n	8004820 <MemManage_Handler>
 8004822:	bf00      	nop

08004824 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004824:	e7fe      	b.n	8004824 <BusFault_Handler>
 8004826:	bf00      	nop

08004828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004828:	e7fe      	b.n	8004828 <UsageFault_Handler>
 800482a:	bf00      	nop

0800482c <SVC_Handler>:
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop

08004830 <DebugMon_Handler>:
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop

08004834 <PendSV_Handler>:
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop

08004838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004838:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800483a:	f7fc fbb7 	bl	8000fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
HAL_SYSTICK_IRQHandler();
  /* USER CODE END SysTick_IRQn 1 */
}
 800483e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
HAL_SYSTICK_IRQHandler();
 8004842:	f7fc bebb 	b.w	80015bc <HAL_SYSTICK_IRQHandler>
 8004846:	bf00      	nop

08004848 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004848:	4801      	ldr	r0, [pc, #4]	; (8004850 <DMA2_Stream0_IRQHandler+0x8>)
 800484a:	f7fc bf9d 	b.w	8001788 <HAL_DMA_IRQHandler>
 800484e:	bf00      	nop
 8004850:	20019370 	.word	0x20019370

08004854 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004854:	4a0c      	ldr	r2, [pc, #48]	; (8004888 <_sbrk+0x34>)
{
 8004856:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8004858:	6813      	ldr	r3, [r2, #0]
 800485a:	b133      	cbz	r3, 800486a <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800485c:	4418      	add	r0, r3
 800485e:	4669      	mov	r1, sp
 8004860:	4288      	cmp	r0, r1
 8004862:	d809      	bhi.n	8004878 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8004864:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8004866:	4618      	mov	r0, r3
 8004868:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800486a:	4908      	ldr	r1, [pc, #32]	; (800488c <_sbrk+0x38>)
 800486c:	460b      	mov	r3, r1
 800486e:	6011      	str	r1, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8004870:	4669      	mov	r1, sp
 8004872:	4418      	add	r0, r3
 8004874:	4288      	cmp	r0, r1
 8004876:	d9f5      	bls.n	8004864 <_sbrk+0x10>
		errno = ENOMEM;
 8004878:	f009 f928 	bl	800dacc <__errno>
 800487c:	220c      	movs	r2, #12
		return (caddr_t) -1;
 800487e:	f04f 33ff 	mov.w	r3, #4294967295
		errno = ENOMEM;
 8004882:	6002      	str	r2, [r0, #0]
}
 8004884:	4618      	mov	r0, r3
 8004886:	bd08      	pop	{r3, pc}
 8004888:	200190c4 	.word	0x200190c4
 800488c:	200195d0 	.word	0x200195d0

08004890 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004890:	4a03      	ldr	r2, [pc, #12]	; (80048a0 <SystemInit+0x10>)
 8004892:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004896:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800489a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800489e:	4770      	bx	lr
 80048a0:	e000ed00 	.word	0xe000ed00

080048a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80048a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80048a8:	480d      	ldr	r0, [pc, #52]	; (80048e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80048aa:	490e      	ldr	r1, [pc, #56]	; (80048e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80048ac:	4a0e      	ldr	r2, [pc, #56]	; (80048e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80048ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048b0:	e002      	b.n	80048b8 <LoopCopyDataInit>

080048b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048b6:	3304      	adds	r3, #4

080048b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048bc:	d3f9      	bcc.n	80048b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048be:	4a0b      	ldr	r2, [pc, #44]	; (80048ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80048c0:	4c0b      	ldr	r4, [pc, #44]	; (80048f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80048c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048c4:	e001      	b.n	80048ca <LoopFillZerobss>

080048c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048c8:	3204      	adds	r2, #4

080048ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048cc:	d3fb      	bcc.n	80048c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80048ce:	f7ff ffdf 	bl	8004890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048d2:	f009 f901 	bl	800dad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048d6:	f7ff fcfd 	bl	80042d4 <main>
  bx  lr    
 80048da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80048dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80048e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048e4:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80048e8:	08013500 	.word	0x08013500
  ldr r2, =_sbss
 80048ec:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80048f0:	200195d0 	.word	0x200195d0

080048f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048f4:	e7fe      	b.n	80048f4 <ADC_IRQHandler>

080048f6 <WM__UpdateChildPositions>:
 80048f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fa:	b087      	sub	sp, #28
 80048fc:	69c4      	ldr	r4, [r0, #28]
 80048fe:	9303      	str	r3, [sp, #12]
 8004900:	468a      	mov	sl, r1
 8004902:	4693      	mov	fp, r2
 8004904:	2c00      	cmp	r4, #0
 8004906:	d06d      	beq.n	80049e4 <WM__UpdateChildPositions+0xee>
 8004908:	4620      	mov	r0, r4
 800490a:	f006 fbbd 	bl	800b088 <GUI_ALLOC_LockH>
 800490e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004910:	9005      	str	r0, [sp, #20]
 8004912:	f401 7320 	and.w	r3, r1, #640	; 0x280
 8004916:	2b80      	cmp	r3, #128	; 0x80
 8004918:	f8b0 8000 	ldrh.w	r8, [r0]
 800491c:	8842      	ldrh	r2, [r0, #2]
 800491e:	8886      	ldrh	r6, [r0, #4]
 8004920:	88c5      	ldrh	r5, [r0, #6]
 8004922:	d008      	beq.n	8004936 <WM__UpdateChildPositions+0x40>
 8004924:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004928:	d108      	bne.n	800493c <WM__UpdateChildPositions+0x46>
 800492a:	eb08 090a 	add.w	r9, r8, sl
 800492e:	fa1f f989 	uxth.w	r9, r9
 8004932:	9b03      	ldr	r3, [sp, #12]
 8004934:	e008      	b.n	8004948 <WM__UpdateChildPositions+0x52>
 8004936:	9803      	ldr	r0, [sp, #12]
 8004938:	b283      	uxth	r3, r0
 800493a:	e001      	b.n	8004940 <WM__UpdateChildPositions+0x4a>
 800493c:	fa1f f38a 	uxth.w	r3, sl
 8004940:	eb03 0908 	add.w	r9, r3, r8
 8004944:	fa1f f989 	uxth.w	r9, r9
 8004948:	f401 61a0 	and.w	r1, r1, #1280	; 0x500
 800494c:	4433      	add	r3, r6
 800494e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004952:	b29b      	uxth	r3, r3
 8004954:	d008      	beq.n	8004968 <WM__UpdateChildPositions+0x72>
 8004956:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 800495a:	d108      	bne.n	800496e <WM__UpdateChildPositions+0x78>
 800495c:	eb02 0c0b 	add.w	ip, r2, fp
 8004960:	fa1f fc8c 	uxth.w	ip, ip
 8004964:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8004966:	e008      	b.n	800497a <WM__UpdateChildPositions+0x84>
 8004968:	9910      	ldr	r1, [sp, #64]	; 0x40
 800496a:	b28f      	uxth	r7, r1
 800496c:	e001      	b.n	8004972 <WM__UpdateChildPositions+0x7c>
 800496e:	fa1f f78b 	uxth.w	r7, fp
 8004972:	eb07 0c02 	add.w	ip, r7, r2
 8004976:	fa1f fc8c 	uxth.w	ip, ip
 800497a:	fa0f f989 	sxth.w	r9, r9
 800497e:	fa0f f888 	sxth.w	r8, r8
 8004982:	b212      	sxth	r2, r2
 8004984:	442f      	add	r7, r5
 8004986:	fa0f fc8c 	sxth.w	ip, ip
 800498a:	ebb9 0108 	subs.w	r1, r9, r8
 800498e:	9202      	str	r2, [sp, #8]
 8004990:	b2bf      	uxth	r7, r7
 8004992:	ebc2 020c 	rsb	r2, r2, ip
 8004996:	d100      	bne.n	800499a <WM__UpdateChildPositions+0xa4>
 8004998:	b142      	cbz	r2, 80049ac <WM__UpdateChildPositions+0xb6>
 800499a:	4620      	mov	r0, r4
 800499c:	9301      	str	r3, [sp, #4]
 800499e:	f8cd c000 	str.w	ip, [sp]
 80049a2:	f000 f96b 	bl	8004c7c <WM_MoveWindow>
 80049a6:	f8dd c000 	ldr.w	ip, [sp]
 80049aa:	9b01      	ldr	r3, [sp, #4]
 80049ac:	b21b      	sxth	r3, r3
 80049ae:	ebc9 0903 	rsb	r9, r9, r3
 80049b2:	b236      	sxth	r6, r6
 80049b4:	9b02      	ldr	r3, [sp, #8]
 80049b6:	ebc6 0808 	rsb	r8, r6, r8
 80049ba:	b23f      	sxth	r7, r7
 80049bc:	b22d      	sxth	r5, r5
 80049be:	ebcc 0c07 	rsb	ip, ip, r7
 80049c2:	1b5d      	subs	r5, r3, r5
 80049c4:	eb19 0108 	adds.w	r1, r9, r8
 80049c8:	eb0c 0205 	add.w	r2, ip, r5
 80049cc:	d100      	bne.n	80049d0 <WM__UpdateChildPositions+0xda>
 80049ce:	b112      	cbz	r2, 80049d6 <WM__UpdateChildPositions+0xe0>
 80049d0:	4620      	mov	r0, r4
 80049d2:	f000 f844 	bl	8004a5e <WM_ResizeWindow>
 80049d6:	a806      	add	r0, sp, #24
 80049d8:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 80049dc:	6a1c      	ldr	r4, [r3, #32]
 80049de:	f006 fb61 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80049e2:	e78f      	b.n	8004904 <WM__UpdateChildPositions+0xe>
 80049e4:	b007      	add	sp, #28
 80049e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080049ea <WM_DeleteTimer>:
 80049ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049ec:	4605      	mov	r5, r0
 80049ee:	b168      	cbz	r0, 8004a0c <WM_DeleteTimer+0x22>
 80049f0:	f006 fb4a 	bl	800b088 <GUI_ALLOC_LockH>
 80049f4:	ac02      	add	r4, sp, #8
 80049f6:	f844 0d04 	str.w	r0, [r4, #-4]!
 80049fa:	6800      	ldr	r0, [r0, #0]
 80049fc:	f004 fc0a 	bl	8009214 <GUI_TIMER_Delete>
 8004a00:	4620      	mov	r0, r4
 8004a02:	f006 fb4f 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8004a06:	4628      	mov	r0, r5
 8004a08:	f006 fb6c 	bl	800b0e4 <GUI_ALLOC_Free>
 8004a0c:	b003      	add	sp, #12
 8004a0e:	bd30      	pop	{r4, r5, pc}

08004a10 <WM__DeleteAssocTimer>:
 8004a10:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a12:	4605      	mov	r5, r0
 8004a14:	a801      	add	r0, sp, #4
 8004a16:	f004 fbc9 	bl	80091ac <GUI_TIMER__GetFirstTimer>
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	b1dc      	cbz	r4, 8004a56 <WM__DeleteAssocTimer+0x46>
 8004a1e:	4620      	mov	r0, r4
 8004a20:	2101      	movs	r1, #1
 8004a22:	f004 fc2b 	bl	800927c <GUI_TIMER_GetFlag>
 8004a26:	9b01      	ldr	r3, [sp, #4]
 8004a28:	b183      	cbz	r3, 8004a4c <WM__DeleteAssocTimer+0x3c>
 8004a2a:	b178      	cbz	r0, 8004a4c <WM__DeleteAssocTimer+0x3c>
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f006 fb21 	bl	800b074 <GUI_ALLOC_h2p>
 8004a32:	6843      	ldr	r3, [r0, #4]
 8004a34:	42ab      	cmp	r3, r5
 8004a36:	d109      	bne.n	8004a4c <WM__DeleteAssocTimer+0x3c>
 8004a38:	4620      	mov	r0, r4
 8004a3a:	a901      	add	r1, sp, #4
 8004a3c:	9e01      	ldr	r6, [sp, #4]
 8004a3e:	f004 fbcd 	bl	80091dc <GUI_TIMER__GetNextTimerLin>
 8004a42:	4604      	mov	r4, r0
 8004a44:	4630      	mov	r0, r6
 8004a46:	f7ff ffd0 	bl	80049ea <WM_DeleteTimer>
 8004a4a:	e7e7      	b.n	8004a1c <WM__DeleteAssocTimer+0xc>
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	a901      	add	r1, sp, #4
 8004a50:	f004 fbc4 	bl	80091dc <GUI_TIMER__GetNextTimerLin>
 8004a54:	e7e1      	b.n	8004a1a <WM__DeleteAssocTimer+0xa>
 8004a56:	b002      	add	sp, #8
 8004a58:	bd70      	pop	{r4, r5, r6, pc}

08004a5a <WM_SendMessageNoPara>:
 8004a5a:	f006 be0d 	b.w	800b678 <WM__SendMessageNoPara>

08004a5e <WM_ResizeWindow>:
 8004a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a62:	ea51 0302 	orrs.w	r3, r1, r2
 8004a66:	b08a      	sub	sp, #40	; 0x28
 8004a68:	4680      	mov	r8, r0
 8004a6a:	460e      	mov	r6, r1
 8004a6c:	4617      	mov	r7, r2
 8004a6e:	d06e      	beq.n	8004b4e <WM_ResizeWindow+0xf0>
 8004a70:	2800      	cmp	r0, #0
 8004a72:	d06c      	beq.n	8004b4e <WM_ResizeWindow+0xf0>
 8004a74:	f006 fb08 	bl	800b088 <GUI_ALLOC_LockH>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	9003      	str	r0, [sp, #12]
 8004a7c:	c803      	ldmia	r0, {r0, r1}
 8004a7e:	ad04      	add	r5, sp, #16
 8004a80:	ac06      	add	r4, sp, #24
 8004a82:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a86:	e884 0003 	stmia.w	r4, {r0, r1}
 8004a8a:	b17e      	cbz	r6, 8004aac <WM_ResizeWindow+0x4e>
 8004a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a8e:	f402 7220 	and.w	r2, r2, #640	; 0x280
 8004a92:	2a80      	cmp	r2, #128	; 0x80
 8004a94:	d105      	bne.n	8004aa2 <WM_ResizeWindow+0x44>
 8004a96:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8004a9a:	1b96      	subs	r6, r2, r6
 8004a9c:	f8ad 6018 	strh.w	r6, [sp, #24]
 8004aa0:	e004      	b.n	8004aac <WM_ResizeWindow+0x4e>
 8004aa2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8004aa6:	4416      	add	r6, r2
 8004aa8:	f8ad 601c 	strh.w	r6, [sp, #28]
 8004aac:	b187      	cbz	r7, 8004ad0 <WM_ResizeWindow+0x72>
 8004aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ab0:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 8004ab4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004ab8:	d105      	bne.n	8004ac6 <WM_ResizeWindow+0x68>
 8004aba:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8004abe:	1bd7      	subs	r7, r2, r7
 8004ac0:	f8ad 701a 	strh.w	r7, [sp, #26]
 8004ac4:	e004      	b.n	8004ad0 <WM_ResizeWindow+0x72>
 8004ac6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8004aca:	4417      	add	r7, r2
 8004acc:	f8ad 701e 	strh.w	r7, [sp, #30]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad2:	03da      	lsls	r2, r3, #15
 8004ad4:	d502      	bpl.n	8004adc <WM_ResizeWindow+0x7e>
 8004ad6:	4640      	mov	r0, r8
 8004ad8:	f000 fc28 	bl	800532c <WM__InvalidateDrawAndDescs>
 8004adc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ae0:	9b03      	ldr	r3, [sp, #12]
 8004ae2:	e883 0003 	stmia.w	r3, {r0, r1}
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	079b      	lsls	r3, r3, #30
 8004aea:	d50a      	bpl.n	8004b02 <WM_ResizeWindow+0xa4>
 8004aec:	a808      	add	r0, sp, #32
 8004aee:	4629      	mov	r1, r5
 8004af0:	4622      	mov	r2, r4
 8004af2:	f004 ff71 	bl	80099d8 <GUI_MergeRect>
 8004af6:	9b03      	ldr	r3, [sp, #12]
 8004af8:	a808      	add	r0, sp, #32
 8004afa:	6999      	ldr	r1, [r3, #24]
 8004afc:	6a1a      	ldr	r2, [r3, #32]
 8004afe:	f000 fd19 	bl	8005534 <WM__InvalidateRectEx>
 8004b02:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 8004b06:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8004b0a:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 8004b0e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8004b12:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 8004b16:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8004b1a:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 8004b1e:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8004b22:	1ae3      	subs	r3, r4, r3
 8004b24:	1a38      	subs	r0, r7, r0
 8004b26:	ac0a      	add	r4, sp, #40	; 0x28
 8004b28:	1aaa      	subs	r2, r5, r2
 8004b2a:	9000      	str	r0, [sp, #0]
 8004b2c:	1a71      	subs	r1, r6, r1
 8004b2e:	9803      	ldr	r0, [sp, #12]
 8004b30:	f7ff fee1 	bl	80048f6 <WM__UpdateChildPositions>
 8004b34:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 8004b38:	f101 0008 	add.w	r0, r1, #8
 8004b3c:	f004 f91c 	bl	8008d78 <GUI__IntersectRect>
 8004b40:	4640      	mov	r0, r8
 8004b42:	2105      	movs	r1, #5
 8004b44:	f000 fd0e 	bl	8005564 <WM__SendMsgNoData>
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f006 faab 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8004b4e:	b00a      	add	sp, #40	; 0x28
 8004b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004b54 <WM_NotifyParent>:
 8004b54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b56:	2326      	movs	r3, #38	; 0x26
 8004b58:	9103      	str	r1, [sp, #12]
 8004b5a:	4669      	mov	r1, sp
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	f006 fdfd 	bl	800b75c <WM_SendToParent>
 8004b62:	b005      	add	sp, #20
 8004b64:	f85d fb04 	ldr.w	pc, [sp], #4

08004b68 <_MoveDescendents>:
 8004b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b6c:	b088      	sub	sp, #32
 8004b6e:	4606      	mov	r6, r0
 8004b70:	460c      	mov	r4, r1
 8004b72:	4615      	mov	r5, r2
 8004b74:	a804      	add	r0, sp, #16
 8004b76:	2100      	movs	r1, #0
 8004b78:	2210      	movs	r2, #16
 8004b7a:	f008 fff5 	bl	800db68 <memset>
 8004b7e:	b336      	cbz	r6, 8004bce <_MoveDescendents+0x66>
 8004b80:	4630      	mov	r0, r6
 8004b82:	f006 fa81 	bl	800b088 <GUI_ALLOC_LockH>
 8004b86:	4621      	mov	r1, r4
 8004b88:	462a      	mov	r2, r5
 8004b8a:	9001      	str	r0, [sp, #4]
 8004b8c:	f004 ff14 	bl	80099b8 <GUI_MoveRect>
 8004b90:	9801      	ldr	r0, [sp, #4]
 8004b92:	4621      	mov	r1, r4
 8004b94:	3008      	adds	r0, #8
 8004b96:	462a      	mov	r2, r5
 8004b98:	f004 ff0e 	bl	80099b8 <GUI_MoveRect>
 8004b9c:	a808      	add	r0, sp, #32
 8004b9e:	f850 2d1c 	ldr.w	r2, [r0, #-28]!
 8004ba2:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8004ba6:	6a17      	ldr	r7, [r2, #32]
 8004ba8:	f006 fa7c 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8004bac:	4640      	mov	r0, r8
 8004bae:	4621      	mov	r1, r4
 8004bb0:	462a      	mov	r2, r5
 8004bb2:	f7ff ffd9 	bl	8004b68 <_MoveDescendents>
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	9304      	str	r3, [sp, #16]
 8004bba:	4630      	mov	r0, r6
 8004bbc:	ab02      	add	r3, sp, #8
 8004bbe:	a904      	add	r1, sp, #16
 8004bc0:	9307      	str	r3, [sp, #28]
 8004bc2:	9402      	str	r4, [sp, #8]
 8004bc4:	9503      	str	r5, [sp, #12]
 8004bc6:	463e      	mov	r6, r7
 8004bc8:	f006 fd6a 	bl	800b6a0 <WM__SendMessage>
 8004bcc:	e7d7      	b.n	8004b7e <_MoveDescendents+0x16>
 8004bce:	b008      	add	sp, #32
 8004bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004bd4 <WM__MoveWindow>:
 8004bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bd8:	b08b      	sub	sp, #44	; 0x2c
 8004bda:	4606      	mov	r6, r0
 8004bdc:	460d      	mov	r5, r1
 8004bde:	4614      	mov	r4, r2
 8004be0:	a806      	add	r0, sp, #24
 8004be2:	2100      	movs	r1, #0
 8004be4:	2210      	movs	r2, #16
 8004be6:	f008 ffbf 	bl	800db68 <memset>
 8004bea:	2e00      	cmp	r6, #0
 8004bec:	d043      	beq.n	8004c76 <WM__MoveWindow+0xa2>
 8004bee:	b90d      	cbnz	r5, 8004bf4 <WM__MoveWindow+0x20>
 8004bf0:	2c00      	cmp	r4, #0
 8004bf2:	d040      	beq.n	8004c76 <WM__MoveWindow+0xa2>
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	f006 fa47 	bl	800b088 <GUI_ALLOC_LockH>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	9001      	str	r0, [sp, #4]
 8004bfe:	c803      	ldmia	r0, {r0, r1}
 8004c00:	f10d 0808 	add.w	r8, sp, #8
 8004c04:	e888 0003 	stmia.w	r8, {r0, r1}
 8004c08:	4622      	mov	r2, r4
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	f004 fed3 	bl	80099b8 <GUI_MoveRect>
 8004c12:	9801      	ldr	r0, [sp, #4]
 8004c14:	af0a      	add	r7, sp, #40	; 0x28
 8004c16:	4629      	mov	r1, r5
 8004c18:	4622      	mov	r2, r4
 8004c1a:	3008      	adds	r0, #8
 8004c1c:	f004 fecc 	bl	80099b8 <GUI_MoveRect>
 8004c20:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 8004c24:	f8d3 901c 	ldr.w	r9, [r3, #28]
 8004c28:	4638      	mov	r0, r7
 8004c2a:	f006 fa3b 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8004c2e:	4622      	mov	r2, r4
 8004c30:	4648      	mov	r0, r9
 8004c32:	4629      	mov	r1, r5
 8004c34:	f7ff ff98 	bl	8004b68 <_MoveDescendents>
 8004c38:	4630      	mov	r0, r6
 8004c3a:	f006 fa25 	bl	800b088 <GUI_ALLOC_LockH>
 8004c3e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004c40:	9001      	str	r0, [sp, #4]
 8004c42:	0792      	lsls	r2, r2, #30
 8004c44:	d50a      	bpl.n	8004c5c <WM__MoveWindow+0x88>
 8004c46:	6981      	ldr	r1, [r0, #24]
 8004c48:	b141      	cbz	r1, 8004c5c <WM__MoveWindow+0x88>
 8004c4a:	6a02      	ldr	r2, [r0, #32]
 8004c4c:	f000 fc5d 	bl	800550a <WM__InvalidateParent>
 8004c50:	9b01      	ldr	r3, [sp, #4]
 8004c52:	4640      	mov	r0, r8
 8004c54:	6999      	ldr	r1, [r3, #24]
 8004c56:	6a1a      	ldr	r2, [r3, #32]
 8004c58:	f000 fc57 	bl	800550a <WM__InvalidateParent>
 8004c5c:	4638      	mov	r0, r7
 8004c5e:	f006 fa21 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8004c62:	2303      	movs	r3, #3
 8004c64:	9306      	str	r3, [sp, #24]
 8004c66:	4630      	mov	r0, r6
 8004c68:	ab04      	add	r3, sp, #16
 8004c6a:	a906      	add	r1, sp, #24
 8004c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c6e:	9504      	str	r5, [sp, #16]
 8004c70:	9405      	str	r4, [sp, #20]
 8004c72:	f006 fd15 	bl	800b6a0 <WM__SendMessage>
 8004c76:	b00b      	add	sp, #44	; 0x2c
 8004c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004c7c <WM_MoveWindow>:
 8004c7c:	f7ff bfaa 	b.w	8004bd4 <WM__MoveWindow>

08004c80 <WM_GetParent>:
 8004c80:	b508      	push	{r3, lr}
 8004c82:	4603      	mov	r3, r0
 8004c84:	b110      	cbz	r0, 8004c8c <WM_GetParent+0xc>
 8004c86:	f006 f9f5 	bl	800b074 <GUI_ALLOC_h2p>
 8004c8a:	6983      	ldr	r3, [r0, #24]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	bd08      	pop	{r3, pc}

08004c90 <WM_GetFirstChild>:
 8004c90:	b508      	push	{r3, lr}
 8004c92:	4603      	mov	r3, r0
 8004c94:	b110      	cbz	r0, 8004c9c <WM_GetFirstChild+0xc>
 8004c96:	f006 f9ed 	bl	800b074 <GUI_ALLOC_h2p>
 8004c9a:	69c3      	ldr	r3, [r0, #28]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	bd08      	pop	{r3, pc}

08004ca0 <WM_GetDesktopWindow>:
 8004ca0:	4b03      	ldr	r3, [pc, #12]	; (8004cb0 <WM_GetDesktopWindow+0x10>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	7c5a      	ldrb	r2, [r3, #17]
 8004ca6:	4b03      	ldr	r3, [pc, #12]	; (8004cb4 <WM_GetDesktopWindow+0x14>)
 8004ca8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	20000024 	.word	0x20000024
 8004cb4:	2001944c 	.word	0x2001944c

08004cb8 <WM__GetClientRectEx>:
 8004cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cba:	460d      	mov	r5, r1
 8004cbc:	b158      	cbz	r0, 8004cd6 <WM__GetClientRectEx+0x1e>
 8004cbe:	b151      	cbz	r1, 8004cd6 <WM__GetClientRectEx+0x1e>
 8004cc0:	f006 f9e2 	bl	800b088 <GUI_ALLOC_LockH>
 8004cc4:	ac02      	add	r4, sp, #8
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	f844 0d04 	str.w	r0, [r4, #-4]!
 8004ccc:	f000 fc55 	bl	800557a <WM__GetClientRectWin>
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f006 f9e7 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8004cd6:	b003      	add	sp, #12
 8004cd8:	bd30      	pop	{r4, r5, pc}
	...

08004cdc <_OnExit>:
 8004cdc:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <_OnExit+0x2c>)
 8004cde:	490b      	ldr	r1, [pc, #44]	; (8004d0c <_OnExit+0x30>)
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	7013      	strb	r3, [r2, #0]
 8004ce4:	4a0a      	ldr	r2, [pc, #40]	; (8004d10 <_OnExit+0x34>)
 8004ce6:	600b      	str	r3, [r1, #0]
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	4a0a      	ldr	r2, [pc, #40]	; (8004d14 <_OnExit+0x38>)
 8004cec:	604b      	str	r3, [r1, #4]
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	4a09      	ldr	r2, [pc, #36]	; (8004d18 <_OnExit+0x3c>)
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	6053      	str	r3, [r2, #4]
 8004cf6:	4a09      	ldr	r2, [pc, #36]	; (8004d1c <_OnExit+0x40>)
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <_OnExit+0x44>)
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	4a09      	ldr	r2, [pc, #36]	; (8004d24 <_OnExit+0x48>)
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	4a09      	ldr	r2, [pc, #36]	; (8004d28 <_OnExit+0x4c>)
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	4770      	bx	lr
 8004d08:	200190f0 	.word	0x200190f0
 8004d0c:	2001945c 	.word	0x2001945c
 8004d10:	200190c8 	.word	0x200190c8
 8004d14:	20019480 	.word	0x20019480
 8004d18:	20019488 	.word	0x20019488
 8004d1c:	20019494 	.word	0x20019494
 8004d20:	20019448 	.word	0x20019448
 8004d24:	20019474 	.word	0x20019474
 8004d28:	20019484 	.word	0x20019484

08004d2c <_Paint1>:
 8004d2c:	b510      	push	{r4, lr}
 8004d2e:	4604      	mov	r4, r0
 8004d30:	f006 f9a0 	bl	800b074 <GUI_ALLOC_h2p>
 8004d34:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004d36:	4a04      	ldr	r2, [pc, #16]	; (8004d48 <_Paint1+0x1c>)
 8004d38:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004d3c:	4b03      	ldr	r3, [pc, #12]	; (8004d4c <_Paint1+0x20>)
 8004d3e:	4620      	mov	r0, r4
 8004d40:	bf08      	it	eq
 8004d42:	4613      	moveq	r3, r2
 8004d44:	4798      	blx	r3
 8004d46:	bd10      	pop	{r4, pc}
 8004d48:	08005b89 	.word	0x08005b89
 8004d4c:	08006159 	.word	0x08006159

08004d50 <_Findy1>:
 8004d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d52:	4605      	mov	r5, r0
 8004d54:	b085      	sub	sp, #20
 8004d56:	460c      	mov	r4, r1
 8004d58:	4616      	mov	r6, r2
 8004d5a:	2d00      	cmp	r5, #0
 8004d5c:	d04c      	beq.n	8004df8 <_Findy1+0xa8>
 8004d5e:	4628      	mov	r0, r5
 8004d60:	f006 f992 	bl	800b088 <GUI_ALLOC_LockH>
 8004d64:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8004d66:	9001      	str	r0, [sp, #4]
 8004d68:	07bb      	lsls	r3, r7, #30
 8004d6a:	4601      	mov	r1, r0
 8004d6c:	d53d      	bpl.n	8004dea <_Findy1+0x9a>
 8004d6e:	ad02      	add	r5, sp, #8
 8004d70:	b126      	cbz	r6, 8004d7c <_Findy1+0x2c>
 8004d72:	4628      	mov	r0, r5
 8004d74:	4632      	mov	r2, r6
 8004d76:	f003 ffcd 	bl	8008d14 <GUI__IntersectRects>
 8004d7a:	e002      	b.n	8004d82 <_Findy1+0x32>
 8004d7c:	c803      	ldmia	r0, {r0, r1}
 8004d7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d82:	4620      	mov	r0, r4
 8004d84:	4629      	mov	r1, r5
 8004d86:	f004 fdcd 	bl	8009924 <GUI_RectsIntersect>
 8004d8a:	b370      	cbz	r0, 8004dea <_Findy1+0x9a>
 8004d8c:	f017 0f01 	tst.w	r7, #1
 8004d90:	9b01      	ldr	r3, [sp, #4]
 8004d92:	d11e      	bne.n	8004dd2 <_Findy1+0x82>
 8004d94:	b13e      	cbz	r6, 8004da6 <_Findy1+0x56>
 8004d96:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004d9a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	bfa8      	it	ge
 8004da2:	4613      	movge	r3, r2
 8004da4:	e001      	b.n	8004daa <_Findy1+0x5a>
 8004da6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004daa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8004dae:	4293      	cmp	r3, r2
 8004db0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8004db4:	dd06      	ble.n	8004dc4 <_Findy1+0x74>
 8004db6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8004dba:	b219      	sxth	r1, r3
 8004dbc:	428a      	cmp	r2, r1
 8004dbe:	db14      	blt.n	8004dea <_Findy1+0x9a>
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	e004      	b.n	8004dce <_Findy1+0x7e>
 8004dc4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8004dc8:	b219      	sxth	r1, r3
 8004dca:	428a      	cmp	r2, r1
 8004dcc:	dd0d      	ble.n	8004dea <_Findy1+0x9a>
 8004dce:	80e3      	strh	r3, [r4, #6]
 8004dd0:	e00b      	b.n	8004dea <_Findy1+0x9a>
 8004dd2:	69df      	ldr	r7, [r3, #28]
 8004dd4:	b14f      	cbz	r7, 8004dea <_Findy1+0x9a>
 8004dd6:	4638      	mov	r0, r7
 8004dd8:	4621      	mov	r1, r4
 8004dda:	462a      	mov	r2, r5
 8004ddc:	f7ff ffb8 	bl	8004d50 <_Findy1>
 8004de0:	4638      	mov	r0, r7
 8004de2:	f006 f947 	bl	800b074 <GUI_ALLOC_h2p>
 8004de6:	6a07      	ldr	r7, [r0, #32]
 8004de8:	e7f4      	b.n	8004dd4 <_Findy1+0x84>
 8004dea:	a804      	add	r0, sp, #16
 8004dec:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8004df0:	6a1d      	ldr	r5, [r3, #32]
 8004df2:	f006 f957 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8004df6:	e7b0      	b.n	8004d5a <_Findy1+0xa>
 8004df8:	b005      	add	sp, #20
 8004dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004dfc <_Findx0>:
 8004dfc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004e00:	4604      	mov	r4, r0
 8004e02:	460f      	mov	r7, r1
 8004e04:	4690      	mov	r8, r2
 8004e06:	2500      	movs	r5, #0
 8004e08:	2c00      	cmp	r4, #0
 8004e0a:	d037      	beq.n	8004e7c <_Findx0+0x80>
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	f006 f93b 	bl	800b088 <GUI_ALLOC_LockH>
 8004e12:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8004e14:	9001      	str	r0, [sp, #4]
 8004e16:	07b2      	lsls	r2, r6, #30
 8004e18:	4601      	mov	r1, r0
 8004e1a:	d528      	bpl.n	8004e6e <_Findx0+0x72>
 8004e1c:	ac02      	add	r4, sp, #8
 8004e1e:	f1b8 0f00 	cmp.w	r8, #0
 8004e22:	d004      	beq.n	8004e2e <_Findx0+0x32>
 8004e24:	4620      	mov	r0, r4
 8004e26:	4642      	mov	r2, r8
 8004e28:	f003 ff74 	bl	8008d14 <GUI__IntersectRects>
 8004e2c:	e002      	b.n	8004e34 <_Findx0+0x38>
 8004e2e:	c803      	ldmia	r0, {r0, r1}
 8004e30:	e884 0003 	stmia.w	r4, {r0, r1}
 8004e34:	4638      	mov	r0, r7
 8004e36:	4621      	mov	r1, r4
 8004e38:	f004 fd74 	bl	8009924 <GUI_RectsIntersect>
 8004e3c:	b1b8      	cbz	r0, 8004e6e <_Findx0+0x72>
 8004e3e:	07f3      	lsls	r3, r6, #31
 8004e40:	d405      	bmi.n	8004e4e <_Findx0+0x52>
 8004e42:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8004e46:	3301      	adds	r3, #1
 8004e48:	803b      	strh	r3, [r7, #0]
 8004e4a:	2501      	movs	r5, #1
 8004e4c:	e00f      	b.n	8004e6e <_Findx0+0x72>
 8004e4e:	9b01      	ldr	r3, [sp, #4]
 8004e50:	69de      	ldr	r6, [r3, #28]
 8004e52:	b166      	cbz	r6, 8004e6e <_Findx0+0x72>
 8004e54:	4630      	mov	r0, r6
 8004e56:	4639      	mov	r1, r7
 8004e58:	4622      	mov	r2, r4
 8004e5a:	f7ff ffcf 	bl	8004dfc <_Findx0>
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	4630      	mov	r0, r6
 8004e62:	bf18      	it	ne
 8004e64:	2501      	movne	r5, #1
 8004e66:	f006 f905 	bl	800b074 <GUI_ALLOC_h2p>
 8004e6a:	6a06      	ldr	r6, [r0, #32]
 8004e6c:	e7f1      	b.n	8004e52 <_Findx0+0x56>
 8004e6e:	a804      	add	r0, sp, #16
 8004e70:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8004e74:	6a1c      	ldr	r4, [r3, #32]
 8004e76:	f006 f915 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8004e7a:	e7c5      	b.n	8004e08 <_Findx0+0xc>
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	b004      	add	sp, #16
 8004e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004e84 <_Findx1>:
 8004e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e86:	4604      	mov	r4, r0
 8004e88:	b085      	sub	sp, #20
 8004e8a:	460e      	mov	r6, r1
 8004e8c:	4617      	mov	r7, r2
 8004e8e:	2c00      	cmp	r4, #0
 8004e90:	d031      	beq.n	8004ef6 <_Findx1+0x72>
 8004e92:	4620      	mov	r0, r4
 8004e94:	f006 f8f8 	bl	800b088 <GUI_ALLOC_LockH>
 8004e98:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8004e9a:	9001      	str	r0, [sp, #4]
 8004e9c:	07aa      	lsls	r2, r5, #30
 8004e9e:	4601      	mov	r1, r0
 8004ea0:	d522      	bpl.n	8004ee8 <_Findx1+0x64>
 8004ea2:	ac02      	add	r4, sp, #8
 8004ea4:	b127      	cbz	r7, 8004eb0 <_Findx1+0x2c>
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	463a      	mov	r2, r7
 8004eaa:	f003 ff33 	bl	8008d14 <GUI__IntersectRects>
 8004eae:	e002      	b.n	8004eb6 <_Findx1+0x32>
 8004eb0:	c803      	ldmia	r0, {r0, r1}
 8004eb2:	e884 0003 	stmia.w	r4, {r0, r1}
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	4621      	mov	r1, r4
 8004eba:	f004 fd33 	bl	8009924 <GUI_RectsIntersect>
 8004ebe:	b198      	cbz	r0, 8004ee8 <_Findx1+0x64>
 8004ec0:	07eb      	lsls	r3, r5, #31
 8004ec2:	d404      	bmi.n	8004ece <_Findx1+0x4a>
 8004ec4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	80b3      	strh	r3, [r6, #4]
 8004ecc:	e00c      	b.n	8004ee8 <_Findx1+0x64>
 8004ece:	9b01      	ldr	r3, [sp, #4]
 8004ed0:	69dd      	ldr	r5, [r3, #28]
 8004ed2:	b14d      	cbz	r5, 8004ee8 <_Findx1+0x64>
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	4631      	mov	r1, r6
 8004ed8:	4622      	mov	r2, r4
 8004eda:	f7ff ffd3 	bl	8004e84 <_Findx1>
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f006 f8c8 	bl	800b074 <GUI_ALLOC_h2p>
 8004ee4:	6a05      	ldr	r5, [r0, #32]
 8004ee6:	e7f4      	b.n	8004ed2 <_Findx1+0x4e>
 8004ee8:	a804      	add	r0, sp, #16
 8004eea:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8004eee:	6a1c      	ldr	r4, [r3, #32]
 8004ef0:	f006 f8d8 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8004ef4:	e7cb      	b.n	8004e8e <_Findx1+0xa>
 8004ef6:	b005      	add	sp, #20
 8004ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004efc <_Paint1Trans>:
 8004efc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004f00:	4d21      	ldr	r5, [pc, #132]	; (8004f88 <_Paint1Trans+0x8c>)
 8004f02:	682b      	ldr	r3, [r5, #0]
 8004f04:	4606      	mov	r6, r0
 8004f06:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004f08:	f006 f8be 	bl	800b088 <GUI_ALLOC_LockH>
 8004f0c:	9000      	str	r0, [sp, #0]
 8004f0e:	4630      	mov	r0, r6
 8004f10:	f006 f8ba 	bl	800b088 <GUI_ALLOC_LockH>
 8004f14:	ac02      	add	r4, sp, #8
 8004f16:	4601      	mov	r1, r0
 8004f18:	9001      	str	r0, [sp, #4]
 8004f1a:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 8004f1e:	3008      	adds	r0, #8
 8004f20:	f004 fd00 	bl	8009924 <GUI_RectsIntersect>
 8004f24:	4607      	mov	r7, r0
 8004f26:	b328      	cbz	r0, 8004f74 <_Paint1Trans+0x78>
 8004f28:	9901      	ldr	r1, [sp, #4]
 8004f2a:	9a00      	ldr	r2, [sp, #0]
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	4c17      	ldr	r4, [pc, #92]	; (8004f8c <_Paint1Trans+0x90>)
 8004f30:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 8004f32:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 8004f36:	f101 0008 	add.w	r0, r1, #8
 8004f3a:	3208      	adds	r2, #8
 8004f3c:	f003 feea 	bl	8008d14 <GUI__IntersectRects>
 8004f40:	4668      	mov	r0, sp
 8004f42:	f006 f8af 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8004f46:	9a01      	ldr	r2, [sp, #4]
 8004f48:	682b      	ldr	r3, [r5, #0]
 8004f4a:	f9b2 1000 	ldrsh.w	r1, [r2]
 8004f4e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8004f52:	64d9      	str	r1, [r3, #76]	; 0x4c
 8004f54:	651a      	str	r2, [r3, #80]	; 0x50
 8004f56:	a801      	add	r0, sp, #4
 8004f58:	6026      	str	r6, [r4, #0]
 8004f5a:	f006 f8a3 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8004f5e:	4630      	mov	r0, r6
 8004f60:	f7ff fee4 	bl	8004d2c <_Paint1>
 8004f64:	2300      	movs	r3, #0
 8004f66:	6023      	str	r3, [r4, #0]
 8004f68:	682b      	ldr	r3, [r5, #0]
 8004f6a:	651f      	str	r7, [r3, #80]	; 0x50
 8004f6c:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
 8004f70:	2701      	movs	r7, #1
 8004f72:	e005      	b.n	8004f80 <_Paint1Trans+0x84>
 8004f74:	4668      	mov	r0, sp
 8004f76:	f006 f895 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8004f7a:	a801      	add	r0, sp, #4
 8004f7c:	f006 f892 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8004f80:	4638      	mov	r0, r7
 8004f82:	b002      	add	sp, #8
 8004f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f88:	20000024 	.word	0x20000024
 8004f8c:	20019448 	.word	0x20019448

08004f90 <_PaintTransChildren>:
 8004f90:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f94:	4606      	mov	r6, r0
 8004f96:	f006 f877 	bl	800b088 <GUI_ALLOC_LockH>
 8004f9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004f9c:	9001      	str	r0, [sp, #4]
 8004f9e:	079b      	lsls	r3, r3, #30
 8004fa0:	d405      	bmi.n	8004fae <_PaintTransChildren+0x1e>
 8004fa2:	a801      	add	r0, sp, #4
 8004fa4:	f006 f87e 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8004fa8:	b002      	add	sp, #8
 8004faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fae:	69c4      	ldr	r4, [r0, #28]
 8004fb0:	2c00      	cmp	r4, #0
 8004fb2:	d0f6      	beq.n	8004fa2 <_PaintTransChildren+0x12>
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f006 f867 	bl	800b088 <GUI_ALLOC_LockH>
 8004fba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004fbc:	ad02      	add	r5, sp, #8
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	f845 0d08 	str.w	r0, [r5, #-8]!
 8004fc8:	d137      	bne.n	800503a <_PaintTransChildren+0xaa>
 8004fca:	9901      	ldr	r1, [sp, #4]
 8004fcc:	3108      	adds	r1, #8
 8004fce:	f004 fca9 	bl	8009924 <GUI_RectsIntersect>
 8004fd2:	2800      	cmp	r0, #0
 8004fd4:	d031      	beq.n	800503a <_PaintTransChildren+0xaa>
 8004fd6:	a802      	add	r0, sp, #8
 8004fd8:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8004fdc:	f8b3 9008 	ldrh.w	r9, [r3, #8]
 8004fe0:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 8004fe4:	899f      	ldrh	r7, [r3, #12]
 8004fe6:	f8b3 a00e 	ldrh.w	sl, [r3, #14]
 8004fea:	f006 f85b 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8004fee:	4668      	mov	r0, sp
 8004ff0:	f006 f858 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f7ff ff81 	bl	8004efc <_Paint1Trans>
 8004ffa:	b170      	cbz	r0, 800501a <_PaintTransChildren+0x8a>
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	f006 f839 	bl	800b074 <GUI_ALLOC_h2p>
 8005002:	9000      	str	r0, [sp, #0]
 8005004:	4620      	mov	r0, r4
 8005006:	f7ff ffc3 	bl	8004f90 <_PaintTransChildren>
 800500a:	4620      	mov	r0, r4
 800500c:	f006 f832 	bl	800b074 <GUI_ALLOC_h2p>
 8005010:	9000      	str	r0, [sp, #0]
 8005012:	4630      	mov	r0, r6
 8005014:	f006 f82e 	bl	800b074 <GUI_ALLOC_h2p>
 8005018:	9001      	str	r0, [sp, #4]
 800501a:	4630      	mov	r0, r6
 800501c:	f006 f834 	bl	800b088 <GUI_ALLOC_LockH>
 8005020:	9001      	str	r0, [sp, #4]
 8005022:	4620      	mov	r0, r4
 8005024:	f006 f830 	bl	800b088 <GUI_ALLOC_LockH>
 8005028:	9b01      	ldr	r3, [sp, #4]
 800502a:	9000      	str	r0, [sp, #0]
 800502c:	f8a3 9008 	strh.w	r9, [r3, #8]
 8005030:	f8a3 800a 	strh.w	r8, [r3, #10]
 8005034:	819f      	strh	r7, [r3, #12]
 8005036:	f8a3 a00e 	strh.w	sl, [r3, #14]
 800503a:	9b00      	ldr	r3, [sp, #0]
 800503c:	4668      	mov	r0, sp
 800503e:	6a1c      	ldr	r4, [r3, #32]
 8005040:	f006 f830 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005044:	e7b4      	b.n	8004fb0 <_PaintTransChildren+0x20>
	...

08005048 <WM__PaintWinAndOverlays>:
 8005048:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800504a:	4604      	mov	r4, r0
 800504c:	f006 f81c 	bl	800b088 <GUI_ALLOC_LockH>
 8005050:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005052:	9001      	str	r0, [sp, #4]
 8005054:	f640 0301 	movw	r3, #2049	; 0x801
 8005058:	4013      	ands	r3, r2
 800505a:	2b01      	cmp	r3, #1
 800505c:	d005      	beq.n	800506a <WM__PaintWinAndOverlays+0x22>
 800505e:	a801      	add	r0, sp, #4
 8005060:	f006 f820 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005064:	4620      	mov	r0, r4
 8005066:	f7ff fe61 	bl	8004d2c <_Paint1>
 800506a:	4b14      	ldr	r3, [pc, #80]	; (80050bc <WM__PaintWinAndOverlays+0x74>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	b313      	cbz	r3, 80050b6 <WM__PaintWinAndOverlays+0x6e>
 8005070:	4620      	mov	r0, r4
 8005072:	f7ff ff8d 	bl	8004f90 <_PaintTransChildren>
 8005076:	4620      	mov	r0, r4
 8005078:	f005 fffc 	bl	800b074 <GUI_ALLOC_h2p>
 800507c:	6985      	ldr	r5, [r0, #24]
 800507e:	6a04      	ldr	r4, [r0, #32]
 8005080:	b1cd      	cbz	r5, 80050b6 <WM__PaintWinAndOverlays+0x6e>
 8005082:	b194      	cbz	r4, 80050aa <WM__PaintWinAndOverlays+0x62>
 8005084:	4620      	mov	r0, r4
 8005086:	f005 fff5 	bl	800b074 <GUI_ALLOC_h2p>
 800508a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800508c:	f003 0303 	and.w	r3, r3, #3
 8005090:	2b03      	cmp	r3, #3
 8005092:	d102      	bne.n	800509a <WM__PaintWinAndOverlays+0x52>
 8005094:	4620      	mov	r0, r4
 8005096:	f7ff ff31 	bl	8004efc <_Paint1Trans>
 800509a:	4620      	mov	r0, r4
 800509c:	f7ff ff78 	bl	8004f90 <_PaintTransChildren>
 80050a0:	4620      	mov	r0, r4
 80050a2:	f005 ffe7 	bl	800b074 <GUI_ALLOC_h2p>
 80050a6:	6a04      	ldr	r4, [r0, #32]
 80050a8:	e7eb      	b.n	8005082 <WM__PaintWinAndOverlays+0x3a>
 80050aa:	4628      	mov	r0, r5
 80050ac:	f005 ffe2 	bl	800b074 <GUI_ALLOC_h2p>
 80050b0:	6a04      	ldr	r4, [r0, #32]
 80050b2:	6985      	ldr	r5, [r0, #24]
 80050b4:	e7e4      	b.n	8005080 <WM__PaintWinAndOverlays+0x38>
 80050b6:	b003      	add	sp, #12
 80050b8:	bd30      	pop	{r4, r5, pc}
 80050ba:	bf00      	nop
 80050bc:	20019494 	.word	0x20019494

080050c0 <_cbPaintMemDev>:
 80050c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80050c4:	4d17      	ldr	r5, [pc, #92]	; (8005124 <_cbPaintMemDev+0x64>)
 80050c6:	682b      	ldr	r3, [r5, #0]
 80050c8:	4606      	mov	r6, r0
 80050ca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80050cc:	f005 ffdc 	bl	800b088 <GUI_ALLOC_LockH>
 80050d0:	682a      	ldr	r2, [r5, #0]
 80050d2:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 80050d6:	f8b0 900a 	ldrh.w	r9, [r0, #10]
 80050da:	f8b0 800c 	ldrh.w	r8, [r0, #12]
 80050de:	89c7      	ldrh	r7, [r0, #14]
 80050e0:	ac02      	add	r4, sp, #8
 80050e2:	3208      	adds	r2, #8
 80050e4:	f844 0d04 	str.w	r0, [r4, #-4]!
 80050e8:	f100 0308 	add.w	r3, r0, #8
 80050ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050f0:	e883 0003 	stmia.w	r3, {r0, r1}
 80050f4:	4620      	mov	r0, r4
 80050f6:	f005 ffd5 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80050fa:	6830      	ldr	r0, [r6, #0]
 80050fc:	f7ff ffa4 	bl	8005048 <WM__PaintWinAndOverlays>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005104:	f005 ffc0 	bl	800b088 <GUI_ALLOC_LockH>
 8005108:	9001      	str	r0, [sp, #4]
 800510a:	f8a0 a008 	strh.w	sl, [r0, #8]
 800510e:	f8a0 900a 	strh.w	r9, [r0, #10]
 8005112:	f8a0 800c 	strh.w	r8, [r0, #12]
 8005116:	81c7      	strh	r7, [r0, #14]
 8005118:	4620      	mov	r0, r4
 800511a:	f005 ffc3 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800511e:	b002      	add	sp, #8
 8005120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005124:	20000024 	.word	0x20000024

08005128 <WM__ClipAtParentBorders>:
 8005128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800512a:	4607      	mov	r7, r0
 800512c:	460d      	mov	r5, r1
 800512e:	4628      	mov	r0, r5
 8005130:	f005 ffaa 	bl	800b088 <GUI_ALLOC_LockH>
 8005134:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005136:	ac02      	add	r4, sp, #8
 8005138:	f013 0602 	ands.w	r6, r3, #2
 800513c:	4601      	mov	r1, r0
 800513e:	f844 0d04 	str.w	r0, [r4, #-4]!
 8005142:	d104      	bne.n	800514e <WM__ClipAtParentBorders+0x26>
 8005144:	4620      	mov	r0, r4
 8005146:	f005 ffad 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800514a:	4630      	mov	r0, r6
 800514c:	e016      	b.n	800517c <WM__ClipAtParentBorders+0x54>
 800514e:	4638      	mov	r0, r7
 8005150:	f003 fe12 	bl	8008d78 <GUI__IntersectRect>
 8005154:	9b01      	ldr	r3, [sp, #4]
 8005156:	699e      	ldr	r6, [r3, #24]
 8005158:	4620      	mov	r0, r4
 800515a:	b956      	cbnz	r6, 8005172 <WM__ClipAtParentBorders+0x4a>
 800515c:	f005 ffa2 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005160:	4b07      	ldr	r3, [pc, #28]	; (8005180 <WM__ClipAtParentBorders+0x58>)
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	4295      	cmp	r5, r2
 8005166:	d008      	beq.n	800517a <WM__ClipAtParentBorders+0x52>
 8005168:	6858      	ldr	r0, [r3, #4]
 800516a:	1a2b      	subs	r3, r5, r0
 800516c:	4258      	negs	r0, r3
 800516e:	4158      	adcs	r0, r3
 8005170:	e004      	b.n	800517c <WM__ClipAtParentBorders+0x54>
 8005172:	f005 ff97 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005176:	4635      	mov	r5, r6
 8005178:	e7d9      	b.n	800512e <WM__ClipAtParentBorders+0x6>
 800517a:	2001      	movs	r0, #1
 800517c:	b003      	add	sp, #12
 800517e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005180:	2001944c 	.word	0x2001944c

08005184 <WM__InsertWindowIntoList>:
 8005184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005186:	4604      	mov	r4, r0
 8005188:	b085      	sub	sp, #20
 800518a:	460d      	mov	r5, r1
 800518c:	2900      	cmp	r1, #0
 800518e:	d049      	beq.n	8005224 <WM__InsertWindowIntoList+0xa0>
 8005190:	f005 ff7a 	bl	800b088 <GUI_ALLOC_LockH>
 8005194:	2300      	movs	r3, #0
 8005196:	6203      	str	r3, [r0, #32]
 8005198:	6185      	str	r5, [r0, #24]
 800519a:	9001      	str	r0, [sp, #4]
 800519c:	4628      	mov	r0, r5
 800519e:	f005 ff73 	bl	800b088 <GUI_ALLOC_LockH>
 80051a2:	9b01      	ldr	r3, [sp, #4]
 80051a4:	69c5      	ldr	r5, [r0, #28]
 80051a6:	9002      	str	r0, [sp, #8]
 80051a8:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80051aa:	b92d      	cbnz	r5, 80051b8 <WM__InsertWindowIntoList+0x34>
 80051ac:	61c4      	str	r4, [r0, #28]
 80051ae:	a801      	add	r0, sp, #4
 80051b0:	f005 ff78 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80051b4:	a802      	add	r0, sp, #8
 80051b6:	e033      	b.n	8005220 <WM__InsertWindowIntoList+0x9c>
 80051b8:	4628      	mov	r0, r5
 80051ba:	f005 ff65 	bl	800b088 <GUI_ALLOC_LockH>
 80051be:	ae04      	add	r6, sp, #16
 80051c0:	f007 0708 	and.w	r7, r7, #8
 80051c4:	f846 0d04 	str.w	r0, [r6, #-4]!
 80051c8:	b977      	cbnz	r7, 80051e8 <WM__InsertWindowIntoList+0x64>
 80051ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80051cc:	071a      	lsls	r2, r3, #28
 80051ce:	d50b      	bpl.n	80051e8 <WM__InsertWindowIntoList+0x64>
 80051d0:	9b01      	ldr	r3, [sp, #4]
 80051d2:	621d      	str	r5, [r3, #32]
 80051d4:	9b02      	ldr	r3, [sp, #8]
 80051d6:	a801      	add	r0, sp, #4
 80051d8:	61dc      	str	r4, [r3, #28]
 80051da:	f005 ff63 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80051de:	a802      	add	r0, sp, #8
 80051e0:	f005 ff60 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80051e4:	4630      	mov	r0, r6
 80051e6:	e01b      	b.n	8005220 <WM__InsertWindowIntoList+0x9c>
 80051e8:	a802      	add	r0, sp, #8
 80051ea:	f005 ff5b 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80051ee:	4630      	mov	r0, r6
 80051f0:	f005 ff58 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80051f4:	4628      	mov	r0, r5
 80051f6:	f005 ff3d 	bl	800b074 <GUI_ALLOC_h2p>
 80051fa:	9003      	str	r0, [sp, #12]
 80051fc:	9b03      	ldr	r3, [sp, #12]
 80051fe:	6a1d      	ldr	r5, [r3, #32]
 8005200:	b90d      	cbnz	r5, 8005206 <WM__InsertWindowIntoList+0x82>
 8005202:	621c      	str	r4, [r3, #32]
 8005204:	e00b      	b.n	800521e <WM__InsertWindowIntoList+0x9a>
 8005206:	4628      	mov	r0, r5
 8005208:	f005 ff34 	bl	800b074 <GUI_ALLOC_h2p>
 800520c:	2f00      	cmp	r7, #0
 800520e:	d1f4      	bne.n	80051fa <WM__InsertWindowIntoList+0x76>
 8005210:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005212:	071b      	lsls	r3, r3, #28
 8005214:	d5f1      	bpl.n	80051fa <WM__InsertWindowIntoList+0x76>
 8005216:	9b03      	ldr	r3, [sp, #12]
 8005218:	621c      	str	r4, [r3, #32]
 800521a:	9b01      	ldr	r3, [sp, #4]
 800521c:	621d      	str	r5, [r3, #32]
 800521e:	a801      	add	r0, sp, #4
 8005220:	f005 ff40 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005224:	b005      	add	sp, #20
 8005226:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005228 <WM__RemoveWindowFromList>:
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	4604      	mov	r4, r0
 800522c:	f005 ff22 	bl	800b074 <GUI_ALLOC_h2p>
 8005230:	4605      	mov	r5, r0
 8005232:	6980      	ldr	r0, [r0, #24]
 8005234:	b1a8      	cbz	r0, 8005262 <WM__RemoveWindowFromList+0x3a>
 8005236:	f005 ff1d 	bl	800b074 <GUI_ALLOC_h2p>
 800523a:	69c3      	ldr	r3, [r0, #28]
 800523c:	42a3      	cmp	r3, r4
 800523e:	4606      	mov	r6, r0
 8005240:	d105      	bne.n	800524e <WM__RemoveWindowFromList+0x26>
 8005242:	4618      	mov	r0, r3
 8005244:	f005 ff16 	bl	800b074 <GUI_ALLOC_h2p>
 8005248:	6a03      	ldr	r3, [r0, #32]
 800524a:	61f3      	str	r3, [r6, #28]
 800524c:	bd70      	pop	{r4, r5, r6, pc}
 800524e:	b143      	cbz	r3, 8005262 <WM__RemoveWindowFromList+0x3a>
 8005250:	4618      	mov	r0, r3
 8005252:	f005 ff0f 	bl	800b074 <GUI_ALLOC_h2p>
 8005256:	6a03      	ldr	r3, [r0, #32]
 8005258:	42a3      	cmp	r3, r4
 800525a:	d1f8      	bne.n	800524e <WM__RemoveWindowFromList+0x26>
 800525c:	6a2b      	ldr	r3, [r5, #32]
 800525e:	6203      	str	r3, [r0, #32]
 8005260:	bd70      	pop	{r4, r5, r6, pc}
 8005262:	bd70      	pop	{r4, r5, r6, pc}

08005264 <WM__Client2Screen>:
 8005264:	4603      	mov	r3, r0
 8005266:	4608      	mov	r0, r1
 8005268:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800526c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005270:	f004 bba2 	b.w	80099b8 <GUI_MoveRect>

08005274 <_SetClipRectUserIntersect>:
 8005274:	4b11      	ldr	r3, [pc, #68]	; (80052bc <_SetClipRectUserIntersect+0x48>)
 8005276:	b530      	push	{r4, r5, lr}
 8005278:	681c      	ldr	r4, [r3, #0]
 800527a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800527c:	b085      	sub	sp, #20
 800527e:	4605      	mov	r5, r0
 8005280:	b1ba      	cbz	r2, 80052b2 <_SetClipRectUserIntersect+0x3e>
 8005282:	6810      	ldr	r0, [r2, #0]
 8005284:	6851      	ldr	r1, [r2, #4]
 8005286:	ab02      	add	r3, sp, #8
 8005288:	c303      	stmia	r3!, {r0, r1}
 800528a:	4b0d      	ldr	r3, [pc, #52]	; (80052c0 <_SetClipRectUserIntersect+0x4c>)
 800528c:	6818      	ldr	r0, [r3, #0]
 800528e:	b900      	cbnz	r0, 8005292 <_SetClipRectUserIntersect+0x1e>
 8005290:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005292:	f005 fef9 	bl	800b088 <GUI_ALLOC_LockH>
 8005296:	ac04      	add	r4, sp, #16
 8005298:	a902      	add	r1, sp, #8
 800529a:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800529e:	f7ff ffe1 	bl	8005264 <WM__Client2Screen>
 80052a2:	4620      	mov	r0, r4
 80052a4:	f005 fefe 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80052a8:	a802      	add	r0, sp, #8
 80052aa:	4629      	mov	r1, r5
 80052ac:	f003 fd64 	bl	8008d78 <GUI__IntersectRect>
 80052b0:	a802      	add	r0, sp, #8
 80052b2:	f002 ffa1 	bl	80081f8 <LCD_SetClipRectEx>
 80052b6:	b005      	add	sp, #20
 80052b8:	bd30      	pop	{r4, r5, pc}
 80052ba:	bf00      	nop
 80052bc:	20000024 	.word	0x20000024
 80052c0:	20019448 	.word	0x20019448

080052c4 <WM__ActivateClipRect>:
 80052c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80052c6:	4b0e      	ldr	r3, [pc, #56]	; (8005300 <WM__ActivateClipRect+0x3c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80052ce:	b10a      	cbz	r2, 80052d4 <WM__ActivateClipRect+0x10>
 80052d0:	480c      	ldr	r0, [pc, #48]	; (8005304 <WM__ActivateClipRect+0x40>)
 80052d2:	e011      	b.n	80052f8 <WM__ActivateClipRect+0x34>
 80052d4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80052d6:	f005 fed7 	bl	800b088 <GUI_ALLOC_LockH>
 80052da:	9001      	str	r0, [sp, #4]
 80052dc:	c803      	ldmia	r0, {r0, r1}
 80052de:	ac02      	add	r4, sp, #8
 80052e0:	e884 0003 	stmia.w	r4, {r0, r1}
 80052e4:	a801      	add	r0, sp, #4
 80052e6:	f005 fedd 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80052ea:	4b07      	ldr	r3, [pc, #28]	; (8005308 <WM__ActivateClipRect+0x44>)
 80052ec:	6819      	ldr	r1, [r3, #0]
 80052ee:	b111      	cbz	r1, 80052f6 <WM__ActivateClipRect+0x32>
 80052f0:	4620      	mov	r0, r4
 80052f2:	f7ff ff19 	bl	8005128 <WM__ClipAtParentBorders>
 80052f6:	4620      	mov	r0, r4
 80052f8:	f7ff ffbc 	bl	8005274 <_SetClipRectUserIntersect>
 80052fc:	b004      	add	sp, #16
 80052fe:	bd10      	pop	{r4, pc}
 8005300:	20000024 	.word	0x20000024
 8005304:	200190d4 	.word	0x200190d4
 8005308:	20019448 	.word	0x20019448

0800530c <WM__IsWindow>:
 800530c:	4b06      	ldr	r3, [pc, #24]	; (8005328 <WM__IsWindow+0x1c>)
 800530e:	b510      	push	{r4, lr}
 8005310:	4604      	mov	r4, r0
 8005312:	6818      	ldr	r0, [r3, #0]
 8005314:	b128      	cbz	r0, 8005322 <WM__IsWindow+0x16>
 8005316:	42a0      	cmp	r0, r4
 8005318:	d004      	beq.n	8005324 <WM__IsWindow+0x18>
 800531a:	f005 feab 	bl	800b074 <GUI_ALLOC_h2p>
 800531e:	6940      	ldr	r0, [r0, #20]
 8005320:	e7f8      	b.n	8005314 <WM__IsWindow+0x8>
 8005322:	bd10      	pop	{r4, pc}
 8005324:	2001      	movs	r0, #1
 8005326:	bd10      	pop	{r4, pc}
 8005328:	20019468 	.word	0x20019468

0800532c <WM__InvalidateDrawAndDescs>:
 800532c:	b513      	push	{r0, r1, r4, lr}
 800532e:	4604      	mov	r4, r0
 8005330:	b300      	cbz	r0, 8005374 <WM__InvalidateDrawAndDescs+0x48>
 8005332:	f005 fea9 	bl	800b088 <GUI_ALLOC_LockH>
 8005336:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005338:	9001      	str	r0, [sp, #4]
 800533a:	0793      	lsls	r3, r2, #30
 800533c:	d517      	bpl.n	800536e <WM__InvalidateDrawAndDescs+0x42>
 800533e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005340:	b140      	cbz	r0, 8005354 <WM__InvalidateDrawAndDescs+0x28>
 8005342:	4b0d      	ldr	r3, [pc, #52]	; (8005378 <WM__InvalidateDrawAndDescs+0x4c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	42a3      	cmp	r3, r4
 8005348:	d004      	beq.n	8005354 <WM__InvalidateDrawAndDescs+0x28>
 800534a:	f001 fdcd 	bl	8006ee8 <GUI_MEMDEV_Delete>
 800534e:	9b01      	ldr	r3, [sp, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	625a      	str	r2, [r3, #36]	; 0x24
 8005354:	4620      	mov	r0, r4
 8005356:	f7ff fc9b 	bl	8004c90 <WM_GetFirstChild>
 800535a:	4604      	mov	r4, r0
 800535c:	b13c      	cbz	r4, 800536e <WM__InvalidateDrawAndDescs+0x42>
 800535e:	4620      	mov	r0, r4
 8005360:	f7ff ffe4 	bl	800532c <WM__InvalidateDrawAndDescs>
 8005364:	4620      	mov	r0, r4
 8005366:	f005 fe85 	bl	800b074 <GUI_ALLOC_h2p>
 800536a:	6a04      	ldr	r4, [r0, #32]
 800536c:	e7f6      	b.n	800535c <WM__InvalidateDrawAndDescs+0x30>
 800536e:	a801      	add	r0, sp, #4
 8005370:	f005 fe98 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005374:	b002      	add	sp, #8
 8005376:	bd10      	pop	{r4, pc}
 8005378:	20019490 	.word	0x20019490

0800537c <WM__RectIsNZ>:
 800537c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8005380:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8005384:	429a      	cmp	r2, r3
 8005386:	dc08      	bgt.n	800539a <WM__RectIsNZ+0x1e>
 8005388:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800538c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8005390:	429a      	cmp	r2, r3
 8005392:	bfcc      	ite	gt
 8005394:	2000      	movgt	r0, #0
 8005396:	2001      	movle	r0, #1
 8005398:	4770      	bx	lr
 800539a:	2000      	movs	r0, #0
 800539c:	4770      	bx	lr
	...

080053a0 <_Invalidate1Abs>:
 80053a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053a2:	b085      	sub	sp, #20
 80053a4:	4606      	mov	r6, r0
 80053a6:	460d      	mov	r5, r1
 80053a8:	4617      	mov	r7, r2
 80053aa:	f005 fe63 	bl	800b074 <GUI_ALLOC_h2p>
 80053ae:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80053b0:	9001      	str	r0, [sp, #4]
 80053b2:	07a3      	lsls	r3, r4, #30
 80053b4:	d534      	bpl.n	8005420 <_Invalidate1Abs+0x80>
 80053b6:	4628      	mov	r0, r5
 80053b8:	f7ff ffe0 	bl	800537c <WM__RectIsNZ>
 80053bc:	2800      	cmp	r0, #0
 80053be:	d02f      	beq.n	8005420 <_Invalidate1Abs+0x80>
 80053c0:	f640 0301 	movw	r3, #2049	; 0x801
 80053c4:	4023      	ands	r3, r4
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d02a      	beq.n	8005420 <_Invalidate1Abs+0x80>
 80053ca:	4630      	mov	r0, r6
 80053cc:	f005 fe5c 	bl	800b088 <GUI_ALLOC_LockH>
 80053d0:	ac02      	add	r4, sp, #8
 80053d2:	4602      	mov	r2, r0
 80053d4:	9001      	str	r0, [sp, #4]
 80053d6:	4629      	mov	r1, r5
 80053d8:	4620      	mov	r0, r4
 80053da:	f003 fc9b 	bl	8008d14 <GUI__IntersectRects>
 80053de:	4620      	mov	r0, r4
 80053e0:	f7ff ffcc 	bl	800537c <WM__RectIsNZ>
 80053e4:	b1c8      	cbz	r0, 800541a <_Invalidate1Abs+0x7a>
 80053e6:	9b01      	ldr	r3, [sp, #4]
 80053e8:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 80053ea:	f244 0120 	movw	r1, #16416	; 0x4020
 80053ee:	4031      	ands	r1, r6
 80053f0:	f103 0508 	add.w	r5, r3, #8
 80053f4:	b129      	cbz	r1, 8005402 <_Invalidate1Abs+0x62>
 80053f6:	4628      	mov	r0, r5
 80053f8:	4629      	mov	r1, r5
 80053fa:	4622      	mov	r2, r4
 80053fc:	f004 faec 	bl	80099d8 <GUI_MergeRect>
 8005400:	e00b      	b.n	800541a <_Invalidate1Abs+0x7a>
 8005402:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005406:	433e      	orrs	r6, r7
 8005408:	e885 0003 	stmia.w	r5, {r0, r1}
 800540c:	629e      	str	r6, [r3, #40]	; 0x28
 800540e:	4b05      	ldr	r3, [pc, #20]	; (8005424 <_Invalidate1Abs+0x84>)
 8005410:	881a      	ldrh	r2, [r3, #0]
 8005412:	3201      	adds	r2, #1
 8005414:	801a      	strh	r2, [r3, #0]
 8005416:	f003 fe75 	bl	8009104 <GUI_SignalEvent>
 800541a:	a801      	add	r0, sp, #4
 800541c:	f005 fe42 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005420:	b005      	add	sp, #20
 8005422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005424:	20019464 	.word	0x20019464

08005428 <WM__Invalidate1Abs>:
 8005428:	2220      	movs	r2, #32
 800542a:	f7ff bfb9 	b.w	80053a0 <_Invalidate1Abs>

0800542e <WM_InvalidateWindowAndDescsEx>:
 800542e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005430:	460f      	mov	r7, r1
 8005432:	b085      	sub	sp, #20
 8005434:	4615      	mov	r5, r2
 8005436:	4606      	mov	r6, r0
 8005438:	b348      	cbz	r0, 800548e <WM_InvalidateWindowAndDescsEx+0x60>
 800543a:	f005 fe25 	bl	800b088 <GUI_ALLOC_LockH>
 800543e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005440:	ac04      	add	r4, sp, #16
 8005442:	079b      	lsls	r3, r3, #30
 8005444:	4602      	mov	r2, r0
 8005446:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800544a:	d403      	bmi.n	8005454 <WM_InvalidateWindowAndDescsEx+0x26>
 800544c:	4620      	mov	r0, r4
 800544e:	f005 fe29 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005452:	e01c      	b.n	800548e <WM_InvalidateWindowAndDescsEx+0x60>
 8005454:	a802      	add	r0, sp, #8
 8005456:	4639      	mov	r1, r7
 8005458:	f003 fc5c 	bl	8008d14 <GUI__IntersectRects>
 800545c:	2800      	cmp	r0, #0
 800545e:	d0f5      	beq.n	800544c <WM_InvalidateWindowAndDescsEx+0x1e>
 8005460:	4620      	mov	r0, r4
 8005462:	f005 fe1f 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005466:	4630      	mov	r0, r6
 8005468:	a902      	add	r1, sp, #8
 800546a:	462a      	mov	r2, r5
 800546c:	f7ff ff98 	bl	80053a0 <_Invalidate1Abs>
 8005470:	4630      	mov	r0, r6
 8005472:	f7ff fc0d 	bl	8004c90 <WM_GetFirstChild>
 8005476:	4604      	mov	r4, r0
 8005478:	b14c      	cbz	r4, 800548e <WM_InvalidateWindowAndDescsEx+0x60>
 800547a:	4620      	mov	r0, r4
 800547c:	a902      	add	r1, sp, #8
 800547e:	462a      	mov	r2, r5
 8005480:	f7ff ffd5 	bl	800542e <WM_InvalidateWindowAndDescsEx>
 8005484:	4620      	mov	r0, r4
 8005486:	f005 fdf5 	bl	800b074 <GUI_ALLOC_h2p>
 800548a:	6a04      	ldr	r4, [r0, #32]
 800548c:	e7f4      	b.n	8005478 <WM_InvalidateWindowAndDescsEx+0x4a>
 800548e:	b005      	add	sp, #20
 8005490:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005492 <WM__InvalidateRect>:
 8005492:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005496:	4680      	mov	r8, r0
 8005498:	4617      	mov	r7, r2
 800549a:	461d      	mov	r5, r3
 800549c:	460c      	mov	r4, r1
 800549e:	2900      	cmp	r1, #0
 80054a0:	d030      	beq.n	8005504 <WM__InvalidateRect+0x72>
 80054a2:	4608      	mov	r0, r1
 80054a4:	f005 fdf0 	bl	800b088 <GUI_ALLOC_LockH>
 80054a8:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80054aa:	9001      	str	r0, [sp, #4]
 80054ac:	07b3      	lsls	r3, r6, #30
 80054ae:	4602      	mov	r2, r0
 80054b0:	d525      	bpl.n	80054fe <WM__InvalidateRect+0x6c>
 80054b2:	a802      	add	r0, sp, #8
 80054b4:	4641      	mov	r1, r8
 80054b6:	f003 fc2d 	bl	8008d14 <GUI__IntersectRects>
 80054ba:	b300      	cbz	r0, 80054fe <WM__InvalidateRect+0x6c>
 80054bc:	f640 0301 	movw	r3, #2049	; 0x801
 80054c0:	4033      	ands	r3, r6
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d107      	bne.n	80054d6 <WM__InvalidateRect+0x44>
 80054c6:	9b01      	ldr	r3, [sp, #4]
 80054c8:	a802      	add	r0, sp, #8
 80054ca:	6999      	ldr	r1, [r3, #24]
 80054cc:	6a1a      	ldr	r2, [r3, #32]
 80054ce:	462b      	mov	r3, r5
 80054d0:	f7ff ffdf 	bl	8005492 <WM__InvalidateRect>
 80054d4:	e004      	b.n	80054e0 <WM__InvalidateRect+0x4e>
 80054d6:	4620      	mov	r0, r4
 80054d8:	a902      	add	r1, sp, #8
 80054da:	462a      	mov	r2, r5
 80054dc:	f7ff ff60 	bl	80053a0 <_Invalidate1Abs>
 80054e0:	9b01      	ldr	r3, [sp, #4]
 80054e2:	69dc      	ldr	r4, [r3, #28]
 80054e4:	b15c      	cbz	r4, 80054fe <WM__InvalidateRect+0x6c>
 80054e6:	42bc      	cmp	r4, r7
 80054e8:	d009      	beq.n	80054fe <WM__InvalidateRect+0x6c>
 80054ea:	4620      	mov	r0, r4
 80054ec:	a902      	add	r1, sp, #8
 80054ee:	462a      	mov	r2, r5
 80054f0:	f7ff ff9d 	bl	800542e <WM_InvalidateWindowAndDescsEx>
 80054f4:	4620      	mov	r0, r4
 80054f6:	f005 fdbd 	bl	800b074 <GUI_ALLOC_h2p>
 80054fa:	6a04      	ldr	r4, [r0, #32]
 80054fc:	e7f2      	b.n	80054e4 <WM__InvalidateRect+0x52>
 80054fe:	a801      	add	r0, sp, #4
 8005500:	f005 fdd0 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005504:	b004      	add	sp, #16
 8005506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800550a <WM__InvalidateParent>:
 800550a:	b570      	push	{r4, r5, r6, lr}
 800550c:	4605      	mov	r5, r0
 800550e:	4608      	mov	r0, r1
 8005510:	460c      	mov	r4, r1
 8005512:	4616      	mov	r6, r2
 8005514:	f005 fdae 	bl	800b074 <GUI_ALLOC_h2p>
 8005518:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800551a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800551e:	4628      	mov	r0, r5
 8005520:	4621      	mov	r1, r4
 8005522:	4632      	mov	r2, r6
 8005524:	bf0c      	ite	eq
 8005526:	2320      	moveq	r3, #32
 8005528:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 800552c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005530:	f7ff bfaf 	b.w	8005492 <WM__InvalidateRect>

08005534 <WM__InvalidateRectEx>:
 8005534:	2320      	movs	r3, #32
 8005536:	f7ff bfac 	b.w	8005492 <WM__InvalidateRect>

0800553a <WM__DetachWindow>:
 800553a:	b513      	push	{r0, r1, r4, lr}
 800553c:	4604      	mov	r4, r0
 800553e:	f005 fda3 	bl	800b088 <GUI_ALLOC_LockH>
 8005542:	6981      	ldr	r1, [r0, #24]
 8005544:	9001      	str	r0, [sp, #4]
 8005546:	b141      	cbz	r1, 800555a <WM__DetachWindow+0x20>
 8005548:	6a02      	ldr	r2, [r0, #32]
 800554a:	f7ff fff3 	bl	8005534 <WM__InvalidateRectEx>
 800554e:	4620      	mov	r0, r4
 8005550:	f7ff fe6a 	bl	8005228 <WM__RemoveWindowFromList>
 8005554:	9b01      	ldr	r3, [sp, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	619a      	str	r2, [r3, #24]
 800555a:	a801      	add	r0, sp, #4
 800555c:	f005 fda2 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005560:	b002      	add	sp, #8
 8005562:	bd10      	pop	{r4, pc}

08005564 <WM__SendMsgNoData>:
 8005564:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005566:	ab04      	add	r3, sp, #16
 8005568:	9001      	str	r0, [sp, #4]
 800556a:	f843 1d10 	str.w	r1, [r3, #-16]!
 800556e:	4669      	mov	r1, sp
 8005570:	f006 f896 	bl	800b6a0 <WM__SendMessage>
 8005574:	b005      	add	sp, #20
 8005576:	f85d fb04 	ldr.w	pc, [sp], #4

0800557a <WM__GetClientRectWin>:
 800557a:	2300      	movs	r3, #0
 800557c:	800b      	strh	r3, [r1, #0]
 800557e:	8882      	ldrh	r2, [r0, #4]
 8005580:	804b      	strh	r3, [r1, #2]
 8005582:	8803      	ldrh	r3, [r0, #0]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	808b      	strh	r3, [r1, #4]
 8005588:	88c2      	ldrh	r2, [r0, #6]
 800558a:	8843      	ldrh	r3, [r0, #2]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	80cb      	strh	r3, [r1, #6]
 8005590:	4770      	bx	lr

08005592 <WM_InvalidateRect>:
 8005592:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005594:	460f      	mov	r7, r1
 8005596:	b087      	sub	sp, #28
 8005598:	4605      	mov	r5, r0
 800559a:	2800      	cmp	r0, #0
 800559c:	d033      	beq.n	8005606 <WM_InvalidateRect+0x74>
 800559e:	f005 fd73 	bl	800b088 <GUI_ALLOC_LockH>
 80055a2:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80055a4:	9001      	str	r0, [sp, #4]
 80055a6:	07b2      	lsls	r2, r6, #30
 80055a8:	d52a      	bpl.n	8005600 <WM_InvalidateRect+0x6e>
 80055aa:	c803      	ldmia	r0, {r0, r1}
 80055ac:	ac04      	add	r4, sp, #16
 80055ae:	03f3      	lsls	r3, r6, #15
 80055b0:	e884 0003 	stmia.w	r4, {r0, r1}
 80055b4:	d502      	bpl.n	80055bc <WM_InvalidateRect+0x2a>
 80055b6:	4628      	mov	r0, r5
 80055b8:	f7ff feb8 	bl	800532c <WM__InvalidateDrawAndDescs>
 80055bc:	b15f      	cbz	r7, 80055d6 <WM_InvalidateRect+0x44>
 80055be:	6838      	ldr	r0, [r7, #0]
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	ab02      	add	r3, sp, #8
 80055c4:	c303      	stmia	r3!, {r0, r1}
 80055c6:	9801      	ldr	r0, [sp, #4]
 80055c8:	a902      	add	r1, sp, #8
 80055ca:	f7ff fe4b 	bl	8005264 <WM__Client2Screen>
 80055ce:	4620      	mov	r0, r4
 80055d0:	a902      	add	r1, sp, #8
 80055d2:	f003 fbd1 	bl	8008d78 <GUI__IntersectRect>
 80055d6:	4620      	mov	r0, r4
 80055d8:	4629      	mov	r1, r5
 80055da:	f7ff fda5 	bl	8005128 <WM__ClipAtParentBorders>
 80055de:	b178      	cbz	r0, 8005600 <WM_InvalidateRect+0x6e>
 80055e0:	f640 0301 	movw	r3, #2049	; 0x801
 80055e4:	4033      	ands	r3, r6
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d106      	bne.n	80055f8 <WM_InvalidateRect+0x66>
 80055ea:	9b01      	ldr	r3, [sp, #4]
 80055ec:	4620      	mov	r0, r4
 80055ee:	6999      	ldr	r1, [r3, #24]
 80055f0:	6a1a      	ldr	r2, [r3, #32]
 80055f2:	f7ff ff9f 	bl	8005534 <WM__InvalidateRectEx>
 80055f6:	e003      	b.n	8005600 <WM_InvalidateRect+0x6e>
 80055f8:	4628      	mov	r0, r5
 80055fa:	4621      	mov	r1, r4
 80055fc:	f7ff ff14 	bl	8005428 <WM__Invalidate1Abs>
 8005600:	a801      	add	r0, sp, #4
 8005602:	f005 fd4f 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005606:	b007      	add	sp, #28
 8005608:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800560a <WM_InvalidateWindow>:
 800560a:	2100      	movs	r1, #0
 800560c:	f7ff bfc1 	b.w	8005592 <WM_InvalidateRect>

08005610 <WM__GetTopLevelLayer>:
 8005610:	b510      	push	{r4, lr}
 8005612:	4604      	mov	r4, r0
 8005614:	f005 fd2e 	bl	800b074 <GUI_ALLOC_h2p>
 8005618:	6980      	ldr	r0, [r0, #24]
 800561a:	2800      	cmp	r0, #0
 800561c:	d1f9      	bne.n	8005612 <WM__GetTopLevelLayer+0x2>
 800561e:	4b05      	ldr	r3, [pc, #20]	; (8005634 <WM__GetTopLevelLayer+0x24>)
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	4294      	cmp	r4, r2
 8005624:	d005      	beq.n	8005632 <WM__GetTopLevelLayer+0x22>
 8005626:	6858      	ldr	r0, [r3, #4]
 8005628:	4284      	cmp	r4, r0
 800562a:	bf14      	ite	ne
 800562c:	f04f 30ff 	movne.w	r0, #4294967295
 8005630:	2001      	moveq	r0, #1
 8005632:	bd10      	pop	{r4, pc}
 8005634:	2001944c 	.word	0x2001944c

08005638 <WM__SelectTopLevelLayer>:
 8005638:	b508      	push	{r3, lr}
 800563a:	f7ff ffe9 	bl	8005610 <WM__GetTopLevelLayer>
 800563e:	2800      	cmp	r0, #0
 8005640:	db03      	blt.n	800564a <WM__SelectTopLevelLayer+0x12>
 8005642:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005646:	f004 b939 	b.w	80098bc <GUI_SelectLayer>
 800564a:	bd08      	pop	{r3, pc}

0800564c <WM_SelectWindow>:
 800564c:	4a0d      	ldr	r2, [pc, #52]	; (8005684 <WM_SelectWindow+0x38>)
 800564e:	6813      	ldr	r3, [r2, #0]
 8005650:	b570      	push	{r4, r5, r6, lr}
 8005652:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8005654:	4604      	mov	r4, r0
 8005656:	4616      	mov	r6, r2
 8005658:	b908      	cbnz	r0, 800565e <WM_SelectWindow+0x12>
 800565a:	4a0b      	ldr	r2, [pc, #44]	; (8005688 <WM_SelectWindow+0x3c>)
 800565c:	6814      	ldr	r4, [r2, #0]
 800565e:	649c      	str	r4, [r3, #72]	; 0x48
 8005660:	4620      	mov	r0, r4
 8005662:	f7ff ffe9 	bl	8005638 <WM__SelectTopLevelLayer>
 8005666:	f003 f9bf 	bl	80089e8 <LCD_SetClipRectMax>
 800566a:	4620      	mov	r0, r4
 800566c:	f005 fd02 	bl	800b074 <GUI_ALLOC_h2p>
 8005670:	6833      	ldr	r3, [r6, #0]
 8005672:	f9b0 1000 	ldrsh.w	r1, [r0]
 8005676:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800567a:	64d9      	str	r1, [r3, #76]	; 0x4c
 800567c:	651a      	str	r2, [r3, #80]	; 0x50
 800567e:	4628      	mov	r0, r5
 8005680:	bd70      	pop	{r4, r5, r6, pc}
 8005682:	bf00      	nop
 8005684:	20000024 	.word	0x20000024
 8005688:	20019468 	.word	0x20019468

0800568c <WM_CreateWindowAsChild>:
 800568c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005690:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005692:	469b      	mov	fp, r3
 8005694:	4b4b      	ldr	r3, [pc, #300]	; (80057c4 <WM_CreateWindowAsChild+0x138>)
 8005696:	4607      	mov	r7, r0
 8005698:	4688      	mov	r8, r1
 800569a:	4692      	mov	sl, r2
 800569c:	681e      	ldr	r6, [r3, #0]
 800569e:	bb65      	cbnz	r5, 80056fa <WM_CreateWindowAsChild+0x6e>
 80056a0:	4b49      	ldr	r3, [pc, #292]	; (80057c8 <WM_CreateWindowAsChild+0x13c>)
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	b363      	cbz	r3, 8005700 <WM_CreateWindowAsChild+0x74>
 80056a6:	4b49      	ldr	r3, [pc, #292]	; (80057cc <WM_CreateWindowAsChild+0x140>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	7c5a      	ldrb	r2, [r3, #17]
 80056ac:	4b48      	ldr	r3, [pc, #288]	; (80057d0 <WM_CreateWindowAsChild+0x144>)
 80056ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	d024      	beq.n	8005700 <WM_CreateWindowAsChild+0x74>
 80056b6:	b31b      	cbz	r3, 8005700 <WM_CreateWindowAsChild+0x74>
 80056b8:	461d      	mov	r5, r3
 80056ba:	4628      	mov	r0, r5
 80056bc:	f005 fce4 	bl	800b088 <GUI_ALLOC_LockH>
 80056c0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80056c4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80056c8:	9001      	str	r0, [sp, #4]
 80056ca:	4417      	add	r7, r2
 80056cc:	4498      	add	r8, r3
 80056ce:	f1ba 0f00 	cmp.w	sl, #0
 80056d2:	d105      	bne.n	80056e0 <WM_CreateWindowAsChild+0x54>
 80056d4:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 80056d8:	ebc2 0a0a 	rsb	sl, r2, sl
 80056dc:	f10a 0a01 	add.w	sl, sl, #1
 80056e0:	f1bb 0f00 	cmp.w	fp, #0
 80056e4:	d105      	bne.n	80056f2 <WM_CreateWindowAsChild+0x66>
 80056e6:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 80056ea:	ebc3 0b0b 	rsb	fp, r3, fp
 80056ee:	f10b 0b01 	add.w	fp, fp, #1
 80056f2:	a801      	add	r0, sp, #4
 80056f4:	f005 fcd6 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80056f8:	e002      	b.n	8005700 <WM_CreateWindowAsChild+0x74>
 80056fa:	1c6b      	adds	r3, r5, #1
 80056fc:	d1dd      	bne.n	80056ba <WM_CreateWindowAsChild+0x2e>
 80056fe:	2500      	movs	r5, #0
 8005700:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005702:	302c      	adds	r0, #44	; 0x2c
 8005704:	f005 ff0c 	bl	800b520 <GUI_ALLOC_AllocZero>
 8005708:	4604      	mov	r4, r0
 800570a:	2800      	cmp	r0, #0
 800570c:	d056      	beq.n	80057bc <WM_CreateWindowAsChild+0x130>
 800570e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005710:	431e      	orrs	r6, r3
 8005712:	4b2d      	ldr	r3, [pc, #180]	; (80057c8 <WM_CreateWindowAsChild+0x13c>)
 8005714:	881a      	ldrh	r2, [r3, #0]
 8005716:	3201      	adds	r2, #1
 8005718:	801a      	strh	r2, [r3, #0]
 800571a:	f005 fcb5 	bl	800b088 <GUI_ALLOC_LockH>
 800571e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005720:	6103      	str	r3, [r0, #16]
 8005722:	f10d 0908 	add.w	r9, sp, #8
 8005726:	4b2b      	ldr	r3, [pc, #172]	; (80057d4 <WM_CreateWindowAsChild+0x148>)
 8005728:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800572a:	f849 0d08 	str.w	r0, [r9, #-8]!
 800572e:	4033      	ands	r3, r6
 8005730:	8007      	strh	r7, [r0, #0]
 8005732:	f8a0 8002 	strh.w	r8, [r0, #2]
 8005736:	4457      	add	r7, sl
 8005738:	44d8      	add	r8, fp
 800573a:	4313      	orrs	r3, r2
 800573c:	3f01      	subs	r7, #1
 800573e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005742:	6283      	str	r3, [r0, #40]	; 0x28
 8005744:	8087      	strh	r7, [r0, #4]
 8005746:	f8a0 8006 	strh.w	r8, [r0, #6]
 800574a:	4668      	mov	r0, sp
 800574c:	f005 fcaa 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005750:	4b21      	ldr	r3, [pc, #132]	; (80057d8 <WM_CreateWindowAsChild+0x14c>)
 8005752:	6818      	ldr	r0, [r3, #0]
 8005754:	b148      	cbz	r0, 800576a <WM_CreateWindowAsChild+0xde>
 8005756:	f005 fc8d 	bl	800b074 <GUI_ALLOC_h2p>
 800575a:	4607      	mov	r7, r0
 800575c:	4620      	mov	r0, r4
 800575e:	f005 fc89 	bl	800b074 <GUI_ALLOC_h2p>
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	6143      	str	r3, [r0, #20]
 8005766:	617c      	str	r4, [r7, #20]
 8005768:	e000      	b.n	800576c <WM_CreateWindowAsChild+0xe0>
 800576a:	601c      	str	r4, [r3, #0]
 800576c:	4629      	mov	r1, r5
 800576e:	4620      	mov	r0, r4
 8005770:	f7ff fd08 	bl	8005184 <WM__InsertWindowIntoList>
 8005774:	06b5      	lsls	r5, r6, #26
 8005776:	d502      	bpl.n	800577e <WM_CreateWindowAsChild+0xf2>
 8005778:	4620      	mov	r0, r4
 800577a:	f7ff ff67 	bl	800564c <WM_SelectWindow>
 800577e:	07f0      	lsls	r0, r6, #31
 8005780:	d503      	bpl.n	800578a <WM_CreateWindowAsChild+0xfe>
 8005782:	4b16      	ldr	r3, [pc, #88]	; (80057dc <WM_CreateWindowAsChild+0x150>)
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	3201      	adds	r2, #1
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	0671      	lsls	r1, r6, #25
 800578c:	d502      	bpl.n	8005794 <WM_CreateWindowAsChild+0x108>
 800578e:	4620      	mov	r0, r4
 8005790:	f006 f81c 	bl	800b7cc <WM_BringToBottom>
 8005794:	07b2      	lsls	r2, r6, #30
 8005796:	d50d      	bpl.n	80057b4 <WM_CreateWindowAsChild+0x128>
 8005798:	4620      	mov	r0, r4
 800579a:	f005 fc75 	bl	800b088 <GUI_ALLOC_LockH>
 800579e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80057a0:	9000      	str	r0, [sp, #0]
 80057a2:	f043 0302 	orr.w	r3, r3, #2
 80057a6:	6283      	str	r3, [r0, #40]	; 0x28
 80057a8:	4668      	mov	r0, sp
 80057aa:	f005 fc7b 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80057ae:	4620      	mov	r0, r4
 80057b0:	f7ff ff2b 	bl	800560a <WM_InvalidateWindow>
 80057b4:	4620      	mov	r0, r4
 80057b6:	2101      	movs	r1, #1
 80057b8:	f7ff fed4 	bl	8005564 <WM__SendMsgNoData>
 80057bc:	4620      	mov	r0, r4
 80057be:	b003      	add	sp, #12
 80057c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c4:	20019474 	.word	0x20019474
 80057c8:	20019444 	.word	0x20019444
 80057cc:	20000024 	.word	0x20000024
 80057d0:	2001944c 	.word	0x2001944c
 80057d4:	003f3f9f 	.word	0x003f3f9f
 80057d8:	20019468 	.word	0x20019468
 80057dc:	20019494 	.word	0x20019494

080057e0 <WM_DeleteWindow>:
 80057e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057e2:	4604      	mov	r4, r0
 80057e4:	2800      	cmp	r0, #0
 80057e6:	d06e      	beq.n	80058c6 <WM_DeleteWindow+0xe6>
 80057e8:	f7ff fd90 	bl	800530c <WM__IsWindow>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	d06a      	beq.n	80058c6 <WM_DeleteWindow+0xe6>
 80057f0:	4620      	mov	r0, r4
 80057f2:	f7ff ff0d 	bl	8005610 <WM__GetTopLevelLayer>
 80057f6:	210b      	movs	r1, #11
 80057f8:	4605      	mov	r5, r0
 80057fa:	4620      	mov	r0, r4
 80057fc:	f7ff feb2 	bl	8005564 <WM__SendMsgNoData>
 8005800:	4620      	mov	r0, r4
 8005802:	f7ff f905 	bl	8004a10 <WM__DeleteAssocTimer>
 8005806:	4620      	mov	r0, r4
 8005808:	f005 fc3e 	bl	800b088 <GUI_ALLOC_LockH>
 800580c:	9001      	str	r0, [sp, #4]
 800580e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005810:	b108      	cbz	r0, 8005816 <WM_DeleteWindow+0x36>
 8005812:	f001 fb69 	bl	8006ee8 <GUI_MEMDEV_Delete>
 8005816:	4b2d      	ldr	r3, [pc, #180]	; (80058cc <WM_DeleteWindow+0xec>)
 8005818:	4a2d      	ldr	r2, [pc, #180]	; (80058d0 <WM_DeleteWindow+0xf0>)
 800581a:	2100      	movs	r1, #0
 800581c:	6019      	str	r1, [r3, #0]
 800581e:	4b2d      	ldr	r3, [pc, #180]	; (80058d4 <WM_DeleteWindow+0xf4>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005826:	42a0      	cmp	r0, r4
 8005828:	bf08      	it	eq
 800582a:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800582e:	4a2a      	ldr	r2, [pc, #168]	; (80058d8 <WM_DeleteWindow+0xf8>)
 8005830:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005834:	42a1      	cmp	r1, r4
 8005836:	bf04      	itt	eq
 8005838:	2100      	moveq	r1, #0
 800583a:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800583e:	4b27      	ldr	r3, [pc, #156]	; (80058dc <WM_DeleteWindow+0xfc>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	b12b      	cbz	r3, 8005850 <WM_DeleteWindow+0x70>
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	42a2      	cmp	r2, r4
 8005848:	bf04      	itt	eq
 800584a:	2200      	moveq	r2, #0
 800584c:	605a      	streq	r2, [r3, #4]
 800584e:	e7f7      	b.n	8005840 <WM_DeleteWindow+0x60>
 8005850:	4620      	mov	r0, r4
 8005852:	2107      	movs	r1, #7
 8005854:	f7ff f97e 	bl	8004b54 <WM_NotifyParent>
 8005858:	9e01      	ldr	r6, [sp, #4]
 800585a:	69f0      	ldr	r0, [r6, #28]
 800585c:	f7ff ffc0 	bl	80057e0 <WM_DeleteWindow>
 8005860:	69f3      	ldr	r3, [r6, #28]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1f9      	bne.n	800585a <WM_DeleteWindow+0x7a>
 8005866:	4620      	mov	r0, r4
 8005868:	f7ff fe67 	bl	800553a <WM__DetachWindow>
 800586c:	4b1c      	ldr	r3, [pc, #112]	; (80058e0 <WM_DeleteWindow+0x100>)
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	b150      	cbz	r0, 8005888 <WM_DeleteWindow+0xa8>
 8005872:	f005 fbff 	bl	800b074 <GUI_ALLOC_h2p>
 8005876:	4606      	mov	r6, r0
 8005878:	6940      	ldr	r0, [r0, #20]
 800587a:	42a0      	cmp	r0, r4
 800587c:	d1f8      	bne.n	8005870 <WM_DeleteWindow+0x90>
 800587e:	4620      	mov	r0, r4
 8005880:	f005 fbf8 	bl	800b074 <GUI_ALLOC_h2p>
 8005884:	6943      	ldr	r3, [r0, #20]
 8005886:	6173      	str	r3, [r6, #20]
 8005888:	9b01      	ldr	r3, [sp, #4]
 800588a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588c:	07da      	lsls	r2, r3, #31
 800588e:	d503      	bpl.n	8005898 <WM_DeleteWindow+0xb8>
 8005890:	4a14      	ldr	r2, [pc, #80]	; (80058e4 <WM_DeleteWindow+0x104>)
 8005892:	6811      	ldr	r1, [r2, #0]
 8005894:	3901      	subs	r1, #1
 8005896:	6011      	str	r1, [r2, #0]
 8005898:	069b      	lsls	r3, r3, #26
 800589a:	d503      	bpl.n	80058a4 <WM_DeleteWindow+0xc4>
 800589c:	4b12      	ldr	r3, [pc, #72]	; (80058e8 <WM_DeleteWindow+0x108>)
 800589e:	881a      	ldrh	r2, [r3, #0]
 80058a0:	3a01      	subs	r2, #1
 80058a2:	801a      	strh	r2, [r3, #0]
 80058a4:	a801      	add	r0, sp, #4
 80058a6:	f005 fbfd 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80058aa:	4b10      	ldr	r3, [pc, #64]	; (80058ec <WM_DeleteWindow+0x10c>)
 80058ac:	881a      	ldrh	r2, [r3, #0]
 80058ae:	4620      	mov	r0, r4
 80058b0:	3a01      	subs	r2, #1
 80058b2:	801a      	strh	r2, [r3, #0]
 80058b4:	f005 fc16 	bl	800b0e4 <GUI_ALLOC_Free>
 80058b8:	2d00      	cmp	r5, #0
 80058ba:	db04      	blt.n	80058c6 <WM_DeleteWindow+0xe6>
 80058bc:	4b0c      	ldr	r3, [pc, #48]	; (80058f0 <WM_DeleteWindow+0x110>)
 80058be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058c2:	f7ff fec3 	bl	800564c <WM_SelectWindow>
 80058c6:	b002      	add	sp, #8
 80058c8:	bd70      	pop	{r4, r5, r6, pc}
 80058ca:	bf00      	nop
 80058cc:	200190e4 	.word	0x200190e4
 80058d0:	2001945c 	.word	0x2001945c
 80058d4:	2001946c 	.word	0x2001946c
 80058d8:	20019488 	.word	0x20019488
 80058dc:	20019480 	.word	0x20019480
 80058e0:	20019468 	.word	0x20019468
 80058e4:	20019494 	.word	0x20019494
 80058e8:	20019464 	.word	0x20019464
 80058ec:	20019444 	.word	0x20019444
 80058f0:	2001944c 	.word	0x2001944c

080058f4 <WM__GetNextIVR>:
 80058f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80058f8:	4f5d      	ldr	r7, [pc, #372]	; (8005a70 <WM__GetNextIVR+0x17c>)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8005900:	2800      	cmp	r0, #0
 8005902:	f000 80b2 	beq.w	8005a6a <WM__GetNextIVR+0x176>
 8005906:	4b5b      	ldr	r3, [pc, #364]	; (8005a74 <WM__GetNextIVR+0x180>)
 8005908:	695a      	ldr	r2, [r3, #20]
 800590a:	2a01      	cmp	r2, #1
 800590c:	461c      	mov	r4, r3
 800590e:	dd03      	ble.n	8005918 <WM__GetNextIVR+0x24>
 8005910:	3a01      	subs	r2, #1
 8005912:	615a      	str	r2, [r3, #20]
 8005914:	2000      	movs	r0, #0
 8005916:	e0a8      	b.n	8005a6a <WM__GetNextIVR+0x176>
 8005918:	f104 0608 	add.w	r6, r4, #8
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8005922:	3301      	adds	r3, #1
 8005924:	ad02      	add	r5, sp, #8
 8005926:	6123      	str	r3, [r4, #16]
 8005928:	e885 0003 	stmia.w	r5, {r0, r1}
 800592c:	b923      	cbnz	r3, 8005938 <WM__GetNextIVR+0x44>
 800592e:	8823      	ldrh	r3, [r4, #0]
 8005930:	f8ad 3008 	strh.w	r3, [sp, #8]
 8005934:	8863      	ldrh	r3, [r4, #2]
 8005936:	e011      	b.n	800595c <WM__GetNextIVR+0x68>
 8005938:	89a3      	ldrh	r3, [r4, #12]
 800593a:	8962      	ldrh	r2, [r4, #10]
 800593c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8005940:	3301      	adds	r3, #1
 8005942:	b29b      	uxth	r3, r3
 8005944:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8005948:	f8ad 3008 	strh.w	r3, [sp, #8]
 800594c:	b21b      	sxth	r3, r3
 800594e:	429a      	cmp	r2, r3
 8005950:	da06      	bge.n	8005960 <WM__GetNextIVR+0x6c>
 8005952:	8823      	ldrh	r3, [r4, #0]
 8005954:	f8ad 3008 	strh.w	r3, [sp, #8]
 8005958:	89e3      	ldrh	r3, [r4, #14]
 800595a:	3301      	adds	r3, #1
 800595c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8005960:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8005964:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8005968:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8005a74 <WM__GetNextIVR+0x180>
 800596c:	429a      	cmp	r2, r3
 800596e:	dd04      	ble.n	800597a <WM__GetNextIVR+0x86>
 8005970:	6963      	ldr	r3, [r4, #20]
 8005972:	3b01      	subs	r3, #1
 8005974:	2000      	movs	r0, #0
 8005976:	6163      	str	r3, [r4, #20]
 8005978:	e077      	b.n	8005a6a <WM__GetNextIVR+0x176>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800597e:	f005 fb83 	bl	800b088 <GUI_ALLOC_LockH>
 8005982:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8005986:	f9b8 3000 	ldrsh.w	r3, [r8]
 800598a:	9001      	str	r0, [sp, #4]
 800598c:	429a      	cmp	r2, r3
 800598e:	d11c      	bne.n	80059ca <WM__GetNextIVR+0xd6>
 8005990:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8005994:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005998:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800599c:	f8ad 300c 	strh.w	r3, [sp, #12]
 80059a0:	4b33      	ldr	r3, [pc, #204]	; (8005a70 <WM__GetNextIVR+0x17c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059a6:	b15a      	cbz	r2, 80059c0 <WM__GetNextIVR+0xcc>
 80059a8:	4610      	mov	r0, r2
 80059aa:	f005 fb63 	bl	800b074 <GUI_ALLOC_h2p>
 80059ae:	4680      	mov	r8, r0
 80059b0:	2200      	movs	r2, #0
 80059b2:	6a00      	ldr	r0, [r0, #32]
 80059b4:	4629      	mov	r1, r5
 80059b6:	f7ff f9cb 	bl	8004d50 <_Findy1>
 80059ba:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80059be:	e7f2      	b.n	80059a6 <WM__GetNextIVR+0xb2>
 80059c0:	9b01      	ldr	r3, [sp, #4]
 80059c2:	4629      	mov	r1, r5
 80059c4:	69d8      	ldr	r0, [r3, #28]
 80059c6:	f7ff f9c3 	bl	8004d50 <_Findy1>
 80059ca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80059ce:	f8ad 300c 	strh.w	r3, [sp, #12]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059d6:	b16a      	cbz	r2, 80059f4 <WM__GetNextIVR+0x100>
 80059d8:	4610      	mov	r0, r2
 80059da:	f005 fb4b 	bl	800b074 <GUI_ALLOC_h2p>
 80059de:	4629      	mov	r1, r5
 80059e0:	4680      	mov	r8, r0
 80059e2:	2200      	movs	r2, #0
 80059e4:	6a00      	ldr	r0, [r0, #32]
 80059e6:	f7ff fa09 	bl	8004dfc <_Findx0>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	d1ed      	bne.n	80059ca <WM__GetNextIVR+0xd6>
 80059ee:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80059f2:	e7f0      	b.n	80059d6 <WM__GetNextIVR+0xe2>
 80059f4:	9b01      	ldr	r3, [sp, #4]
 80059f6:	4629      	mov	r1, r5
 80059f8:	69d8      	ldr	r0, [r3, #28]
 80059fa:	f7ff f9ff 	bl	8004dfc <_Findx0>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d1e3      	bne.n	80059ca <WM__GetNextIVR+0xd6>
 8005a02:	88a3      	ldrh	r3, [r4, #4]
 8005a04:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8005a08:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005a0c:	b21b      	sxth	r3, r3
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	dd07      	ble.n	8005a22 <WM__GetNextIVR+0x12e>
 8005a12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005a16:	e886 0003 	stmia.w	r6, {r0, r1}
 8005a1a:	a801      	add	r0, sp, #4
 8005a1c:	f005 fb42 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005a20:	e797      	b.n	8005952 <WM__GetNextIVR+0x5e>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a26:	b152      	cbz	r2, 8005a3e <WM__GetNextIVR+0x14a>
 8005a28:	4610      	mov	r0, r2
 8005a2a:	f005 fb23 	bl	800b074 <GUI_ALLOC_h2p>
 8005a2e:	4607      	mov	r7, r0
 8005a30:	2200      	movs	r2, #0
 8005a32:	6a00      	ldr	r0, [r0, #32]
 8005a34:	4629      	mov	r1, r5
 8005a36:	f7ff fa25 	bl	8004e84 <_Findx1>
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	e7f3      	b.n	8005a26 <WM__GetNextIVR+0x132>
 8005a3e:	af04      	add	r7, sp, #16
 8005a40:	4629      	mov	r1, r5
 8005a42:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 8005a46:	69d8      	ldr	r0, [r3, #28]
 8005a48:	f7ff fa1c 	bl	8004e84 <_Findx1>
 8005a4c:	4638      	mov	r0, r7
 8005a4e:	f005 fb29 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005a52:	6923      	ldr	r3, [r4, #16]
 8005a54:	f644 6220 	movw	r2, #20000	; 0x4e20
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	dc89      	bgt.n	8005970 <WM__GetNextIVR+0x7c>
 8005a5c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005a60:	e886 0003 	stmia.w	r6, {r0, r1}
 8005a64:	f7ff fc2e 	bl	80052c4 <WM__ActivateClipRect>
 8005a68:	2001      	movs	r0, #1
 8005a6a:	b004      	add	sp, #16
 8005a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a70:	20000024 	.word	0x20000024
 8005a74:	200190cc 	.word	0x200190cc

08005a78 <WM__InitIVRSearch>:
 8005a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a7c:	4f39      	ldr	r7, [pc, #228]	; (8005b64 <WM__InitIVRSearch+0xec>)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8005a84:	b086      	sub	sp, #24
 8005a86:	4606      	mov	r6, r0
 8005a88:	b912      	cbnz	r2, 8005a90 <WM__InitIVRSearch+0x18>
 8005a8a:	f7ff fc1b 	bl	80052c4 <WM__ActivateClipRect>
 8005a8e:	e064      	b.n	8005b5a <WM__InitIVRSearch+0xe2>
 8005a90:	4d35      	ldr	r5, [pc, #212]	; (8005b68 <WM__InitIVRSearch+0xf0>)
 8005a92:	696a      	ldr	r2, [r5, #20]
 8005a94:	3201      	adds	r2, #1
 8005a96:	2a01      	cmp	r2, #1
 8005a98:	616a      	str	r2, [r5, #20]
 8005a9a:	462c      	mov	r4, r5
 8005a9c:	dc5d      	bgt.n	8005b5a <WM__InitIVRSearch+0xe2>
 8005a9e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005aa0:	f005 faf2 	bl	800b088 <GUI_ALLOC_LockH>
 8005aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa8:	612a      	str	r2, [r5, #16]
 8005aaa:	4a30      	ldr	r2, [pc, #192]	; (8005b6c <WM__InitIVRSearch+0xf4>)
 8005aac:	9000      	str	r0, [sp, #0]
 8005aae:	7812      	ldrb	r2, [r2, #0]
 8005ab0:	b12a      	cbz	r2, 8005abe <WM__InitIVRSearch+0x46>
 8005ab2:	f100 0308 	add.w	r3, r0, #8
 8005ab6:	aa02      	add	r2, sp, #8
 8005ab8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005abc:	e005      	b.n	8005aca <WM__InitIVRSearch+0x52>
 8005abe:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005ac0:	f012 0802 	ands.w	r8, r2, #2
 8005ac4:	d00a      	beq.n	8005adc <WM__InitIVRSearch+0x64>
 8005ac6:	c803      	ldmia	r0, {r0, r1}
 8005ac8:	aa02      	add	r2, sp, #8
 8005aca:	e882 0003 	stmia.w	r2, {r0, r1}
 8005ace:	ad02      	add	r5, sp, #8
 8005ad0:	b166      	cbz	r6, 8005aec <WM__InitIVRSearch+0x74>
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	4631      	mov	r1, r6
 8005ad6:	f003 f94f 	bl	8008d78 <GUI__IntersectRect>
 8005ada:	e007      	b.n	8005aec <WM__InitIVRSearch+0x74>
 8005adc:	696b      	ldr	r3, [r5, #20]
 8005ade:	4668      	mov	r0, sp
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	616b      	str	r3, [r5, #20]
 8005ae4:	f005 fade 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005ae8:	4640      	mov	r0, r8
 8005aea:	e037      	b.n	8005b5c <WM__InitIVRSearch+0xe4>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	4e20      	ldr	r6, [pc, #128]	; (8005b70 <WM__InitIVRSearch+0xf8>)
 8005af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005af2:	b1c2      	cbz	r2, 8005b26 <WM__InitIVRSearch+0xae>
 8005af4:	9b00      	ldr	r3, [sp, #0]
 8005af6:	6810      	ldr	r0, [r2, #0]
 8005af8:	6851      	ldr	r1, [r2, #4]
 8005afa:	9301      	str	r3, [sp, #4]
 8005afc:	ab04      	add	r3, sp, #16
 8005afe:	c303      	stmia	r3!, {r0, r1}
 8005b00:	6833      	ldr	r3, [r6, #0]
 8005b02:	b133      	cbz	r3, 8005b12 <WM__InitIVRSearch+0x9a>
 8005b04:	a801      	add	r0, sp, #4
 8005b06:	f005 facd 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005b0a:	6830      	ldr	r0, [r6, #0]
 8005b0c:	f005 fabc 	bl	800b088 <GUI_ALLOC_LockH>
 8005b10:	9001      	str	r0, [sp, #4]
 8005b12:	9801      	ldr	r0, [sp, #4]
 8005b14:	a904      	add	r1, sp, #16
 8005b16:	f7ff fba5 	bl	8005264 <WM__Client2Screen>
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	a904      	add	r1, sp, #16
 8005b1e:	f003 f92b 	bl	8008d78 <GUI__IntersectRect>
 8005b22:	a801      	add	r0, sp, #4
 8005b24:	e000      	b.n	8005b28 <WM__InitIVRSearch+0xb0>
 8005b26:	4668      	mov	r0, sp
 8005b28:	f005 fabc 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005b2c:	6831      	ldr	r1, [r6, #0]
 8005b2e:	b119      	cbz	r1, 8005b38 <WM__InitIVRSearch+0xc0>
 8005b30:	4628      	mov	r0, r5
 8005b32:	f7ff faf9 	bl	8005128 <WM__ClipAtParentBorders>
 8005b36:	b128      	cbz	r0, 8005b44 <WM__InitIVRSearch+0xcc>
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8005b3e:	f7ff faf3 	bl	8005128 <WM__ClipAtParentBorders>
 8005b42:	b918      	cbnz	r0, 8005b4c <WM__InitIVRSearch+0xd4>
 8005b44:	6963      	ldr	r3, [r4, #20]
 8005b46:	3b01      	subs	r3, #1
 8005b48:	6163      	str	r3, [r4, #20]
 8005b4a:	e007      	b.n	8005b5c <WM__InitIVRSearch+0xe4>
 8005b4c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005b50:	e884 0003 	stmia.w	r4, {r0, r1}
 8005b54:	f7ff fece 	bl	80058f4 <WM__GetNextIVR>
 8005b58:	e000      	b.n	8005b5c <WM__InitIVRSearch+0xe4>
 8005b5a:	2001      	movs	r0, #1
 8005b5c:	b006      	add	sp, #24
 8005b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b62:	bf00      	nop
 8005b64:	20000024 	.word	0x20000024
 8005b68:	200190cc 	.word	0x200190cc
 8005b6c:	20019471 	.word	0x20019471
 8005b70:	20019448 	.word	0x20019448

08005b74 <WM_SetDefault>:
 8005b74:	b508      	push	{r3, lr}
 8005b76:	f003 fe6b 	bl	8009850 <GL_SetDefault>
 8005b7a:	4b02      	ldr	r3, [pc, #8]	; (8005b84 <WM_SetDefault+0x10>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	645a      	str	r2, [r3, #68]	; 0x44
 8005b82:	bd08      	pop	{r3, pc}
 8005b84:	20000024 	.word	0x20000024

08005b88 <WM__Paint1>:
 8005b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b8a:	b089      	sub	sp, #36	; 0x24
 8005b8c:	4604      	mov	r4, r0
 8005b8e:	f005 fa7b 	bl	800b088 <GUI_ALLOC_LockH>
 8005b92:	6907      	ldr	r7, [r0, #16]
 8005b94:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8005b96:	9001      	str	r0, [sp, #4]
 8005b98:	3008      	adds	r0, #8
 8005b9a:	c803      	ldmia	r0, {r0, r1}
 8005b9c:	ad02      	add	r5, sp, #8
 8005b9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ba2:	a801      	add	r0, sp, #4
 8005ba4:	f005 fa7e 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005ba8:	2f00      	cmp	r7, #0
 8005baa:	d031      	beq.n	8005c10 <WM__Paint1+0x88>
 8005bac:	07b3      	lsls	r3, r6, #30
 8005bae:	d52f      	bpl.n	8005c10 <WM__Paint1+0x88>
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	212e      	movs	r1, #46	; 0x2e
 8005bb4:	f7fe ff51 	bl	8004a5a <WM_SendMessageNoPara>
 8005bb8:	4b16      	ldr	r3, [pc, #88]	; (8005c14 <WM__Paint1+0x8c>)
 8005bba:	781a      	ldrb	r2, [r3, #0]
 8005bbc:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8005bc0:	f102 0201 	add.w	r2, r2, #1
 8005bc4:	701a      	strb	r2, [r3, #0]
 8005bc6:	461e      	mov	r6, r3
 8005bc8:	d00a      	beq.n	8005be0 <WM__Paint1+0x58>
 8005bca:	230f      	movs	r3, #15
 8005bcc:	9405      	str	r4, [sp, #20]
 8005bce:	9304      	str	r3, [sp, #16]
 8005bd0:	9507      	str	r5, [sp, #28]
 8005bd2:	f7ff ffcf 	bl	8005b74 <WM_SetDefault>
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	a904      	add	r1, sp, #16
 8005bda:	f005 fd61 	bl	800b6a0 <WM__SendMessage>
 8005bde:	e010      	b.n	8005c02 <WM__Paint1+0x7a>
 8005be0:	4628      	mov	r0, r5
 8005be2:	f7ff ff49 	bl	8005a78 <WM__InitIVRSearch>
 8005be6:	b160      	cbz	r0, 8005c02 <WM__Paint1+0x7a>
 8005be8:	230f      	movs	r3, #15
 8005bea:	9304      	str	r3, [sp, #16]
 8005bec:	9405      	str	r4, [sp, #20]
 8005bee:	9507      	str	r5, [sp, #28]
 8005bf0:	f7ff ffc0 	bl	8005b74 <WM_SetDefault>
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	a904      	add	r1, sp, #16
 8005bf8:	f005 fd52 	bl	800b6a0 <WM__SendMessage>
 8005bfc:	f7ff fe7a 	bl	80058f4 <WM__GetNextIVR>
 8005c00:	e7f1      	b.n	8005be6 <WM__Paint1+0x5e>
 8005c02:	7833      	ldrb	r3, [r6, #0]
 8005c04:	4620      	mov	r0, r4
 8005c06:	3b01      	subs	r3, #1
 8005c08:	212f      	movs	r1, #47	; 0x2f
 8005c0a:	7033      	strb	r3, [r6, #0]
 8005c0c:	f7fe ff25 	bl	8004a5a <WM_SendMessageNoPara>
 8005c10:	b009      	add	sp, #36	; 0x24
 8005c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c14:	20019471 	.word	0x20019471

08005c18 <WM__Paint>:
 8005c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c1a:	b089      	sub	sp, #36	; 0x24
 8005c1c:	ac06      	add	r4, sp, #24
 8005c1e:	9003      	str	r0, [sp, #12]
 8005c20:	f005 fa32 	bl	800b088 <GUI_ALLOC_LockH>
 8005c24:	f100 0208 	add.w	r2, r0, #8
 8005c28:	4603      	mov	r3, r0
 8005c2a:	9005      	str	r0, [sp, #20]
 8005c2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c30:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005c32:	699e      	ldr	r6, [r3, #24]
 8005c34:	691f      	ldr	r7, [r3, #16]
 8005c36:	e884 0003 	stmia.w	r4, {r0, r1}
 8005c3a:	a805      	add	r0, sp, #20
 8005c3c:	f005 fa32 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005c40:	f244 0320 	movw	r3, #16416	; 0x4020
 8005c44:	402b      	ands	r3, r5
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d034      	beq.n	8005cb4 <WM__Paint+0x9c>
 8005c4a:	b1bf      	cbz	r7, 8005c7c <WM__Paint+0x64>
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	9903      	ldr	r1, [sp, #12]
 8005c50:	f7ff fa6a 	bl	8005128 <WM__ClipAtParentBorders>
 8005c54:	b190      	cbz	r0, 8005c7c <WM__Paint+0x64>
 8005c56:	9803      	ldr	r0, [sp, #12]
 8005c58:	f7ff fcf8 	bl	800564c <WM_SelectWindow>
 8005c5c:	0769      	lsls	r1, r5, #29
 8005c5e:	d50f      	bpl.n	8005c80 <WM__Paint+0x68>
 8005c60:	b126      	cbz	r6, 8005c6c <WM__Paint+0x54>
 8005c62:	f005 0501 	and.w	r5, r5, #1
 8005c66:	f085 0501 	eor.w	r5, r5, #1
 8005c6a:	e000      	b.n	8005c6e <WM__Paint+0x56>
 8005c6c:	2501      	movs	r5, #1
 8005c6e:	9500      	str	r5, [sp, #0]
 8005c70:	4620      	mov	r0, r4
 8005c72:	4912      	ldr	r1, [pc, #72]	; (8005cbc <WM__Paint+0xa4>)
 8005c74:	aa03      	add	r2, sp, #12
 8005c76:	2300      	movs	r3, #0
 8005c78:	f000 facc 	bl	8006214 <GUI_MEMDEV_Draw>
 8005c7c:	2400      	movs	r4, #0
 8005c7e:	e003      	b.n	8005c88 <WM__Paint+0x70>
 8005c80:	9803      	ldr	r0, [sp, #12]
 8005c82:	f7ff f9e1 	bl	8005048 <WM__PaintWinAndOverlays>
 8005c86:	2401      	movs	r4, #1
 8005c88:	9803      	ldr	r0, [sp, #12]
 8005c8a:	f005 f9fd 	bl	800b088 <GUI_ALLOC_LockH>
 8005c8e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005c90:	9005      	str	r0, [sp, #20]
 8005c92:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 8005c96:	f023 0320 	bic.w	r3, r3, #32
 8005c9a:	0492      	lsls	r2, r2, #18
 8005c9c:	bf48      	it	mi
 8005c9e:	f043 0304 	orrmi.w	r3, r3, #4
 8005ca2:	6283      	str	r3, [r0, #40]	; 0x28
 8005ca4:	a805      	add	r0, sp, #20
 8005ca6:	f005 f9fd 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005caa:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <WM__Paint+0xa8>)
 8005cac:	881a      	ldrh	r2, [r3, #0]
 8005cae:	3a01      	subs	r2, #1
 8005cb0:	801a      	strh	r2, [r3, #0]
 8005cb2:	e000      	b.n	8005cb6 <WM__Paint+0x9e>
 8005cb4:	461c      	mov	r4, r3
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	b009      	add	sp, #36	; 0x24
 8005cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cbc:	080050c1 	.word	0x080050c1
 8005cc0:	20019464 	.word	0x20019464

08005cc4 <WM_Exec>:
 8005cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc8:	4b4c      	ldr	r3, [pc, #304]	; (8005dfc <WM_Exec+0x138>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	b09f      	sub	sp, #124	; 0x7c
 8005cce:	b103      	cbz	r3, 8005cd2 <WM_Exec+0xe>
 8005cd0:	4798      	blx	r3
 8005cd2:	2600      	movs	r6, #0
 8005cd4:	4d4a      	ldr	r5, [pc, #296]	; (8005e00 <WM_Exec+0x13c>)
 8005cd6:	682b      	ldr	r3, [r5, #0]
 8005cd8:	b1db      	cbz	r3, 8005d12 <WM_Exec+0x4e>
 8005cda:	4b4a      	ldr	r3, [pc, #296]	; (8005e04 <WM_Exec+0x140>)
 8005cdc:	681c      	ldr	r4, [r3, #0]
 8005cde:	b1bc      	cbz	r4, 8005d10 <WM_Exec+0x4c>
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f005 f9d1 	bl	800b088 <GUI_ALLOC_LockH>
 8005ce6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005ce8:	6947      	ldr	r7, [r0, #20]
 8005cea:	ab1e      	add	r3, sp, #120	; 0x78
 8005cec:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005cf0:	f843 0d70 	str.w	r0, [r3, #-112]!
 8005cf4:	d007      	beq.n	8005d06 <WM_Exec+0x42>
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f005 f9d4 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f7ff fd6f 	bl	80057e0 <WM_DeleteWindow>
 8005d02:	463c      	mov	r4, r7
 8005d04:	e7eb      	b.n	8005cde <WM_Exec+0x1a>
 8005d06:	4618      	mov	r0, r3
 8005d08:	463c      	mov	r4, r7
 8005d0a:	f005 f9cb 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8005d0e:	e7e6      	b.n	8005cde <WM_Exec+0x1a>
 8005d10:	602c      	str	r4, [r5, #0]
 8005d12:	4b3d      	ldr	r3, [pc, #244]	; (8005e08 <WM_Exec+0x144>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	b103      	cbz	r3, 8005d1a <WM_Exec+0x56>
 8005d18:	4798      	blx	r3
 8005d1a:	4b3c      	ldr	r3, [pc, #240]	; (8005e0c <WM_Exec+0x148>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	b92b      	cbnz	r3, 8005d2c <WM_Exec+0x68>
 8005d20:	4f3b      	ldr	r7, [pc, #236]	; (8005e10 <WM_Exec+0x14c>)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005d28:	b143      	cbz	r3, 8005d3c <WM_Exec+0x78>
 8005d2a:	e003      	b.n	8005d34 <WM_Exec+0x70>
 8005d2c:	4798      	blx	r3
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d0f6      	beq.n	8005d20 <WM_Exec+0x5c>
 8005d32:	e058      	b.n	8005de6 <WM_Exec+0x122>
 8005d34:	f003 fe24 	bl	8009980 <GUI_PollKeyMsg>
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	d154      	bne.n	8005de6 <WM_Exec+0x122>
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	f893 5054 	ldrb.w	r5, [r3, #84]	; 0x54
 8005d42:	b14d      	cbz	r5, 8005d58 <WM_Exec+0x94>
 8005d44:	4b33      	ldr	r3, [pc, #204]	; (8005e14 <WM_Exec+0x150>)
 8005d46:	881d      	ldrh	r5, [r3, #0]
 8005d48:	b135      	cbz	r5, 8005d58 <WM_Exec+0x94>
 8005d4a:	4b33      	ldr	r3, [pc, #204]	; (8005e18 <WM_Exec+0x154>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d04b      	beq.n	8005dea <WM_Exec+0x126>
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4798      	blx	r3
 8005d56:	2501      	movs	r5, #1
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005d5e:	b913      	cbnz	r3, 8005d66 <WM_Exec+0xa2>
 8005d60:	2d00      	cmp	r5, #0
 8005d62:	d137      	bne.n	8005dd4 <WM_Exec+0x110>
 8005d64:	e045      	b.n	8005df2 <WM_Exec+0x12e>
 8005d66:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8005e14 <WM_Exec+0x150>
 8005d6a:	f8b8 3000 	ldrh.w	r3, [r8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0f6      	beq.n	8005d60 <WM_Exec+0x9c>
 8005d72:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8005e1c <WM_Exec+0x158>
 8005d76:	f8d9 4000 	ldr.w	r4, [r9]
 8005d7a:	b90c      	cbnz	r4, 8005d80 <WM_Exec+0xbc>
 8005d7c:	4b21      	ldr	r3, [pc, #132]	; (8005e04 <WM_Exec+0x140>)
 8005d7e:	681c      	ldr	r4, [r3, #0]
 8005d80:	a802      	add	r0, sp, #8
 8005d82:	f003 fdbb 	bl	80098fc <GUI_SaveContext_W>
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 8005d8c:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8005d90:	b914      	cbnz	r4, 8005d98 <WM_Exec+0xd4>
 8005d92:	2400      	movs	r4, #0
 8005d94:	e00d      	b.n	8005db2 <WM_Exec+0xee>
 8005d96:	b963      	cbnz	r3, 8005db2 <WM_Exec+0xee>
 8005d98:	4620      	mov	r0, r4
 8005d9a:	f7ff ff3d 	bl	8005c18 <WM__Paint>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	4620      	mov	r0, r4
 8005da2:	9301      	str	r3, [sp, #4]
 8005da4:	f005 f966 	bl	800b074 <GUI_ALLOC_h2p>
 8005da8:	6944      	ldr	r4, [r0, #20]
 8005daa:	9b01      	ldr	r3, [sp, #4]
 8005dac:	2c00      	cmp	r4, #0
 8005dae:	d1f2      	bne.n	8005d96 <WM_Exec+0xd2>
 8005db0:	e7ef      	b.n	8005d92 <WM_Exec+0xce>
 8005db2:	4658      	mov	r0, fp
 8005db4:	f8c9 4000 	str.w	r4, [r9]
 8005db8:	f003 fd6c 	bl	8009894 <GUI_SetColor>
 8005dbc:	4650      	mov	r0, sl
 8005dbe:	f003 fd67 	bl	8009890 <GUI_SetBkColor>
 8005dc2:	a802      	add	r0, sp, #8
 8005dc4:	f003 fda4 	bl	8009910 <GUI_RestoreContext>
 8005dc8:	f8b8 3000 	ldrh.w	r3, [r8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0c7      	beq.n	8005d60 <WM_Exec+0x9c>
 8005dd0:	2601      	movs	r6, #1
 8005dd2:	e7c1      	b.n	8005d58 <WM_Exec+0x94>
 8005dd4:	4b10      	ldr	r3, [pc, #64]	; (8005e18 <WM_Exec+0x154>)
 8005dd6:	6818      	ldr	r0, [r3, #0]
 8005dd8:	b110      	cbz	r0, 8005de0 <WM_Exec+0x11c>
 8005dda:	6843      	ldr	r3, [r0, #4]
 8005ddc:	4798      	blx	r3
 8005dde:	e008      	b.n	8005df2 <WM_Exec+0x12e>
 8005de0:	f002 ff90 	bl	8008d04 <GUI__ManageCache>
 8005de4:	e005      	b.n	8005df2 <WM_Exec+0x12e>
 8005de6:	2601      	movs	r6, #1
 8005de8:	e774      	b.n	8005cd4 <WM_Exec+0x10>
 8005dea:	2001      	movs	r0, #1
 8005dec:	f002 ff8a 	bl	8008d04 <GUI__ManageCache>
 8005df0:	e7b1      	b.n	8005d56 <WM_Exec+0x92>
 8005df2:	4630      	mov	r0, r6
 8005df4:	b01f      	add	sp, #124	; 0x7c
 8005df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfa:	bf00      	nop
 8005dfc:	20019458 	.word	0x20019458
 8005e00:	200190c8 	.word	0x200190c8
 8005e04:	20019468 	.word	0x20019468
 8005e08:	20019454 	.word	0x20019454
 8005e0c:	200194d4 	.word	0x200194d4
 8005e10:	20000024 	.word	0x20000024
 8005e14:	20019464 	.word	0x20019464
 8005e18:	20019484 	.word	0x20019484
 8005e1c:	200190e4 	.word	0x200190e4

08005e20 <WM_Activate>:
 8005e20:	4b02      	ldr	r3, [pc, #8]	; (8005e2c <WM_Activate+0xc>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8005e2a:	4770      	bx	lr
 8005e2c:	20000024 	.word	0x20000024

08005e30 <WM_Deactivate>:
 8005e30:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <WM_Deactivate+0x10>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8005e3a:	f002 bdd5 	b.w	80089e8 <LCD_SetClipRectMax>
 8005e3e:	bf00      	nop
 8005e40:	20000024 	.word	0x20000024

08005e44 <WM_DefaultProc>:
 8005e44:	b510      	push	{r4, lr}
 8005e46:	4604      	mov	r4, r0
 8005e48:	6840      	ldr	r0, [r0, #4]
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	68e1      	ldr	r1, [r4, #12]
 8005e4e:	2b17      	cmp	r3, #23
 8005e50:	d00f      	beq.n	8005e72 <WM_DefaultProc+0x2e>
 8005e52:	dc06      	bgt.n	8005e62 <WM_DefaultProc+0x1e>
 8005e54:	2b0e      	cmp	r3, #14
 8005e56:	d00e      	beq.n	8005e76 <WM_DefaultProc+0x32>
 8005e58:	2b14      	cmp	r3, #20
 8005e5a:	d114      	bne.n	8005e86 <WM_DefaultProc+0x42>
 8005e5c:	f7fe ff2c 	bl	8004cb8 <WM__GetClientRectEx>
 8005e60:	e011      	b.n	8005e86 <WM_DefaultProc+0x42>
 8005e62:	2b22      	cmp	r3, #34	; 0x22
 8005e64:	d00c      	beq.n	8005e80 <WM_DefaultProc+0x3c>
 8005e66:	2b28      	cmp	r3, #40	; 0x28
 8005e68:	d10d      	bne.n	8005e86 <WM_DefaultProc+0x42>
 8005e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e6e:	f7ff bbcc 	b.w	800560a <WM_InvalidateWindow>
 8005e72:	60e0      	str	r0, [r4, #12]
 8005e74:	bd10      	pop	{r4, pc}
 8005e76:	4621      	mov	r1, r4
 8005e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e7c:	f005 bc6e 	b.w	800b75c <WM_SendToParent>
 8005e80:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8005e84:	e000      	b.n	8005e88 <WM_DefaultProc+0x44>
 8005e86:	2300      	movs	r3, #0
 8005e88:	60e3      	str	r3, [r4, #12]
 8005e8a:	bd10      	pop	{r4, pc}

08005e8c <_cbBackWin>:
 8005e8c:	6803      	ldr	r3, [r0, #0]
 8005e8e:	2b0e      	cmp	r3, #14
 8005e90:	b510      	push	{r4, lr}
 8005e92:	4604      	mov	r4, r0
 8005e94:	d002      	beq.n	8005e9c <_cbBackWin+0x10>
 8005e96:	2b0f      	cmp	r3, #15
 8005e98:	d009      	beq.n	8005eae <_cbBackWin+0x22>
 8005e9a:	e020      	b.n	8005ede <_cbBackWin+0x52>
 8005e9c:	68c3      	ldr	r3, [r0, #12]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	2a01      	cmp	r2, #1
 8005ea2:	d121      	bne.n	8005ee8 <_cbBackWin+0x5c>
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eaa:	f003 bd61 	b.w	8009970 <GUI_StoreKey>
 8005eae:	4a0f      	ldr	r2, [pc, #60]	; (8005eec <_cbBackWin+0x60>)
 8005eb0:	6843      	ldr	r3, [r0, #4]
 8005eb2:	6811      	ldr	r1, [r2, #0]
 8005eb4:	428b      	cmp	r3, r1
 8005eb6:	d006      	beq.n	8005ec6 <_cbBackWin+0x3a>
 8005eb8:	6852      	ldr	r2, [r2, #4]
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	bf14      	ite	ne
 8005ebe:	f04f 33ff 	movne.w	r3, #4294967295
 8005ec2:	2301      	moveq	r3, #1
 8005ec4:	e000      	b.n	8005ec8 <_cbBackWin+0x3c>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	4a09      	ldr	r2, [pc, #36]	; (8005ef0 <_cbBackWin+0x64>)
 8005eca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005ece:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8005ed2:	4298      	cmp	r0, r3
 8005ed4:	d003      	beq.n	8005ede <_cbBackWin+0x52>
 8005ed6:	f003 fcdb 	bl	8009890 <GUI_SetBkColor>
 8005eda:	f004 fa33 	bl	800a344 <GUI_Clear>
 8005ede:	4620      	mov	r0, r4
 8005ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ee4:	f7ff bfae 	b.w	8005e44 <WM_DefaultProc>
 8005ee8:	bd10      	pop	{r4, pc}
 8005eea:	bf00      	nop
 8005eec:	2001944c 	.word	0x2001944c
 8005ef0:	20019478 	.word	0x20019478

08005ef4 <WM_Init>:
 8005ef4:	b530      	push	{r4, r5, lr}
 8005ef6:	4b2b      	ldr	r3, [pc, #172]	; (8005fa4 <WM_Init+0xb0>)
 8005ef8:	7818      	ldrb	r0, [r3, #0]
 8005efa:	b085      	sub	sp, #20
 8005efc:	461d      	mov	r5, r3
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d14d      	bne.n	8005f9e <WM_Init+0xaa>
 8005f02:	4b29      	ldr	r3, [pc, #164]	; (8005fa8 <WM_Init+0xb4>)
 8005f04:	6018      	str	r0, [r3, #0]
 8005f06:	4b29      	ldr	r3, [pc, #164]	; (8005fac <WM_Init+0xb8>)
 8005f08:	6018      	str	r0, [r3, #0]
 8005f0a:	4b29      	ldr	r3, [pc, #164]	; (8005fb0 <WM_Init+0xbc>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6458      	str	r0, [r3, #68]	; 0x44
 8005f10:	4b28      	ldr	r3, [pc, #160]	; (8005fb4 <WM_Init+0xc0>)
 8005f12:	8018      	strh	r0, [r3, #0]
 8005f14:	4b28      	ldr	r3, [pc, #160]	; (8005fb8 <WM_Init+0xc4>)
 8005f16:	4604      	mov	r4, r0
 8005f18:	8018      	strh	r0, [r3, #0]
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	f004 f8e8 	bl	800a0f0 <GUI_DEVICE__GetpDriver>
 8005f20:	b1c0      	cbz	r0, 8005f54 <WM_Init+0x60>
 8005f22:	f04f 32ff 	mov.w	r2, #4294967295
 8005f26:	2302      	movs	r3, #2
 8005f28:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8005f32:	4b22      	ldr	r3, [pc, #136]	; (8005fbc <WM_Init+0xc8>)
 8005f34:	9302      	str	r3, [sp, #8]
 8005f36:	9003      	str	r0, [sp, #12]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	4601      	mov	r1, r0
 8005f3c:	f7ff fba6 	bl	800568c <WM_CreateWindowAsChild>
 8005f40:	4b1f      	ldr	r3, [pc, #124]	; (8005fc0 <WM_Init+0xcc>)
 8005f42:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005f46:	4b1f      	ldr	r3, [pc, #124]	; (8005fc4 <WM_Init+0xd0>)
 8005f48:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005f4c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8005f50:	f7ff fb5b 	bl	800560a <WM_InvalidateWindow>
 8005f54:	3401      	adds	r4, #1
 8005f56:	2c02      	cmp	r4, #2
 8005f58:	d1df      	bne.n	8005f1a <WM_Init+0x26>
 8005f5a:	481b      	ldr	r0, [pc, #108]	; (8005fc8 <WM_Init+0xd4>)
 8005f5c:	f005 fc2e 	bl	800b7bc <WM__AddCriticalHandle>
 8005f60:	481a      	ldr	r0, [pc, #104]	; (8005fcc <WM_Init+0xd8>)
 8005f62:	f005 fc2b 	bl	800b7bc <WM__AddCriticalHandle>
 8005f66:	481a      	ldr	r0, [pc, #104]	; (8005fd0 <WM_Init+0xdc>)
 8005f68:	f005 fc28 	bl	800b7bc <WM__AddCriticalHandle>
 8005f6c:	4819      	ldr	r0, [pc, #100]	; (8005fd4 <WM_Init+0xe0>)
 8005f6e:	f005 fc25 	bl	800b7bc <WM__AddCriticalHandle>
 8005f72:	4819      	ldr	r0, [pc, #100]	; (8005fd8 <WM_Init+0xe4>)
 8005f74:	f005 fc22 	bl	800b7bc <WM__AddCriticalHandle>
 8005f78:	4818      	ldr	r0, [pc, #96]	; (8005fdc <WM_Init+0xe8>)
 8005f7a:	f005 fc1f 	bl	800b7bc <WM__AddCriticalHandle>
 8005f7e:	4b10      	ldr	r3, [pc, #64]	; (8005fc0 <WM_Init+0xcc>)
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	f7ff fb63 	bl	800564c <WM_SelectWindow>
 8005f86:	f7ff ff4b 	bl	8005e20 <WM_Activate>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	702b      	strb	r3, [r5, #0]
 8005f8e:	4814      	ldr	r0, [pc, #80]	; (8005fe0 <WM_Init+0xec>)
 8005f90:	4b14      	ldr	r3, [pc, #80]	; (8005fe4 <WM_Init+0xf0>)
 8005f92:	6003      	str	r3, [r0, #0]
 8005f94:	b005      	add	sp, #20
 8005f96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f9a:	f004 b9e3 	b.w	800a364 <GUI__RegisterExit>
 8005f9e:	b005      	add	sp, #20
 8005fa0:	bd30      	pop	{r4, r5, pc}
 8005fa2:	bf00      	nop
 8005fa4:	200190f0 	.word	0x200190f0
 8005fa8:	20019468 	.word	0x20019468
 8005fac:	200190e4 	.word	0x200190e4
 8005fb0:	20000024 	.word	0x20000024
 8005fb4:	20019464 	.word	0x20019464
 8005fb8:	20019444 	.word	0x20019444
 8005fbc:	08005e8d 	.word	0x08005e8d
 8005fc0:	2001944c 	.word	0x2001944c
 8005fc4:	20019478 	.word	0x20019478
 8005fc8:	200195b8 	.word	0x200195b8
 8005fcc:	200195a8 	.word	0x200195a8
 8005fd0:	20019598 	.word	0x20019598
 8005fd4:	200195c0 	.word	0x200195c0
 8005fd8:	200195b0 	.word	0x200195b0
 8005fdc:	200195a0 	.word	0x200195a0
 8005fe0:	200190e8 	.word	0x200190e8
 8005fe4:	08004cdd 	.word	0x08004cdd

08005fe8 <_CreateStaticDevice>:
 8005fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fec:	b087      	sub	sp, #28
 8005fee:	4604      	mov	r4, r0
 8005ff0:	f005 f84a 	bl	800b088 <GUI_ALLOC_LockH>
 8005ff4:	af06      	add	r7, sp, #24
 8005ff6:	f8b0 8000 	ldrh.w	r8, [r0]
 8005ffa:	8886      	ldrh	r6, [r0, #4]
 8005ffc:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 8006000:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 8006004:	f847 0d04 	str.w	r0, [r7, #-4]!
 8006008:	fa0f f888 	sxth.w	r8, r8
 800600c:	b236      	sxth	r6, r6
 800600e:	ebc8 0606 	rsb	r6, r8, r6
 8006012:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8006016:	3601      	adds	r6, #1
 8006018:	4638      	mov	r0, r7
 800601a:	fa0f f989 	sxth.w	r9, r9
 800601e:	fa0f f58b 	sxth.w	r5, fp
 8006022:	f005 f83f 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8006026:	ebc9 0505 	rsb	r5, r9, r5
 800602a:	2e00      	cmp	r6, #0
 800602c:	f105 0501 	add.w	r5, r5, #1
 8006030:	dd4d      	ble.n	80060ce <_CreateStaticDevice+0xe6>
 8006032:	2d00      	cmp	r5, #0
 8006034:	dd4b      	ble.n	80060ce <_CreateStaticDevice+0xe6>
 8006036:	f1ba 0f00 	cmp.w	sl, #0
 800603a:	d04a      	beq.n	80060d2 <_CreateStaticDevice+0xea>
 800603c:	4650      	mov	r0, sl
 800603e:	f005 f823 	bl	800b088 <GUI_ALLOC_LockH>
 8006042:	ab06      	add	r3, sp, #24
 8006044:	8886      	ldrh	r6, [r0, #4]
 8006046:	f843 0d08 	str.w	r0, [r3, #-8]!
 800604a:	88c5      	ldrh	r5, [r0, #6]
 800604c:	b236      	sxth	r6, r6
 800604e:	4618      	mov	r0, r3
 8006050:	f005 f828 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8006054:	4546      	cmp	r6, r8
 8006056:	d102      	bne.n	800605e <_CreateStaticDevice+0x76>
 8006058:	b22d      	sxth	r5, r5
 800605a:	454d      	cmp	r5, r9
 800605c:	d032      	beq.n	80060c4 <_CreateStaticDevice+0xdc>
 800605e:	4650      	mov	r0, sl
 8006060:	4641      	mov	r1, r8
 8006062:	464a      	mov	r2, r9
 8006064:	f000 f886 	bl	8006174 <GUI_MEMDEV_SetOrg>
 8006068:	e02c      	b.n	80060c4 <_CreateStaticDevice+0xdc>
 800606a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800606c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006070:	6283      	str	r3, [r0, #40]	; 0x28
 8006072:	4638      	mov	r0, r7
 8006074:	f005 f816 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8006078:	4640      	mov	r0, r8
 800607a:	f000 ff9b 	bl	8006fb4 <GUI_MEMDEV_Select>
 800607e:	4607      	mov	r7, r0
 8006080:	4650      	mov	r0, sl
 8006082:	f003 fc09 	bl	8009898 <GUI__AlphaPreserveTrans>
 8006086:	4640      	mov	r0, r8
 8006088:	f000 f8b4 	bl	80061f4 <GUI_MEMDEV_GetDataPtr>
 800608c:	4b2d      	ldr	r3, [pc, #180]	; (8006144 <_CreateStaticDevice+0x15c>)
 800608e:	fb05 f206 	mul.w	r2, r5, r6
 8006092:	7819      	ldrb	r1, [r3, #0]
 8006094:	4d2c      	ldr	r5, [pc, #176]	; (8006148 <_CreateStaticDevice+0x160>)
 8006096:	4e2d      	ldr	r6, [pc, #180]	; (800614c <_CreateStaticDevice+0x164>)
 8006098:	0092      	lsls	r2, r2, #2
 800609a:	f002 fd95 	bl	8008bc8 <GUI__memset>
 800609e:	4620      	mov	r0, r4
 80060a0:	f8d5 8000 	ldr.w	r8, [r5]
 80060a4:	6034      	str	r4, [r6, #0]
 80060a6:	f005 fb81 	bl	800b7ac <WM_GetWindowOrgX>
 80060aa:	6028      	str	r0, [r5, #0]
 80060ac:	4620      	mov	r0, r4
 80060ae:	f7ff fd6b 	bl	8005b88 <WM__Paint1>
 80060b2:	2000      	movs	r0, #0
 80060b4:	f8c5 8000 	str.w	r8, [r5]
 80060b8:	6030      	str	r0, [r6, #0]
 80060ba:	f003 fbed 	bl	8009898 <GUI__AlphaPreserveTrans>
 80060be:	4638      	mov	r0, r7
 80060c0:	f000 ff78 	bl	8006fb4 <GUI_MEMDEV_Select>
 80060c4:	4620      	mov	r0, r4
 80060c6:	f004 ffd5 	bl	800b074 <GUI_ALLOC_h2p>
 80060ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80060cc:	e037      	b.n	800613e <_CreateStaticDevice+0x156>
 80060ce:	2000      	movs	r0, #0
 80060d0:	e035      	b.n	800613e <_CreateStaticDevice+0x156>
 80060d2:	f7fe fde5 	bl	8004ca0 <WM_GetDesktopWindow>
 80060d6:	4284      	cmp	r4, r0
 80060d8:	d112      	bne.n	8006100 <_CreateStaticDevice+0x118>
 80060da:	f002 f91f 	bl	800831c <LCD_GetXSize>
 80060de:	4682      	mov	sl, r0
 80060e0:	f002 f924 	bl	800832c <LCD_GetYSize>
 80060e4:	4556      	cmp	r6, sl
 80060e6:	dc02      	bgt.n	80060ee <_CreateStaticDevice+0x106>
 80060e8:	4285      	cmp	r5, r0
 80060ea:	dd09      	ble.n	8006100 <_CreateStaticDevice+0x118>
 80060ec:	e000      	b.n	80060f0 <_CreateStaticDevice+0x108>
 80060ee:	4656      	mov	r6, sl
 80060f0:	4285      	cmp	r5, r0
 80060f2:	bfa8      	it	ge
 80060f4:	4605      	movge	r5, r0
 80060f6:	4631      	mov	r1, r6
 80060f8:	4620      	mov	r0, r4
 80060fa:	462a      	mov	r2, r5
 80060fc:	f005 fb0a 	bl	800b714 <WM_SetSize>
 8006100:	4b13      	ldr	r3, [pc, #76]	; (8006150 <_CreateStaticDevice+0x168>)
 8006102:	9301      	str	r3, [sp, #4]
 8006104:	f04f 0a01 	mov.w	sl, #1
 8006108:	4b12      	ldr	r3, [pc, #72]	; (8006154 <_CreateStaticDevice+0x16c>)
 800610a:	9302      	str	r3, [sp, #8]
 800610c:	4640      	mov	r0, r8
 800610e:	4649      	mov	r1, r9
 8006110:	4632      	mov	r2, r6
 8006112:	462b      	mov	r3, r5
 8006114:	f8cd a000 	str.w	sl, [sp]
 8006118:	f000 fe4e 	bl	8006db8 <GUI_MEMDEV__CreateFixed>
 800611c:	4680      	mov	r8, r0
 800611e:	4620      	mov	r0, r4
 8006120:	f004 ffb2 	bl	800b088 <GUI_ALLOC_LockH>
 8006124:	9005      	str	r0, [sp, #20]
 8006126:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 800612a:	f1b8 0f00 	cmp.w	r8, #0
 800612e:	d19c      	bne.n	800606a <_CreateStaticDevice+0x82>
 8006130:	4638      	mov	r0, r7
 8006132:	f004 ffb7 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8006136:	4620      	mov	r0, r4
 8006138:	f7ff fd26 	bl	8005b88 <WM__Paint1>
 800613c:	4640      	mov	r0, r8
 800613e:	b007      	add	sp, #28
 8006140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006144:	2000000c 	.word	0x2000000c
 8006148:	200194a0 	.word	0x200194a0
 800614c:	20019490 	.word	0x20019490
 8006150:	0800f6f0 	.word	0x0800f6f0
 8006154:	08012e48 	.word	0x08012e48

08006158 <GUI_MEMDEV_Paint1Static>:
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	4605      	mov	r5, r0
 800615c:	2405      	movs	r4, #5
 800615e:	4628      	mov	r0, r5
 8006160:	f7ff ff42 	bl	8005fe8 <_CreateStaticDevice>
 8006164:	b910      	cbnz	r0, 800616c <GUI_MEMDEV_Paint1Static+0x14>
 8006166:	3c01      	subs	r4, #1
 8006168:	d1f9      	bne.n	800615e <GUI_MEMDEV_Paint1Static+0x6>
 800616a:	bd38      	pop	{r3, r4, r5, pc}
 800616c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006170:	f006 b83a 	b.w	800c1e8 <GUI_MEMDEV_Write>

08006174 <GUI_MEMDEV_SetOrg>:
 8006174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006176:	460d      	mov	r5, r1
 8006178:	4614      	mov	r4, r2
 800617a:	b918      	cbnz	r0, 8006184 <GUI_MEMDEV_SetOrg+0x10>
 800617c:	4b11      	ldr	r3, [pc, #68]	; (80061c4 <GUI_MEMDEV_SetOrg+0x50>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8006182:	b1e8      	cbz	r0, 80061c0 <GUI_MEMDEV_SetOrg+0x4c>
 8006184:	f004 ff80 	bl	800b088 <GUI_ALLOC_LockH>
 8006188:	b2a4      	uxth	r4, r4
 800618a:	b2ad      	uxth	r5, r5
 800618c:	80c4      	strh	r4, [r0, #6]
 800618e:	8085      	strh	r5, [r0, #4]
 8006190:	9000      	str	r0, [sp, #0]
 8006192:	f002 fc29 	bl	80089e8 <LCD_SetClipRectMax>
 8006196:	9b00      	ldr	r3, [sp, #0]
 8006198:	6958      	ldr	r0, [r3, #20]
 800619a:	b170      	cbz	r0, 80061ba <GUI_MEMDEV_SetOrg+0x46>
 800619c:	f004 ff74 	bl	800b088 <GUI_ALLOC_LockH>
 80061a0:	9b00      	ldr	r3, [sp, #0]
 80061a2:	9001      	str	r0, [sp, #4]
 80061a4:	891a      	ldrh	r2, [r3, #8]
 80061a6:	895b      	ldrh	r3, [r3, #10]
 80061a8:	8082      	strh	r2, [r0, #4]
 80061aa:	80c3      	strh	r3, [r0, #6]
 80061ac:	b112      	cbz	r2, 80061b4 <GUI_MEMDEV_SetOrg+0x40>
 80061ae:	b10b      	cbz	r3, 80061b4 <GUI_MEMDEV_SetOrg+0x40>
 80061b0:	8005      	strh	r5, [r0, #0]
 80061b2:	8044      	strh	r4, [r0, #2]
 80061b4:	a801      	add	r0, sp, #4
 80061b6:	f004 ff75 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80061ba:	4668      	mov	r0, sp
 80061bc:	f004 ff72 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80061c0:	b003      	add	sp, #12
 80061c2:	bd30      	pop	{r4, r5, pc}
 80061c4:	20000024 	.word	0x20000024

080061c8 <GUI_MEMDEV_GetYSize>:
 80061c8:	b513      	push	{r0, r1, r4, lr}
 80061ca:	b920      	cbnz	r0, 80061d6 <GUI_MEMDEV_GetYSize+0xe>
 80061cc:	4b08      	ldr	r3, [pc, #32]	; (80061f0 <GUI_MEMDEV_GetYSize+0x28>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80061d2:	4604      	mov	r4, r0
 80061d4:	b148      	cbz	r0, 80061ea <GUI_MEMDEV_GetYSize+0x22>
 80061d6:	f004 ff57 	bl	800b088 <GUI_ALLOC_LockH>
 80061da:	ab02      	add	r3, sp, #8
 80061dc:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80061e0:	f843 0d04 	str.w	r0, [r3, #-4]!
 80061e4:	4618      	mov	r0, r3
 80061e6:	f004 ff5d 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80061ea:	4620      	mov	r0, r4
 80061ec:	b002      	add	sp, #8
 80061ee:	bd10      	pop	{r4, pc}
 80061f0:	20000024 	.word	0x20000024

080061f4 <GUI_MEMDEV_GetDataPtr>:
 80061f4:	b513      	push	{r0, r1, r4, lr}
 80061f6:	b150      	cbz	r0, 800620e <GUI_MEMDEV_GetDataPtr+0x1a>
 80061f8:	f004 ff46 	bl	800b088 <GUI_ALLOC_LockH>
 80061fc:	4604      	mov	r4, r0
 80061fe:	a802      	add	r0, sp, #8
 8006200:	f840 4d04 	str.w	r4, [r0, #-4]!
 8006204:	f004 ff4e 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8006208:	f104 0018 	add.w	r0, r4, #24
 800620c:	e7ff      	b.n	800620e <GUI_MEMDEV_GetDataPtr+0x1a>
 800620e:	b002      	add	sp, #8
 8006210:	bd10      	pop	{r4, pc}
	...

08006214 <GUI_MEMDEV_Draw>:
 8006214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006218:	461e      	mov	r6, r3
 800621a:	b089      	sub	sp, #36	; 0x24
 800621c:	4b4e      	ldr	r3, [pc, #312]	; (8006358 <GUI_MEMDEV_Draw+0x144>)
 800621e:	9204      	str	r2, [sp, #16]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	9103      	str	r1, [sp, #12]
 8006224:	7c54      	ldrb	r4, [r2, #17]
 8006226:	4a4d      	ldr	r2, [pc, #308]	; (800635c <GUI_MEMDEV_Draw+0x148>)
 8006228:	5712      	ldrsb	r2, [r2, r4]
 800622a:	2a01      	cmp	r2, #1
 800622c:	4605      	mov	r5, r0
 800622e:	469b      	mov	fp, r3
 8006230:	4620      	mov	r0, r4
 8006232:	dd06      	ble.n	8006242 <GUI_MEMDEV_Draw+0x2e>
 8006234:	f002 f860 	bl	80082f8 <LCD_GetXSizeEx>
 8006238:	4607      	mov	r7, r0
 800623a:	4620      	mov	r0, r4
 800623c:	f002 f85f 	bl	80082fe <LCD_GetYSizeEx>
 8006240:	e005      	b.n	800624e <GUI_MEMDEV_Draw+0x3a>
 8006242:	f002 f85f 	bl	8008304 <LCD_GetVXSizeEx>
 8006246:	4607      	mov	r7, r0
 8006248:	4620      	mov	r0, r4
 800624a:	f002 f85e 	bl	800830a <LCD_GetVYSizeEx>
 800624e:	4604      	mov	r4, r0
 8006250:	b325      	cbz	r5, 800629c <GUI_MEMDEV_Draw+0x88>
 8006252:	a806      	add	r0, sp, #24
 8006254:	a907      	add	r1, sp, #28
 8006256:	f003 fbf3 	bl	8009a40 <GUI_GetOrg>
 800625a:	9b06      	ldr	r3, [sp, #24]
 800625c:	f9b5 a000 	ldrsh.w	sl, [r5]
 8006260:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8006264:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
 8006268:	441f      	add	r7, r3
 800626a:	9b07      	ldr	r3, [sp, #28]
 800626c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006270:	3f01      	subs	r7, #1
 8006272:	4297      	cmp	r7, r2
 8006274:	bfd4      	ite	le
 8006276:	ebca 0707 	rsble	r7, sl, r7
 800627a:	ebca 0702 	rsbgt	r7, sl, r2
 800627e:	441c      	add	r4, r3
 8006280:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8006284:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8006288:	3c01      	subs	r4, #1
 800628a:	4294      	cmp	r4, r2
 800628c:	bfd4      	ite	le
 800628e:	ebc8 0404 	rsble	r4, r8, r4
 8006292:	ebc8 0402 	rsbgt	r4, r8, r2
 8006296:	3701      	adds	r7, #1
 8006298:	3401      	adds	r4, #1
 800629a:	e001      	b.n	80062a0 <GUI_MEMDEV_Draw+0x8c>
 800629c:	46a8      	mov	r8, r5
 800629e:	46aa      	mov	sl, r5
 80062a0:	b906      	cbnz	r6, 80062a4 <GUI_MEMDEV_Draw+0x90>
 80062a2:	4266      	negs	r6, r4
 80062a4:	2f00      	cmp	r7, #0
 80062a6:	dd52      	ble.n	800634e <GUI_MEMDEV_Draw+0x13a>
 80062a8:	2c00      	cmp	r4, #0
 80062aa:	dd50      	ble.n	800634e <GUI_MEMDEV_Draw+0x13a>
 80062ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	4650      	mov	r0, sl
 80062b2:	4641      	mov	r1, r8
 80062b4:	463a      	mov	r2, r7
 80062b6:	4633      	mov	r3, r6
 80062b8:	f000 fe38 	bl	8006f2c <GUI_MEMDEV_CreateEx>
 80062bc:	4605      	mov	r5, r0
 80062be:	b920      	cbnz	r0, 80062ca <GUI_MEMDEV_Draw+0xb6>
 80062c0:	9804      	ldr	r0, [sp, #16]
 80062c2:	9b03      	ldr	r3, [sp, #12]
 80062c4:	4798      	blx	r3
 80062c6:	2001      	movs	r0, #1
 80062c8:	e042      	b.n	8006350 <GUI_MEMDEV_Draw+0x13c>
 80062ca:	f7ff ff7d 	bl	80061c8 <GUI_MEMDEV_GetYSize>
 80062ce:	42a0      	cmp	r0, r4
 80062d0:	4606      	mov	r6, r0
 80062d2:	d006      	beq.n	80062e2 <GUI_MEMDEV_Draw+0xce>
 80062d4:	f8db 3000 	ldr.w	r3, [fp]
 80062d8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80062da:	b110      	cbz	r0, 80062e2 <GUI_MEMDEV_Draw+0xce>
 80062dc:	2132      	movs	r1, #50	; 0x32
 80062de:	f005 f9cb 	bl	800b678 <WM__SendMessageNoPara>
 80062e2:	4628      	mov	r0, r5
 80062e4:	f000 fe66 	bl	8006fb4 <GUI_MEMDEV_Select>
 80062e8:	4273      	negs	r3, r6
 80062ea:	9305      	str	r3, [sp, #20]
 80062ec:	46a1      	mov	r9, r4
 80062ee:	2700      	movs	r7, #0
 80062f0:	45b1      	cmp	r9, r6
 80062f2:	da03      	bge.n	80062fc <GUI_MEMDEV_Draw+0xe8>
 80062f4:	4628      	mov	r0, r5
 80062f6:	4649      	mov	r1, r9
 80062f8:	f006 f876 	bl	800c3e8 <GUI_MEMDEV_ReduceYSize>
 80062fc:	b147      	cbz	r7, 8006310 <GUI_MEMDEV_Draw+0xfc>
 80062fe:	4628      	mov	r0, r5
 8006300:	4651      	mov	r1, sl
 8006302:	eb07 0208 	add.w	r2, r7, r8
 8006306:	f7ff ff35 	bl	8006174 <GUI_MEMDEV_SetOrg>
 800630a:	4628      	mov	r0, r5
 800630c:	f006 f882 	bl	800c414 <GUI_MEMDEV_Clear>
 8006310:	9b03      	ldr	r3, [sp, #12]
 8006312:	9804      	ldr	r0, [sp, #16]
 8006314:	4798      	blx	r3
 8006316:	4b12      	ldr	r3, [pc, #72]	; (8006360 <GUI_MEMDEV_Draw+0x14c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	b10b      	cbz	r3, 8006320 <GUI_MEMDEV_Draw+0x10c>
 800631c:	2000      	movs	r0, #0
 800631e:	4798      	blx	r3
 8006320:	4628      	mov	r0, r5
 8006322:	f000 febf 	bl	80070a4 <GUI_MEMDEV_CopyToLCD>
 8006326:	4437      	add	r7, r6
 8006328:	9b05      	ldr	r3, [sp, #20]
 800632a:	42a7      	cmp	r7, r4
 800632c:	4499      	add	r9, r3
 800632e:	dbdf      	blt.n	80062f0 <GUI_MEMDEV_Draw+0xdc>
 8006330:	4628      	mov	r0, r5
 8006332:	f000 fdd9 	bl	8006ee8 <GUI_MEMDEV_Delete>
 8006336:	2000      	movs	r0, #0
 8006338:	f000 fe3c 	bl	8006fb4 <GUI_MEMDEV_Select>
 800633c:	42a6      	cmp	r6, r4
 800633e:	d006      	beq.n	800634e <GUI_MEMDEV_Draw+0x13a>
 8006340:	f8db 3000 	ldr.w	r3, [fp]
 8006344:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006346:	b110      	cbz	r0, 800634e <GUI_MEMDEV_Draw+0x13a>
 8006348:	2133      	movs	r1, #51	; 0x33
 800634a:	f005 f995 	bl	800b678 <WM__SendMessageNoPara>
 800634e:	2000      	movs	r0, #0
 8006350:	b009      	add	sp, #36	; 0x24
 8006352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006356:	bf00      	nop
 8006358:	20000024 	.word	0x20000024
 800635c:	20019498 	.word	0x20019498
 8006360:	200190f4 	.word	0x200190f4

08006364 <_GetDevData>:
 8006364:	4802      	ldr	r0, [pc, #8]	; (8006370 <_GetDevData+0xc>)
 8006366:	2901      	cmp	r1, #1
 8006368:	bf18      	it	ne
 800636a:	2000      	movne	r0, #0
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	0800f6f0 	.word	0x0800f6f0

08006374 <_GetDevFunc>:
 8006374:	4802      	ldr	r0, [pc, #8]	; (8006380 <_GetDevFunc+0xc>)
 8006376:	2916      	cmp	r1, #22
 8006378:	bf18      	it	ne
 800637a:	2000      	movne	r0, #0
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	0800bff9 	.word	0x0800bff9

08006384 <_GetDevProp>:
 8006384:	2908      	cmp	r1, #8
 8006386:	bf0c      	ite	eq
 8006388:	2020      	moveq	r0, #32
 800638a:	2000      	movne	r0, #0
 800638c:	4770      	bx	lr

0800638e <_SetOrg>:
 800638e:	b508      	push	{r3, lr}
 8006390:	6800      	ldr	r0, [r0, #0]
 8006392:	68c3      	ldr	r3, [r0, #12]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	4798      	blx	r3
 8006398:	bd08      	pop	{r3, pc}

0800639a <_GetRect>:
 800639a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800639c:	6880      	ldr	r0, [r0, #8]
 800639e:	460c      	mov	r4, r1
 80063a0:	f004 fe72 	bl	800b088 <GUI_ALLOC_LockH>
 80063a4:	4603      	mov	r3, r0
 80063a6:	a802      	add	r0, sp, #8
 80063a8:	8899      	ldrh	r1, [r3, #4]
 80063aa:	88da      	ldrh	r2, [r3, #6]
 80063ac:	891d      	ldrh	r5, [r3, #8]
 80063ae:	f840 3d04 	str.w	r3, [r0, #-4]!
 80063b2:	895b      	ldrh	r3, [r3, #10]
 80063b4:	8021      	strh	r1, [r4, #0]
 80063b6:	8062      	strh	r2, [r4, #2]
 80063b8:	4429      	add	r1, r5
 80063ba:	441a      	add	r2, r3
 80063bc:	3901      	subs	r1, #1
 80063be:	3a01      	subs	r2, #1
 80063c0:	80a1      	strh	r1, [r4, #4]
 80063c2:	80e2      	strh	r2, [r4, #6]
 80063c4:	f004 fe6e 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80063c8:	b003      	add	sp, #12
 80063ca:	bd30      	pop	{r4, r5, pc}

080063cc <_XY2PTR>:
 80063cc:	4b0e      	ldr	r3, [pc, #56]	; (8006408 <_XY2PTR+0x3c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063d2:	4605      	mov	r5, r0
 80063d4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80063d6:	460e      	mov	r6, r1
 80063d8:	f004 fe56 	bl	800b088 <GUI_ALLOC_LockH>
 80063dc:	4603      	mov	r3, r0
 80063de:	a802      	add	r0, sp, #8
 80063e0:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 80063e4:	f840 3d04 	str.w	r3, [r0, #-4]!
 80063e8:	f103 0118 	add.w	r1, r3, #24
 80063ec:	1b36      	subs	r6, r6, r4
 80063ee:	68dc      	ldr	r4, [r3, #12]
 80063f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80063f4:	fb04 1406 	mla	r4, r4, r6, r1
 80063f8:	1aed      	subs	r5, r5, r3
 80063fa:	f004 fe53 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80063fe:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8006402:	4620      	mov	r0, r4
 8006404:	b002      	add	sp, #8
 8006406:	bd70      	pop	{r4, r5, r6, pc}
 8006408:	20000024 	.word	0x20000024

0800640c <_GetPixelIndex>:
 800640c:	b508      	push	{r3, lr}
 800640e:	4608      	mov	r0, r1
 8006410:	4611      	mov	r1, r2
 8006412:	f7ff ffdb 	bl	80063cc <_XY2PTR>
 8006416:	6800      	ldr	r0, [r0, #0]
 8006418:	bd08      	pop	{r3, pc}
	...

0800641c <_XorPixel>:
 800641c:	4b15      	ldr	r3, [pc, #84]	; (8006474 <_XorPixel+0x58>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006422:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8006424:	4615      	mov	r5, r2
 8006426:	460e      	mov	r6, r1
 8006428:	f004 fe2e 	bl	800b088 <GUI_ALLOC_LockH>
 800642c:	4629      	mov	r1, r5
 800642e:	9000      	str	r0, [sp, #0]
 8006430:	4630      	mov	r0, r6
 8006432:	f7ff ffcb 	bl	80063cc <_XY2PTR>
 8006436:	9b00      	ldr	r3, [sp, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	4604      	mov	r4, r0
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	4798      	blx	r3
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	4058      	eors	r0, r3
 8006446:	9b00      	ldr	r3, [sp, #0]
 8006448:	6020      	str	r0, [r4, #0]
 800644a:	6958      	ldr	r0, [r3, #20]
 800644c:	b160      	cbz	r0, 8006468 <_XorPixel+0x4c>
 800644e:	f004 fe1b 	bl	800b088 <GUI_ALLOC_LockH>
 8006452:	ac02      	add	r4, sp, #8
 8006454:	6883      	ldr	r3, [r0, #8]
 8006456:	f844 0d04 	str.w	r0, [r4, #-4]!
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4631      	mov	r1, r6
 800645e:	462a      	mov	r2, r5
 8006460:	4798      	blx	r3
 8006462:	4620      	mov	r0, r4
 8006464:	f004 fe1e 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8006468:	4668      	mov	r0, sp
 800646a:	f004 fe1b 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800646e:	b002      	add	sp, #8
 8006470:	bd70      	pop	{r4, r5, r6, pc}
 8006472:	bf00      	nop
 8006474:	20000024 	.word	0x20000024

08006478 <_SetPixelIndex>:
 8006478:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800647a:	461c      	mov	r4, r3
 800647c:	4b10      	ldr	r3, [pc, #64]	; (80064c0 <_SetPixelIndex+0x48>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8006482:	460e      	mov	r6, r1
 8006484:	4615      	mov	r5, r2
 8006486:	f004 fdff 	bl	800b088 <GUI_ALLOC_LockH>
 800648a:	4629      	mov	r1, r5
 800648c:	9000      	str	r0, [sp, #0]
 800648e:	4630      	mov	r0, r6
 8006490:	f7ff ff9c 	bl	80063cc <_XY2PTR>
 8006494:	9b00      	ldr	r3, [sp, #0]
 8006496:	6004      	str	r4, [r0, #0]
 8006498:	6958      	ldr	r0, [r3, #20]
 800649a:	b160      	cbz	r0, 80064b6 <_SetPixelIndex+0x3e>
 800649c:	f004 fdf4 	bl	800b088 <GUI_ALLOC_LockH>
 80064a0:	ac02      	add	r4, sp, #8
 80064a2:	6883      	ldr	r3, [r0, #8]
 80064a4:	f844 0d04 	str.w	r0, [r4, #-4]!
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4631      	mov	r1, r6
 80064ac:	462a      	mov	r2, r5
 80064ae:	4798      	blx	r3
 80064b0:	4620      	mov	r0, r4
 80064b2:	f004 fdf7 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80064b6:	4668      	mov	r0, sp
 80064b8:	f004 fdf4 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80064bc:	b002      	add	sp, #8
 80064be:	bd70      	pop	{r4, r5, r6, pc}
 80064c0:	20000024 	.word	0x20000024

080064c4 <_DrawVLine>:
 80064c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064c8:	4d2c      	ldr	r5, [pc, #176]	; (800657c <_DrawVLine+0xb8>)
 80064ca:	461e      	mov	r6, r3
 80064cc:	682b      	ldr	r3, [r5, #0]
 80064ce:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80064d0:	460f      	mov	r7, r1
 80064d2:	4614      	mov	r4, r2
 80064d4:	f004 fdd8 	bl	800b088 <GUI_ALLOC_LockH>
 80064d8:	9000      	str	r0, [sp, #0]
 80064da:	6940      	ldr	r0, [r0, #20]
 80064dc:	46a9      	mov	r9, r5
 80064de:	b108      	cbz	r0, 80064e4 <_DrawVLine+0x20>
 80064e0:	f004 fdd2 	bl	800b088 <GUI_ALLOC_LockH>
 80064e4:	9001      	str	r0, [sp, #4]
 80064e6:	4621      	mov	r1, r4
 80064e8:	4638      	mov	r0, r7
 80064ea:	f7ff ff6f 	bl	80063cc <_XY2PTR>
 80064ee:	f8d9 2000 	ldr.w	r2, [r9]
 80064f2:	9b00      	ldr	r3, [sp, #0]
 80064f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80064f6:	7c12      	ldrb	r2, [r2, #16]
 80064f8:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80064fc:	f8d1 9000 	ldr.w	r9, [r1]
 8006500:	07d2      	lsls	r2, r2, #31
 8006502:	4605      	mov	r5, r0
 8006504:	d51f      	bpl.n	8006546 <_DrawVLine+0x82>
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	4798      	blx	r3
 800650e:	4680      	mov	r8, r0
 8006510:	9801      	ldr	r0, [sp, #4]
 8006512:	b128      	cbz	r0, 8006520 <_DrawVLine+0x5c>
 8006514:	6882      	ldr	r2, [r0, #8]
 8006516:	4639      	mov	r1, r7
 8006518:	f8d2 c000 	ldr.w	ip, [r2]
 800651c:	4622      	mov	r2, r4
 800651e:	47e0      	blx	ip
 8006520:	682b      	ldr	r3, [r5, #0]
 8006522:	ea83 0308 	eor.w	r3, r3, r8
 8006526:	602b      	str	r3, [r5, #0]
 8006528:	9b00      	ldr	r3, [sp, #0]
 800652a:	3401      	adds	r4, #1
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	42b4      	cmp	r4, r6
 8006530:	441d      	add	r5, r3
 8006532:	dded      	ble.n	8006510 <_DrawVLine+0x4c>
 8006534:	4668      	mov	r0, sp
 8006536:	f004 fdb5 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800653a:	9b01      	ldr	r3, [sp, #4]
 800653c:	b1d3      	cbz	r3, 8006574 <_DrawVLine+0xb0>
 800653e:	a801      	add	r0, sp, #4
 8006540:	f004 fdb0 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8006544:	e016      	b.n	8006574 <_DrawVLine+0xb0>
 8006546:	9b01      	ldr	r3, [sp, #4]
 8006548:	b163      	cbz	r3, 8006564 <_DrawVLine+0xa0>
 800654a:	9801      	ldr	r0, [sp, #4]
 800654c:	6883      	ldr	r3, [r0, #8]
 800654e:	4622      	mov	r2, r4
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4639      	mov	r1, r7
 8006554:	3401      	adds	r4, #1
 8006556:	4798      	blx	r3
 8006558:	42b4      	cmp	r4, r6
 800655a:	f8c5 9000 	str.w	r9, [r5]
 800655e:	4445      	add	r5, r8
 8006560:	ddf3      	ble.n	800654a <_DrawVLine+0x86>
 8006562:	e7e7      	b.n	8006534 <_DrawVLine+0x70>
 8006564:	1b34      	subs	r4, r6, r4
 8006566:	3401      	adds	r4, #1
 8006568:	3c01      	subs	r4, #1
 800656a:	f8c5 9000 	str.w	r9, [r5]
 800656e:	4445      	add	r5, r8
 8006570:	d1fa      	bne.n	8006568 <_DrawVLine+0xa4>
 8006572:	e7df      	b.n	8006534 <_DrawVLine+0x70>
 8006574:	b003      	add	sp, #12
 8006576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800657a:	bf00      	nop
 800657c:	20000024 	.word	0x20000024

08006580 <_FillRect>:
 8006580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006584:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8006634 <_FillRect+0xb4>
 8006588:	4614      	mov	r4, r2
 800658a:	f8db 2000 	ldr.w	r2, [fp]
 800658e:	b085      	sub	sp, #20
 8006590:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8006592:	460f      	mov	r7, r1
 8006594:	461d      	mov	r5, r3
 8006596:	f004 fd77 	bl	800b088 <GUI_ALLOC_LockH>
 800659a:	4621      	mov	r1, r4
 800659c:	9002      	str	r0, [sp, #8]
 800659e:	4638      	mov	r0, r7
 80065a0:	f7ff ff14 	bl	80063cc <_XY2PTR>
 80065a4:	9a02      	ldr	r2, [sp, #8]
 80065a6:	f8db 3000 	ldr.w	r3, [fp]
 80065aa:	f8d2 900c 	ldr.w	r9, [r2, #12]
 80065ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b0:	4606      	mov	r6, r0
 80065b2:	6950      	ldr	r0, [r2, #20]
 80065b4:	f8d3 a000 	ldr.w	sl, [r3]
 80065b8:	1bed      	subs	r5, r5, r7
 80065ba:	3501      	adds	r5, #1
 80065bc:	b338      	cbz	r0, 800660e <_FillRect+0x8e>
 80065be:	f004 fd63 	bl	800b088 <GUI_ALLOC_LockH>
 80065c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065c4:	f10d 0810 	add.w	r8, sp, #16
 80065c8:	1b13      	subs	r3, r2, r4
 80065ca:	f848 0d04 	str.w	r0, [r8, #-4]!
 80065ce:	3301      	adds	r3, #1
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	4639      	mov	r1, r7
 80065d4:	4622      	mov	r2, r4
 80065d6:	462b      	mov	r3, r5
 80065d8:	f005 fef0 	bl	800c3bc <GUI_USAGE_AddRect>
 80065dc:	4640      	mov	r0, r8
 80065de:	f004 fd61 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80065e2:	e014      	b.n	800660e <_FillRect+0x8e>
 80065e4:	f8db 3000 	ldr.w	r3, [fp]
 80065e8:	7c1b      	ldrb	r3, [r3, #16]
 80065ea:	07db      	lsls	r3, r3, #31
 80065ec:	d513      	bpl.n	8006616 <_FillRect+0x96>
 80065ee:	9b02      	ldr	r3, [sp, #8]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	4798      	blx	r3
 80065f8:	4632      	mov	r2, r6
 80065fa:	462b      	mov	r3, r5
 80065fc:	6811      	ldr	r1, [r2, #0]
 80065fe:	3b01      	subs	r3, #1
 8006600:	ea81 0100 	eor.w	r1, r1, r0
 8006604:	f842 1b04 	str.w	r1, [r2], #4
 8006608:	d1f8      	bne.n	80065fc <_FillRect+0x7c>
 800660a:	444e      	add	r6, r9
 800660c:	3401      	adds	r4, #1
 800660e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006610:	429c      	cmp	r4, r3
 8006612:	dde7      	ble.n	80065e4 <_FillRect+0x64>
 8006614:	e008      	b.n	8006628 <_FillRect+0xa8>
 8006616:	2d00      	cmp	r5, #0
 8006618:	ddf7      	ble.n	800660a <_FillRect+0x8a>
 800661a:	462b      	mov	r3, r5
 800661c:	4632      	mov	r2, r6
 800661e:	3b01      	subs	r3, #1
 8006620:	f842 ab04 	str.w	sl, [r2], #4
 8006624:	d1fb      	bne.n	800661e <_FillRect+0x9e>
 8006626:	e7f0      	b.n	800660a <_FillRect+0x8a>
 8006628:	a802      	add	r0, sp, #8
 800662a:	f004 fd3b 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800662e:	b005      	add	sp, #20
 8006630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006634:	20000024 	.word	0x20000024

08006638 <_DrawHLine>:
 8006638:	b507      	push	{r0, r1, r2, lr}
 800663a:	9200      	str	r2, [sp, #0]
 800663c:	f7ff ffa0 	bl	8006580 <_FillRect>
 8006640:	b003      	add	sp, #12
 8006642:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006648 <_DrawBitmap>:
 8006648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664c:	4c9d      	ldr	r4, [pc, #628]	; (80068c4 <_DrawBitmap+0x27c>)
 800664e:	469a      	mov	sl, r3
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	b091      	sub	sp, #68	; 0x44
 8006654:	4680      	mov	r8, r0
 8006656:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8006658:	9207      	str	r2, [sp, #28]
 800665a:	460e      	mov	r6, r1
 800665c:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8006660:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8006662:	2800      	cmp	r0, #0
 8006664:	f000 8387 	beq.w	8006d76 <_DrawBitmap+0x72e>
 8006668:	f004 fd0e 	bl	800b088 <GUI_ALLOC_LockH>
 800666c:	900e      	str	r0, [sp, #56]	; 0x38
 800666e:	6940      	ldr	r0, [r0, #20]
 8006670:	b108      	cbz	r0, 8006676 <_DrawBitmap+0x2e>
 8006672:	f004 fd09 	bl	800b088 <GUI_ALLOC_LockH>
 8006676:	900f      	str	r0, [sp, #60]	; 0x3c
 8006678:	a810      	add	r0, sp, #64	; 0x40
 800667a:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	930a      	str	r3, [sp, #40]	; 0x28
 8006682:	f004 fd0f 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8006686:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8006688:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800668a:	4437      	add	r7, r6
 800668c:	9704      	str	r7, [sp, #16]
 800668e:	b150      	cbz	r0, 80066a6 <_DrawBitmap+0x5e>
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	7c1b      	ldrb	r3, [r3, #16]
 8006694:	079c      	lsls	r4, r3, #30
 8006696:	d406      	bmi.n	80066a6 <_DrawBitmap+0x5e>
 8006698:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800669a:	9700      	str	r7, [sp, #0]
 800669c:	9904      	ldr	r1, [sp, #16]
 800669e:	9a07      	ldr	r2, [sp, #28]
 80066a0:	4653      	mov	r3, sl
 80066a2:	f005 fe8b 	bl	800c3bc <GUI_USAGE_AddRect>
 80066a6:	9804      	ldr	r0, [sp, #16]
 80066a8:	9907      	ldr	r1, [sp, #28]
 80066aa:	f7ff fe8f 	bl	80063cc <_XY2PTR>
 80066ae:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80066b0:	2f17      	cmp	r7, #23
 80066b2:	4606      	mov	r6, r0
 80066b4:	dd64      	ble.n	8006780 <_DrawBitmap+0x138>
 80066b6:	ea4f 078a 	mov.w	r7, sl, lsl #2
 80066ba:	9706      	str	r7, [sp, #24]
 80066bc:	f04f 0900 	mov.w	r9, #0
 80066c0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80066c2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80066c4:	45b9      	cmp	r9, r7
 80066c6:	da57      	bge.n	8006778 <_DrawBitmap+0x130>
 80066c8:	b130      	cbz	r0, 80066d8 <_DrawBitmap+0x90>
 80066ca:	6883      	ldr	r3, [r0, #8]
 80066cc:	9a07      	ldr	r2, [sp, #28]
 80066ce:	685c      	ldr	r4, [r3, #4]
 80066d0:	9904      	ldr	r1, [sp, #16]
 80066d2:	444a      	add	r2, r9
 80066d4:	4653      	mov	r3, sl
 80066d6:	47a0      	blx	r4
 80066d8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80066dc:	68d8      	ldr	r0, [r3, #12]
 80066de:	b128      	cbz	r0, 80066ec <_DrawBitmap+0xa4>
 80066e0:	4630      	mov	r0, r6
 80066e2:	4659      	mov	r1, fp
 80066e4:	9a06      	ldr	r2, [sp, #24]
 80066e6:	f007 fa1b 	bl	800db20 <memcpy>
 80066ea:	e03e      	b.n	800676a <_DrawBitmap+0x122>
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	4798      	blx	r3
 80066f0:	0e00      	lsrs	r0, r0, #24
 80066f2:	9005      	str	r0, [sp, #20]
 80066f4:	4635      	mov	r5, r6
 80066f6:	4657      	mov	r7, sl
 80066f8:	465c      	mov	r4, fp
 80066fa:	463b      	mov	r3, r7
 80066fc:	4622      	mov	r2, r4
 80066fe:	f04f 0c00 	mov.w	ip, #0
 8006702:	f852 1b04 	ldr.w	r1, [r2], #4
 8006706:	9805      	ldr	r0, [sp, #20]
 8006708:	0e09      	lsrs	r1, r1, #24
 800670a:	4281      	cmp	r1, r0
 800670c:	9805      	ldr	r0, [sp, #20]
 800670e:	bf08      	it	eq
 8006710:	f10c 0c01 	addeq.w	ip, ip, #1
 8006714:	4281      	cmp	r1, r0
 8006716:	f103 33ff 	add.w	r3, r3, #4294967295
 800671a:	d014      	beq.n	8006746 <_DrawBitmap+0xfe>
 800671c:	f1bc 0f00 	cmp.w	ip, #0
 8006720:	d014      	beq.n	800674c <_DrawBitmap+0x104>
 8006722:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8006726:	4628      	mov	r0, r5
 8006728:	4621      	mov	r1, r4
 800672a:	461a      	mov	r2, r3
 800672c:	9303      	str	r3, [sp, #12]
 800672e:	f8cd c008 	str.w	ip, [sp, #8]
 8006732:	f007 f9f5 	bl	800db20 <memcpy>
 8006736:	9b03      	ldr	r3, [sp, #12]
 8006738:	f8dd c008 	ldr.w	ip, [sp, #8]
 800673c:	441d      	add	r5, r3
 800673e:	441c      	add	r4, r3
 8006740:	ebcc 0707 	rsb	r7, ip, r7
 8006744:	e00f      	b.n	8006766 <_DrawBitmap+0x11e>
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1db      	bne.n	8006702 <_DrawBitmap+0xba>
 800674a:	e7e7      	b.n	800671c <_DrawBitmap+0xd4>
 800674c:	6820      	ldr	r0, [r4, #0]
 800674e:	0e02      	lsrs	r2, r0, #24
 8006750:	2aff      	cmp	r2, #255	; 0xff
 8006752:	d005      	beq.n	8006760 <_DrawBitmap+0x118>
 8006754:	43d2      	mvns	r2, r2
 8006756:	6829      	ldr	r1, [r5, #0]
 8006758:	b2d2      	uxtb	r2, r2
 800675a:	f002 fb2b 	bl	8008db4 <GUI__MixColors>
 800675e:	6028      	str	r0, [r5, #0]
 8006760:	3504      	adds	r5, #4
 8006762:	3404      	adds	r4, #4
 8006764:	3f01      	subs	r7, #1
 8006766:	2f00      	cmp	r7, #0
 8006768:	d1c7      	bne.n	80066fa <_DrawBitmap+0xb2>
 800676a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800676c:	44bb      	add	fp, r7
 800676e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006770:	f109 0901 	add.w	r9, r9, #1
 8006774:	443e      	add	r6, r7
 8006776:	e7a3      	b.n	80066c0 <_DrawBitmap+0x78>
 8006778:	2800      	cmp	r0, #0
 800677a:	f040 82f9 	bne.w	8006d70 <_DrawBitmap+0x728>
 800677e:	e2fa      	b.n	8006d76 <_DrawBitmap+0x72e>
 8006780:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006782:	2f10      	cmp	r7, #16
 8006784:	d137      	bne.n	80067f6 <_DrawBitmap+0x1ae>
 8006786:	1f06      	subs	r6, r0, #4
 8006788:	2500      	movs	r5, #0
 800678a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800678c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800678e:	42bd      	cmp	r5, r7
 8006790:	f280 80a0 	bge.w	80068d4 <_DrawBitmap+0x28c>
 8006794:	9f07      	ldr	r7, [sp, #28]
 8006796:	442f      	add	r7, r5
 8006798:	b13c      	cbz	r4, 80067aa <_DrawBitmap+0x162>
 800679a:	68a3      	ldr	r3, [r4, #8]
 800679c:	9904      	ldr	r1, [sp, #16]
 800679e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80067a2:	4620      	mov	r0, r4
 80067a4:	463a      	mov	r2, r7
 80067a6:	4653      	mov	r3, sl
 80067a8:	47e0      	blx	ip
 80067aa:	f1ab 0302 	sub.w	r3, fp, #2
 80067ae:	9306      	str	r3, [sp, #24]
 80067b0:	9605      	str	r6, [sp, #20]
 80067b2:	46d1      	mov	r9, sl
 80067b4:	9904      	ldr	r1, [sp, #16]
 80067b6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80067ba:	9a06      	ldr	r2, [sp, #24]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 80067c2:	9206      	str	r2, [sp, #24]
 80067c4:	4451      	add	r1, sl
 80067c6:	ebc9 0101 	rsb	r1, r9, r1
 80067ca:	9103      	str	r1, [sp, #12]
 80067cc:	4798      	blx	r3
 80067ce:	9b05      	ldr	r3, [sp, #20]
 80067d0:	9903      	ldr	r1, [sp, #12]
 80067d2:	f843 0f04 	str.w	r0, [r3, #4]!
 80067d6:	9305      	str	r3, [sp, #20]
 80067d8:	b124      	cbz	r4, 80067e4 <_DrawBitmap+0x19c>
 80067da:	68a3      	ldr	r3, [r4, #8]
 80067dc:	4620      	mov	r0, r4
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	463a      	mov	r2, r7
 80067e2:	4798      	blx	r3
 80067e4:	f1b9 0901 	subs.w	r9, r9, #1
 80067e8:	d1e4      	bne.n	80067b4 <_DrawBitmap+0x16c>
 80067ea:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80067ec:	44bb      	add	fp, r7
 80067ee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80067f0:	3501      	adds	r5, #1
 80067f2:	443e      	add	r6, r7
 80067f4:	e7c9      	b.n	800678a <_DrawBitmap+0x142>
 80067f6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80067f8:	2f08      	cmp	r7, #8
 80067fa:	f100 0604 	add.w	r6, r0, #4
 80067fe:	d16d      	bne.n	80068dc <_DrawBitmap+0x294>
 8006800:	9f07      	ldr	r7, [sp, #28]
 8006802:	9907      	ldr	r1, [sp, #28]
 8006804:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006806:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8006808:	1a7b      	subs	r3, r7, r1
 800680a:	4293      	cmp	r3, r2
 800680c:	f1a6 0004 	sub.w	r0, r6, #4
 8006810:	da60      	bge.n	80068d4 <_DrawBitmap+0x28c>
 8006812:	4b2c      	ldr	r3, [pc, #176]	; (80068c4 <_DrawBitmap+0x27c>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	7c1b      	ldrb	r3, [r3, #16]
 8006818:	b36d      	cbz	r5, 8006876 <_DrawBitmap+0x22e>
 800681a:	f013 0303 	ands.w	r3, r3, #3
 800681e:	d005      	beq.n	800682c <_DrawBitmap+0x1e4>
 8006820:	2b02      	cmp	r3, #2
 8006822:	d151      	bne.n	80068c8 <_DrawBitmap+0x280>
 8006824:	46b1      	mov	r9, r6
 8006826:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800682a:	e01c      	b.n	8006866 <_DrawBitmap+0x21e>
 800682c:	f81b 2003 	ldrb.w	r2, [fp, r3]
 8006830:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8006834:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8006838:	3301      	adds	r3, #1
 800683a:	4553      	cmp	r3, sl
 800683c:	d1f6      	bne.n	800682c <_DrawBitmap+0x1e4>
 800683e:	e043      	b.n	80068c8 <_DrawBitmap+0x280>
 8006840:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006844:	f849 3c04 	str.w	r3, [r9, #-4]
 8006848:	b12c      	cbz	r4, 8006856 <_DrawBitmap+0x20e>
 800684a:	68a3      	ldr	r3, [r4, #8]
 800684c:	4620      	mov	r0, r4
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4641      	mov	r1, r8
 8006852:	463a      	mov	r2, r7
 8006854:	4798      	blx	r3
 8006856:	9b04      	ldr	r3, [sp, #16]
 8006858:	f108 0801 	add.w	r8, r8, #1
 800685c:	4453      	add	r3, sl
 800685e:	4543      	cmp	r3, r8
 8006860:	f109 0904 	add.w	r9, r9, #4
 8006864:	d030      	beq.n	80068c8 <_DrawBitmap+0x280>
 8006866:	9804      	ldr	r0, [sp, #16]
 8006868:	ebc0 030b 	rsb	r3, r0, fp
 800686c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d0f0      	beq.n	8006856 <_DrawBitmap+0x20e>
 8006874:	e7e4      	b.n	8006840 <_DrawBitmap+0x1f8>
 8006876:	f013 0303 	ands.w	r3, r3, #3
 800687a:	d005      	beq.n	8006888 <_DrawBitmap+0x240>
 800687c:	2b02      	cmp	r3, #2
 800687e:	d123      	bne.n	80068c8 <_DrawBitmap+0x280>
 8006880:	46b1      	mov	r9, r6
 8006882:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006886:	e015      	b.n	80068b4 <_DrawBitmap+0x26c>
 8006888:	4659      	mov	r1, fp
 800688a:	4652      	mov	r2, sl
 800688c:	f007 f948 	bl	800db20 <memcpy>
 8006890:	e01a      	b.n	80068c8 <_DrawBitmap+0x280>
 8006892:	f849 3c04 	str.w	r3, [r9, #-4]
 8006896:	b12c      	cbz	r4, 80068a4 <_DrawBitmap+0x25c>
 8006898:	68a3      	ldr	r3, [r4, #8]
 800689a:	4620      	mov	r0, r4
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4641      	mov	r1, r8
 80068a0:	463a      	mov	r2, r7
 80068a2:	4798      	blx	r3
 80068a4:	9b04      	ldr	r3, [sp, #16]
 80068a6:	f108 0801 	add.w	r8, r8, #1
 80068aa:	4453      	add	r3, sl
 80068ac:	4543      	cmp	r3, r8
 80068ae:	f109 0904 	add.w	r9, r9, #4
 80068b2:	d009      	beq.n	80068c8 <_DrawBitmap+0x280>
 80068b4:	9904      	ldr	r1, [sp, #16]
 80068b6:	ebc1 030b 	rsb	r3, r1, fp
 80068ba:	f813 3008 	ldrb.w	r3, [r3, r8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0f0      	beq.n	80068a4 <_DrawBitmap+0x25c>
 80068c2:	e7e6      	b.n	8006892 <_DrawBitmap+0x24a>
 80068c4:	20000024 	.word	0x20000024
 80068c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80068ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068cc:	4493      	add	fp, r2
 80068ce:	3701      	adds	r7, #1
 80068d0:	441e      	add	r6, r3
 80068d2:	e796      	b.n	8006802 <_DrawBitmap+0x1ba>
 80068d4:	2c00      	cmp	r4, #0
 80068d6:	f040 824b 	bne.w	8006d70 <_DrawBitmap+0x728>
 80068da:	e24c      	b.n	8006d76 <_DrawBitmap+0x72e>
 80068dc:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80068de:	4bb2      	ldr	r3, [pc, #712]	; (8006ba8 <_DrawBitmap+0x560>)
 80068e0:	9609      	str	r6, [sp, #36]	; 0x24
 80068e2:	007f      	lsls	r7, r7, #1
 80068e4:	970c      	str	r7, [sp, #48]	; 0x30
 80068e6:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80068e8:	00bf      	lsls	r7, r7, #2
 80068ea:	970d      	str	r7, [sp, #52]	; 0x34
 80068ec:	9f07      	ldr	r7, [sp, #28]
 80068ee:	9705      	str	r7, [sp, #20]
 80068f0:	2d00      	cmp	r5, #0
 80068f2:	bf08      	it	eq
 80068f4:	461d      	moveq	r5, r3
 80068f6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80068f8:	9807      	ldr	r0, [sp, #28]
 80068fa:	1f3c      	subs	r4, r7, #4
 80068fc:	9f05      	ldr	r7, [sp, #20]
 80068fe:	1a3b      	subs	r3, r7, r0
 8006900:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8006902:	42bb      	cmp	r3, r7
 8006904:	f280 8232 	bge.w	8006d6c <_DrawBitmap+0x724>
 8006908:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800690a:	2f02      	cmp	r7, #2
 800690c:	f000 80ad 	beq.w	8006a6a <_DrawBitmap+0x422>
 8006910:	2f04      	cmp	r7, #4
 8006912:	f000 814f 	beq.w	8006bb4 <_DrawBitmap+0x56c>
 8006916:	2f01      	cmp	r7, #1
 8006918:	f040 821e 	bne.w	8006d58 <_DrawBitmap+0x710>
 800691c:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8006bb0 <_DrawBitmap+0x568>
 8006920:	f8d9 3000 	ldr.w	r3, [r9]
 8006924:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8006926:	f004 fbaf 	bl	800b088 <GUI_ALLOC_LockH>
 800692a:	f89b 3000 	ldrb.w	r3, [fp]
 800692e:	4a9f      	ldr	r2, [pc, #636]	; (8006bac <_DrawBitmap+0x564>)
 8006930:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006932:	5cd6      	ldrb	r6, [r2, r3]
 8006934:	f8d9 3000 	ldr.w	r3, [r9]
 8006938:	900e      	str	r0, [sp, #56]	; 0x38
 800693a:	7c1b      	ldrb	r3, [r3, #16]
 800693c:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8006940:	f003 0303 	and.w	r3, r3, #3
 8006944:	2b02      	cmp	r3, #2
 8006946:	4657      	mov	r7, sl
 8006948:	f1c1 0808 	rsb	r8, r1, #8
 800694c:	fa46 f601 	asr.w	r6, r6, r1
 8006950:	d020      	beq.n	8006994 <_DrawBitmap+0x34c>
 8006952:	2b03      	cmp	r3, #3
 8006954:	d061      	beq.n	8006a1a <_DrawBitmap+0x3d2>
 8006956:	2b01      	cmp	r3, #1
 8006958:	d05f      	beq.n	8006a1a <_DrawBitmap+0x3d2>
 800695a:	465a      	mov	r2, fp
 800695c:	4547      	cmp	r7, r8
 800695e:	bf38      	it	cc
 8006960:	46b8      	movcc	r8, r7
 8006962:	ebc8 0707 	rsb	r7, r8, r7
 8006966:	4643      	mov	r3, r8
 8006968:	4621      	mov	r1, r4
 800696a:	f006 0001 	and.w	r0, r6, #1
 800696e:	3b01      	subs	r3, #1
 8006970:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8006974:	f841 0b04 	str.w	r0, [r1], #4
 8006978:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800697c:	d1f5      	bne.n	800696a <_DrawBitmap+0x322>
 800697e:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8006982:	2f00      	cmp	r7, #0
 8006984:	d06d      	beq.n	8006a62 <_DrawBitmap+0x41a>
 8006986:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800698a:	4988      	ldr	r1, [pc, #544]	; (8006bac <_DrawBitmap+0x564>)
 800698c:	f04f 0808 	mov.w	r8, #8
 8006990:	5cce      	ldrb	r6, [r1, r3]
 8006992:	e7e3      	b.n	800695c <_DrawBitmap+0x314>
 8006994:	686b      	ldr	r3, [r5, #4]
 8006996:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800699a:	930b      	str	r3, [sp, #44]	; 0x2c
 800699c:	f8cd b020 	str.w	fp, [sp, #32]
 80069a0:	4547      	cmp	r7, r8
 80069a2:	bf38      	it	cc
 80069a4:	46b8      	movcc	r8, r7
 80069a6:	ebc8 0707 	rsb	r7, r8, r7
 80069aa:	f1bc 0f00 	cmp.w	ip, #0
 80069ae:	d026      	beq.n	80069fe <_DrawBitmap+0x3b6>
 80069b0:	b91e      	cbnz	r6, 80069ba <_DrawBitmap+0x372>
 80069b2:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 80069b6:	44c1      	add	r9, r8
 80069b8:	e025      	b.n	8006a06 <_DrawBitmap+0x3be>
 80069ba:	07f0      	lsls	r0, r6, #31
 80069bc:	d50c      	bpl.n	80069d8 <_DrawBitmap+0x390>
 80069be:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80069c2:	9a05      	ldr	r2, [sp, #20]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f8cd c008 	str.w	ip, [sp, #8]
 80069ca:	4660      	mov	r0, ip
 80069cc:	4649      	mov	r1, r9
 80069ce:	4798      	blx	r3
 80069d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069d2:	f8dd c008 	ldr.w	ip, [sp, #8]
 80069d6:	6023      	str	r3, [r4, #0]
 80069d8:	f1b8 0801 	subs.w	r8, r8, #1
 80069dc:	f109 0901 	add.w	r9, r9, #1
 80069e0:	f104 0404 	add.w	r4, r4, #4
 80069e4:	d00f      	beq.n	8006a06 <_DrawBitmap+0x3be>
 80069e6:	0876      	lsrs	r6, r6, #1
 80069e8:	e7e2      	b.n	80069b0 <_DrawBitmap+0x368>
 80069ea:	07f1      	lsls	r1, r6, #31
 80069ec:	bf44      	itt	mi
 80069ee:	9b0b      	ldrmi	r3, [sp, #44]	; 0x2c
 80069f0:	6023      	strmi	r3, [r4, #0]
 80069f2:	f1b8 0801 	subs.w	r8, r8, #1
 80069f6:	f104 0404 	add.w	r4, r4, #4
 80069fa:	d004      	beq.n	8006a06 <_DrawBitmap+0x3be>
 80069fc:	0876      	lsrs	r6, r6, #1
 80069fe:	2e00      	cmp	r6, #0
 8006a00:	d1f3      	bne.n	80069ea <_DrawBitmap+0x3a2>
 8006a02:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8006a06:	b367      	cbz	r7, 8006a62 <_DrawBitmap+0x41a>
 8006a08:	9808      	ldr	r0, [sp, #32]
 8006a0a:	4a68      	ldr	r2, [pc, #416]	; (8006bac <_DrawBitmap+0x564>)
 8006a0c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8006a10:	9008      	str	r0, [sp, #32]
 8006a12:	5cd6      	ldrb	r6, [r2, r3]
 8006a14:	f04f 0808 	mov.w	r8, #8
 8006a18:	e7c2      	b.n	80069a0 <_DrawBitmap+0x358>
 8006a1a:	6803      	ldr	r3, [r0, #0]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	4798      	blx	r3
 8006a22:	4659      	mov	r1, fp
 8006a24:	4547      	cmp	r7, r8
 8006a26:	bf38      	it	cc
 8006a28:	46b8      	movcc	r8, r7
 8006a2a:	ebc8 0707 	rsb	r7, r8, r7
 8006a2e:	1d23      	adds	r3, r4, #4
 8006a30:	46c6      	mov	lr, r8
 8006a32:	07f2      	lsls	r2, r6, #31
 8006a34:	d504      	bpl.n	8006a40 <_DrawBitmap+0x3f8>
 8006a36:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8006a3a:	4042      	eors	r2, r0
 8006a3c:	f843 2c04 	str.w	r2, [r3, #-4]
 8006a40:	f1be 0e01 	subs.w	lr, lr, #1
 8006a44:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006a48:	f103 0304 	add.w	r3, r3, #4
 8006a4c:	d1f1      	bne.n	8006a32 <_DrawBitmap+0x3ea>
 8006a4e:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8006a52:	b137      	cbz	r7, 8006a62 <_DrawBitmap+0x41a>
 8006a54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006a58:	4a54      	ldr	r2, [pc, #336]	; (8006bac <_DrawBitmap+0x564>)
 8006a5a:	f04f 0808 	mov.w	r8, #8
 8006a5e:	5cd6      	ldrb	r6, [r2, r3]
 8006a60:	e7e0      	b.n	8006a24 <_DrawBitmap+0x3dc>
 8006a62:	a80e      	add	r0, sp, #56	; 0x38
 8006a64:	f004 fb1e 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8006a68:	e176      	b.n	8006d58 <_DrawBitmap+0x710>
 8006a6a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8006a6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a6e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8006a72:	f1c7 0604 	rsb	r6, r7, #4
 8006a76:	f89b 7000 	ldrb.w	r7, [fp]
 8006a7a:	409f      	lsls	r7, r3
 8006a7c:	4b4c      	ldr	r3, [pc, #304]	; (8006bb0 <_DrawBitmap+0x568>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	7c1b      	ldrb	r3, [r3, #16]
 8006a82:	f003 0303 	and.w	r3, r3, #3
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	b2f6      	uxtb	r6, r6
 8006a8a:	b2ff      	uxtb	r7, r7
 8006a8c:	d066      	beq.n	8006b5c <_DrawBitmap+0x514>
 8006a8e:	d308      	bcc.n	8006aa2 <_DrawBitmap+0x45a>
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	f040 8161 	bne.w	8006d58 <_DrawBitmap+0x710>
 8006a96:	9804      	ldr	r0, [sp, #16]
 8006a98:	f8cd b020 	str.w	fp, [sp, #32]
 8006a9c:	46d0      	mov	r8, sl
 8006a9e:	9006      	str	r0, [sp, #24]
 8006aa0:	e03e      	b.n	8006b20 <_DrawBitmap+0x4d8>
 8006aa2:	465a      	mov	r2, fp
 8006aa4:	4653      	mov	r3, sl
 8006aa6:	429e      	cmp	r6, r3
 8006aa8:	bfc8      	it	gt
 8006aaa:	b2de      	uxtbgt	r6, r3
 8006aac:	1b9b      	subs	r3, r3, r6
 8006aae:	4631      	mov	r1, r6
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	ea4f 1c97 	mov.w	ip, r7, lsr #6
 8006ab6:	3901      	subs	r1, #1
 8006ab8:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 8006abc:	f840 cb04 	str.w	ip, [r0], #4
 8006ac0:	00bf      	lsls	r7, r7, #2
 8006ac2:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8006ac6:	b2ff      	uxtb	r7, r7
 8006ac8:	d1f3      	bne.n	8006ab2 <_DrawBitmap+0x46a>
 8006aca:	3e01      	subs	r6, #1
 8006acc:	b2f6      	uxtb	r6, r6
 8006ace:	3601      	adds	r6, #1
 8006ad0:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 813f 	beq.w	8006d58 <_DrawBitmap+0x710>
 8006ada:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 8006ade:	2604      	movs	r6, #4
 8006ae0:	e7e1      	b.n	8006aa6 <_DrawBitmap+0x45e>
 8006ae2:	9906      	ldr	r1, [sp, #24]
 8006ae4:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 8006ae8:	4449      	add	r1, r9
 8006aea:	d122      	bne.n	8006b32 <_DrawBitmap+0x4ea>
 8006aec:	f109 0901 	add.w	r9, r9, #1
 8006af0:	fa5f f289 	uxtb.w	r2, r9
 8006af4:	00bf      	lsls	r7, r7, #2
 8006af6:	4296      	cmp	r6, r2
 8006af8:	b2ff      	uxtb	r7, r7
 8006afa:	d1f2      	bne.n	8006ae2 <_DrawBitmap+0x49a>
 8006afc:	9f06      	ldr	r7, [sp, #24]
 8006afe:	3e01      	subs	r6, #1
 8006b00:	b2f6      	uxtb	r6, r6
 8006b02:	1c7b      	adds	r3, r7, #1
 8006b04:	1c72      	adds	r2, r6, #1
 8006b06:	199e      	adds	r6, r3, r6
 8006b08:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8006b0c:	9606      	str	r6, [sp, #24]
 8006b0e:	f1b8 0f00 	cmp.w	r8, #0
 8006b12:	f000 8121 	beq.w	8006d58 <_DrawBitmap+0x710>
 8006b16:	9b08      	ldr	r3, [sp, #32]
 8006b18:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8006b1c:	9308      	str	r3, [sp, #32]
 8006b1e:	2604      	movs	r6, #4
 8006b20:	4546      	cmp	r6, r8
 8006b22:	bfc8      	it	gt
 8006b24:	fa5f f688 	uxtbgt.w	r6, r8
 8006b28:	ebc6 0808 	rsb	r8, r6, r8
 8006b2c:	f04f 0900 	mov.w	r9, #0
 8006b30:	e7d7      	b.n	8006ae2 <_DrawBitmap+0x49a>
 8006b32:	09ba      	lsrs	r2, r7, #6
 8006b34:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8006b38:	f844 2029 	str.w	r2, [r4, r9, lsl #2]
 8006b3c:	f1bc 0f00 	cmp.w	ip, #0
 8006b40:	d0d4      	beq.n	8006aec <_DrawBitmap+0x4a4>
 8006b42:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8006b46:	6812      	ldr	r2, [r2, #0]
 8006b48:	920b      	str	r2, [sp, #44]	; 0x2c
 8006b4a:	4660      	mov	r0, ip
 8006b4c:	f8cd c008 	str.w	ip, [sp, #8]
 8006b50:	9a05      	ldr	r2, [sp, #20]
 8006b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b54:	4798      	blx	r3
 8006b56:	f8dd c008 	ldr.w	ip, [sp, #8]
 8006b5a:	e7c7      	b.n	8006aec <_DrawBitmap+0x4a4>
 8006b5c:	4658      	mov	r0, fp
 8006b5e:	4653      	mov	r3, sl
 8006b60:	429e      	cmp	r6, r3
 8006b62:	bfc8      	it	gt
 8006b64:	b2de      	uxtbgt	r6, r3
 8006b66:	1b9b      	subs	r3, r3, r6
 8006b68:	1d22      	adds	r2, r4, #4
 8006b6a:	46b4      	mov	ip, r6
 8006b6c:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 8006b70:	d005      	beq.n	8006b7e <_DrawBitmap+0x536>
 8006b72:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8006b76:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 8006b7a:	f842 1c04 	str.w	r1, [r2, #-4]
 8006b7e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006b82:	00bf      	lsls	r7, r7, #2
 8006b84:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 8006b88:	b2ff      	uxtb	r7, r7
 8006b8a:	f102 0204 	add.w	r2, r2, #4
 8006b8e:	d1ed      	bne.n	8006b6c <_DrawBitmap+0x524>
 8006b90:	3e01      	subs	r6, #1
 8006b92:	b2f6      	uxtb	r6, r6
 8006b94:	3601      	adds	r6, #1
 8006b96:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 80dc 	beq.w	8006d58 <_DrawBitmap+0x710>
 8006ba0:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8006ba4:	2604      	movs	r6, #4
 8006ba6:	e7db      	b.n	8006b60 <_DrawBitmap+0x518>
 8006ba8:	0800f6b0 	.word	0x0800f6b0
 8006bac:	08012cd8 	.word	0x08012cd8
 8006bb0:	20000024 	.word	0x20000024
 8006bb4:	4a71      	ldr	r2, [pc, #452]	; (8006d7c <_DrawBitmap+0x734>)
 8006bb6:	f89b 3000 	ldrb.w	r3, [fp]
 8006bba:	6812      	ldr	r2, [r2, #0]
 8006bbc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006bbe:	7c12      	ldrb	r2, [r2, #16]
 8006bc0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006bc2:	f002 0203 	and.w	r2, r2, #3
 8006bc6:	4083      	lsls	r3, r0
 8006bc8:	2a01      	cmp	r2, #1
 8006bca:	b2de      	uxtb	r6, r3
 8006bcc:	f000 809c 	beq.w	8006d08 <_DrawBitmap+0x6c0>
 8006bd0:	d302      	bcc.n	8006bd8 <_DrawBitmap+0x590>
 8006bd2:	2a02      	cmp	r2, #2
 8006bd4:	d035      	beq.n	8006c42 <_DrawBitmap+0x5fa>
 8006bd6:	e0bf      	b.n	8006d58 <_DrawBitmap+0x710>
 8006bd8:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8006bda:	b15f      	cbz	r7, 8006bf4 <_DrawBitmap+0x5ac>
 8006bdc:	0936      	lsrs	r6, r6, #4
 8006bde:	f10b 0201 	add.w	r2, fp, #1
 8006be2:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8006be6:	6023      	str	r3, [r4, #0]
 8006be8:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8006bec:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006bee:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006bf2:	e001      	b.n	8006bf8 <_DrawBitmap+0x5b0>
 8006bf4:	4653      	mov	r3, sl
 8006bf6:	465a      	mov	r2, fp
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	dd1a      	ble.n	8006c32 <_DrawBitmap+0x5ea>
 8006bfc:	1058      	asrs	r0, r3, #1
 8006bfe:	f104 0108 	add.w	r1, r4, #8
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	eb02 0800 	add.w	r8, r2, r0
 8006c0a:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 8006c0e:	f006 060f 	and.w	r6, r6, #15
 8006c12:	f855 702c 	ldr.w	r7, [r5, ip, lsl #2]
 8006c16:	f841 7c08 	str.w	r7, [r1, #-8]
 8006c1a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8006c1e:	f841 6c04 	str.w	r6, [r1, #-4]
 8006c22:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8006c26:	4542      	cmp	r2, r8
 8006c28:	f101 0108 	add.w	r1, r1, #8
 8006c2c:	d1ed      	bne.n	8006c0a <_DrawBitmap+0x5c2>
 8006c2e:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 8090 	beq.w	8006d58 <_DrawBitmap+0x710>
 8006c38:	0936      	lsrs	r6, r6, #4
 8006c3a:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8006c3e:	6023      	str	r3, [r4, #0]
 8006c40:	e08a      	b.n	8006d58 <_DrawBitmap+0x710>
 8006c42:	981e      	ldr	r0, [sp, #120]	; 0x78
 8006c44:	b1c0      	cbz	r0, 8006c78 <_DrawBitmap+0x630>
 8006c46:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8006c4a:	d00a      	beq.n	8006c62 <_DrawBitmap+0x61a>
 8006c4c:	0936      	lsrs	r6, r6, #4
 8006c4e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8006c52:	6023      	str	r3, [r4, #0]
 8006c54:	b12f      	cbz	r7, 8006c62 <_DrawBitmap+0x61a>
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	9904      	ldr	r1, [sp, #16]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	9a05      	ldr	r2, [sp, #20]
 8006c5e:	4638      	mov	r0, r7
 8006c60:	4798      	blx	r3
 8006c62:	9904      	ldr	r1, [sp, #16]
 8006c64:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006c66:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8006c6a:	f101 0801 	add.w	r8, r1, #1
 8006c6e:	f10a 3cff 	add.w	ip, sl, #4294967295
 8006c72:	f10b 0901 	add.w	r9, fp, #1
 8006c76:	e011      	b.n	8006c9c <_DrawBitmap+0x654>
 8006c78:	46d4      	mov	ip, sl
 8006c7a:	46d9      	mov	r9, fp
 8006c7c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006c80:	e00c      	b.n	8006c9c <_DrawBitmap+0x654>
 8006c82:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 8006c86:	d10d      	bne.n	8006ca4 <_DrawBitmap+0x65c>
 8006c88:	f016 060f 	ands.w	r6, r6, #15
 8006c8c:	d11b      	bne.n	8006cc6 <_DrawBitmap+0x67e>
 8006c8e:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 8006c92:	3408      	adds	r4, #8
 8006c94:	f108 0802 	add.w	r8, r8, #2
 8006c98:	f1ac 0c02 	sub.w	ip, ip, #2
 8006c9c:	f1bc 0f01 	cmp.w	ip, #1
 8006ca0:	dcef      	bgt.n	8006c82 <_DrawBitmap+0x63a>
 8006ca2:	e021      	b.n	8006ce8 <_DrawBitmap+0x6a0>
 8006ca4:	0933      	lsrs	r3, r6, #4
 8006ca6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006caa:	6023      	str	r3, [r4, #0]
 8006cac:	2f00      	cmp	r7, #0
 8006cae:	d0eb      	beq.n	8006c88 <_DrawBitmap+0x640>
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	9a05      	ldr	r2, [sp, #20]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f8cd c008 	str.w	ip, [sp, #8]
 8006cba:	4638      	mov	r0, r7
 8006cbc:	4641      	mov	r1, r8
 8006cbe:	4798      	blx	r3
 8006cc0:	f8dd c008 	ldr.w	ip, [sp, #8]
 8006cc4:	e7e0      	b.n	8006c88 <_DrawBitmap+0x640>
 8006cc6:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8006cca:	6063      	str	r3, [r4, #4]
 8006ccc:	2f00      	cmp	r7, #0
 8006cce:	d0de      	beq.n	8006c8e <_DrawBitmap+0x646>
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	9a05      	ldr	r2, [sp, #20]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f8cd c008 	str.w	ip, [sp, #8]
 8006cda:	4638      	mov	r0, r7
 8006cdc:	f108 0101 	add.w	r1, r8, #1
 8006ce0:	4798      	blx	r3
 8006ce2:	f8dd c008 	ldr.w	ip, [sp, #8]
 8006ce6:	e7d2      	b.n	8006c8e <_DrawBitmap+0x646>
 8006ce8:	f1bc 0f00 	cmp.w	ip, #0
 8006cec:	d034      	beq.n	8006d58 <_DrawBitmap+0x710>
 8006cee:	0936      	lsrs	r6, r6, #4
 8006cf0:	d032      	beq.n	8006d58 <_DrawBitmap+0x710>
 8006cf2:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8006cf6:	6023      	str	r3, [r4, #0]
 8006cf8:	b377      	cbz	r7, 8006d58 <_DrawBitmap+0x710>
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	9a05      	ldr	r2, [sp, #20]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4638      	mov	r0, r7
 8006d02:	4641      	mov	r1, r8
 8006d04:	4798      	blx	r3
 8006d06:	e027      	b.n	8006d58 <_DrawBitmap+0x710>
 8006d08:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8006d0a:	f1c7 0302 	rsb	r3, r7, #2
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	465f      	mov	r7, fp
 8006d12:	4652      	mov	r2, sl
 8006d14:	4293      	cmp	r3, r2
 8006d16:	bfc8      	it	gt
 8006d18:	b2d3      	uxtbgt	r3, r2
 8006d1a:	1ad2      	subs	r2, r2, r3
 8006d1c:	1d20      	adds	r0, r4, #4
 8006d1e:	469c      	mov	ip, r3
 8006d20:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8006d24:	d005      	beq.n	8006d32 <_DrawBitmap+0x6ea>
 8006d26:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8006d2a:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 8006d2e:	f840 1c04 	str.w	r1, [r0, #-4]
 8006d32:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006d36:	0136      	lsls	r6, r6, #4
 8006d38:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 8006d3c:	b2f6      	uxtb	r6, r6
 8006d3e:	f100 0004 	add.w	r0, r0, #4
 8006d42:	d1ed      	bne.n	8006d20 <_DrawBitmap+0x6d8>
 8006d44:	3b01      	subs	r3, #1
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	3301      	adds	r3, #1
 8006d4a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8006d4e:	b11a      	cbz	r2, 8006d58 <_DrawBitmap+0x710>
 8006d50:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 8006d54:	2302      	movs	r3, #2
 8006d56:	e7dd      	b.n	8006d14 <_DrawBitmap+0x6cc>
 8006d58:	9b05      	ldr	r3, [sp, #20]
 8006d5a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	44bb      	add	fp, r7
 8006d60:	9305      	str	r3, [sp, #20]
 8006d62:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d66:	443b      	add	r3, r7
 8006d68:	9309      	str	r3, [sp, #36]	; 0x24
 8006d6a:	e5c4      	b.n	80068f6 <_DrawBitmap+0x2ae>
 8006d6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d6e:	b113      	cbz	r3, 8006d76 <_DrawBitmap+0x72e>
 8006d70:	a80f      	add	r0, sp, #60	; 0x3c
 8006d72:	f004 f997 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8006d76:	b011      	add	sp, #68	; 0x44
 8006d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d7c:	20000024 	.word	0x20000024

08006d80 <GUI_MEMDEV__WriteToActiveAt>:
 8006d80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006d84:	460e      	mov	r6, r1
 8006d86:	4690      	mov	r8, r2
 8006d88:	4607      	mov	r7, r0
 8006d8a:	f004 f97d 	bl	800b088 <GUI_ALLOC_LockH>
 8006d8e:	6803      	ldr	r3, [r0, #0]
 8006d90:	ac02      	add	r4, sp, #8
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f844 0d04 	str.w	r0, [r4, #-4]!
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	2116      	movs	r1, #22
 8006d9e:	4798      	blx	r3
 8006da0:	4605      	mov	r5, r0
 8006da2:	4620      	mov	r0, r4
 8006da4:	f004 f97e 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8006da8:	b11d      	cbz	r5, 8006db2 <GUI_MEMDEV__WriteToActiveAt+0x32>
 8006daa:	4638      	mov	r0, r7
 8006dac:	4631      	mov	r1, r6
 8006dae:	4642      	mov	r2, r8
 8006db0:	47a8      	blx	r5
 8006db2:	b002      	add	sp, #8
 8006db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006db8 <GUI_MEMDEV__CreateFixed>:
 8006db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dbc:	4e3e      	ldr	r6, [pc, #248]	; (8006eb8 <GUI_MEMDEV__CreateFixed+0x100>)
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	461d      	mov	r5, r3
 8006dc2:	6833      	ldr	r3, [r6, #0]
 8006dc4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8006dc6:	7c5b      	ldrb	r3, [r3, #17]
 8006dc8:	4683      	mov	fp, r0
 8006dca:	468a      	mov	sl, r1
 8006dcc:	4690      	mov	r8, r2
 8006dce:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006dd0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f003 f99e 	bl	800a114 <GUI_DEVICE_Create>
 8006dd8:	4604      	mov	r4, r0
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	d033      	beq.n	8006e46 <GUI_MEMDEV__CreateFixed+0x8e>
 8006dde:	6903      	ldr	r3, [r0, #16]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	4798      	blx	r3
 8006de4:	f001 fb3f 	bl	8008466 <LCD__GetBPPDevice>
 8006de8:	fb08 f600 	mul.w	r6, r8, r0
 8006dec:	9003      	str	r0, [sp, #12]
 8006dee:	3607      	adds	r6, #7
 8006df0:	f004 fb06 	bl	800b400 <GUI_ALLOC_RequestSize>
 8006df4:	f017 0901 	ands.w	r9, r7, #1
 8006df8:	ea4f 06d6 	mov.w	r6, r6, lsr #3
 8006dfc:	d104      	bne.n	8006e08 <GUI_MEMDEV__CreateFixed+0x50>
 8006dfe:	2304      	movs	r3, #4
 8006e00:	fb90 f0f3 	sdiv	r0, r0, r3
 8006e04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006e08:	2d00      	cmp	r5, #0
 8006e0a:	dc09      	bgt.n	8006e20 <GUI_MEMDEV__CreateFixed+0x68>
 8006e0c:	b11e      	cbz	r6, 8006e16 <GUI_MEMDEV__CreateFixed+0x5e>
 8006e0e:	3818      	subs	r0, #24
 8006e10:	fbb0 f0f6 	udiv	r0, r0, r6
 8006e14:	e000      	b.n	8006e18 <GUI_MEMDEV__CreateFixed+0x60>
 8006e16:	4630      	mov	r0, r6
 8006e18:	426d      	negs	r5, r5
 8006e1a:	42a8      	cmp	r0, r5
 8006e1c:	bfb8      	it	lt
 8006e1e:	4605      	movlt	r5, r0
 8006e20:	f1b9 0f00 	cmp.w	r9, #0
 8006e24:	d109      	bne.n	8006e3a <GUI_MEMDEV__CreateFixed+0x82>
 8006e26:	f8cd 9000 	str.w	r9, [sp]
 8006e2a:	4658      	mov	r0, fp
 8006e2c:	4651      	mov	r1, sl
 8006e2e:	4642      	mov	r2, r8
 8006e30:	462b      	mov	r3, r5
 8006e32:	f005 fa83 	bl	800c33c <GUI_USAGE_BM_Create>
 8006e36:	4607      	mov	r7, r0
 8006e38:	e000      	b.n	8006e3c <GUI_MEMDEV__CreateFixed+0x84>
 8006e3a:	2700      	movs	r7, #0
 8006e3c:	2d00      	cmp	r5, #0
 8006e3e:	dc04      	bgt.n	8006e4a <GUI_MEMDEV__CreateFixed+0x92>
 8006e40:	4620      	mov	r0, r4
 8006e42:	f003 f965 	bl	800a110 <GUI_DEVICE_Delete>
 8006e46:	2000      	movs	r0, #0
 8006e48:	e032      	b.n	8006eb0 <GUI_MEMDEV__CreateFixed+0xf8>
 8006e4a:	fb06 f005 	mul.w	r0, r6, r5
 8006e4e:	3018      	adds	r0, #24
 8006e50:	f1b9 0f00 	cmp.w	r9, #0
 8006e54:	d002      	beq.n	8006e5c <GUI_MEMDEV__CreateFixed+0xa4>
 8006e56:	f004 fb5f 	bl	800b518 <GUI_ALLOC_AllocNoInit>
 8006e5a:	e001      	b.n	8006e60 <GUI_MEMDEV__CreateFixed+0xa8>
 8006e5c:	f004 fb60 	bl	800b520 <GUI_ALLOC_AllocZero>
 8006e60:	4681      	mov	r9, r0
 8006e62:	b940      	cbnz	r0, 8006e76 <GUI_MEMDEV__CreateFixed+0xbe>
 8006e64:	4620      	mov	r0, r4
 8006e66:	f003 f953 	bl	800a110 <GUI_DEVICE_Delete>
 8006e6a:	2f00      	cmp	r7, #0
 8006e6c:	d0eb      	beq.n	8006e46 <GUI_MEMDEV__CreateFixed+0x8e>
 8006e6e:	4638      	mov	r0, r7
 8006e70:	f004 f938 	bl	800b0e4 <GUI_ALLOC_Free>
 8006e74:	e01b      	b.n	8006eae <GUI_MEMDEV__CreateFixed+0xf6>
 8006e76:	f004 f907 	bl	800b088 <GUI_ALLOC_LockH>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	a806      	add	r0, sp, #24
 8006e7e:	9a03      	ldr	r2, [sp, #12]
 8006e80:	f840 3d04 	str.w	r3, [r0, #-4]!
 8006e84:	611a      	str	r2, [r3, #16]
 8006e86:	601c      	str	r4, [r3, #0]
 8006e88:	f8a3 b004 	strh.w	fp, [r3, #4]
 8006e8c:	f8a3 a006 	strh.w	sl, [r3, #6]
 8006e90:	f8a3 8008 	strh.w	r8, [r3, #8]
 8006e94:	815d      	strh	r5, [r3, #10]
 8006e96:	60de      	str	r6, [r3, #12]
 8006e98:	615f      	str	r7, [r3, #20]
 8006e9a:	f004 f903 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8006e9e:	4a06      	ldr	r2, [pc, #24]	; (8006eb8 <GUI_MEMDEV__CreateFixed+0x100>)
 8006ea0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ea2:	6123      	str	r3, [r4, #16]
 8006ea4:	6813      	ldr	r3, [r2, #0]
 8006ea6:	f8c4 9008 	str.w	r9, [r4, #8]
 8006eaa:	7c5b      	ldrb	r3, [r3, #17]
 8006eac:	61a3      	str	r3, [r4, #24]
 8006eae:	4648      	mov	r0, r9
 8006eb0:	b007      	add	sp, #28
 8006eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20000024 	.word	0x20000024

08006ebc <GUI_MEMDEV_GetBitsPerPixel>:
 8006ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ebe:	4605      	mov	r5, r0
 8006ec0:	b170      	cbz	r0, 8006ee0 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 8006ec2:	f004 f8e1 	bl	800b088 <GUI_ALLOC_LockH>
 8006ec6:	6803      	ldr	r3, [r0, #0]
 8006ec8:	ac02      	add	r4, sp, #8
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	f844 0d04 	str.w	r0, [r4, #-4]!
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	4798      	blx	r3
 8006ed4:	f001 fac7 	bl	8008466 <LCD__GetBPPDevice>
 8006ed8:	4605      	mov	r5, r0
 8006eda:	4620      	mov	r0, r4
 8006edc:	f004 f8e2 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	b003      	add	sp, #12
 8006ee4:	bd30      	pop	{r4, r5, pc}
	...

08006ee8 <GUI_MEMDEV_Delete>:
 8006ee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006eea:	4604      	mov	r4, r0
 8006eec:	b1d0      	cbz	r0, 8006f24 <GUI_MEMDEV_Delete+0x3c>
 8006eee:	4b0e      	ldr	r3, [pc, #56]	; (8006f28 <GUI_MEMDEV_Delete+0x40>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ef4:	4283      	cmp	r3, r0
 8006ef6:	d101      	bne.n	8006efc <GUI_MEMDEV_Delete+0x14>
 8006ef8:	f002 fcf6 	bl	80098e8 <GUI_SelectLCD>
 8006efc:	4620      	mov	r0, r4
 8006efe:	f004 f8c3 	bl	800b088 <GUI_ALLOC_LockH>
 8006f02:	9001      	str	r0, [sp, #4]
 8006f04:	6940      	ldr	r0, [r0, #20]
 8006f06:	b108      	cbz	r0, 8006f0c <GUI_MEMDEV_Delete+0x24>
 8006f08:	f005 fa44 	bl	800c394 <GUI_USAGE_DecUseCnt>
 8006f0c:	ad02      	add	r5, sp, #8
 8006f0e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006f12:	6818      	ldr	r0, [r3, #0]
 8006f14:	f003 f8fc 	bl	800a110 <GUI_DEVICE_Delete>
 8006f18:	4628      	mov	r0, r5
 8006f1a:	f004 f8c3 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f004 f8e0 	bl	800b0e4 <GUI_ALLOC_Free>
 8006f24:	b003      	add	sp, #12
 8006f26:	bd30      	pop	{r4, r5, pc}
 8006f28:	20000024 	.word	0x20000024

08006f2c <GUI_MEMDEV_CreateEx>:
 8006f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f30:	469a      	mov	sl, r3
 8006f32:	4b19      	ldr	r3, [pc, #100]	; (8006f98 <GUI_MEMDEV_CreateEx+0x6c>)
 8006f34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4607      	mov	r7, r0
 8006f3a:	7c58      	ldrb	r0, [r3, #17]
 8006f3c:	4b17      	ldr	r3, [pc, #92]	; (8006f9c <GUI_MEMDEV_CreateEx+0x70>)
 8006f3e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8006f42:	4688      	mov	r8, r1
 8006f44:	4691      	mov	r9, r2
 8006f46:	68e3      	ldr	r3, [r4, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d006      	beq.n	8006f5c <GUI_MEMDEV_CreateEx+0x30>
 8006f4e:	6824      	ldr	r4, [r4, #0]
 8006f50:	2c00      	cmp	r4, #0
 8006f52:	d1f8      	bne.n	8006f46 <GUI_MEMDEV_CreateEx+0x1a>
 8006f54:	f003 f8cc 	bl	800a0f0 <GUI_DEVICE__GetpDriver>
 8006f58:	4604      	mov	r4, r0
 8006f5a:	b130      	cbz	r0, 8006f6a <GUI_MEMDEV_CreateEx+0x3e>
 8006f5c:	68e3      	ldr	r3, [r4, #12]
 8006f5e:	4620      	mov	r0, r4
 8006f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f62:	2101      	movs	r1, #1
 8006f64:	4798      	blx	r3
 8006f66:	4606      	mov	r6, r0
 8006f68:	b908      	cbnz	r0, 8006f6e <GUI_MEMDEV_CreateEx+0x42>
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	e010      	b.n	8006f90 <GUI_MEMDEV_CreateEx+0x64>
 8006f6e:	6924      	ldr	r4, [r4, #16]
 8006f70:	68a3      	ldr	r3, [r4, #8]
 8006f72:	4798      	blx	r3
 8006f74:	3001      	adds	r0, #1
 8006f76:	bf04      	itt	eq
 8006f78:	f045 0501 	orreq.w	r5, r5, #1
 8006f7c:	4c08      	ldreq	r4, [pc, #32]	; (8006fa0 <GUI_MEMDEV_CreateEx+0x74>)
 8006f7e:	9402      	str	r4, [sp, #8]
 8006f80:	e88d 0060 	stmia.w	sp, {r5, r6}
 8006f84:	4638      	mov	r0, r7
 8006f86:	4641      	mov	r1, r8
 8006f88:	464a      	mov	r2, r9
 8006f8a:	4653      	mov	r3, sl
 8006f8c:	f7ff ff14 	bl	8006db8 <GUI_MEMDEV__CreateFixed>
 8006f90:	b004      	add	sp, #16
 8006f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f96:	bf00      	nop
 8006f98:	20000024 	.word	0x20000024
 8006f9c:	200194c8 	.word	0x200194c8
 8006fa0:	08012e48 	.word	0x08012e48

08006fa4 <GUI_MEMDEV_Create>:
 8006fa4:	b513      	push	{r0, r1, r4, lr}
 8006fa6:	2400      	movs	r4, #0
 8006fa8:	9400      	str	r4, [sp, #0]
 8006faa:	f7ff ffbf 	bl	8006f2c <GUI_MEMDEV_CreateEx>
 8006fae:	b002      	add	sp, #8
 8006fb0:	bd10      	pop	{r4, pc}
	...

08006fb4 <GUI_MEMDEV_Select>:
 8006fb4:	4b11      	ldr	r3, [pc, #68]	; (8006ffc <GUI_MEMDEV_Select+0x48>)
 8006fb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	4604      	mov	r4, r0
 8006fbc:	6e16      	ldr	r6, [r2, #96]	; 0x60
 8006fbe:	461f      	mov	r7, r3
 8006fc0:	b910      	cbnz	r0, 8006fc8 <GUI_MEMDEV_Select+0x14>
 8006fc2:	f002 fc91 	bl	80098e8 <GUI_SelectLCD>
 8006fc6:	e016      	b.n	8006ff6 <GUI_MEMDEV_Select+0x42>
 8006fc8:	b10e      	cbz	r6, 8006fce <GUI_MEMDEV_Select+0x1a>
 8006fca:	f002 fc8d 	bl	80098e8 <GUI_SelectLCD>
 8006fce:	f7fe ff2f 	bl	8005e30 <WM_Deactivate>
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f004 f858 	bl	800b088 <GUI_ALLOC_LockH>
 8006fd8:	ad02      	add	r5, sp, #8
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	f845 0d04 	str.w	r0, [r5, #-4]!
 8006fe0:	661c      	str	r4, [r3, #96]	; 0x60
 8006fe2:	6800      	ldr	r0, [r0, #0]
 8006fe4:	f003 f8d2 	bl	800a18c <GUI_DEVICE_Link>
 8006fe8:	4628      	mov	r0, r5
 8006fea:	f004 f85b 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8006fee:	f001 f8f1 	bl	80081d4 <LCD_UpdateColorIndices>
 8006ff2:	f001 fcf9 	bl	80089e8 <LCD_SetClipRectMax>
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	b003      	add	sp, #12
 8006ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ffc:	20000024 	.word	0x20000024

08007000 <GUI_MEMDEV_CopyToLCDAt>:
 8007000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007004:	460c      	mov	r4, r1
 8007006:	b085      	sub	sp, #20
 8007008:	4615      	mov	r5, r2
 800700a:	4606      	mov	r6, r0
 800700c:	2800      	cmp	r0, #0
 800700e:	d041      	beq.n	8007094 <GUI_MEMDEV_CopyToLCDAt+0x94>
 8007010:	2000      	movs	r0, #0
 8007012:	f002 fc1b 	bl	800984c <GUI_SetDrawMode>
 8007016:	4b21      	ldr	r3, [pc, #132]	; (800709c <GUI_MEMDEV_CopyToLCDAt+0x9c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4607      	mov	r7, r0
 800701c:	4630      	mov	r0, r6
 800701e:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 8007022:	f004 f831 	bl	800b088 <GUI_ALLOC_LockH>
 8007026:	6803      	ldr	r3, [r0, #0]
 8007028:	9001      	str	r0, [sp, #4]
 800702a:	6998      	ldr	r0, [r3, #24]
 800702c:	f002 fc46 	bl	80098bc <GUI_SelectLayer>
 8007030:	4b1b      	ldr	r3, [pc, #108]	; (80070a0 <GUI_MEMDEV_CopyToLCDAt+0xa0>)
 8007032:	429c      	cmp	r4, r3
 8007034:	9b01      	ldr	r3, [sp, #4]
 8007036:	bf04      	itt	eq
 8007038:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 800703c:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 8007040:	891a      	ldrh	r2, [r3, #8]
 8007042:	895b      	ldrh	r3, [r3, #10]
 8007044:	f8ad 4008 	strh.w	r4, [sp, #8]
 8007048:	3a01      	subs	r2, #1
 800704a:	3b01      	subs	r3, #1
 800704c:	4422      	add	r2, r4
 800704e:	442b      	add	r3, r5
 8007050:	4681      	mov	r9, r0
 8007052:	f8ad 200c 	strh.w	r2, [sp, #12]
 8007056:	f8ad 300e 	strh.w	r3, [sp, #14]
 800705a:	f8ad 500a 	strh.w	r5, [sp, #10]
 800705e:	f7fe fedf 	bl	8005e20 <WM_Activate>
 8007062:	a801      	add	r0, sp, #4
 8007064:	f004 f81e 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8007068:	a802      	add	r0, sp, #8
 800706a:	f7fe fd05 	bl	8005a78 <WM__InitIVRSearch>
 800706e:	b948      	cbnz	r0, 8007084 <GUI_MEMDEV_CopyToLCDAt+0x84>
 8007070:	4648      	mov	r0, r9
 8007072:	f002 fc23 	bl	80098bc <GUI_SelectLayer>
 8007076:	4640      	mov	r0, r8
 8007078:	f7ff ff9c 	bl	8006fb4 <GUI_MEMDEV_Select>
 800707c:	4638      	mov	r0, r7
 800707e:	f002 fbe5 	bl	800984c <GUI_SetDrawMode>
 8007082:	e007      	b.n	8007094 <GUI_MEMDEV_CopyToLCDAt+0x94>
 8007084:	4630      	mov	r0, r6
 8007086:	4621      	mov	r1, r4
 8007088:	462a      	mov	r2, r5
 800708a:	f004 fc23 	bl	800b8d4 <GUI_MEMDEV__WriteToActiveOpaque>
 800708e:	f7fe fc31 	bl	80058f4 <WM__GetNextIVR>
 8007092:	e7ec      	b.n	800706e <GUI_MEMDEV_CopyToLCDAt+0x6e>
 8007094:	b005      	add	sp, #20
 8007096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800709a:	bf00      	nop
 800709c:	20000024 	.word	0x20000024
 80070a0:	fffff001 	.word	0xfffff001

080070a4 <GUI_MEMDEV_CopyToLCD>:
 80070a4:	4901      	ldr	r1, [pc, #4]	; (80070ac <GUI_MEMDEV_CopyToLCD+0x8>)
 80070a6:	460a      	mov	r2, r1
 80070a8:	f7ff bfaa 	b.w	8007000 <GUI_MEMDEV_CopyToLCDAt>
 80070ac:	fffff001 	.word	0xfffff001

080070b0 <_SetPhysRAMAddr>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80070b4:	4604      	mov	r4, r0
 80070b6:	460e      	mov	r6, r1
 80070b8:	4615      	mov	r5, r2
 80070ba:	b15b      	cbz	r3, 80070d4 <_SetPhysRAMAddr+0x24>
 80070bc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80070c0:	4798      	blx	r3
 80070c2:	4631      	mov	r1, r6
 80070c4:	4607      	mov	r7, r0
 80070c6:	462a      	mov	r2, r5
 80070c8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80070cc:	4620      	mov	r0, r4
 80070ce:	4798      	blx	r3
 80070d0:	463e      	mov	r6, r7
 80070d2:	4605      	mov	r5, r0
 80070d4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80070d8:	4620      	mov	r0, r4
 80070da:	212a      	movs	r1, #42	; 0x2a
 80070dc:	4798      	blx	r3
 80070de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80070e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80070e4:	4431      	add	r1, r6
 80070e6:	4620      	mov	r0, r4
 80070e8:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80070ec:	4798      	blx	r3
 80070ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80070f0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80070f4:	b2b7      	uxth	r7, r6
 80070f6:	4439      	add	r1, r7
 80070f8:	4620      	mov	r0, r4
 80070fa:	b2c9      	uxtb	r1, r1
 80070fc:	4798      	blx	r3
 80070fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007100:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007104:	4431      	add	r1, r6
 8007106:	4620      	mov	r0, r4
 8007108:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800710c:	4798      	blx	r3
 800710e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007110:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007114:	4439      	add	r1, r7
 8007116:	4620      	mov	r0, r4
 8007118:	b2c9      	uxtb	r1, r1
 800711a:	4798      	blx	r3
 800711c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007120:	4620      	mov	r0, r4
 8007122:	212b      	movs	r1, #43	; 0x2b
 8007124:	4798      	blx	r3
 8007126:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007128:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800712c:	4429      	add	r1, r5
 800712e:	4620      	mov	r0, r4
 8007130:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8007134:	4798      	blx	r3
 8007136:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007138:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800713c:	b2ae      	uxth	r6, r5
 800713e:	4431      	add	r1, r6
 8007140:	4620      	mov	r0, r4
 8007142:	b2c9      	uxtb	r1, r1
 8007144:	4798      	blx	r3
 8007146:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007148:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800714c:	4429      	add	r1, r5
 800714e:	4620      	mov	r0, r4
 8007150:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8007154:	4798      	blx	r3
 8007156:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007158:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800715c:	4431      	add	r1, r6
 800715e:	4620      	mov	r0, r4
 8007160:	b2c9      	uxtb	r1, r1
 8007162:	4798      	blx	r3
 8007164:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007168:	4620      	mov	r0, r4
 800716a:	212c      	movs	r1, #44	; 0x2c
 800716c:	4798      	blx	r3
 800716e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007170 <_SetRect>:
 8007170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007174:	4698      	mov	r8, r3
 8007176:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007178:	9f08      	ldr	r7, [sp, #32]
 800717a:	4604      	mov	r4, r0
 800717c:	4689      	mov	r9, r1
 800717e:	4615      	mov	r5, r2
 8007180:	2b00      	cmp	r3, #0
 8007182:	d064      	beq.n	800724e <_SetRect+0xde>
 8007184:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8007188:	4798      	blx	r3
 800718a:	463a      	mov	r2, r7
 800718c:	4606      	mov	r6, r0
 800718e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007192:	4641      	mov	r1, r8
 8007194:	4620      	mov	r0, r4
 8007196:	4798      	blx	r3
 8007198:	462a      	mov	r2, r5
 800719a:	4682      	mov	sl, r0
 800719c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80071a0:	4649      	mov	r1, r9
 80071a2:	4620      	mov	r0, r4
 80071a4:	4798      	blx	r3
 80071a6:	463a      	mov	r2, r7
 80071a8:	4605      	mov	r5, r0
 80071aa:	4641      	mov	r1, r8
 80071ac:	4620      	mov	r0, r4
 80071ae:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80071b2:	4798      	blx	r3
 80071b4:	45b2      	cmp	sl, r6
 80071b6:	4607      	mov	r7, r0
 80071b8:	db02      	blt.n	80071c0 <_SetRect+0x50>
 80071ba:	4653      	mov	r3, sl
 80071bc:	46b2      	mov	sl, r6
 80071be:	461e      	mov	r6, r3
 80071c0:	42af      	cmp	r7, r5
 80071c2:	db02      	blt.n	80071ca <_SetRect+0x5a>
 80071c4:	463b      	mov	r3, r7
 80071c6:	462f      	mov	r7, r5
 80071c8:	461d      	mov	r5, r3
 80071ca:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80071ce:	4620      	mov	r0, r4
 80071d0:	212a      	movs	r1, #42	; 0x2a
 80071d2:	4798      	blx	r3
 80071d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80071d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80071da:	4451      	add	r1, sl
 80071dc:	4620      	mov	r0, r4
 80071de:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80071e2:	4798      	blx	r3
 80071e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80071e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80071ea:	4451      	add	r1, sl
 80071ec:	4620      	mov	r0, r4
 80071ee:	b2c9      	uxtb	r1, r1
 80071f0:	4798      	blx	r3
 80071f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80071f4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80071f8:	4431      	add	r1, r6
 80071fa:	4620      	mov	r0, r4
 80071fc:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8007200:	4798      	blx	r3
 8007202:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007204:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007208:	4431      	add	r1, r6
 800720a:	4620      	mov	r0, r4
 800720c:	b2c9      	uxtb	r1, r1
 800720e:	4798      	blx	r3
 8007210:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007214:	4620      	mov	r0, r4
 8007216:	212b      	movs	r1, #43	; 0x2b
 8007218:	4798      	blx	r3
 800721a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800721c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007220:	4439      	add	r1, r7
 8007222:	4620      	mov	r0, r4
 8007224:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8007228:	4798      	blx	r3
 800722a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800722c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007230:	4439      	add	r1, r7
 8007232:	4620      	mov	r0, r4
 8007234:	b2c9      	uxtb	r1, r1
 8007236:	4798      	blx	r3
 8007238:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800723a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800723e:	4429      	add	r1, r5
 8007240:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8007244:	4620      	mov	r0, r4
 8007246:	4798      	blx	r3
 8007248:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800724a:	4429      	add	r1, r5
 800724c:	e03f      	b.n	80072ce <_SetRect+0x15e>
 800724e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8007252:	212a      	movs	r1, #42	; 0x2a
 8007254:	4798      	blx	r3
 8007256:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007258:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800725c:	4449      	add	r1, r9
 800725e:	4620      	mov	r0, r4
 8007260:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8007264:	4798      	blx	r3
 8007266:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007268:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800726c:	4449      	add	r1, r9
 800726e:	4620      	mov	r0, r4
 8007270:	b2c9      	uxtb	r1, r1
 8007272:	4798      	blx	r3
 8007274:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007276:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800727a:	4441      	add	r1, r8
 800727c:	4620      	mov	r0, r4
 800727e:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8007282:	4798      	blx	r3
 8007284:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007286:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800728a:	4441      	add	r1, r8
 800728c:	4620      	mov	r0, r4
 800728e:	b2c9      	uxtb	r1, r1
 8007290:	4798      	blx	r3
 8007292:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007296:	4620      	mov	r0, r4
 8007298:	212b      	movs	r1, #43	; 0x2b
 800729a:	4798      	blx	r3
 800729c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800729e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80072a2:	4429      	add	r1, r5
 80072a4:	4620      	mov	r0, r4
 80072a6:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80072aa:	4798      	blx	r3
 80072ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80072ae:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80072b2:	4429      	add	r1, r5
 80072b4:	4620      	mov	r0, r4
 80072b6:	b2c9      	uxtb	r1, r1
 80072b8:	4798      	blx	r3
 80072ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80072bc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80072c0:	4439      	add	r1, r7
 80072c2:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80072c6:	4620      	mov	r0, r4
 80072c8:	4798      	blx	r3
 80072ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80072cc:	4439      	add	r1, r7
 80072ce:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80072d2:	4620      	mov	r0, r4
 80072d4:	b2c9      	uxtb	r1, r1
 80072d6:	4798      	blx	r3
 80072d8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80072dc:	4620      	mov	r0, r4
 80072de:	212c      	movs	r1, #44	; 0x2c
 80072e0:	4798      	blx	r3
 80072e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080072e8 <_SetOrientation>:
 80072e8:	b513      	push	{r0, r1, r4, lr}
 80072ea:	4a0d      	ldr	r2, [pc, #52]	; (8007320 <_SetOrientation+0x38>)
 80072ec:	4604      	mov	r4, r0
 80072ee:	6851      	ldr	r1, [r2, #4]
 80072f0:	6810      	ldr	r0, [r2, #0]
 80072f2:	466b      	mov	r3, sp
 80072f4:	c303      	stmia	r3!, {r0, r1}
 80072f6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80072fa:	4620      	mov	r0, r4
 80072fc:	2136      	movs	r1, #54	; 0x36
 80072fe:	4798      	blx	r3
 8007300:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007302:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8007304:	aa02      	add	r2, sp, #8
 8007306:	4413      	add	r3, r2
 8007308:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 800730c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8007310:	4319      	orrs	r1, r3
 8007312:	4620      	mov	r0, r4
 8007314:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007318:	b289      	uxth	r1, r1
 800731a:	4798      	blx	r3
 800731c:	b002      	add	sp, #8
 800731e:	bd10      	pop	{r4, pc}
 8007320:	0800f508 	.word	0x0800f508

08007324 <_ReadPixel_16bpp_B8>:
 8007324:	b513      	push	{r0, r1, r4, lr}
 8007326:	4604      	mov	r4, r0
 8007328:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800732c:	202e      	movs	r0, #46	; 0x2e
 800732e:	4798      	blx	r3
 8007330:	6a21      	ldr	r1, [r4, #32]
 8007332:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8007336:	4668      	mov	r0, sp
 8007338:	3103      	adds	r1, #3
 800733a:	4798      	blx	r3
 800733c:	6a22      	ldr	r2, [r4, #32]
 800733e:	ab00      	add	r3, sp, #0
 8007340:	4413      	add	r3, r2
 8007342:	f81d 2002 	ldrb.w	r2, [sp, r2]
 8007346:	7859      	ldrb	r1, [r3, #1]
 8007348:	7898      	ldrb	r0, [r3, #2]
 800734a:	08d2      	lsrs	r2, r2, #3
 800734c:	0889      	lsrs	r1, r1, #2
 800734e:	02d2      	lsls	r2, r2, #11
 8007350:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8007354:	ea42 00d0 	orr.w	r0, r2, r0, lsr #3
 8007358:	b002      	add	sp, #8
 800735a:	bd10      	pop	{r4, pc}

0800735c <_ReadPixel_16bpp_B16_I>:
 800735c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800735e:	4604      	mov	r4, r0
 8007360:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 8007364:	202e      	movs	r0, #46	; 0x2e
 8007366:	4798      	blx	r3
 8007368:	6a21      	ldr	r1, [r4, #32]
 800736a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800736e:	4668      	mov	r0, sp
 8007370:	3102      	adds	r1, #2
 8007372:	4798      	blx	r3
 8007374:	6a23      	ldr	r3, [r4, #32]
 8007376:	a900      	add	r1, sp, #0
 8007378:	eb01 0243 	add.w	r2, r1, r3, lsl #1
 800737c:	f83d 0013 	ldrh.w	r0, [sp, r3, lsl #1]
 8007380:	8852      	ldrh	r2, [r2, #2]
 8007382:	f402 417c 	and.w	r1, r2, #64512	; 0xfc00
 8007386:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800738a:	ea42 1251 	orr.w	r2, r2, r1, lsr #5
 800738e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8007392:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8007396:	b004      	add	sp, #16
 8007398:	bd10      	pop	{r4, pc}

0800739a <_SetReg_B8>:
 800739a:	b538      	push	{r3, r4, r5, lr}
 800739c:	4604      	mov	r4, r0
 800739e:	460d      	mov	r5, r1
 80073a0:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80073a4:	0a08      	lsrs	r0, r1, #8
 80073a6:	4798      	blx	r3
 80073a8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 80073ac:	b2e8      	uxtb	r0, r5
 80073ae:	4798      	blx	r3
 80073b0:	bd38      	pop	{r3, r4, r5, pc}

080073b2 <_SetReg_B16>:
 80073b2:	b508      	push	{r3, lr}
 80073b4:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 80073b8:	4608      	mov	r0, r1
 80073ba:	4798      	blx	r3
 80073bc:	bd08      	pop	{r3, pc}

080073be <_WritePara_B8>:
 80073be:	b508      	push	{r3, lr}
 80073c0:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80073c4:	b2c8      	uxtb	r0, r1
 80073c6:	4798      	blx	r3
 80073c8:	bd08      	pop	{r3, pc}

080073ca <_WritePara_B16>:
 80073ca:	b508      	push	{r3, lr}
 80073cc:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 80073d0:	4608      	mov	r0, r1
 80073d2:	4798      	blx	r3
 80073d4:	bd08      	pop	{r3, pc}
	...

080073d8 <_SetInterface>:
 80073d8:	2908      	cmp	r1, #8
 80073da:	d002      	beq.n	80073e2 <_SetInterface+0xa>
 80073dc:	2910      	cmp	r1, #16
 80073de:	d005      	beq.n	80073ec <_SetInterface+0x14>
 80073e0:	4770      	bx	lr
 80073e2:	4b06      	ldr	r3, [pc, #24]	; (80073fc <_SetInterface+0x24>)
 80073e4:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 80073e8:	4b05      	ldr	r3, [pc, #20]	; (8007400 <_SetInterface+0x28>)
 80073ea:	e003      	b.n	80073f4 <_SetInterface+0x1c>
 80073ec:	4b05      	ldr	r3, [pc, #20]	; (8007404 <_SetInterface+0x2c>)
 80073ee:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 80073f2:	4b05      	ldr	r3, [pc, #20]	; (8007408 <_SetInterface+0x30>)
 80073f4:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	0800739b 	.word	0x0800739b
 8007400:	080073bf 	.word	0x080073bf
 8007404:	080073b3 	.word	0x080073b3
 8007408:	080073cb 	.word	0x080073cb

0800740c <_ReadRect_16bpp_B8>:
 800740c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800740e:	b085      	sub	sp, #20
 8007410:	6884      	ldr	r4, [r0, #8]
 8007412:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007414:	9700      	str	r7, [sp, #0]
 8007416:	1abd      	subs	r5, r7, r2
 8007418:	1a58      	subs	r0, r3, r1
 800741a:	3501      	adds	r5, #1
 800741c:	fb00 5505 	mla	r5, r0, r5, r5
 8007420:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8007424:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007426:	4620      	mov	r0, r4
 8007428:	47b8      	blx	r7
 800742a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800742e:	202e      	movs	r0, #46	; 0x2e
 8007430:	4798      	blx	r3
 8007432:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8007436:	6a21      	ldr	r1, [r4, #32]
 8007438:	a802      	add	r0, sp, #8
 800743a:	4798      	blx	r3
 800743c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8007440:	a802      	add	r0, sp, #8
 8007442:	2103      	movs	r1, #3
 8007444:	4798      	blx	r3
 8007446:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800744a:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800744e:	08db      	lsrs	r3, r3, #3
 8007450:	0892      	lsrs	r2, r2, #2
 8007452:	02db      	lsls	r3, r3, #11
 8007454:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8007458:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800745c:	3d01      	subs	r5, #1
 800745e:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8007462:	f826 3b02 	strh.w	r3, [r6], #2
 8007466:	d1e9      	bne.n	800743c <_ReadRect_16bpp_B8+0x30>
 8007468:	b005      	add	sp, #20
 800746a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800746c <_ReadRect_16bpp_B16_I>:
 800746c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800746e:	b087      	sub	sp, #28
 8007470:	6884      	ldr	r4, [r0, #8]
 8007472:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007474:	9700      	str	r7, [sp, #0]
 8007476:	1abd      	subs	r5, r7, r2
 8007478:	1a58      	subs	r0, r3, r1
 800747a:	3501      	adds	r5, #1
 800747c:	fb00 5505 	mla	r5, r0, r5, r5
 8007480:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8007484:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007486:	4620      	mov	r0, r4
 8007488:	47b8      	blx	r7
 800748a:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800748e:	202e      	movs	r0, #46	; 0x2e
 8007490:	4798      	blx	r3
 8007492:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8007496:	6a21      	ldr	r1, [r4, #32]
 8007498:	a802      	add	r0, sp, #8
 800749a:	4798      	blx	r3
 800749c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 80074a0:	a802      	add	r0, sp, #8
 80074a2:	2102      	movs	r1, #2
 80074a4:	4798      	blx	r3
 80074a6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80074aa:	f403 427c 	and.w	r2, r3, #64512	; 0xfc00
 80074ae:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80074b2:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
 80074b6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80074ba:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80074be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80074c2:	3d01      	subs	r5, #1
 80074c4:	f826 3b02 	strh.w	r3, [r6], #2
 80074c8:	d1e8      	bne.n	800749c <_ReadRect_16bpp_B16_I+0x30>
 80074ca:	b007      	add	sp, #28
 80074cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080074d0 <GUIDRV_FlexColor_SetFunc66720>:
 80074d0:	b510      	push	{r4, lr}
 80074d2:	4604      	mov	r4, r0
 80074d4:	f000 fda6 	bl	8008024 <GUIDRV_FlexColor__InitOnce>
 80074d8:	68a3      	ldr	r3, [r4, #8]
 80074da:	4a12      	ldr	r2, [pc, #72]	; (8007524 <GUIDRV_FlexColor_SetFunc66720+0x54>)
 80074dc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80074e0:	4a11      	ldr	r2, [pc, #68]	; (8007528 <GUIDRV_FlexColor_SetFunc66720+0x58>)
 80074e2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80074e6:	4a11      	ldr	r2, [pc, #68]	; (800752c <GUIDRV_FlexColor_SetFunc66720+0x5c>)
 80074e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80074ec:	4a10      	ldr	r2, [pc, #64]	; (8007530 <GUIDRV_FlexColor_SetFunc66720+0x60>)
 80074ee:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80074f2:	2200      	movs	r2, #0
 80074f4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80074f8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80074fc:	4a0d      	ldr	r2, [pc, #52]	; (8007534 <GUIDRV_FlexColor_SetFunc66720+0x64>)
 80074fe:	490e      	ldr	r1, [pc, #56]	; (8007538 <GUIDRV_FlexColor_SetFunc66720+0x68>)
 8007500:	6812      	ldr	r2, [r2, #0]
 8007502:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8007506:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8007508:	6809      	ldr	r1, [r1, #0]
 800750a:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 800750e:	f022 0203 	bic.w	r2, r2, #3
 8007512:	490a      	ldr	r1, [pc, #40]	; (800753c <GUIDRV_FlexColor_SetFunc66720+0x6c>)
 8007514:	84da      	strh	r2, [r3, #38]	; 0x26
 8007516:	4a0a      	ldr	r2, [pc, #40]	; (8007540 <GUIDRV_FlexColor_SetFunc66720+0x70>)
 8007518:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 800751c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007520:	bd10      	pop	{r4, pc}
 8007522:	bf00      	nop
 8007524:	080070b1 	.word	0x080070b1
 8007528:	08007171 	.word	0x08007171
 800752c:	080072e9 	.word	0x080072e9
 8007530:	08007325 	.word	0x08007325
 8007534:	20000014 	.word	0x20000014
 8007538:	20000010 	.word	0x20000010
 800753c:	0800740d 	.word	0x0800740d
 8007540:	080073d9 	.word	0x080073d9

08007544 <_ReadData>:
 8007544:	b508      	push	{r3, lr}
 8007546:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 800754a:	4798      	blx	r3
 800754c:	bd08      	pop	{r3, pc}

0800754e <_WriteData>:
 800754e:	b508      	push	{r3, lr}
 8007550:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 8007554:	b288      	uxth	r0, r1
 8007556:	4798      	blx	r3
 8007558:	bd08      	pop	{r3, pc}
	...

0800755c <_FillRect>:
 800755c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007560:	4f3d      	ldr	r7, [pc, #244]	; (8007658 <_FillRect+0xfc>)
 8007562:	6884      	ldr	r4, [r0, #8]
 8007564:	4682      	mov	sl, r0
 8007566:	6838      	ldr	r0, [r7, #0]
 8007568:	7c00      	ldrb	r0, [r0, #16]
 800756a:	f010 0f01 	tst.w	r0, #1
 800756e:	b085      	sub	sp, #20
 8007570:	460e      	mov	r6, r1
 8007572:	4615      	mov	r5, r2
 8007574:	4698      	mov	r8, r3
 8007576:	ebc1 0903 	rsb	r9, r1, r3
 800757a:	d045      	beq.n	8007608 <_FillRect+0xac>
 800757c:	ea4f 0b49 	mov.w	fp, r9, lsl #1
 8007580:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007582:	4285      	cmp	r5, r0
 8007584:	dc65      	bgt.n	8007652 <_FillRect+0xf6>
 8007586:	f8d4 c0c4 	ldr.w	ip, [r4, #196]	; 0xc4
 800758a:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800758c:	f1bc 0f00 	cmp.w	ip, #0
 8007590:	d101      	bne.n	8007596 <_FillRect+0x3a>
 8007592:	46b4      	mov	ip, r6
 8007594:	e007      	b.n	80075a6 <_FillRect+0x4a>
 8007596:	e88d 00a0 	stmia.w	sp, {r5, r7}
 800759a:	4650      	mov	r0, sl
 800759c:	4631      	mov	r1, r6
 800759e:	462a      	mov	r2, r5
 80075a0:	4643      	mov	r3, r8
 80075a2:	47e0      	blx	ip
 80075a4:	e011      	b.n	80075ca <_FillRect+0x6e>
 80075a6:	45c4      	cmp	ip, r8
 80075a8:	dc0e      	bgt.n	80075c8 <_FillRect+0x6c>
 80075aa:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 80075ae:	f8cd c00c 	str.w	ip, [sp, #12]
 80075b2:	4661      	mov	r1, ip
 80075b4:	4650      	mov	r0, sl
 80075b6:	462a      	mov	r2, r5
 80075b8:	4798      	blx	r3
 80075ba:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80075be:	f827 0b02 	strh.w	r0, [r7], #2
 80075c2:	f10c 0c01 	add.w	ip, ip, #1
 80075c6:	e7ee      	b.n	80075a6 <_FillRect+0x4a>
 80075c8:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 80075ca:	1ebb      	subs	r3, r7, #2
 80075cc:	f109 0c01 	add.w	ip, r9, #1
 80075d0:	445f      	add	r7, fp
 80075d2:	42bb      	cmp	r3, r7
 80075d4:	d005      	beq.n	80075e2 <_FillRect+0x86>
 80075d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80075d8:	8859      	ldrh	r1, [r3, #2]
 80075da:	404a      	eors	r2, r1
 80075dc:	f823 2f02 	strh.w	r2, [r3, #2]!
 80075e0:	e7f7      	b.n	80075d2 <_FillRect+0x76>
 80075e2:	9500      	str	r5, [sp, #0]
 80075e4:	462a      	mov	r2, r5
 80075e6:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 80075ea:	f8cd c00c 	str.w	ip, [sp, #12]
 80075ee:	4620      	mov	r0, r4
 80075f0:	4631      	mov	r1, r6
 80075f2:	4643      	mov	r3, r8
 80075f4:	47b8      	blx	r7
 80075f6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80075fa:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80075fe:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007600:	4661      	mov	r1, ip
 8007602:	4798      	blx	r3
 8007604:	3501      	adds	r5, #1
 8007606:	e7bb      	b.n	8007580 <_FillRect+0x24>
 8007608:	980e      	ldr	r0, [sp, #56]	; 0x38
 800760a:	9000      	str	r0, [sp, #0]
 800760c:	1a85      	subs	r5, r0, r2
 800760e:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8007612:	4620      	mov	r0, r4
 8007614:	47b0      	blx	r6
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	6ea7      	ldr	r7, [r4, #104]	; 0x68
 800761a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761c:	f109 0901 	add.w	r9, r9, #1
 8007620:	f8d3 8000 	ldr.w	r8, [r3]
 8007624:	fb05 9509 	mla	r5, r5, r9, r9
 8007628:	2301      	movs	r3, #1
 800762a:	b195      	cbz	r5, 8007652 <_FillRect+0xf6>
 800762c:	2dfa      	cmp	r5, #250	; 0xfa
 800762e:	bf34      	ite	cc
 8007630:	462e      	movcc	r6, r5
 8007632:	26fa      	movcs	r6, #250	; 0xfa
 8007634:	b12b      	cbz	r3, 8007642 <_FillRect+0xe6>
 8007636:	4638      	mov	r0, r7
 8007638:	fa1f f188 	uxth.w	r1, r8
 800763c:	4632      	mov	r2, r6
 800763e:	f001 fa95 	bl	8008b6c <GUI__memset16>
 8007642:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8007646:	4638      	mov	r0, r7
 8007648:	4631      	mov	r1, r6
 800764a:	4798      	blx	r3
 800764c:	1bad      	subs	r5, r5, r6
 800764e:	2300      	movs	r3, #0
 8007650:	e7eb      	b.n	800762a <_FillRect+0xce>
 8007652:	b005      	add	sp, #20
 8007654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007658:	20000024 	.word	0x20000024

0800765c <_DrawBitmap>:
 800765c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007660:	b08d      	sub	sp, #52	; 0x34
 8007662:	6885      	ldr	r5, [r0, #8]
 8007664:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8007666:	9305      	str	r3, [sp, #20]
 8007668:	1e7b      	subs	r3, r7, #1
 800766a:	2b01      	cmp	r3, #1
 800766c:	9009      	str	r0, [sp, #36]	; 0x24
 800766e:	9108      	str	r1, [sp, #32]
 8007670:	920a      	str	r2, [sp, #40]	; 0x28
 8007672:	950b      	str	r5, [sp, #44]	; 0x2c
 8007674:	d903      	bls.n	800767e <_DrawBitmap+0x22>
 8007676:	2f04      	cmp	r7, #4
 8007678:	d001      	beq.n	800767e <_DrawBitmap+0x22>
 800767a:	2f08      	cmp	r7, #8
 800767c:	d106      	bne.n	800768c <_DrawBitmap+0x30>
 800767e:	4b8f      	ldr	r3, [pc, #572]	; (80078bc <_DrawBitmap+0x260>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	7c1b      	ldrb	r3, [r3, #16]
 8007684:	f003 0303 	and.w	r3, r3, #3
 8007688:	2b02      	cmp	r3, #2
 800768a:	d010      	beq.n	80076ae <_DrawBitmap+0x52>
 800768c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800768e:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8007690:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007692:	9908      	ldr	r1, [sp, #32]
 8007694:	9b05      	ldr	r3, [sp, #20]
 8007696:	443a      	add	r2, r7
 8007698:	4429      	add	r1, r5
 800769a:	3a01      	subs	r2, #1
 800769c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800769e:	9200      	str	r2, [sp, #0]
 80076a0:	440b      	add	r3, r1
 80076a2:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 80076a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076a8:	4628      	mov	r0, r5
 80076aa:	3b01      	subs	r3, #1
 80076ac:	47a0      	blx	r4
 80076ae:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80076b2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80076b4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80076b6:	ebc7 030b 	rsb	r3, r7, fp
 80076ba:	42ab      	cmp	r3, r5
 80076bc:	f280 8251 	bge.w	8007b62 <_DrawBitmap+0x506>
 80076c0:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80076c2:	1e7b      	subs	r3, r7, #1
 80076c4:	2b0f      	cmp	r3, #15
 80076c6:	f200 8245 	bhi.w	8007b54 <_DrawBitmap+0x4f8>
 80076ca:	e8df f013 	tbh	[pc, r3, lsl #1]
 80076ce:	0010      	.short	0x0010
 80076d0:	024300b7 	.word	0x024300b7
 80076d4:	02430140 	.word	0x02430140
 80076d8:	02430243 	.word	0x02430243
 80076dc:	024301d7 	.word	0x024301d7
 80076e0:	02430243 	.word	0x02430243
 80076e4:	02430243 	.word	0x02430243
 80076e8:	02430243 	.word	0x02430243
 80076ec:	023d      	.short	0x023d
 80076ee:	4b73      	ldr	r3, [pc, #460]	; (80078bc <_DrawBitmap+0x260>)
 80076f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68ac      	ldr	r4, [r5, #8]
 80076f6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80076f8:	7c1b      	ldrb	r3, [r3, #16]
 80076fa:	682f      	ldr	r7, [r5, #0]
 80076fc:	686d      	ldr	r5, [r5, #4]
 80076fe:	9507      	str	r5, [sp, #28]
 8007700:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007704:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007706:	f003 0303 	and.w	r3, r3, #3
 800770a:	2b02      	cmp	r3, #2
 800770c:	44aa      	add	sl, r5
 800770e:	d01b      	beq.n	8007748 <_DrawBitmap+0xec>
 8007710:	2b03      	cmp	r3, #3
 8007712:	d06e      	beq.n	80077f2 <_DrawBitmap+0x196>
 8007714:	2b01      	cmp	r3, #1
 8007716:	d06c      	beq.n	80077f2 <_DrawBitmap+0x196>
 8007718:	9e05      	ldr	r6, [sp, #20]
 800771a:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 800771e:	f898 1000 	ldrb.w	r1, [r8]
 8007722:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8007726:	2280      	movs	r2, #128	; 0x80
 8007728:	412a      	asrs	r2, r5
 800772a:	4211      	tst	r1, r2
 800772c:	bf16      	itet	ne
 800772e:	9907      	ldrne	r1, [sp, #28]
 8007730:	b2b8      	uxtheq	r0, r7
 8007732:	b288      	uxthne	r0, r1
 8007734:	3501      	adds	r5, #1
 8007736:	4798      	blx	r3
 8007738:	2d08      	cmp	r5, #8
 800773a:	bf04      	itt	eq
 800773c:	f108 0801 	addeq.w	r8, r8, #1
 8007740:	2500      	moveq	r5, #0
 8007742:	3e01      	subs	r6, #1
 8007744:	d1eb      	bne.n	800771e <_DrawBitmap+0xc2>
 8007746:	e205      	b.n	8007b54 <_DrawBitmap+0x4f8>
 8007748:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800774a:	9506      	str	r5, [sp, #24]
 800774c:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 8007750:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007754:	f8cd a00c 	str.w	sl, [sp, #12]
 8007758:	2500      	movs	r5, #0
 800775a:	4656      	mov	r6, sl
 800775c:	462b      	mov	r3, r5
 800775e:	9f06      	ldr	r7, [sp, #24]
 8007760:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8007764:	783a      	ldrb	r2, [r7, #0]
 8007766:	fa4c fc08 	asr.w	ip, ip, r8
 800776a:	ea12 0c0c 	ands.w	ip, r2, ip
 800776e:	d00b      	beq.n	8007788 <_DrawBitmap+0x12c>
 8007770:	b913      	cbnz	r3, 8007778 <_DrawBitmap+0x11c>
 8007772:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 8007776:	9603      	str	r6, [sp, #12]
 8007778:	9f07      	ldr	r7, [sp, #28]
 800777a:	f8a9 7000 	strh.w	r7, [r9]
 800777e:	3501      	adds	r5, #1
 8007780:	f109 0902 	add.w	r9, r9, #2
 8007784:	2301      	movs	r3, #1
 8007786:	e017      	b.n	80077b8 <_DrawBitmap+0x15c>
 8007788:	2b01      	cmp	r3, #1
 800778a:	d114      	bne.n	80077b6 <_DrawBitmap+0x15a>
 800778c:	f8cd b000 	str.w	fp, [sp]
 8007790:	f8cd c010 	str.w	ip, [sp, #16]
 8007794:	4620      	mov	r0, r4
 8007796:	9903      	ldr	r1, [sp, #12]
 8007798:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800779c:	465a      	mov	r2, fp
 800779e:	1e73      	subs	r3, r6, #1
 80077a0:	47b8      	blx	r7
 80077a2:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80077a6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80077a8:	4629      	mov	r1, r5
 80077aa:	4798      	blx	r3
 80077ac:	f8dd c010 	ldr.w	ip, [sp, #16]
 80077b0:	4665      	mov	r5, ip
 80077b2:	4663      	mov	r3, ip
 80077b4:	e000      	b.n	80077b8 <_DrawBitmap+0x15c>
 80077b6:	4663      	mov	r3, ip
 80077b8:	f108 0801 	add.w	r8, r8, #1
 80077bc:	f1b8 0f08 	cmp.w	r8, #8
 80077c0:	f106 0601 	add.w	r6, r6, #1
 80077c4:	d104      	bne.n	80077d0 <_DrawBitmap+0x174>
 80077c6:	9f06      	ldr	r7, [sp, #24]
 80077c8:	3701      	adds	r7, #1
 80077ca:	9706      	str	r7, [sp, #24]
 80077cc:	f04f 0800 	mov.w	r8, #0
 80077d0:	9a05      	ldr	r2, [sp, #20]
 80077d2:	4452      	add	r2, sl
 80077d4:	42b2      	cmp	r2, r6
 80077d6:	d1c2      	bne.n	800775e <_DrawBitmap+0x102>
 80077d8:	9f05      	ldr	r7, [sp, #20]
 80077da:	1e7b      	subs	r3, r7, #1
 80077dc:	4453      	add	r3, sl
 80077de:	2d00      	cmp	r5, #0
 80077e0:	f000 81b8 	beq.w	8007b54 <_DrawBitmap+0x4f8>
 80077e4:	f8cd b000 	str.w	fp, [sp]
 80077e8:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 80077ec:	9903      	ldr	r1, [sp, #12]
 80077ee:	4620      	mov	r0, r4
 80077f0:	e13d      	b.n	8007a6e <_DrawBitmap+0x412>
 80077f2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80077f6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80077f8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80077fa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80077fe:	782a      	ldrb	r2, [r5, #0]
 8007800:	2380      	movs	r3, #128	; 0x80
 8007802:	4133      	asrs	r3, r6
 8007804:	44d1      	add	r9, sl
 8007806:	421a      	tst	r2, r3
 8007808:	ebc8 0909 	rsb	r9, r8, r9
 800780c:	d00d      	beq.n	800782a <_DrawBitmap+0x1ce>
 800780e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8007812:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007814:	4649      	mov	r1, r9
 8007816:	465a      	mov	r2, fp
 8007818:	4798      	blx	r3
 800781a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800781c:	f8d4 70f0 	ldr.w	r7, [r4, #240]	; 0xf0
 8007820:	4043      	eors	r3, r0
 8007822:	4649      	mov	r1, r9
 8007824:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007826:	465a      	mov	r2, fp
 8007828:	47b8      	blx	r7
 800782a:	3601      	adds	r6, #1
 800782c:	2e08      	cmp	r6, #8
 800782e:	bf04      	itt	eq
 8007830:	3501      	addeq	r5, #1
 8007832:	2600      	moveq	r6, #0
 8007834:	f1b8 0801 	subs.w	r8, r8, #1
 8007838:	d1df      	bne.n	80077fa <_DrawBitmap+0x19e>
 800783a:	e18b      	b.n	8007b54 <_DrawBitmap+0x4f8>
 800783c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800783e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007840:	68ac      	ldr	r4, [r5, #8]
 8007842:	2f00      	cmp	r7, #0
 8007844:	f000 8186 	beq.w	8007b54 <_DrawBitmap+0x4f8>
 8007848:	4b1c      	ldr	r3, [pc, #112]	; (80078bc <_DrawBitmap+0x260>)
 800784a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f895 a000 	ldrb.w	sl, [r5]
 8007852:	7c1b      	ldrb	r3, [r3, #16]
 8007854:	f013 0303 	ands.w	r3, r3, #3
 8007858:	d011      	beq.n	800787e <_DrawBitmap+0x222>
 800785a:	2b02      	cmp	r3, #2
 800785c:	f040 817a 	bne.w	8007b54 <_DrawBitmap+0x4f8>
 8007860:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007862:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007866:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8007868:	9703      	str	r7, [sp, #12]
 800786a:	44a9      	add	r9, r5
 800786c:	46a8      	mov	r8, r5
 800786e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007870:	9507      	str	r5, [sp, #28]
 8007872:	2500      	movs	r5, #0
 8007874:	f8cd 9018 	str.w	r9, [sp, #24]
 8007878:	464e      	mov	r6, r9
 800787a:	462b      	mov	r3, r5
 800787c:	e040      	b.n	8007900 <_DrawBitmap+0x2a4>
 800787e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007880:	9e05      	ldr	r6, [sp, #20]
 8007882:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8007884:	f1c5 0303 	rsb	r3, r5, #3
 8007888:	005b      	lsls	r3, r3, #1
 800788a:	f1c3 0206 	rsb	r2, r3, #6
 800788e:	21c0      	movs	r1, #192	; 0xc0
 8007890:	fa41 f202 	asr.w	r2, r1, r2
 8007894:	ea02 020a 	and.w	r2, r2, sl
 8007898:	40da      	lsrs	r2, r3
 800789a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800789c:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80078a0:	f831 0022 	ldrh.w	r0, [r1, r2, lsl #2]
 80078a4:	3501      	adds	r5, #1
 80078a6:	4798      	blx	r3
 80078a8:	2d04      	cmp	r5, #4
 80078aa:	d103      	bne.n	80078b4 <_DrawBitmap+0x258>
 80078ac:	f897 a001 	ldrb.w	sl, [r7, #1]
 80078b0:	2500      	movs	r5, #0
 80078b2:	3701      	adds	r7, #1
 80078b4:	3e01      	subs	r6, #1
 80078b6:	d1e5      	bne.n	8007884 <_DrawBitmap+0x228>
 80078b8:	e14c      	b.n	8007b54 <_DrawBitmap+0x4f8>
 80078ba:	bf00      	nop
 80078bc:	20000024 	.word	0x20000024
 80078c0:	b913      	cbnz	r3, 80078c8 <_DrawBitmap+0x26c>
 80078c2:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 80078c4:	9703      	str	r7, [sp, #12]
 80078c6:	9606      	str	r6, [sp, #24]
 80078c8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80078ca:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 80078ce:	9f03      	ldr	r7, [sp, #12]
 80078d0:	803b      	strh	r3, [r7, #0]
 80078d2:	3702      	adds	r7, #2
 80078d4:	3501      	adds	r5, #1
 80078d6:	9703      	str	r7, [sp, #12]
 80078d8:	2301      	movs	r3, #1
 80078da:	f108 0801 	add.w	r8, r8, #1
 80078de:	f1b8 0f04 	cmp.w	r8, #4
 80078e2:	f106 0601 	add.w	r6, r6, #1
 80078e6:	d106      	bne.n	80078f6 <_DrawBitmap+0x29a>
 80078e8:	9f07      	ldr	r7, [sp, #28]
 80078ea:	f897 a001 	ldrb.w	sl, [r7, #1]
 80078ee:	3701      	adds	r7, #1
 80078f0:	9707      	str	r7, [sp, #28]
 80078f2:	f04f 0800 	mov.w	r8, #0
 80078f6:	9a05      	ldr	r2, [sp, #20]
 80078f8:	444a      	add	r2, r9
 80078fa:	42b2      	cmp	r2, r6
 80078fc:	f000 80ac 	beq.w	8007a58 <_DrawBitmap+0x3fc>
 8007900:	f1c8 0203 	rsb	r2, r8, #3
 8007904:	0052      	lsls	r2, r2, #1
 8007906:	f1c2 0106 	rsb	r1, r2, #6
 800790a:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 800790e:	fa4c fc01 	asr.w	ip, ip, r1
 8007912:	ea0c 0c0a 	and.w	ip, ip, sl
 8007916:	fa3c fc02 	lsrs.w	ip, ip, r2
 800791a:	d1d1      	bne.n	80078c0 <_DrawBitmap+0x264>
 800791c:	2b01      	cmp	r3, #1
 800791e:	d114      	bne.n	800794a <_DrawBitmap+0x2ee>
 8007920:	f8cd b000 	str.w	fp, [sp]
 8007924:	f8cd c010 	str.w	ip, [sp, #16]
 8007928:	4620      	mov	r0, r4
 800792a:	9906      	ldr	r1, [sp, #24]
 800792c:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8007930:	465a      	mov	r2, fp
 8007932:	1e73      	subs	r3, r6, #1
 8007934:	47b8      	blx	r7
 8007936:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800793a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800793c:	4629      	mov	r1, r5
 800793e:	4798      	blx	r3
 8007940:	f8dd c010 	ldr.w	ip, [sp, #16]
 8007944:	4665      	mov	r5, ip
 8007946:	4663      	mov	r3, ip
 8007948:	e7c7      	b.n	80078da <_DrawBitmap+0x27e>
 800794a:	4663      	mov	r3, ip
 800794c:	e7c5      	b.n	80078da <_DrawBitmap+0x27e>
 800794e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007950:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007952:	68ac      	ldr	r4, [r5, #8]
 8007954:	2f00      	cmp	r7, #0
 8007956:	f000 80fd 	beq.w	8007b54 <_DrawBitmap+0x4f8>
 800795a:	4b83      	ldr	r3, [pc, #524]	; (8007b68 <_DrawBitmap+0x50c>)
 800795c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f895 a000 	ldrb.w	sl, [r5]
 8007964:	7c1b      	ldrb	r3, [r3, #16]
 8007966:	f013 0303 	ands.w	r3, r3, #3
 800796a:	d011      	beq.n	8007990 <_DrawBitmap+0x334>
 800796c:	2b02      	cmp	r3, #2
 800796e:	f040 80f1 	bne.w	8007b54 <_DrawBitmap+0x4f8>
 8007972:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007974:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007978:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800797a:	9703      	str	r7, [sp, #12]
 800797c:	44a9      	add	r9, r5
 800797e:	46a8      	mov	r8, r5
 8007980:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007982:	9507      	str	r5, [sp, #28]
 8007984:	2500      	movs	r5, #0
 8007986:	f8cd 9018 	str.w	r9, [sp, #24]
 800798a:	464e      	mov	r6, r9
 800798c:	462b      	mov	r3, r5
 800798e:	e03c      	b.n	8007a0a <_DrawBitmap+0x3ae>
 8007990:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007992:	9e05      	ldr	r6, [sp, #20]
 8007994:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8007996:	f1c5 0301 	rsb	r3, r5, #1
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	f1c3 0204 	rsb	r2, r3, #4
 80079a0:	21f0      	movs	r1, #240	; 0xf0
 80079a2:	fa41 f202 	asr.w	r2, r1, r2
 80079a6:	ea02 020a 	and.w	r2, r2, sl
 80079aa:	40da      	lsrs	r2, r3
 80079ac:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80079ae:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80079b2:	f831 0022 	ldrh.w	r0, [r1, r2, lsl #2]
 80079b6:	3501      	adds	r5, #1
 80079b8:	4798      	blx	r3
 80079ba:	2d02      	cmp	r5, #2
 80079bc:	d103      	bne.n	80079c6 <_DrawBitmap+0x36a>
 80079be:	f897 a001 	ldrb.w	sl, [r7, #1]
 80079c2:	2500      	movs	r5, #0
 80079c4:	3701      	adds	r7, #1
 80079c6:	3e01      	subs	r6, #1
 80079c8:	d1e5      	bne.n	8007996 <_DrawBitmap+0x33a>
 80079ca:	e0c3      	b.n	8007b54 <_DrawBitmap+0x4f8>
 80079cc:	b913      	cbnz	r3, 80079d4 <_DrawBitmap+0x378>
 80079ce:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 80079d0:	9703      	str	r7, [sp, #12]
 80079d2:	9606      	str	r6, [sp, #24]
 80079d4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80079d6:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 80079da:	9f03      	ldr	r7, [sp, #12]
 80079dc:	803b      	strh	r3, [r7, #0]
 80079de:	3702      	adds	r7, #2
 80079e0:	3501      	adds	r5, #1
 80079e2:	9703      	str	r7, [sp, #12]
 80079e4:	2301      	movs	r3, #1
 80079e6:	f108 0801 	add.w	r8, r8, #1
 80079ea:	f1b8 0f02 	cmp.w	r8, #2
 80079ee:	f106 0601 	add.w	r6, r6, #1
 80079f2:	d106      	bne.n	8007a02 <_DrawBitmap+0x3a6>
 80079f4:	9f07      	ldr	r7, [sp, #28]
 80079f6:	f897 a001 	ldrb.w	sl, [r7, #1]
 80079fa:	3701      	adds	r7, #1
 80079fc:	9707      	str	r7, [sp, #28]
 80079fe:	f04f 0800 	mov.w	r8, #0
 8007a02:	9a05      	ldr	r2, [sp, #20]
 8007a04:	444a      	add	r2, r9
 8007a06:	42b2      	cmp	r2, r6
 8007a08:	d026      	beq.n	8007a58 <_DrawBitmap+0x3fc>
 8007a0a:	f1c8 0201 	rsb	r2, r8, #1
 8007a0e:	0092      	lsls	r2, r2, #2
 8007a10:	f1c2 0104 	rsb	r1, r2, #4
 8007a14:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8007a18:	fa4c fc01 	asr.w	ip, ip, r1
 8007a1c:	ea0c 0c0a 	and.w	ip, ip, sl
 8007a20:	fa3c fc02 	lsrs.w	ip, ip, r2
 8007a24:	d1d2      	bne.n	80079cc <_DrawBitmap+0x370>
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d114      	bne.n	8007a54 <_DrawBitmap+0x3f8>
 8007a2a:	f8cd b000 	str.w	fp, [sp]
 8007a2e:	f8cd c010 	str.w	ip, [sp, #16]
 8007a32:	4620      	mov	r0, r4
 8007a34:	9906      	ldr	r1, [sp, #24]
 8007a36:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8007a3a:	465a      	mov	r2, fp
 8007a3c:	1e73      	subs	r3, r6, #1
 8007a3e:	47b8      	blx	r7
 8007a40:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8007a44:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007a46:	4629      	mov	r1, r5
 8007a48:	4798      	blx	r3
 8007a4a:	f8dd c010 	ldr.w	ip, [sp, #16]
 8007a4e:	4665      	mov	r5, ip
 8007a50:	4663      	mov	r3, ip
 8007a52:	e7c8      	b.n	80079e6 <_DrawBitmap+0x38a>
 8007a54:	4663      	mov	r3, ip
 8007a56:	e7c6      	b.n	80079e6 <_DrawBitmap+0x38a>
 8007a58:	9f05      	ldr	r7, [sp, #20]
 8007a5a:	1e7b      	subs	r3, r7, #1
 8007a5c:	444b      	add	r3, r9
 8007a5e:	2d00      	cmp	r5, #0
 8007a60:	d078      	beq.n	8007b54 <_DrawBitmap+0x4f8>
 8007a62:	f8cd b000 	str.w	fp, [sp]
 8007a66:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8007a6a:	9906      	ldr	r1, [sp, #24]
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	465a      	mov	r2, fp
 8007a70:	47b0      	blx	r6
 8007a72:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8007a76:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007a78:	4629      	mov	r1, r5
 8007a7a:	e06a      	b.n	8007b52 <_DrawBitmap+0x4f6>
 8007a7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007a7e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007a80:	68ac      	ldr	r4, [r5, #8]
 8007a82:	2f00      	cmp	r7, #0
 8007a84:	d066      	beq.n	8007b54 <_DrawBitmap+0x4f8>
 8007a86:	4b38      	ldr	r3, [pc, #224]	; (8007b68 <_DrawBitmap+0x50c>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	7c1b      	ldrb	r3, [r3, #16]
 8007a8c:	f013 0303 	ands.w	r3, r3, #3
 8007a90:	d009      	beq.n	8007aa6 <_DrawBitmap+0x44a>
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d15e      	bne.n	8007b54 <_DrawBitmap+0x4f8>
 8007a96:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a9a:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 8007a9e:	2600      	movs	r6, #0
 8007aa0:	464f      	mov	r7, r9
 8007aa2:	4633      	mov	r3, r6
 8007aa4:	e022      	b.n	8007aec <_DrawBitmap+0x490>
 8007aa6:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007aa8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007aaa:	9f05      	ldr	r7, [sp, #20]
 8007aac:	443b      	add	r3, r7
 8007aae:	1b5b      	subs	r3, r3, r5
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	dd4f      	ble.n	8007b54 <_DrawBitmap+0x4f8>
 8007ab4:	f815 2b01 	ldrb.w	r2, [r5], #1
 8007ab8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007aba:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8007abe:	f837 0022 	ldrh.w	r0, [r7, r2, lsl #2]
 8007ac2:	4798      	blx	r3
 8007ac4:	e7f0      	b.n	8007aa8 <_DrawBitmap+0x44c>
 8007ac6:	b913      	cbnz	r3, 8007ace <_DrawBitmap+0x472>
 8007ac8:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 8007acc:	46b9      	mov	r9, r7
 8007ace:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007ad0:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 8007ad4:	f8a8 3000 	strh.w	r3, [r8]
 8007ad8:	3601      	adds	r6, #1
 8007ada:	f108 0802 	add.w	r8, r8, #2
 8007ade:	2301      	movs	r3, #1
 8007ae0:	9a08      	ldr	r2, [sp, #32]
 8007ae2:	9d05      	ldr	r5, [sp, #20]
 8007ae4:	3701      	adds	r7, #1
 8007ae6:	442a      	add	r2, r5
 8007ae8:	42ba      	cmp	r2, r7
 8007aea:	d01c      	beq.n	8007b26 <_DrawBitmap+0x4ca>
 8007aec:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007aee:	9808      	ldr	r0, [sp, #32]
 8007af0:	1a2a      	subs	r2, r5, r0
 8007af2:	f812 a007 	ldrb.w	sl, [r2, r7]
 8007af6:	f1ba 0f00 	cmp.w	sl, #0
 8007afa:	d1e4      	bne.n	8007ac6 <_DrawBitmap+0x46a>
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d110      	bne.n	8007b22 <_DrawBitmap+0x4c6>
 8007b00:	f8cd b000 	str.w	fp, [sp]
 8007b04:	4620      	mov	r0, r4
 8007b06:	4649      	mov	r1, r9
 8007b08:	465a      	mov	r2, fp
 8007b0a:	1e7b      	subs	r3, r7, #1
 8007b0c:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 8007b10:	47a8      	blx	r5
 8007b12:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8007b16:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007b18:	4631      	mov	r1, r6
 8007b1a:	4798      	blx	r3
 8007b1c:	4656      	mov	r6, sl
 8007b1e:	4653      	mov	r3, sl
 8007b20:	e7de      	b.n	8007ae0 <_DrawBitmap+0x484>
 8007b22:	4653      	mov	r3, sl
 8007b24:	e7dc      	b.n	8007ae0 <_DrawBitmap+0x484>
 8007b26:	9f08      	ldr	r7, [sp, #32]
 8007b28:	1e6b      	subs	r3, r5, #1
 8007b2a:	443b      	add	r3, r7
 8007b2c:	b196      	cbz	r6, 8007b54 <_DrawBitmap+0x4f8>
 8007b2e:	f8cd b000 	str.w	fp, [sp]
 8007b32:	4620      	mov	r0, r4
 8007b34:	4649      	mov	r1, r9
 8007b36:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 8007b3a:	465a      	mov	r2, fp
 8007b3c:	47a8      	blx	r5
 8007b3e:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8007b42:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007b44:	4631      	mov	r1, r6
 8007b46:	e004      	b.n	8007b52 <_DrawBitmap+0x4f6>
 8007b48:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007b4a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007b4c:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
 8007b50:	9905      	ldr	r1, [sp, #20]
 8007b52:	4798      	blx	r3
 8007b54:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8007b56:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8007b58:	442f      	add	r7, r5
 8007b5a:	9719      	str	r7, [sp, #100]	; 0x64
 8007b5c:	f10b 0b01 	add.w	fp, fp, #1
 8007b60:	e5a7      	b.n	80076b2 <_DrawBitmap+0x56>
 8007b62:	b00d      	add	sp, #52	; 0x34
 8007b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b68:	20000024 	.word	0x20000024

08007b6c <GUIDRV_FlexColor_SetMode16bppC0B16>:
 8007b6c:	b510      	push	{r4, lr}
 8007b6e:	4604      	mov	r4, r0
 8007b70:	f000 fa58 	bl	8008024 <GUIDRV_FlexColor__InitOnce>
 8007b74:	68a4      	ldr	r4, [r4, #8]
 8007b76:	4b10      	ldr	r3, [pc, #64]	; (8007bb8 <GUIDRV_FlexColor_SetMode16bppC0B16+0x4c>)
 8007b78:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8007b7c:	4b0f      	ldr	r3, [pc, #60]	; (8007bbc <GUIDRV_FlexColor_SetMode16bppC0B16+0x50>)
 8007b7e:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8007b82:	4b0f      	ldr	r3, [pc, #60]	; (8007bc0 <GUIDRV_FlexColor_SetMode16bppC0B16+0x54>)
 8007b84:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8007b88:	4b0e      	ldr	r3, [pc, #56]	; (8007bc4 <GUIDRV_FlexColor_SetMode16bppC0B16+0x58>)
 8007b8a:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 8007b8e:	4b0e      	ldr	r3, [pc, #56]	; (8007bc8 <GUIDRV_FlexColor_SetMode16bppC0B16+0x5c>)
 8007b90:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8007b94:	4b0d      	ldr	r3, [pc, #52]	; (8007bcc <GUIDRV_FlexColor_SetMode16bppC0B16+0x60>)
 8007b96:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8007b9a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8007b9e:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8007ba8:	2110      	movs	r1, #16
 8007baa:	4798      	blx	r3
 8007bac:	2310      	movs	r3, #16
 8007bae:	63a3      	str	r3, [r4, #56]	; 0x38
 8007bb0:	4b07      	ldr	r3, [pc, #28]	; (8007bd0 <GUIDRV_FlexColor_SetMode16bppC0B16+0x64>)
 8007bb2:	6463      	str	r3, [r4, #68]	; 0x44
 8007bb4:	bd10      	pop	{r4, pc}
 8007bb6:	bf00      	nop
 8007bb8:	0800765d 	.word	0x0800765d
 8007bbc:	0800755d 	.word	0x0800755d
 8007bc0:	08007f73 	.word	0x08007f73
 8007bc4:	08007ee3 	.word	0x08007ee3
 8007bc8:	08007545 	.word	0x08007545
 8007bcc:	0800754f 	.word	0x0800754f
 8007bd0:	08012eb8 	.word	0x08012eb8

08007bd4 <_Log2PhysX_X0Y0S0>:
 8007bd4:	4608      	mov	r0, r1
 8007bd6:	4770      	bx	lr

08007bd8 <_Log2PhysX_X1Y0S0>:
 8007bd8:	6800      	ldr	r0, [r0, #0]
 8007bda:	1a40      	subs	r0, r0, r1
 8007bdc:	3801      	subs	r0, #1
 8007bde:	4770      	bx	lr

08007be0 <_Log2PhysX_X0Y1S0>:
 8007be0:	4608      	mov	r0, r1
 8007be2:	4770      	bx	lr

08007be4 <_Log2PhysX_X1Y1S0>:
 8007be4:	6800      	ldr	r0, [r0, #0]
 8007be6:	1a40      	subs	r0, r0, r1
 8007be8:	3801      	subs	r0, #1
 8007bea:	4770      	bx	lr

08007bec <_Log2PhysX_X0Y0S1>:
 8007bec:	4610      	mov	r0, r2
 8007bee:	4770      	bx	lr

08007bf0 <_Log2PhysX_X1Y0S1>:
 8007bf0:	6840      	ldr	r0, [r0, #4]
 8007bf2:	1a80      	subs	r0, r0, r2
 8007bf4:	3801      	subs	r0, #1
 8007bf6:	4770      	bx	lr

08007bf8 <_Log2PhysX_X0Y1S1>:
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	4770      	bx	lr

08007bfc <_Log2PhysX_X1Y1S1>:
 8007bfc:	6840      	ldr	r0, [r0, #4]
 8007bfe:	1a80      	subs	r0, r0, r2
 8007c00:	3801      	subs	r0, #1
 8007c02:	4770      	bx	lr

08007c04 <_Log2PhysY_X0Y0S0>:
 8007c04:	4610      	mov	r0, r2
 8007c06:	4770      	bx	lr

08007c08 <_Log2PhysY_X1Y0S0>:
 8007c08:	4610      	mov	r0, r2
 8007c0a:	4770      	bx	lr

08007c0c <_Log2PhysY_X0Y1S0>:
 8007c0c:	6840      	ldr	r0, [r0, #4]
 8007c0e:	1a80      	subs	r0, r0, r2
 8007c10:	3801      	subs	r0, #1
 8007c12:	4770      	bx	lr

08007c14 <_Log2PhysY_X1Y1S0>:
 8007c14:	6840      	ldr	r0, [r0, #4]
 8007c16:	1a80      	subs	r0, r0, r2
 8007c18:	3801      	subs	r0, #1
 8007c1a:	4770      	bx	lr

08007c1c <_Log2PhysY_X0Y0S1>:
 8007c1c:	4608      	mov	r0, r1
 8007c1e:	4770      	bx	lr

08007c20 <_Log2PhysY_X1Y0S1>:
 8007c20:	4608      	mov	r0, r1
 8007c22:	4770      	bx	lr

08007c24 <_Log2PhysY_X0Y1S1>:
 8007c24:	6800      	ldr	r0, [r0, #0]
 8007c26:	1a40      	subs	r0, r0, r1
 8007c28:	3801      	subs	r0, #1
 8007c2a:	4770      	bx	lr

08007c2c <_Log2PhysY_X1Y1S1>:
 8007c2c:	6800      	ldr	r0, [r0, #0]
 8007c2e:	1a40      	subs	r0, r0, r1
 8007c30:	3801      	subs	r0, #1
 8007c32:	4770      	bx	lr

08007c34 <_SetPixelIndex>:
 8007c34:	b510      	push	{r4, lr}
 8007c36:	6884      	ldr	r4, [r0, #8]
 8007c38:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 8007c3c:	47a0      	blx	r4
 8007c3e:	bd10      	pop	{r4, pc}

08007c40 <_GetPixelIndex>:
 8007c40:	b508      	push	{r3, lr}
 8007c42:	6883      	ldr	r3, [r0, #8]
 8007c44:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8007c48:	4798      	blx	r3
 8007c4a:	bd08      	pop	{r3, pc}

08007c4c <_XorPixel>:
 8007c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c4e:	4604      	mov	r4, r0
 8007c50:	460f      	mov	r7, r1
 8007c52:	4616      	mov	r6, r2
 8007c54:	6885      	ldr	r5, [r0, #8]
 8007c56:	f7ff fff3 	bl	8007c40 <_GetPixelIndex>
 8007c5a:	9001      	str	r0, [sp, #4]
 8007c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007c60:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007c62:	4620      	mov	r0, r4
 8007c64:	4639      	mov	r1, r7
 8007c66:	4632      	mov	r2, r6
 8007c68:	ea8e 0303 	eor.w	r3, lr, r3
 8007c6c:	f7ff ffe2 	bl	8007c34 <_SetPixelIndex>
 8007c70:	b003      	add	sp, #12
 8007c72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c74 <_DrawHLine>:
 8007c74:	b513      	push	{r0, r1, r4, lr}
 8007c76:	6884      	ldr	r4, [r0, #8]
 8007c78:	9200      	str	r2, [sp, #0]
 8007c7a:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 8007c7e:	47a0      	blx	r4
 8007c80:	b002      	add	sp, #8
 8007c82:	bd10      	pop	{r4, pc}

08007c84 <_DrawVLine>:
 8007c84:	b513      	push	{r0, r1, r4, lr}
 8007c86:	6884      	ldr	r4, [r0, #8]
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 8007c8e:	460b      	mov	r3, r1
 8007c90:	47a0      	blx	r4
 8007c92:	b002      	add	sp, #8
 8007c94:	bd10      	pop	{r4, pc}

08007c96 <_FillRect>:
 8007c96:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c98:	9c06      	ldr	r4, [sp, #24]
 8007c9a:	6885      	ldr	r5, [r0, #8]
 8007c9c:	9400      	str	r4, [sp, #0]
 8007c9e:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 8007ca2:	47a0      	blx	r4
 8007ca4:	b003      	add	sp, #12
 8007ca6:	bd30      	pop	{r4, r5, pc}

08007ca8 <_DrawBitmap>:
 8007ca8:	b530      	push	{r4, r5, lr}
 8007caa:	b087      	sub	sp, #28
 8007cac:	6885      	ldr	r5, [r0, #8]
 8007cae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007cb0:	9400      	str	r4, [sp, #0]
 8007cb2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007cb4:	9401      	str	r4, [sp, #4]
 8007cb6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007cb8:	9402      	str	r4, [sp, #8]
 8007cba:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007cbc:	9403      	str	r4, [sp, #12]
 8007cbe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007cc0:	9404      	str	r4, [sp, #16]
 8007cc2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007cc4:	9405      	str	r4, [sp, #20]
 8007cc6:	f8d5 40e4 	ldr.w	r4, [r5, #228]	; 0xe4
 8007cca:	47a0      	blx	r4
 8007ccc:	b007      	add	sp, #28
 8007cce:	bd30      	pop	{r4, r5, pc}

08007cd0 <_GetDevFunc_SetRect>:
 8007cd0:	4770      	bx	lr
	...

08007cd4 <_GetDevFunc_SetRectOutside>:
 8007cd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007cd6:	9e07      	ldr	r6, [sp, #28]
 8007cd8:	6884      	ldr	r4, [r0, #8]
 8007cda:	4d0c      	ldr	r5, [pc, #48]	; (8007d0c <_GetDevFunc_SetRectOutside+0x38>)
 8007cdc:	b176      	cbz	r6, 8007cfc <_GetDevFunc_SetRectOutside+0x28>
 8007cde:	6828      	ldr	r0, [r5, #0]
 8007ce0:	b988      	cbnz	r0, 8007d06 <_GetDevFunc_SetRectOutside+0x32>
 8007ce2:	9806      	ldr	r0, [sp, #24]
 8007ce4:	9000      	str	r0, [sp, #0]
 8007ce6:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8007cea:	4620      	mov	r0, r4
 8007cec:	47b0      	blx	r6
 8007cee:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8007cf2:	602b      	str	r3, [r5, #0]
 8007cf4:	4b06      	ldr	r3, [pc, #24]	; (8007d10 <_GetDevFunc_SetRectOutside+0x3c>)
 8007cf6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8007cfa:	e004      	b.n	8007d06 <_GetDevFunc_SetRectOutside+0x32>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	b113      	cbz	r3, 8007d06 <_GetDevFunc_SetRectOutside+0x32>
 8007d00:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8007d04:	602e      	str	r6, [r5, #0]
 8007d06:	b002      	add	sp, #8
 8007d08:	bd70      	pop	{r4, r5, r6, pc}
 8007d0a:	bf00      	nop
 8007d0c:	200190f8 	.word	0x200190f8
 8007d10:	08007cd1 	.word	0x08007cd1

08007d14 <_ReadPixelCust_16bpp>:
 8007d14:	b508      	push	{r3, lr}
 8007d16:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007d18:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 8007d1c:	6990      	ldr	r0, [r2, #24]
 8007d1e:	4798      	blx	r3
 8007d20:	bd08      	pop	{r3, pc}

08007d22 <_ReadPixelCust_18bpp>:
 8007d22:	b508      	push	{r3, lr}
 8007d24:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007d26:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8007d2a:	6990      	ldr	r0, [r2, #24]
 8007d2c:	4798      	blx	r3
 8007d2e:	bd08      	pop	{r3, pc}

08007d30 <_ReadRectCust_16bpp>:
 8007d30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d34:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007d36:	6884      	ldr	r4, [r0, #8]
 8007d38:	9500      	str	r5, [sp, #0]
 8007d3a:	4617      	mov	r7, r2
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8007d42:	4699      	mov	r9, r3
 8007d44:	4688      	mov	r8, r1
 8007d46:	1bed      	subs	r5, r5, r7
 8007d48:	47b0      	blx	r6
 8007d4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007d4c:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8007d50:	6988      	ldr	r0, [r1, #24]
 8007d52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d54:	ebc8 0809 	rsb	r8, r8, r9
 8007d58:	1c6a      	adds	r2, r5, #1
 8007d5a:	fb08 2202 	mla	r2, r8, r2, r2
 8007d5e:	4798      	blx	r3
 8007d60:	b003      	add	sp, #12
 8007d62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007d66 <_ReadRectCust_18bpp>:
 8007d66:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d6a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007d6c:	6884      	ldr	r4, [r0, #8]
 8007d6e:	9500      	str	r5, [sp, #0]
 8007d70:	4617      	mov	r7, r2
 8007d72:	4620      	mov	r0, r4
 8007d74:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8007d78:	4699      	mov	r9, r3
 8007d7a:	4688      	mov	r8, r1
 8007d7c:	1bed      	subs	r5, r5, r7
 8007d7e:	47b0      	blx	r6
 8007d80:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007d82:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8007d86:	6988      	ldr	r0, [r1, #24]
 8007d88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d8a:	ebc8 0809 	rsb	r8, r8, r9
 8007d8e:	1c6a      	adds	r2, r5, #1
 8007d90:	fb08 2202 	mla	r2, r8, r2, r2
 8007d94:	4798      	blx	r3
 8007d96:	b003      	add	sp, #12
 8007d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007d9c <_GetDevFunc>:
 8007d9c:	3901      	subs	r1, #1
 8007d9e:	2917      	cmp	r1, #23
 8007da0:	d824      	bhi.n	8007dec <_GetDevFunc+0x50>
 8007da2:	e8df f001 	tbb	[pc, r1]
 8007da6:	2310      	.short	0x2310
 8007da8:	23232323 	.word	0x23232323
 8007dac:	0c232323 	.word	0x0c232323
 8007db0:	23150e25 	.word	0x23150e25
 8007db4:	23232323 	.word	0x23232323
 8007db8:	1f232323 	.word	0x1f232323
 8007dbc:	211a      	.short	0x211a
 8007dbe:	480d      	ldr	r0, [pc, #52]	; (8007df4 <_GetDevFunc+0x58>)
 8007dc0:	4770      	bx	lr
 8007dc2:	480d      	ldr	r0, [pc, #52]	; (8007df8 <_GetDevFunc+0x5c>)
 8007dc4:	4770      	bx	lr
 8007dc6:	6803      	ldr	r3, [r0, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 8007dce:	4770      	bx	lr
 8007dd0:	6803      	ldr	r3, [r0, #0]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 8007dd8:	4770      	bx	lr
 8007dda:	6803      	ldr	r3, [r0, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8007de2:	4770      	bx	lr
 8007de4:	4805      	ldr	r0, [pc, #20]	; (8007dfc <_GetDevFunc+0x60>)
 8007de6:	4770      	bx	lr
 8007de8:	4805      	ldr	r0, [pc, #20]	; (8007e00 <_GetDevFunc+0x64>)
 8007dea:	4770      	bx	lr
 8007dec:	2000      	movs	r0, #0
 8007dee:	4770      	bx	lr
 8007df0:	4804      	ldr	r0, [pc, #16]	; (8007e04 <_GetDevFunc+0x68>)
 8007df2:	4770      	bx	lr
 8007df4:	08008153 	.word	0x08008153
 8007df8:	080080f5 	.word	0x080080f5
 8007dfc:	08008059 	.word	0x08008059
 8007e00:	08007cd5 	.word	0x08007cd5
 8007e04:	0800813f 	.word	0x0800813f

08007e08 <_GetDevProp>:
 8007e08:	3901      	subs	r1, #1
 8007e0a:	6880      	ldr	r0, [r0, #8]
 8007e0c:	290d      	cmp	r1, #13
 8007e0e:	d823      	bhi.n	8007e58 <_GetDevProp+0x50>
 8007e10:	e8df f001 	tbb	[pc, r1]
 8007e14:	0f0d0b09 	.word	0x0f0d0b09
 8007e18:	11222222 	.word	0x11222222
 8007e1c:	13252507 	.word	0x13252507
 8007e20:	1d18      	.short	0x1d18
 8007e22:	2000      	movs	r0, #0
 8007e24:	4770      	bx	lr
 8007e26:	6800      	ldr	r0, [r0, #0]
 8007e28:	4770      	bx	lr
 8007e2a:	6840      	ldr	r0, [r0, #4]
 8007e2c:	4770      	bx	lr
 8007e2e:	6880      	ldr	r0, [r0, #8]
 8007e30:	4770      	bx	lr
 8007e32:	68c0      	ldr	r0, [r0, #12]
 8007e34:	4770      	bx	lr
 8007e36:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8007e38:	4770      	bx	lr
 8007e3a:	b188      	cbz	r0, 8007e60 <_GetDevProp+0x58>
 8007e3c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007e3e:	f000 0001 	and.w	r0, r0, #1
 8007e42:	4770      	bx	lr
 8007e44:	b160      	cbz	r0, 8007e60 <_GetDevProp+0x58>
 8007e46:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007e48:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8007e4c:	4770      	bx	lr
 8007e4e:	b138      	cbz	r0, 8007e60 <_GetDevProp+0x58>
 8007e50:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007e52:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8007e56:	4770      	bx	lr
 8007e58:	f04f 30ff 	mov.w	r0, #4294967295
 8007e5c:	4770      	bx	lr
 8007e5e:	2001      	movs	r0, #1
 8007e60:	4770      	bx	lr

08007e62 <_GetDevData>:
 8007e62:	6883      	ldr	r3, [r0, #8]
 8007e64:	2901      	cmp	r1, #1
 8007e66:	bf0c      	ite	eq
 8007e68:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 8007e6a:	2000      	movne	r0, #0
 8007e6c:	4770      	bx	lr

08007e6e <_GetRect>:
 8007e6e:	6883      	ldr	r3, [r0, #8]
 8007e70:	2200      	movs	r2, #0
 8007e72:	800a      	strh	r2, [r1, #0]
 8007e74:	804a      	strh	r2, [r1, #2]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	3a01      	subs	r2, #1
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	808a      	strh	r2, [r1, #4]
 8007e80:	80cb      	strh	r3, [r1, #6]
 8007e82:	4770      	bx	lr

08007e84 <GUIDRV_FlexColor__SetLog2Phys>:
 8007e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e86:	4d10      	ldr	r5, [pc, #64]	; (8007ec8 <GUIDRV_FlexColor__SetLog2Phys+0x44>)
 8007e88:	462e      	mov	r6, r5
 8007e8a:	4607      	mov	r7, r0
 8007e8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007e8e:	b091      	sub	sp, #68	; 0x44
 8007e90:	466c      	mov	r4, sp
 8007e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e94:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8007e98:	3520      	adds	r5, #32
 8007e9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007e9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ea0:	ac08      	add	r4, sp, #32
 8007ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ea4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007ea8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eae:	aa10      	add	r2, sp, #64	; 0x40
 8007eb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007eb4:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8007eb8:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8007ebc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007ec0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ec4:	b011      	add	sp, #68	; 0x44
 8007ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ec8:	0800f510 	.word	0x0800f510

08007ecc <_SetOrg>:
 8007ecc:	b507      	push	{r0, r1, r2, lr}
 8007ece:	6980      	ldr	r0, [r0, #24]
 8007ed0:	e88d 0006 	stmia.w	sp, {r1, r2}
 8007ed4:	2103      	movs	r1, #3
 8007ed6:	466a      	mov	r2, sp
 8007ed8:	f7fb fe26 	bl	8003b28 <LCD_X_DisplayDriver>
 8007edc:	b003      	add	sp, #12
 8007ede:	f85d fb04 	ldr.w	pc, [sp], #4

08007ee2 <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 8007ee2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ee6:	6884      	ldr	r4, [r0, #8]
 8007ee8:	4698      	mov	r8, r3
 8007eea:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007eec:	079b      	lsls	r3, r3, #30
 8007eee:	4689      	mov	r9, r1
 8007ef0:	4617      	mov	r7, r2
 8007ef2:	d532      	bpl.n	8007f5a <GUIDRV_FlexColor__SetPixelIndexNoCache+0x78>
 8007ef4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007ef8:	4620      	mov	r0, r4
 8007efa:	4798      	blx	r3
 8007efc:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 8007f00:	4606      	mov	r6, r0
 8007f02:	463a      	mov	r2, r7
 8007f04:	4620      	mov	r0, r4
 8007f06:	4649      	mov	r1, r9
 8007f08:	47a8      	blx	r5
 8007f0a:	6923      	ldr	r3, [r4, #16]
 8007f0c:	69a2      	ldr	r2, [r4, #24]
 8007f0e:	429e      	cmp	r6, r3
 8007f10:	bfac      	ite	ge
 8007f12:	2300      	movge	r3, #0
 8007f14:	2301      	movlt	r3, #1
 8007f16:	4296      	cmp	r6, r2
 8007f18:	bfd4      	ite	le
 8007f1a:	461a      	movle	r2, r3
 8007f1c:	f043 0201 	orrgt.w	r2, r3, #1
 8007f20:	6963      	ldr	r3, [r4, #20]
 8007f22:	4298      	cmp	r0, r3
 8007f24:	bfac      	ite	ge
 8007f26:	4613      	movge	r3, r2
 8007f28:	f042 0301 	orrlt.w	r3, r2, #1
 8007f2c:	4605      	mov	r5, r0
 8007f2e:	b913      	cbnz	r3, 8007f36 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x54>
 8007f30:	69e3      	ldr	r3, [r4, #28]
 8007f32:	4298      	cmp	r0, r3
 8007f34:	dd0a      	ble.n	8007f4c <GUIDRV_FlexColor__SetPixelIndexNoCache+0x6a>
 8007f36:	6862      	ldr	r2, [r4, #4]
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	3a01      	subs	r2, #1
 8007f3c:	9200      	str	r2, [sp, #0]
 8007f3e:	2100      	movs	r1, #0
 8007f40:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8007f44:	4620      	mov	r0, r4
 8007f46:	460a      	mov	r2, r1
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	47b8      	blx	r7
 8007f4c:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
 8007f50:	4620      	mov	r0, r4
 8007f52:	4631      	mov	r1, r6
 8007f54:	462a      	mov	r2, r5
 8007f56:	47b8      	blx	r7
 8007f58:	e003      	b.n	8007f62 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x80>
 8007f5a:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 8007f5e:	4620      	mov	r0, r4
 8007f60:	47a8      	blx	r5
 8007f62:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8007f66:	4620      	mov	r0, r4
 8007f68:	4641      	mov	r1, r8
 8007f6a:	4798      	blx	r3
 8007f6c:	b003      	add	sp, #12
 8007f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007f72 <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 8007f72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f74:	6884      	ldr	r4, [r0, #8]
 8007f76:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007f78:	079b      	lsls	r3, r3, #30
 8007f7a:	460f      	mov	r7, r1
 8007f7c:	4616      	mov	r6, r2
 8007f7e:	d545      	bpl.n	800800c <GUIDRV_FlexColor__GetPixelIndexNoCache+0x9a>
 8007f80:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007f84:	4620      	mov	r0, r4
 8007f86:	4798      	blx	r3
 8007f88:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8007f8c:	4632      	mov	r2, r6
 8007f8e:	4605      	mov	r5, r0
 8007f90:	4639      	mov	r1, r7
 8007f92:	4620      	mov	r0, r4
 8007f94:	4798      	blx	r3
 8007f96:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8007f9a:	4606      	mov	r6, r0
 8007f9c:	b11b      	cbz	r3, 8007fa6 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x34>
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	2101      	movs	r1, #1
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	4798      	blx	r3
 8007fa6:	6923      	ldr	r3, [r4, #16]
 8007fa8:	69a2      	ldr	r2, [r4, #24]
 8007faa:	429d      	cmp	r5, r3
 8007fac:	bfac      	ite	ge
 8007fae:	2300      	movge	r3, #0
 8007fb0:	2301      	movlt	r3, #1
 8007fb2:	4295      	cmp	r5, r2
 8007fb4:	bfd4      	ite	le
 8007fb6:	461a      	movle	r2, r3
 8007fb8:	f043 0201 	orrgt.w	r2, r3, #1
 8007fbc:	6963      	ldr	r3, [r4, #20]
 8007fbe:	429e      	cmp	r6, r3
 8007fc0:	bfac      	ite	ge
 8007fc2:	4613      	movge	r3, r2
 8007fc4:	f042 0301 	orrlt.w	r3, r2, #1
 8007fc8:	b913      	cbnz	r3, 8007fd0 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x5e>
 8007fca:	69e3      	ldr	r3, [r4, #28]
 8007fcc:	429e      	cmp	r6, r3
 8007fce:	dd0a      	ble.n	8007fe6 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x74>
 8007fd0:	6862      	ldr	r2, [r4, #4]
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	3a01      	subs	r2, #1
 8007fd6:	9200      	str	r2, [sp, #0]
 8007fd8:	2100      	movs	r1, #0
 8007fda:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8007fde:	4620      	mov	r0, r4
 8007fe0:	460a      	mov	r2, r1
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	47b8      	blx	r7
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8007fec:	4620      	mov	r0, r4
 8007fee:	4632      	mov	r2, r6
 8007ff0:	4798      	blx	r3
 8007ff2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	4798      	blx	r3
 8007ffa:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8007ffe:	4605      	mov	r5, r0
 8008000:	b16b      	cbz	r3, 800801e <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 8008002:	4620      	mov	r0, r4
 8008004:	2100      	movs	r1, #0
 8008006:	2201      	movs	r2, #1
 8008008:	4798      	blx	r3
 800800a:	e008      	b.n	800801e <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 800800c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8008010:	4620      	mov	r0, r4
 8008012:	4798      	blx	r3
 8008014:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8008018:	4620      	mov	r0, r4
 800801a:	4798      	blx	r3
 800801c:	4605      	mov	r5, r0
 800801e:	4628      	mov	r0, r5
 8008020:	b003      	add	sp, #12
 8008022:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008024 <GUIDRV_FlexColor__InitOnce>:
 8008024:	b538      	push	{r3, r4, r5, lr}
 8008026:	6885      	ldr	r5, [r0, #8]
 8008028:	4604      	mov	r4, r0
 800802a:	b995      	cbnz	r5, 8008052 <GUIDRV_FlexColor__InitOnce+0x2e>
 800802c:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8008030:	f003 f976 	bl	800b320 <GUI_ALLOC_GetFixedBlock>
 8008034:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8008038:	60a0      	str	r0, [r4, #8]
 800803a:	4629      	mov	r1, r5
 800803c:	f000 fdc4 	bl	8008bc8 <GUI__memset>
 8008040:	68a3      	ldr	r3, [r4, #8]
 8008042:	2202      	movs	r2, #2
 8008044:	84da      	strh	r2, [r3, #38]	; 0x26
 8008046:	2201      	movs	r2, #1
 8008048:	621a      	str	r2, [r3, #32]
 800804a:	4a02      	ldr	r2, [pc, #8]	; (8008054 <GUIDRV_FlexColor__InitOnce+0x30>)
 800804c:	641c      	str	r4, [r3, #64]	; 0x40
 800804e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8008052:	bd38      	pop	{r3, r4, r5, pc}
 8008054:	08007e85 	.word	0x08007e85

08008058 <_SetDevFunc>:
 8008058:	b570      	push	{r4, r5, r6, lr}
 800805a:	4606      	mov	r6, r0
 800805c:	460d      	mov	r5, r1
 800805e:	4614      	mov	r4, r2
 8008060:	f7ff ffe0 	bl	8008024 <GUIDRV_FlexColor__InitOnce>
 8008064:	68b3      	ldr	r3, [r6, #8]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d03b      	beq.n	80080e2 <_SetDevFunc+0x8a>
 800806a:	2d26      	cmp	r5, #38	; 0x26
 800806c:	d002      	beq.n	8008074 <_SetDevFunc+0x1c>
 800806e:	2d27      	cmp	r5, #39	; 0x27
 8008070:	d016      	beq.n	80080a0 <_SetDevFunc+0x48>
 8008072:	bd70      	pop	{r4, r5, r6, pc}
 8008074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008076:	2a10      	cmp	r2, #16
 8008078:	d002      	beq.n	8008080 <_SetDevFunc+0x28>
 800807a:	2a12      	cmp	r2, #18
 800807c:	d008      	beq.n	8008090 <_SetDevFunc+0x38>
 800807e:	bd70      	pop	{r4, r5, r6, pc}
 8008080:	4a18      	ldr	r2, [pc, #96]	; (80080e4 <_SetDevFunc+0x8c>)
 8008082:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 8008086:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800808a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800808e:	bd70      	pop	{r4, r5, r6, pc}
 8008090:	4a15      	ldr	r2, [pc, #84]	; (80080e8 <_SetDevFunc+0x90>)
 8008092:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8008096:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800809a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800809e:	bd70      	pop	{r4, r5, r6, pc}
 80080a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080a2:	2a10      	cmp	r2, #16
 80080a4:	d002      	beq.n	80080ac <_SetDevFunc+0x54>
 80080a6:	2a12      	cmp	r2, #18
 80080a8:	d00e      	beq.n	80080c8 <_SetDevFunc+0x70>
 80080aa:	bd70      	pop	{r4, r5, r6, pc}
 80080ac:	b13c      	cbz	r4, 80080be <_SetDevFunc+0x66>
 80080ae:	4a0f      	ldr	r2, [pc, #60]	; (80080ec <_SetDevFunc+0x94>)
 80080b0:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 80080b4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80080b8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 80080bc:	bd70      	pop	{r4, r5, r6, pc}
 80080be:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 80080c2:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
 80080c6:	bd70      	pop	{r4, r5, r6, pc}
 80080c8:	b13c      	cbz	r4, 80080da <_SetDevFunc+0x82>
 80080ca:	4a09      	ldr	r2, [pc, #36]	; (80080f0 <_SetDevFunc+0x98>)
 80080cc:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 80080d0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80080d4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80080d8:	bd70      	pop	{r4, r5, r6, pc}
 80080da:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 80080de:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	08007d15 	.word	0x08007d15
 80080e8:	08007d23 	.word	0x08007d23
 80080ec:	08007d31 	.word	0x08007d31
 80080f0:	08007d67 	.word	0x08007d67

080080f4 <_GetDevFunc_Init>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	4605      	mov	r5, r0
 80080f8:	f7ff ff94 	bl	8008024 <GUIDRV_FlexColor__InitOnce>
 80080fc:	68ac      	ldr	r4, [r5, #8]
 80080fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008102:	f003 f90d 	bl	800b320 <GUI_ALLOC_GetFixedBlock>
 8008106:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008108:	66a0      	str	r0, [r4, #104]	; 0x68
 800810a:	3307      	adds	r3, #7
 800810c:	10d8      	asrs	r0, r3, #3
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	4358      	muls	r0, r3
 8008112:	f003 f905 	bl	800b320 <GUI_ALLOC_GetFixedBlock>
 8008116:	2101      	movs	r1, #1
 8008118:	2200      	movs	r2, #0
 800811a:	66e0      	str	r0, [r4, #108]	; 0x6c
 800811c:	69a8      	ldr	r0, [r5, #24]
 800811e:	f7fb fd03 	bl	8003b28 <LCD_X_DisplayDriver>
 8008122:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008126:	4605      	mov	r5, r0
 8008128:	4620      	mov	r0, r4
 800812a:	4798      	blx	r3
 800812c:	4620      	mov	r0, r4
 800812e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8008132:	4798      	blx	r3
 8008134:	2d00      	cmp	r5, #0
 8008136:	bfd4      	ite	le
 8008138:	2000      	movle	r0, #0
 800813a:	2001      	movgt	r0, #1
 800813c:	bd38      	pop	{r3, r4, r5, pc}

0800813e <_GetDevFunc_SetSize>:
 800813e:	b570      	push	{r4, r5, r6, lr}
 8008140:	4604      	mov	r4, r0
 8008142:	460d      	mov	r5, r1
 8008144:	4616      	mov	r6, r2
 8008146:	f7ff ff6d 	bl	8008024 <GUIDRV_FlexColor__InitOnce>
 800814a:	68a3      	ldr	r3, [r4, #8]
 800814c:	e883 0060 	stmia.w	r3, {r5, r6}
 8008150:	bd70      	pop	{r4, r5, r6, pc}

08008152 <_GetDevFunc_SetVSize>:
 8008152:	b570      	push	{r4, r5, r6, lr}
 8008154:	4604      	mov	r4, r0
 8008156:	460d      	mov	r5, r1
 8008158:	4616      	mov	r6, r2
 800815a:	f7ff ff63 	bl	8008024 <GUIDRV_FlexColor__InitOnce>
 800815e:	68a3      	ldr	r3, [r4, #8]
 8008160:	609d      	str	r5, [r3, #8]
 8008162:	60de      	str	r6, [r3, #12]
 8008164:	bd70      	pop	{r4, r5, r6, pc}

08008166 <GUIDRV_FlexColor_Config>:
 8008166:	b538      	push	{r3, r4, r5, lr}
 8008168:	4605      	mov	r5, r0
 800816a:	460c      	mov	r4, r1
 800816c:	f7ff ff5a 	bl	8008024 <GUIDRV_FlexColor__InitOnce>
 8008170:	68ab      	ldr	r3, [r5, #8]
 8008172:	6822      	ldr	r2, [r4, #0]
 8008174:	62da      	str	r2, [r3, #44]	; 0x2c
 8008176:	6862      	ldr	r2, [r4, #4]
 8008178:	631a      	str	r2, [r3, #48]	; 0x30
 800817a:	68a2      	ldr	r2, [r4, #8]
 800817c:	635a      	str	r2, [r3, #52]	; 0x34
 800817e:	0752      	lsls	r2, r2, #29
 8008180:	d507      	bpl.n	8008192 <GUIDRV_FlexColor_Config+0x2c>
 8008182:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008186:	601a      	str	r2, [r3, #0]
 8008188:	6059      	str	r1, [r3, #4]
 800818a:	68da      	ldr	r2, [r3, #12]
 800818c:	6899      	ldr	r1, [r3, #8]
 800818e:	60d9      	str	r1, [r3, #12]
 8008190:	609a      	str	r2, [r3, #8]
 8008192:	89a2      	ldrh	r2, [r4, #12]
 8008194:	849a      	strh	r2, [r3, #36]	; 0x24
 8008196:	6922      	ldr	r2, [r4, #16]
 8008198:	b112      	cbz	r2, 80081a0 <GUIDRV_FlexColor_Config+0x3a>
 800819a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800819e:	621a      	str	r2, [r3, #32]
 80081a0:	bd38      	pop	{r3, r4, r5, pc}

080081a2 <GUIDRV_FlexColor_SetFunc>:
 80081a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081a6:	4604      	mov	r4, r0
 80081a8:	461f      	mov	r7, r3
 80081aa:	4616      	mov	r6, r2
 80081ac:	4688      	mov	r8, r1
 80081ae:	f7ff ff39 	bl	8008024 <GUIDRV_FlexColor__InitOnce>
 80081b2:	68a5      	ldr	r5, [r4, #8]
 80081b4:	4641      	mov	r1, r8
 80081b6:	2268      	movs	r2, #104	; 0x68
 80081b8:	f505 7086 	add.w	r0, r5, #268	; 0x10c
 80081bc:	f005 fcb0 	bl	800db20 <memcpy>
 80081c0:	4620      	mov	r0, r4
 80081c2:	47b0      	blx	r6
 80081c4:	4620      	mov	r0, r4
 80081c6:	47b8      	blx	r7
 80081c8:	6923      	ldr	r3, [r4, #16]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	4798      	blx	r3
 80081ce:	62a8      	str	r0, [r5, #40]	; 0x28
 80081d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080081d4 <LCD_UpdateColorIndices>:
 80081d4:	b510      	push	{r4, lr}
 80081d6:	4c07      	ldr	r4, [pc, #28]	; (80081f4 <LCD_UpdateColorIndices+0x20>)
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80081dc:	f000 fc5e 	bl	8008a9c <LCD_Color2Index>
 80081e0:	f000 fc7c 	bl	8008adc <LCD_SetColorIndex>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80081e8:	f000 fc58 	bl	8008a9c <LCD_Color2Index>
 80081ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081f0:	f000 bc90 	b.w	8008b14 <LCD_SetBkColorIndex>
 80081f4:	20000024 	.word	0x20000024

080081f8 <LCD_SetClipRectEx>:
 80081f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081fa:	4c09      	ldr	r4, [pc, #36]	; (8008220 <LCD_SetClipRectEx+0x28>)
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	7c5a      	ldrb	r2, [r3, #17]
 8008200:	4b08      	ldr	r3, [pc, #32]	; (8008224 <LCD_SetClipRectEx+0x2c>)
 8008202:	4605      	mov	r5, r0
 8008204:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008208:	68c2      	ldr	r2, [r0, #12]
 800820a:	4669      	mov	r1, sp
 800820c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800820e:	4790      	blx	r2
 8008210:	6820      	ldr	r0, [r4, #0]
 8008212:	4629      	mov	r1, r5
 8008214:	466a      	mov	r2, sp
 8008216:	3008      	adds	r0, #8
 8008218:	f000 fd7c 	bl	8008d14 <GUI__IntersectRects>
 800821c:	b003      	add	sp, #12
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	20000024 	.word	0x20000024
 8008224:	200194c8 	.word	0x200194c8

08008228 <LCD_SetVSizeEx>:
 8008228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800822a:	460d      	mov	r5, r1
 800822c:	4614      	mov	r4, r2
 800822e:	f001 ff5f 	bl	800a0f0 <GUI_DEVICE__GetpDriver>
 8008232:	9001      	str	r0, [sp, #4]
 8008234:	b908      	cbnz	r0, 800823a <LCD_SetVSizeEx+0x12>
 8008236:	2001      	movs	r0, #1
 8008238:	e00c      	b.n	8008254 <LCD_SetVSizeEx+0x2c>
 800823a:	68c3      	ldr	r3, [r0, #12]
 800823c:	210a      	movs	r1, #10
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	a801      	add	r0, sp, #4
 8008242:	4798      	blx	r3
 8008244:	4603      	mov	r3, r0
 8008246:	2800      	cmp	r0, #0
 8008248:	d0f5      	beq.n	8008236 <LCD_SetVSizeEx+0xe>
 800824a:	9801      	ldr	r0, [sp, #4]
 800824c:	4629      	mov	r1, r5
 800824e:	4622      	mov	r2, r4
 8008250:	4798      	blx	r3
 8008252:	2000      	movs	r0, #0
 8008254:	b003      	add	sp, #12
 8008256:	bd30      	pop	{r4, r5, pc}

08008258 <LCD_SetSizeEx>:
 8008258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800825a:	460d      	mov	r5, r1
 800825c:	4614      	mov	r4, r2
 800825e:	f001 ff47 	bl	800a0f0 <GUI_DEVICE__GetpDriver>
 8008262:	9001      	str	r0, [sp, #4]
 8008264:	b908      	cbnz	r0, 800826a <LCD_SetSizeEx+0x12>
 8008266:	2001      	movs	r0, #1
 8008268:	e00c      	b.n	8008284 <LCD_SetSizeEx+0x2c>
 800826a:	68c3      	ldr	r3, [r0, #12]
 800826c:	210b      	movs	r1, #11
 800826e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008270:	a801      	add	r0, sp, #4
 8008272:	4798      	blx	r3
 8008274:	4603      	mov	r3, r0
 8008276:	2800      	cmp	r0, #0
 8008278:	d0f5      	beq.n	8008266 <LCD_SetSizeEx+0xe>
 800827a:	9801      	ldr	r0, [sp, #4]
 800827c:	4629      	mov	r1, r5
 800827e:	4622      	mov	r2, r4
 8008280:	4798      	blx	r3
 8008282:	2000      	movs	r0, #0
 8008284:	b003      	add	sp, #12
 8008286:	bd30      	pop	{r4, r5, pc}

08008288 <LCD_SetLUTEntryEx>:
 8008288:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800828a:	460d      	mov	r5, r1
 800828c:	4614      	mov	r4, r2
 800828e:	f001 ff2f 	bl	800a0f0 <GUI_DEVICE__GetpDriver>
 8008292:	9001      	str	r0, [sp, #4]
 8008294:	b908      	cbnz	r0, 800829a <LCD_SetLUTEntryEx+0x12>
 8008296:	2001      	movs	r0, #1
 8008298:	e00c      	b.n	80082b4 <LCD_SetLUTEntryEx+0x2c>
 800829a:	68c3      	ldr	r3, [r0, #12]
 800829c:	2110      	movs	r1, #16
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	a801      	add	r0, sp, #4
 80082a2:	4798      	blx	r3
 80082a4:	4603      	mov	r3, r0
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d0f5      	beq.n	8008296 <LCD_SetLUTEntryEx+0xe>
 80082aa:	9801      	ldr	r0, [sp, #4]
 80082ac:	4629      	mov	r1, r5
 80082ae:	4622      	mov	r2, r4
 80082b0:	4798      	blx	r3
 80082b2:	2000      	movs	r0, #0
 80082b4:	b003      	add	sp, #12
 80082b6:	bd30      	pop	{r4, r5, pc}

080082b8 <_GetDevProp>:
 80082b8:	2801      	cmp	r0, #1
 80082ba:	b510      	push	{r4, lr}
 80082bc:	460c      	mov	r4, r1
 80082be:	dc08      	bgt.n	80082d2 <_GetDevProp+0x1a>
 80082c0:	f001 ff16 	bl	800a0f0 <GUI_DEVICE__GetpDriver>
 80082c4:	b120      	cbz	r0, 80082d0 <_GetDevProp+0x18>
 80082c6:	68c3      	ldr	r3, [r0, #12]
 80082c8:	4621      	mov	r1, r4
 80082ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082cc:	4798      	blx	r3
 80082ce:	bd10      	pop	{r4, pc}
 80082d0:	bd10      	pop	{r4, pc}
 80082d2:	2000      	movs	r0, #0
 80082d4:	bd10      	pop	{r4, pc}

080082d6 <_GetMaxValue>:
 80082d6:	b538      	push	{r3, r4, r5, lr}
 80082d8:	4604      	mov	r4, r0
 80082da:	4621      	mov	r1, r4
 80082dc:	2001      	movs	r0, #1
 80082de:	f7ff ffeb 	bl	80082b8 <_GetDevProp>
 80082e2:	4621      	mov	r1, r4
 80082e4:	4605      	mov	r5, r0
 80082e6:	2000      	movs	r0, #0
 80082e8:	f7ff ffe6 	bl	80082b8 <_GetDevProp>
 80082ec:	42a8      	cmp	r0, r5
 80082ee:	bfb8      	it	lt
 80082f0:	4628      	movlt	r0, r5
 80082f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80082f6:	bd38      	pop	{r3, r4, r5, pc}

080082f8 <LCD_GetXSizeEx>:
 80082f8:	2101      	movs	r1, #1
 80082fa:	f7ff bfdd 	b.w	80082b8 <_GetDevProp>

080082fe <LCD_GetYSizeEx>:
 80082fe:	2102      	movs	r1, #2
 8008300:	f7ff bfda 	b.w	80082b8 <_GetDevProp>

08008304 <LCD_GetVXSizeEx>:
 8008304:	2103      	movs	r1, #3
 8008306:	f7ff bfd7 	b.w	80082b8 <_GetDevProp>

0800830a <LCD_GetVYSizeEx>:
 800830a:	2104      	movs	r1, #4
 800830c:	f7ff bfd4 	b.w	80082b8 <_GetDevProp>

08008310 <LCD_GetBitsPerPixelEx>:
 8008310:	2108      	movs	r1, #8
 8008312:	f7ff bfd1 	b.w	80082b8 <_GetDevProp>

08008316 <LCD_GetNumColorsEx>:
 8008316:	2109      	movs	r1, #9
 8008318:	f7ff bfce 	b.w	80082b8 <_GetDevProp>

0800831c <LCD_GetXSize>:
 800831c:	4b02      	ldr	r3, [pc, #8]	; (8008328 <LCD_GetXSize+0xc>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	7c58      	ldrb	r0, [r3, #17]
 8008322:	f7ff bfe9 	b.w	80082f8 <LCD_GetXSizeEx>
 8008326:	bf00      	nop
 8008328:	20000024 	.word	0x20000024

0800832c <LCD_GetYSize>:
 800832c:	4b02      	ldr	r3, [pc, #8]	; (8008338 <LCD_GetYSize+0xc>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	7c58      	ldrb	r0, [r3, #17]
 8008332:	f7ff bfe4 	b.w	80082fe <LCD_GetYSizeEx>
 8008336:	bf00      	nop
 8008338:	20000024 	.word	0x20000024

0800833c <LCD_GetNumColors>:
 800833c:	4b02      	ldr	r3, [pc, #8]	; (8008348 <LCD_GetNumColors+0xc>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	7c58      	ldrb	r0, [r3, #17]
 8008342:	f7ff bfe8 	b.w	8008316 <LCD_GetNumColorsEx>
 8008346:	bf00      	nop
 8008348:	20000024 	.word	0x20000024

0800834c <GUI_GetBitsPerPixelEx>:
 800834c:	b508      	push	{r3, lr}
 800834e:	4b04      	ldr	r3, [pc, #16]	; (8008360 <GUI_GetBitsPerPixelEx+0x14>)
 8008350:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008354:	68c3      	ldr	r3, [r0, #12]
 8008356:	2108      	movs	r1, #8
 8008358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835a:	4798      	blx	r3
 800835c:	bd08      	pop	{r3, pc}
 800835e:	bf00      	nop
 8008360:	200194c8 	.word	0x200194c8

08008364 <LCD_GetPaletteEx>:
 8008364:	b508      	push	{r3, lr}
 8008366:	f001 fec3 	bl	800a0f0 <GUI_DEVICE__GetpDriver>
 800836a:	b120      	cbz	r0, 8008376 <LCD_GetPaletteEx+0x12>
 800836c:	68c3      	ldr	r3, [r0, #12]
 800836e:	2102      	movs	r1, #2
 8008370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008372:	4798      	blx	r3
 8008374:	bd08      	pop	{r3, pc}
 8008376:	bd08      	pop	{r3, pc}

08008378 <LCD_GetPalette>:
 8008378:	4b02      	ldr	r3, [pc, #8]	; (8008384 <LCD_GetPalette+0xc>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	7c58      	ldrb	r0, [r3, #17]
 800837e:	f7ff bff1 	b.w	8008364 <LCD_GetPaletteEx>
 8008382:	bf00      	nop
 8008384:	20000024 	.word	0x20000024

08008388 <GUI_GetpfIndex2ColorEx>:
 8008388:	4b02      	ldr	r3, [pc, #8]	; (8008394 <GUI_GetpfIndex2ColorEx+0xc>)
 800838a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	6858      	ldr	r0, [r3, #4]
 8008392:	4770      	bx	lr
 8008394:	200194c8 	.word	0x200194c8

08008398 <GUI_GetpfColor2IndexEx>:
 8008398:	4b02      	ldr	r3, [pc, #8]	; (80083a4 <GUI_GetpfColor2IndexEx+0xc>)
 800839a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	6818      	ldr	r0, [r3, #0]
 80083a2:	4770      	bx	lr
 80083a4:	200194c8 	.word	0x200194c8

080083a8 <LCD_GetXSizeMax>:
 80083a8:	2001      	movs	r0, #1
 80083aa:	f7ff bf94 	b.w	80082d6 <_GetMaxValue>

080083ae <LCD_GetYSizeMax>:
 80083ae:	2002      	movs	r0, #2
 80083b0:	f7ff bf91 	b.w	80082d6 <_GetMaxValue>

080083b4 <LCD_GetVXSizeMax>:
 80083b4:	2003      	movs	r0, #3
 80083b6:	f7ff bf8e 	b.w	80082d6 <_GetMaxValue>
	...

080083bc <LCD_SetDisplaySize>:
 80083bc:	4b02      	ldr	r3, [pc, #8]	; (80083c8 <LCD_SetDisplaySize+0xc>)
 80083be:	6018      	str	r0, [r3, #0]
 80083c0:	4b02      	ldr	r3, [pc, #8]	; (80083cc <LCD_SetDisplaySize+0x10>)
 80083c2:	6019      	str	r1, [r3, #0]
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	20019100 	.word	0x20019100
 80083cc:	200190fc 	.word	0x200190fc

080083d0 <LCD_GetXSizeDisplay>:
 80083d0:	4b01      	ldr	r3, [pc, #4]	; (80083d8 <LCD_GetXSizeDisplay+0x8>)
 80083d2:	6818      	ldr	r0, [r3, #0]
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	20019100 	.word	0x20019100

080083dc <LCD_GetYSizeDisplay>:
 80083dc:	4b01      	ldr	r3, [pc, #4]	; (80083e4 <LCD_GetYSizeDisplay+0x8>)
 80083de:	6818      	ldr	r0, [r3, #0]
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	200190fc 	.word	0x200190fc

080083e8 <LCD__GetBPP>:
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d03b      	beq.n	8008464 <LCD__GetBPP+0x7c>
 80083ec:	f030 0301 	bics.w	r3, r0, #1
 80083f0:	d029      	beq.n	8008446 <LCD__GetBPP+0x5e>
 80083f2:	f030 0303 	bics.w	r3, r0, #3
 80083f6:	d028      	beq.n	800844a <LCD__GetBPP+0x62>
 80083f8:	f030 0307 	bics.w	r3, r0, #7
 80083fc:	d027      	beq.n	800844e <LCD__GetBPP+0x66>
 80083fe:	f030 030f 	bics.w	r3, r0, #15
 8008402:	d026      	beq.n	8008452 <LCD__GetBPP+0x6a>
 8008404:	f030 031f 	bics.w	r3, r0, #31
 8008408:	d025      	beq.n	8008456 <LCD__GetBPP+0x6e>
 800840a:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800840e:	d024      	beq.n	800845a <LCD__GetBPP+0x72>
 8008410:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 8008414:	f023 0301 	bic.w	r3, r3, #1
 8008418:	b30b      	cbz	r3, 800845e <LCD__GetBPP+0x76>
 800841a:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800841e:	f023 030f 	bic.w	r3, r3, #15
 8008422:	b1e3      	cbz	r3, 800845e <LCD__GetBPP+0x76>
 8008424:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 8008428:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800842c:	b1bb      	cbz	r3, 800845e <LCD__GetBPP+0x76>
 800842e:	0c03      	lsrs	r3, r0, #16
 8008430:	041b      	lsls	r3, r3, #16
 8008432:	b1a3      	cbz	r3, 800845e <LCD__GetBPP+0x76>
 8008434:	0c83      	lsrs	r3, r0, #18
 8008436:	049b      	lsls	r3, r3, #18
 8008438:	b19b      	cbz	r3, 8008462 <LCD__GetBPP+0x7a>
 800843a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800843e:	bf0c      	ite	eq
 8008440:	2018      	moveq	r0, #24
 8008442:	2020      	movne	r0, #32
 8008444:	4770      	bx	lr
 8008446:	2001      	movs	r0, #1
 8008448:	4770      	bx	lr
 800844a:	2002      	movs	r0, #2
 800844c:	4770      	bx	lr
 800844e:	2003      	movs	r0, #3
 8008450:	4770      	bx	lr
 8008452:	2004      	movs	r0, #4
 8008454:	4770      	bx	lr
 8008456:	2005      	movs	r0, #5
 8008458:	4770      	bx	lr
 800845a:	2008      	movs	r0, #8
 800845c:	4770      	bx	lr
 800845e:	2010      	movs	r0, #16
 8008460:	4770      	bx	lr
 8008462:	2012      	movs	r0, #18
 8008464:	4770      	bx	lr

08008466 <LCD__GetBPPDevice>:
 8008466:	b508      	push	{r3, lr}
 8008468:	f7ff ffbe 	bl	80083e8 <LCD__GetBPP>
 800846c:	2801      	cmp	r0, #1
 800846e:	d00f      	beq.n	8008490 <LCD__GetBPPDevice+0x2a>
 8008470:	1e83      	subs	r3, r0, #2
 8008472:	2b06      	cmp	r3, #6
 8008474:	d909      	bls.n	800848a <LCD__GetBPPDevice+0x24>
 8008476:	f1a0 0309 	sub.w	r3, r0, #9
 800847a:	2b07      	cmp	r3, #7
 800847c:	d907      	bls.n	800848e <LCD__GetBPPDevice+0x28>
 800847e:	3811      	subs	r0, #17
 8008480:	2810      	cmp	r0, #16
 8008482:	bf34      	ite	cc
 8008484:	2020      	movcc	r0, #32
 8008486:	2000      	movcs	r0, #0
 8008488:	bd08      	pop	{r3, pc}
 800848a:	2008      	movs	r0, #8
 800848c:	bd08      	pop	{r3, pc}
 800848e:	2010      	movs	r0, #16
 8008490:	bd08      	pop	{r3, pc}
	...

08008494 <_SetDrawMode>:
 8008494:	b570      	push	{r4, r5, r6, lr}
 8008496:	4b08      	ldr	r3, [pc, #32]	; (80084b8 <_SetDrawMode+0x24>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	7c1a      	ldrb	r2, [r3, #16]
 800849c:	ea80 0102 	eor.w	r1, r0, r2
 80084a0:	0749      	lsls	r1, r1, #29
 80084a2:	d505      	bpl.n	80084b0 <_SetDrawMode+0x1c>
 80084a4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80084a6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80084a8:	6826      	ldr	r6, [r4, #0]
 80084aa:	680d      	ldr	r5, [r1, #0]
 80084ac:	6025      	str	r5, [r4, #0]
 80084ae:	600e      	str	r6, [r1, #0]
 80084b0:	7418      	strb	r0, [r3, #16]
 80084b2:	4610      	mov	r0, r2
 80084b4:	bd70      	pop	{r4, r5, r6, pc}
 80084b6:	bf00      	nop
 80084b8:	20000024 	.word	0x20000024

080084bc <LCD_SetDrawMode>:
 80084bc:	b508      	push	{r3, lr}
 80084be:	4b02      	ldr	r3, [pc, #8]	; (80084c8 <LCD_SetDrawMode+0xc>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	4798      	blx	r3
 80084c6:	bd08      	pop	{r3, pc}
 80084c8:	20000018 	.word	0x20000018

080084cc <LCD_DrawPixel>:
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	4b14      	ldr	r3, [pc, #80]	; (8008520 <LCD_DrawPixel+0x54>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	460a      	mov	r2, r1
 80084d4:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 80084d8:	428a      	cmp	r2, r1
 80084da:	4604      	mov	r4, r0
 80084dc:	db1e      	blt.n	800851c <LCD_DrawPixel+0x50>
 80084de:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80084e2:	428a      	cmp	r2, r1
 80084e4:	dc1a      	bgt.n	800851c <LCD_DrawPixel+0x50>
 80084e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80084ea:	4288      	cmp	r0, r1
 80084ec:	db16      	blt.n	800851c <LCD_DrawPixel+0x50>
 80084ee:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 80084f2:	4288      	cmp	r0, r1
 80084f4:	dc12      	bgt.n	800851c <LCD_DrawPixel+0x50>
 80084f6:	7c19      	ldrb	r1, [r3, #16]
 80084f8:	7c58      	ldrb	r0, [r3, #17]
 80084fa:	f011 0f01 	tst.w	r1, #1
 80084fe:	4909      	ldr	r1, [pc, #36]	; (8008524 <LCD_DrawPixel+0x58>)
 8008500:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8008504:	d004      	beq.n	8008510 <LCD_DrawPixel+0x44>
 8008506:	68c3      	ldr	r3, [r0, #12]
 8008508:	4621      	mov	r1, r4
 800850a:	69db      	ldr	r3, [r3, #28]
 800850c:	4798      	blx	r3
 800850e:	bd38      	pop	{r3, r4, r5, pc}
 8008510:	68c1      	ldr	r1, [r0, #12]
 8008512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008514:	698d      	ldr	r5, [r1, #24]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4621      	mov	r1, r4
 800851a:	47a8      	blx	r5
 800851c:	bd38      	pop	{r3, r4, r5, pc}
 800851e:	bf00      	nop
 8008520:	20000024 	.word	0x20000024
 8008524:	200194c8 	.word	0x200194c8

08008528 <LCD_DrawHLine>:
 8008528:	b538      	push	{r3, r4, r5, lr}
 800852a:	4b10      	ldr	r3, [pc, #64]	; (800856c <LCD_DrawHLine+0x44>)
 800852c:	681c      	ldr	r4, [r3, #0]
 800852e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8008532:	4299      	cmp	r1, r3
 8008534:	460d      	mov	r5, r1
 8008536:	db17      	blt.n	8008568 <LCD_DrawHLine+0x40>
 8008538:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800853c:	4299      	cmp	r1, r3
 800853e:	dc13      	bgt.n	8008568 <LCD_DrawHLine+0x40>
 8008540:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8008544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008548:	4288      	cmp	r0, r1
 800854a:	bfa8      	it	ge
 800854c:	4601      	movge	r1, r0
 800854e:	429a      	cmp	r2, r3
 8008550:	bfb8      	it	lt
 8008552:	4613      	movlt	r3, r2
 8008554:	428b      	cmp	r3, r1
 8008556:	db07      	blt.n	8008568 <LCD_DrawHLine+0x40>
 8008558:	7c60      	ldrb	r0, [r4, #17]
 800855a:	4a05      	ldr	r2, [pc, #20]	; (8008570 <LCD_DrawHLine+0x48>)
 800855c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8008560:	68c2      	ldr	r2, [r0, #12]
 8008562:	6894      	ldr	r4, [r2, #8]
 8008564:	462a      	mov	r2, r5
 8008566:	47a0      	blx	r4
 8008568:	bd38      	pop	{r3, r4, r5, pc}
 800856a:	bf00      	nop
 800856c:	20000024 	.word	0x20000024
 8008570:	200194c8 	.word	0x200194c8

08008574 <LCD_DrawVLine>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	4b10      	ldr	r3, [pc, #64]	; (80085b8 <LCD_DrawVLine+0x44>)
 8008578:	681c      	ldr	r4, [r3, #0]
 800857a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800857e:	4605      	mov	r5, r0
 8008580:	429d      	cmp	r5, r3
 8008582:	4610      	mov	r0, r2
 8008584:	db17      	blt.n	80085b6 <LCD_DrawVLine+0x42>
 8008586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800858a:	429d      	cmp	r5, r3
 800858c:	dc13      	bgt.n	80085b6 <LCD_DrawVLine+0x42>
 800858e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8008592:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8008596:	4291      	cmp	r1, r2
 8008598:	bfa8      	it	ge
 800859a:	460a      	movge	r2, r1
 800859c:	4298      	cmp	r0, r3
 800859e:	bfb8      	it	lt
 80085a0:	4603      	movlt	r3, r0
 80085a2:	4293      	cmp	r3, r2
 80085a4:	db07      	blt.n	80085b6 <LCD_DrawVLine+0x42>
 80085a6:	7c60      	ldrb	r0, [r4, #17]
 80085a8:	4904      	ldr	r1, [pc, #16]	; (80085bc <LCD_DrawVLine+0x48>)
 80085aa:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80085ae:	68c1      	ldr	r1, [r0, #12]
 80085b0:	68cc      	ldr	r4, [r1, #12]
 80085b2:	4629      	mov	r1, r5
 80085b4:	47a0      	blx	r4
 80085b6:	bd38      	pop	{r3, r4, r5, pc}
 80085b8:	20000024 	.word	0x20000024
 80085bc:	200194c8 	.word	0x200194c8

080085c0 <LCD_FillRect>:
 80085c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085c2:	460e      	mov	r6, r1
 80085c4:	4912      	ldr	r1, [pc, #72]	; (8008610 <LCD_FillRect+0x50>)
 80085c6:	680c      	ldr	r4, [r1, #0]
 80085c8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80085cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80085d0:	4288      	cmp	r0, r1
 80085d2:	bfa8      	it	ge
 80085d4:	4601      	movge	r1, r0
 80085d6:	42aa      	cmp	r2, r5
 80085d8:	bfb8      	it	lt
 80085da:	4615      	movlt	r5, r2
 80085dc:	428d      	cmp	r5, r1
 80085de:	db14      	blt.n	800860a <LCD_FillRect+0x4a>
 80085e0:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80085e4:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 80085e8:	4296      	cmp	r6, r2
 80085ea:	bfa8      	it	ge
 80085ec:	4632      	movge	r2, r6
 80085ee:	4283      	cmp	r3, r0
 80085f0:	bfa8      	it	ge
 80085f2:	4603      	movge	r3, r0
 80085f4:	4293      	cmp	r3, r2
 80085f6:	db08      	blt.n	800860a <LCD_FillRect+0x4a>
 80085f8:	7c64      	ldrb	r4, [r4, #17]
 80085fa:	4806      	ldr	r0, [pc, #24]	; (8008614 <LCD_FillRect+0x54>)
 80085fc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008600:	68c4      	ldr	r4, [r0, #12]
 8008602:	9300      	str	r3, [sp, #0]
 8008604:	6924      	ldr	r4, [r4, #16]
 8008606:	462b      	mov	r3, r5
 8008608:	47a0      	blx	r4
 800860a:	b002      	add	sp, #8
 800860c:	bd70      	pop	{r4, r5, r6, pc}
 800860e:	bf00      	nop
 8008610:	20000024 	.word	0x20000024
 8008614:	200194c8 	.word	0x200194c8

08008618 <LCD__DrawBitmap_1bpp>:
 8008618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861c:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 80087cc <LCD__DrawBitmap_1bpp+0x1b4>
 8008620:	b08f      	sub	sp, #60	; 0x3c
 8008622:	f8dc c000 	ldr.w	ip, [ip]
 8008626:	9009      	str	r0, [sp, #36]	; 0x24
 8008628:	460e      	mov	r6, r1
 800862a:	4615      	mov	r5, r2
 800862c:	469b      	mov	fp, r3
 800862e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008630:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8008634:	f1bc 0f00 	cmp.w	ip, #0
 8008638:	d00d      	beq.n	8008656 <LCD__DrawBitmap_1bpp+0x3e>
 800863a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800863c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800863e:	9500      	str	r5, [sp, #0]
 8008640:	9601      	str	r6, [sp, #4]
 8008642:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008644:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008646:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008648:	9702      	str	r7, [sp, #8]
 800864a:	9503      	str	r5, [sp, #12]
 800864c:	9404      	str	r4, [sp, #16]
 800864e:	9605      	str	r6, [sp, #20]
 8008650:	f8dc 4000 	ldr.w	r4, [ip]
 8008654:	e053      	b.n	80086fe <LCD__DrawBitmap_1bpp+0xe6>
 8008656:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8008658:	9819      	ldr	r0, [sp, #100]	; 0x64
 800865a:	ea47 0300 	orr.w	r3, r7, r0
 800865e:	2b01      	cmp	r3, #1
 8008660:	d14f      	bne.n	8008702 <LCD__DrawBitmap_1bpp+0xea>
 8008662:	4b58      	ldr	r3, [pc, #352]	; (80087c4 <LCD__DrawBitmap_1bpp+0x1ac>)
 8008664:	6818      	ldr	r0, [r3, #0]
 8008666:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800866a:	1a51      	subs	r1, r2, r1
 800866c:	2900      	cmp	r1, #0
 800866e:	dd08      	ble.n	8008682 <LCD__DrawBitmap_1bpp+0x6a>
 8008670:	ebc1 030b 	rsb	r3, r1, fp
 8008674:	2b00      	cmp	r3, #0
 8008676:	f340 80a2 	ble.w	80087be <LCD__DrawBitmap_1bpp+0x1a6>
 800867a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800867c:	fb07 4401 	mla	r4, r7, r1, r4
 8008680:	e001      	b.n	8008686 <LCD__DrawBitmap_1bpp+0x6e>
 8008682:	465b      	mov	r3, fp
 8008684:	4632      	mov	r2, r6
 8008686:	445e      	add	r6, fp
 8008688:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 800868c:	3e01      	subs	r6, #1
 800868e:	1a76      	subs	r6, r6, r1
 8008690:	2e00      	cmp	r6, #0
 8008692:	dd03      	ble.n	800869c <LCD__DrawBitmap_1bpp+0x84>
 8008694:	1b9b      	subs	r3, r3, r6
 8008696:	2b00      	cmp	r3, #0
 8008698:	f340 8091 	ble.w	80087be <LCD__DrawBitmap_1bpp+0x1a6>
 800869c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800869e:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 80086a2:	4429      	add	r1, r5
 80086a4:	3901      	subs	r1, #1
 80086a6:	1b89      	subs	r1, r1, r6
 80086a8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80086aa:	2900      	cmp	r1, #0
 80086ac:	bfc8      	it	gt
 80086ae:	ebc1 0505 	rsbgt	r5, r1, r5
 80086b2:	ebc8 0106 	rsb	r1, r8, r6
 80086b6:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80086ba:	42b1      	cmp	r1, r6
 80086bc:	da0c      	bge.n	80086d8 <LCD__DrawBitmap_1bpp+0xc0>
 80086be:	ebc1 0c06 	rsb	ip, r1, r6
 80086c2:	eb08 070c 	add.w	r7, r8, ip
 80086c6:	1b8e      	subs	r6, r1, r6
 80086c8:	f02c 0c07 	bic.w	ip, ip, #7
 80086cc:	4435      	add	r5, r6
 80086ce:	eb04 04e7 	add.w	r4, r4, r7, asr #3
 80086d2:	4461      	add	r1, ip
 80086d4:	f007 0807 	and.w	r8, r7, #7
 80086d8:	2d00      	cmp	r5, #0
 80086da:	dd70      	ble.n	80087be <LCD__DrawBitmap_1bpp+0x1a6>
 80086dc:	7c46      	ldrb	r6, [r0, #17]
 80086de:	483a      	ldr	r0, [pc, #232]	; (80087c8 <LCD__DrawBitmap_1bpp+0x1b0>)
 80086e0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80086e2:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80086e6:	68c6      	ldr	r6, [r0, #12]
 80086e8:	9701      	str	r7, [sp, #4]
 80086ea:	9403      	str	r4, [sp, #12]
 80086ec:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80086ee:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	9702      	str	r7, [sp, #8]
 80086f4:	f8cd 8010 	str.w	r8, [sp, #16]
 80086f8:	9405      	str	r4, [sp, #20]
 80086fa:	6874      	ldr	r4, [r6, #4]
 80086fc:	462b      	mov	r3, r5
 80086fe:	47a0      	blx	r4
 8008700:	e05d      	b.n	80087be <LCD__DrawBitmap_1bpp+0x1a6>
 8008702:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008704:	f1c7 0708 	rsb	r7, r7, #8
 8008708:	970c      	str	r7, [sp, #48]	; 0x30
 800870a:	4667      	mov	r7, ip
 800870c:	45dc      	cmp	ip, fp
 800870e:	da56      	bge.n	80087be <LCD__DrawBitmap_1bpp+0x1a6>
 8008710:	4b2c      	ldr	r3, [pc, #176]	; (80087c4 <LCD__DrawBitmap_1bpp+0x1ac>)
 8008712:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4430      	add	r0, r6
 8008718:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800871c:	900a      	str	r0, [sp, #40]	; 0x28
 800871e:	1e41      	subs	r1, r0, #1
 8008720:	4291      	cmp	r1, r2
 8008722:	910b      	str	r1, [sp, #44]	; 0x2c
 8008724:	db45      	blt.n	80087b2 <LCD__DrawBitmap_1bpp+0x19a>
 8008726:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800872a:	429e      	cmp	r6, r3
 800872c:	dc41      	bgt.n	80087b2 <LCD__DrawBitmap_1bpp+0x19a>
 800872e:	f04f 0800 	mov.w	r8, #0
 8008732:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008736:	9408      	str	r4, [sp, #32]
 8008738:	46c2      	mov	sl, r8
 800873a:	45aa      	cmp	sl, r5
 800873c:	da39      	bge.n	80087b2 <LCD__DrawBitmap_1bpp+0x19a>
 800873e:	f1b8 0f00 	cmp.w	r8, #0
 8008742:	d105      	bne.n	8008750 <LCD__DrawBitmap_1bpp+0x138>
 8008744:	9a08      	ldr	r2, [sp, #32]
 8008746:	7817      	ldrb	r7, [r2, #0]
 8008748:	3201      	adds	r2, #1
 800874a:	9208      	str	r2, [sp, #32]
 800874c:	f04f 0808 	mov.w	r8, #8
 8008750:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008752:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008754:	4a1b      	ldr	r2, [pc, #108]	; (80087c4 <LCD__DrawBitmap_1bpp+0x1ac>)
 8008756:	fa47 f300 	asr.w	r3, r7, r0
 800875a:	ebc1 0808 	rsb	r8, r1, r8
 800875e:	408f      	lsls	r7, r1
 8008760:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8008764:	b2ff      	uxtb	r7, r7
 8008766:	d103      	bne.n	8008770 <LCD__DrawBitmap_1bpp+0x158>
 8008768:	6810      	ldr	r0, [r2, #0]
 800876a:	7c00      	ldrb	r0, [r0, #16]
 800876c:	0780      	lsls	r0, r0, #30
 800876e:	d41b      	bmi.n	80087a8 <LCD__DrawBitmap_1bpp+0x190>
 8008770:	6812      	ldr	r2, [r2, #0]
 8008772:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008774:	6810      	ldr	r0, [r2, #0]
 8008776:	900d      	str	r0, [sp, #52]	; 0x34
 8008778:	981d      	ldr	r0, [sp, #116]	; 0x74
 800877a:	b110      	cbz	r0, 8008782 <LCD__DrawBitmap_1bpp+0x16a>
 800877c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8008780:	e000      	b.n	8008784 <LCD__DrawBitmap_1bpp+0x16c>
 8008782:	b2db      	uxtb	r3, r3
 8008784:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	1e4a      	subs	r2, r1, #1
 800878a:	444a      	add	r2, r9
 800878c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800878e:	f8cd c01c 	str.w	ip, [sp, #28]
 8008792:	4648      	mov	r0, r9
 8008794:	4631      	mov	r1, r6
 8008796:	f7ff ff13 	bl	80085c0 <LCD_FillRect>
 800879a:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <LCD__DrawBitmap_1bpp+0x1ac>)
 800879c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80087a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80087aa:	f10a 0a01 	add.w	sl, sl, #1
 80087ae:	4499      	add	r9, r3
 80087b0:	e7c3      	b.n	800873a <LCD__DrawBitmap_1bpp+0x122>
 80087b2:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80087b4:	f10c 0c01 	add.w	ip, ip, #1
 80087b8:	4434      	add	r4, r6
 80087ba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80087bc:	e7a6      	b.n	800870c <LCD__DrawBitmap_1bpp+0xf4>
 80087be:	b00f      	add	sp, #60	; 0x3c
 80087c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c4:	20000024 	.word	0x20000024
 80087c8:	200194c8 	.word	0x200194c8
 80087cc:	2001949c 	.word	0x2001949c

080087d0 <LCD_DrawBitmap>:
 80087d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d4:	f8df c20c 	ldr.w	ip, [pc, #524]	; 80089e4 <LCD_DrawBitmap+0x214>
 80087d8:	b091      	sub	sp, #68	; 0x44
 80087da:	f8dc 9000 	ldr.w	r9, [ip]
 80087de:	9207      	str	r2, [sp, #28]
 80087e0:	4605      	mov	r5, r0
 80087e2:	4688      	mov	r8, r1
 80087e4:	469b      	mov	fp, r3
 80087e6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80087e8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80087ea:	f1b9 0f00 	cmp.w	r9, #0
 80087ee:	d00c      	beq.n	800880a <LCD_DrawBitmap+0x3a>
 80087f0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80087f2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80087f4:	9500      	str	r5, [sp, #0]
 80087f6:	9701      	str	r7, [sp, #4]
 80087f8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80087fa:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80087fc:	9602      	str	r6, [sp, #8]
 80087fe:	9503      	str	r5, [sp, #12]
 8008800:	9404      	str	r4, [sp, #16]
 8008802:	9705      	str	r7, [sp, #20]
 8008804:	f8d9 4000 	ldr.w	r4, [r9]
 8008808:	e081      	b.n	800890e <LCD_DrawBitmap+0x13e>
 800880a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800880c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800880e:	ea47 0300 	orr.w	r3, r7, r0
 8008812:	2b01      	cmp	r3, #1
 8008814:	d17d      	bne.n	8008912 <LCD_DrawBitmap+0x142>
 8008816:	4b71      	ldr	r3, [pc, #452]	; (80089dc <LCD_DrawBitmap+0x20c>)
 8008818:	6818      	ldr	r0, [r3, #0]
 800881a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800881e:	1a53      	subs	r3, r2, r1
 8008820:	2b00      	cmp	r3, #0
 8008822:	dd08      	ble.n	8008836 <LCD_DrawBitmap+0x66>
 8008824:	ebc3 010b 	rsb	r1, r3, fp
 8008828:	2900      	cmp	r1, #0
 800882a:	f340 80d4 	ble.w	80089d6 <LCD_DrawBitmap+0x206>
 800882e:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8008830:	fb07 4403 	mla	r4, r7, r3, r4
 8008834:	e001      	b.n	800883a <LCD_DrawBitmap+0x6a>
 8008836:	4659      	mov	r1, fp
 8008838:	4642      	mov	r2, r8
 800883a:	44d8      	add	r8, fp
 800883c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8008840:	f108 38ff 	add.w	r8, r8, #4294967295
 8008844:	ebc3 0808 	rsb	r8, r3, r8
 8008848:	f1b8 0f00 	cmp.w	r8, #0
 800884c:	dd04      	ble.n	8008858 <LCD_DrawBitmap+0x88>
 800884e:	ebc8 0101 	rsb	r1, r8, r1
 8008852:	2900      	cmp	r1, #0
 8008854:	f340 80bf 	ble.w	80089d6 <LCD_DrawBitmap+0x206>
 8008858:	9b07      	ldr	r3, [sp, #28]
 800885a:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 800885e:	442b      	add	r3, r5
 8008860:	3b01      	subs	r3, #1
 8008862:	ebcc 0303 	rsb	r3, ip, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	dd02      	ble.n	8008870 <LCD_DrawBitmap+0xa0>
 800886a:	9f07      	ldr	r7, [sp, #28]
 800886c:	1aff      	subs	r7, r7, r3
 800886e:	9707      	str	r7, [sp, #28]
 8008870:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8008874:	4565      	cmp	r5, ip
 8008876:	da33      	bge.n	80088e0 <LCD_DrawBitmap+0x110>
 8008878:	9f07      	ldr	r7, [sp, #28]
 800887a:	ebc5 030c 	rsb	r3, r5, ip
 800887e:	1aff      	subs	r7, r7, r3
 8008880:	2e08      	cmp	r6, #8
 8008882:	9707      	str	r7, [sp, #28]
 8008884:	d027      	beq.n	80088d6 <LCD_DrawBitmap+0x106>
 8008886:	dc0d      	bgt.n	80088a4 <LCD_DrawBitmap+0xd4>
 8008888:	2e02      	cmp	r6, #2
 800888a:	d014      	beq.n	80088b6 <LCD_DrawBitmap+0xe6>
 800888c:	2e04      	cmp	r6, #4
 800888e:	d01a      	beq.n	80088c6 <LCD_DrawBitmap+0xf6>
 8008890:	2e01      	cmp	r6, #1
 8008892:	d126      	bne.n	80088e2 <LCD_DrawBitmap+0x112>
 8008894:	f023 0c07 	bic.w	ip, r3, #7
 8008898:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800889c:	4465      	add	r5, ip
 800889e:	f003 0307 	and.w	r3, r3, #7
 80088a2:	e01e      	b.n	80088e2 <LCD_DrawBitmap+0x112>
 80088a4:	2e18      	cmp	r6, #24
 80088a6:	d018      	beq.n	80088da <LCD_DrawBitmap+0x10a>
 80088a8:	2e20      	cmp	r6, #32
 80088aa:	d016      	beq.n	80088da <LCD_DrawBitmap+0x10a>
 80088ac:	2e10      	cmp	r6, #16
 80088ae:	d118      	bne.n	80088e2 <LCD_DrawBitmap+0x112>
 80088b0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80088b4:	e013      	b.n	80088de <LCD_DrawBitmap+0x10e>
 80088b6:	f023 0c03 	bic.w	ip, r3, #3
 80088ba:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 80088be:	4465      	add	r5, ip
 80088c0:	f003 0303 	and.w	r3, r3, #3
 80088c4:	e00d      	b.n	80088e2 <LCD_DrawBitmap+0x112>
 80088c6:	f023 0c01 	bic.w	ip, r3, #1
 80088ca:	eb04 0463 	add.w	r4, r4, r3, asr #1
 80088ce:	4465      	add	r5, ip
 80088d0:	f003 0301 	and.w	r3, r3, #1
 80088d4:	e005      	b.n	80088e2 <LCD_DrawBitmap+0x112>
 80088d6:	441c      	add	r4, r3
 80088d8:	e001      	b.n	80088de <LCD_DrawBitmap+0x10e>
 80088da:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80088de:	4665      	mov	r5, ip
 80088e0:	2300      	movs	r3, #0
 80088e2:	9f07      	ldr	r7, [sp, #28]
 80088e4:	2f00      	cmp	r7, #0
 80088e6:	dd76      	ble.n	80089d6 <LCD_DrawBitmap+0x206>
 80088e8:	f890 e011 	ldrb.w	lr, [r0, #17]
 80088ec:	483c      	ldr	r0, [pc, #240]	; (80089e0 <LCD_DrawBitmap+0x210>)
 80088ee:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80088f0:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 80088f4:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80088f8:	9403      	str	r4, [sp, #12]
 80088fa:	e88d 0042 	stmia.w	sp, {r1, r6}
 80088fe:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8008900:	9304      	str	r3, [sp, #16]
 8008902:	9702      	str	r7, [sp, #8]
 8008904:	9405      	str	r4, [sp, #20]
 8008906:	f8de 4004 	ldr.w	r4, [lr, #4]
 800890a:	9b07      	ldr	r3, [sp, #28]
 800890c:	4629      	mov	r1, r5
 800890e:	47a0      	blx	r4
 8008910:	e061      	b.n	80089d6 <LCD_DrawBitmap+0x206>
 8008912:	f1c6 0708 	rsb	r7, r6, #8
 8008916:	970e      	str	r7, [sp, #56]	; 0x38
 8008918:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800891c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800891e:	455f      	cmp	r7, fp
 8008920:	da59      	bge.n	80089d6 <LCD_DrawBitmap+0x206>
 8008922:	4b2e      	ldr	r3, [pc, #184]	; (80089dc <LCD_DrawBitmap+0x20c>)
 8008924:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4447      	add	r7, r8
 800892a:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800892e:	970c      	str	r7, [sp, #48]	; 0x30
 8008930:	3f01      	subs	r7, #1
 8008932:	4297      	cmp	r7, r2
 8008934:	970d      	str	r7, [sp, #52]	; 0x34
 8008936:	db46      	blt.n	80089c6 <LCD_DrawBitmap+0x1f6>
 8008938:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800893c:	4598      	cmp	r8, r3
 800893e:	dc42      	bgt.n	80089c6 <LCD_DrawBitmap+0x1f6>
 8008940:	f04f 0a00 	mov.w	sl, #0
 8008944:	940b      	str	r4, [sp, #44]	; 0x2c
 8008946:	46ac      	mov	ip, r5
 8008948:	4657      	mov	r7, sl
 800894a:	9807      	ldr	r0, [sp, #28]
 800894c:	4287      	cmp	r7, r0
 800894e:	da3a      	bge.n	80089c6 <LCD_DrawBitmap+0x1f6>
 8008950:	f1ba 0f00 	cmp.w	sl, #0
 8008954:	d106      	bne.n	8008964 <LCD_DrawBitmap+0x194>
 8008956:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008958:	f890 9000 	ldrb.w	r9, [r0]
 800895c:	3001      	adds	r0, #1
 800895e:	900b      	str	r0, [sp, #44]	; 0x2c
 8008960:	f04f 0a08 	mov.w	sl, #8
 8008964:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008966:	4a1d      	ldr	r2, [pc, #116]	; (80089dc <LCD_DrawBitmap+0x20c>)
 8008968:	fa49 f301 	asr.w	r3, r9, r1
 800896c:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8008970:	fa09 f906 	lsl.w	r9, r9, r6
 8008974:	fa5f f989 	uxtb.w	r9, r9
 8008978:	ebc6 0a0a 	rsb	sl, r6, sl
 800897c:	d103      	bne.n	8008986 <LCD_DrawBitmap+0x1b6>
 800897e:	6810      	ldr	r0, [r2, #0]
 8008980:	7c00      	ldrb	r0, [r0, #16]
 8008982:	0780      	lsls	r0, r0, #30
 8008984:	d41b      	bmi.n	80089be <LCD_DrawBitmap+0x1ee>
 8008986:	6812      	ldr	r2, [r2, #0]
 8008988:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800898a:	6810      	ldr	r0, [r2, #0]
 800898c:	900f      	str	r0, [sp, #60]	; 0x3c
 800898e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8008990:	b110      	cbz	r0, 8008998 <LCD_DrawBitmap+0x1c8>
 8008992:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8008996:	e000      	b.n	800899a <LCD_DrawBitmap+0x1ca>
 8008998:	b2db      	uxtb	r3, r3
 800899a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800899c:	6013      	str	r3, [r2, #0]
 800899e:	1e4a      	subs	r2, r1, #1
 80089a0:	4462      	add	r2, ip
 80089a2:	4660      	mov	r0, ip
 80089a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089a6:	f8cd c020 	str.w	ip, [sp, #32]
 80089aa:	4641      	mov	r1, r8
 80089ac:	f7ff fe08 	bl	80085c0 <LCD_FillRect>
 80089b0:	4b0a      	ldr	r3, [pc, #40]	; (80089dc <LCD_DrawBitmap+0x20c>)
 80089b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f8dd c020 	ldr.w	ip, [sp, #32]
 80089ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089bc:	601a      	str	r2, [r3, #0]
 80089be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80089c0:	3701      	adds	r7, #1
 80089c2:	449c      	add	ip, r3
 80089c4:	e7c1      	b.n	800894a <LCD_DrawBitmap+0x17a>
 80089c6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80089c8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80089cc:	3701      	adds	r7, #1
 80089ce:	970a      	str	r7, [sp, #40]	; 0x28
 80089d0:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80089d2:	443c      	add	r4, r7
 80089d4:	e7a2      	b.n	800891c <LCD_DrawBitmap+0x14c>
 80089d6:	b011      	add	sp, #68	; 0x44
 80089d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089dc:	20000024 	.word	0x20000024
 80089e0:	200194c8 	.word	0x200194c8
 80089e4:	2001949c 	.word	0x2001949c

080089e8 <LCD_SetClipRectMax>:
 80089e8:	b508      	push	{r3, lr}
 80089ea:	4b05      	ldr	r3, [pc, #20]	; (8008a00 <LCD_SetClipRectMax+0x18>)
 80089ec:	6819      	ldr	r1, [r3, #0]
 80089ee:	4b05      	ldr	r3, [pc, #20]	; (8008a04 <LCD_SetClipRectMax+0x1c>)
 80089f0:	7c4a      	ldrb	r2, [r1, #17]
 80089f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80089f6:	68c3      	ldr	r3, [r0, #12]
 80089f8:	3108      	adds	r1, #8
 80089fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fc:	4798      	blx	r3
 80089fe:	bd08      	pop	{r3, pc}
 8008a00:	20000024 	.word	0x20000024
 8008a04:	200194c8 	.word	0x200194c8

08008a08 <emWin_LCD_Init>:
 8008a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a0a:	f7ff ffed 	bl	80089e8 <LCD_SetClipRectMax>
 8008a0e:	f004 fb75 	bl	800d0fc <LCD_InitColors>
 8008a12:	4604      	mov	r4, r0
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d13d      	bne.n	8008a94 <emWin_LCD_Init+0x8c>
 8008a18:	4605      	mov	r5, r0
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	f001 fb68 	bl	800a0f0 <GUI_DEVICE__GetpDriver>
 8008a20:	9001      	str	r0, [sp, #4]
 8008a22:	b148      	cbz	r0, 8008a38 <emWin_LCD_Init+0x30>
 8008a24:	68c3      	ldr	r3, [r0, #12]
 8008a26:	210c      	movs	r1, #12
 8008a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2a:	a801      	add	r0, sp, #4
 8008a2c:	4798      	blx	r3
 8008a2e:	4603      	mov	r3, r0
 8008a30:	b370      	cbz	r0, 8008a90 <emWin_LCD_Init+0x88>
 8008a32:	9801      	ldr	r0, [sp, #4]
 8008a34:	4798      	blx	r3
 8008a36:	4304      	orrs	r4, r0
 8008a38:	3501      	adds	r5, #1
 8008a3a:	2d02      	cmp	r5, #2
 8008a3c:	d1ed      	bne.n	8008a1a <emWin_LCD_Init+0x12>
 8008a3e:	bb4c      	cbnz	r4, 8008a94 <emWin_LCD_Init+0x8c>
 8008a40:	f004 fb78 	bl	800d134 <LCD_InitLUT>
 8008a44:	2401      	movs	r4, #1
 8008a46:	4620      	mov	r0, r4
 8008a48:	f001 fb52 	bl	800a0f0 <GUI_DEVICE__GetpDriver>
 8008a4c:	9001      	str	r0, [sp, #4]
 8008a4e:	b1d0      	cbz	r0, 8008a86 <emWin_LCD_Init+0x7e>
 8008a50:	4620      	mov	r0, r4
 8008a52:	f000 ff33 	bl	80098bc <GUI_SelectLayer>
 8008a56:	2004      	movs	r0, #4
 8008a58:	f7ff fd30 	bl	80084bc <LCD_SetDrawMode>
 8008a5c:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8008a60:	2000      	movs	r0, #0
 8008a62:	4601      	mov	r1, r0
 8008a64:	4613      	mov	r3, r2
 8008a66:	f7ff fdab 	bl	80085c0 <LCD_FillRect>
 8008a6a:	2000      	movs	r0, #0
 8008a6c:	f7ff fd26 	bl	80084bc <LCD_SetDrawMode>
 8008a70:	a802      	add	r0, sp, #8
 8008a72:	210e      	movs	r1, #14
 8008a74:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7c:	4798      	blx	r3
 8008a7e:	4603      	mov	r3, r0
 8008a80:	b108      	cbz	r0, 8008a86 <emWin_LCD_Init+0x7e>
 8008a82:	9801      	ldr	r0, [sp, #4]
 8008a84:	4798      	blx	r3
 8008a86:	f114 34ff 	adds.w	r4, r4, #4294967295
 8008a8a:	d2dc      	bcs.n	8008a46 <emWin_LCD_Init+0x3e>
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	e002      	b.n	8008a96 <emWin_LCD_Init+0x8e>
 8008a90:	2001      	movs	r0, #1
 8008a92:	e000      	b.n	8008a96 <emWin_LCD_Init+0x8e>
 8008a94:	4620      	mov	r0, r4
 8008a96:	b003      	add	sp, #12
 8008a98:	bd30      	pop	{r4, r5, pc}
	...

08008a9c <LCD_Color2Index>:
 8008a9c:	b508      	push	{r3, lr}
 8008a9e:	4b05      	ldr	r3, [pc, #20]	; (8008ab4 <LCD_Color2Index+0x18>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	7c5a      	ldrb	r2, [r3, #17]
 8008aa4:	4b04      	ldr	r3, [pc, #16]	; (8008ab8 <LCD_Color2Index+0x1c>)
 8008aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4798      	blx	r3
 8008ab0:	bd08      	pop	{r3, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20000024 	.word	0x20000024
 8008ab8:	200194c8 	.word	0x200194c8

08008abc <LCD_Index2Color>:
 8008abc:	b508      	push	{r3, lr}
 8008abe:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <LCD_Index2Color+0x18>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	7c5a      	ldrb	r2, [r3, #17]
 8008ac4:	4b04      	ldr	r3, [pc, #16]	; (8008ad8 <LCD_Index2Color+0x1c>)
 8008ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	4798      	blx	r3
 8008ad0:	bd08      	pop	{r3, pc}
 8008ad2:	bf00      	nop
 8008ad4:	20000024 	.word	0x20000024
 8008ad8:	200194c8 	.word	0x200194c8

08008adc <LCD_SetColorIndex>:
 8008adc:	4b04      	ldr	r3, [pc, #16]	; (8008af0 <LCD_SetColorIndex+0x14>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	7c1a      	ldrb	r2, [r3, #16]
 8008ae2:	0752      	lsls	r2, r2, #29
 8008ae4:	bf4c      	ite	mi
 8008ae6:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 8008ae8:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 8008aea:	6018      	str	r0, [r3, #0]
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	20000024 	.word	0x20000024

08008af4 <_SetColor>:
 8008af4:	b508      	push	{r3, lr}
 8008af6:	4b06      	ldr	r3, [pc, #24]	; (8008b10 <_SetColor+0x1c>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008afc:	4281      	cmp	r1, r0
 8008afe:	d006      	beq.n	8008b0e <_SetColor+0x1a>
 8008b00:	6318      	str	r0, [r3, #48]	; 0x30
 8008b02:	f7ff ffcb 	bl	8008a9c <LCD_Color2Index>
 8008b06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008b0a:	f7ff bfe7 	b.w	8008adc <LCD_SetColorIndex>
 8008b0e:	bd08      	pop	{r3, pc}
 8008b10:	20000024 	.word	0x20000024

08008b14 <LCD_SetBkColorIndex>:
 8008b14:	4b04      	ldr	r3, [pc, #16]	; (8008b28 <LCD_SetBkColorIndex+0x14>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	7c1a      	ldrb	r2, [r3, #16]
 8008b1a:	0752      	lsls	r2, r2, #29
 8008b1c:	bf4c      	ite	mi
 8008b1e:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 8008b20:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 8008b22:	6018      	str	r0, [r3, #0]
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	20000024 	.word	0x20000024

08008b2c <_SetBkColor>:
 8008b2c:	b508      	push	{r3, lr}
 8008b2e:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <_SetBkColor+0x1c>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008b34:	4281      	cmp	r1, r0
 8008b36:	d006      	beq.n	8008b46 <_SetBkColor+0x1a>
 8008b38:	6358      	str	r0, [r3, #52]	; 0x34
 8008b3a:	f7ff ffaf 	bl	8008a9c <LCD_Color2Index>
 8008b3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008b42:	f7ff bfe7 	b.w	8008b14 <LCD_SetBkColorIndex>
 8008b46:	bd08      	pop	{r3, pc}
 8008b48:	20000024 	.word	0x20000024

08008b4c <LCD_SetBkColor>:
 8008b4c:	b508      	push	{r3, lr}
 8008b4e:	4b02      	ldr	r3, [pc, #8]	; (8008b58 <LCD_SetBkColor+0xc>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	4798      	blx	r3
 8008b56:	bd08      	pop	{r3, pc}
 8008b58:	20000018 	.word	0x20000018

08008b5c <LCD_SetColor>:
 8008b5c:	b508      	push	{r3, lr}
 8008b5e:	4b02      	ldr	r3, [pc, #8]	; (8008b68 <LCD_SetColor+0xc>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4798      	blx	r3
 8008b66:	bd08      	pop	{r3, pc}
 8008b68:	20000018 	.word	0x20000018

08008b6c <GUI__memset16>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	0784      	lsls	r4, r0, #30
 8008b70:	d502      	bpl.n	8008b78 <GUI__memset16+0xc>
 8008b72:	8001      	strh	r1, [r0, #0]
 8008b74:	3a01      	subs	r2, #1
 8008b76:	3002      	adds	r0, #2
 8008b78:	0855      	lsrs	r5, r2, #1
 8008b7a:	462b      	mov	r3, r5
 8008b7c:	b305      	cbz	r5, 8008bc0 <GUI__memset16+0x54>
 8008b7e:	2d03      	cmp	r5, #3
 8008b80:	eb01 4401 	add.w	r4, r1, r1, lsl #16
 8008b84:	dc02      	bgt.n	8008b8c <GUI__memset16+0x20>
 8008b86:	4606      	mov	r6, r0
 8008b88:	461d      	mov	r5, r3
 8008b8a:	e012      	b.n	8008bb2 <GUI__memset16+0x46>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	462e      	mov	r6, r5
 8008b90:	3e04      	subs	r6, #4
 8008b92:	2e03      	cmp	r6, #3
 8008b94:	601c      	str	r4, [r3, #0]
 8008b96:	605c      	str	r4, [r3, #4]
 8008b98:	609c      	str	r4, [r3, #8]
 8008b9a:	60dc      	str	r4, [r3, #12]
 8008b9c:	f103 0310 	add.w	r3, r3, #16
 8008ba0:	dcf6      	bgt.n	8008b90 <GUI__memset16+0x24>
 8008ba2:	3d04      	subs	r5, #4
 8008ba4:	08ab      	lsrs	r3, r5, #2
 8008ba6:	1c5e      	adds	r6, r3, #1
 8008ba8:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 8008bac:	eba5 0383 	sub.w	r3, r5, r3, lsl #2
 8008bb0:	e7e9      	b.n	8008b86 <GUI__memset16+0x1a>
 8008bb2:	b11d      	cbz	r5, 8008bbc <GUI__memset16+0x50>
 8008bb4:	f846 4b04 	str.w	r4, [r6], #4
 8008bb8:	3d01      	subs	r5, #1
 8008bba:	e7fa      	b.n	8008bb2 <GUI__memset16+0x46>
 8008bbc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008bc0:	07d3      	lsls	r3, r2, #31
 8008bc2:	bf48      	it	mi
 8008bc4:	8001      	strhmi	r1, [r0, #0]
 8008bc6:	bd70      	pop	{r4, r5, r6, pc}

08008bc8 <GUI__memset>:
 8008bc8:	b570      	push	{r4, r5, r6, lr}
 8008bca:	b12a      	cbz	r2, 8008bd8 <GUI__memset+0x10>
 8008bcc:	0783      	lsls	r3, r0, #30
 8008bce:	d003      	beq.n	8008bd8 <GUI__memset+0x10>
 8008bd0:	f800 1b01 	strb.w	r1, [r0], #1
 8008bd4:	3a01      	subs	r2, #1
 8008bd6:	e7f8      	b.n	8008bca <GUI__memset+0x2>
 8008bd8:	0893      	lsrs	r3, r2, #2
 8008bda:	d101      	bne.n	8008be0 <GUI__memset+0x18>
 8008bdc:	4402      	add	r2, r0
 8008bde:	e017      	b.n	8008c10 <GUI__memset+0x48>
 8008be0:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 8008be4:	f002 0203 	and.w	r2, r2, #3
 8008be8:	434c      	muls	r4, r1
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	4605      	mov	r5, r0
 8008bee:	dd06      	ble.n	8008bfe <GUI__memset+0x36>
 8008bf0:	6004      	str	r4, [r0, #0]
 8008bf2:	6044      	str	r4, [r0, #4]
 8008bf4:	6084      	str	r4, [r0, #8]
 8008bf6:	60c4      	str	r4, [r0, #12]
 8008bf8:	3b04      	subs	r3, #4
 8008bfa:	3010      	adds	r0, #16
 8008bfc:	e7f5      	b.n	8008bea <GUI__memset+0x22>
 8008bfe:	461e      	mov	r6, r3
 8008c00:	b11b      	cbz	r3, 8008c0a <GUI__memset+0x42>
 8008c02:	f845 4b04 	str.w	r4, [r5], #4
 8008c06:	3b01      	subs	r3, #1
 8008c08:	e7fa      	b.n	8008c00 <GUI__memset+0x38>
 8008c0a:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8008c0e:	e7e5      	b.n	8008bdc <GUI__memset+0x14>
 8008c10:	4290      	cmp	r0, r2
 8008c12:	d002      	beq.n	8008c1a <GUI__memset+0x52>
 8008c14:	f800 1b01 	strb.w	r1, [r0], #1
 8008c18:	e7fa      	b.n	8008c10 <GUI__memset+0x48>
 8008c1a:	bd70      	pop	{r4, r5, r6, pc}

08008c1c <GUI__ManageCacheEx>:
 8008c1c:	2801      	cmp	r0, #1
 8008c1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c20:	4604      	mov	r4, r0
 8008c22:	460d      	mov	r5, r1
 8008c24:	dc65      	bgt.n	8008cf2 <GUI__ManageCacheEx+0xd6>
 8008c26:	4b34      	ldr	r3, [pc, #208]	; (8008cf8 <GUI__ManageCacheEx+0xdc>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	b103      	cbz	r3, 8008c2e <GUI__ManageCacheEx+0x12>
 8008c2c:	4798      	blx	r3
 8008c2e:	2d01      	cmp	r5, #1
 8008c30:	d004      	beq.n	8008c3c <GUI__ManageCacheEx+0x20>
 8008c32:	2d02      	cmp	r5, #2
 8008c34:	d021      	beq.n	8008c7a <GUI__ManageCacheEx+0x5e>
 8008c36:	2d00      	cmp	r5, #0
 8008c38:	d15b      	bne.n	8008cf2 <GUI__ManageCacheEx+0xd6>
 8008c3a:	e035      	b.n	8008ca8 <GUI__ManageCacheEx+0x8c>
 8008c3c:	4e2f      	ldr	r6, [pc, #188]	; (8008cfc <GUI__ManageCacheEx+0xe0>)
 8008c3e:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 8008c42:	b9b7      	cbnz	r7, 8008c72 <GUI__ManageCacheEx+0x56>
 8008c44:	4620      	mov	r0, r4
 8008c46:	f001 fa53 	bl	800a0f0 <GUI_DEVICE__GetpDriver>
 8008c4a:	9001      	str	r0, [sp, #4]
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	d050      	beq.n	8008cf2 <GUI__ManageCacheEx+0xd6>
 8008c50:	68c3      	ldr	r3, [r0, #12]
 8008c52:	210d      	movs	r1, #13
 8008c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c56:	a801      	add	r0, sp, #4
 8008c58:	4798      	blx	r3
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	d048      	beq.n	8008cf2 <GUI__ManageCacheEx+0xd6>
 8008c60:	9801      	ldr	r0, [sp, #4]
 8008c62:	4629      	mov	r1, r5
 8008c64:	4798      	blx	r3
 8008c66:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 8008c70:	e018      	b.n	8008ca4 <GUI__ManageCacheEx+0x88>
 8008c72:	3701      	adds	r7, #1
 8008c74:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 8008c78:	e03b      	b.n	8008cf2 <GUI__ManageCacheEx+0xd6>
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f001 fa38 	bl	800a0f0 <GUI_DEVICE__GetpDriver>
 8008c80:	9001      	str	r0, [sp, #4]
 8008c82:	2800      	cmp	r0, #0
 8008c84:	d035      	beq.n	8008cf2 <GUI__ManageCacheEx+0xd6>
 8008c86:	68c3      	ldr	r3, [r0, #12]
 8008c88:	210d      	movs	r1, #13
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8c:	a801      	add	r0, sp, #4
 8008c8e:	4798      	blx	r3
 8008c90:	4604      	mov	r4, r0
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d02d      	beq.n	8008cf2 <GUI__ManageCacheEx+0xd6>
 8008c96:	4b1a      	ldr	r3, [pc, #104]	; (8008d00 <GUI__ManageCacheEx+0xe4>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	b103      	cbz	r3, 8008c9e <GUI__ManageCacheEx+0x82>
 8008c9c:	4798      	blx	r3
 8008c9e:	9801      	ldr	r0, [sp, #4]
 8008ca0:	2102      	movs	r1, #2
 8008ca2:	47a0      	blx	r4
 8008ca4:	2000      	movs	r0, #0
 8008ca6:	e025      	b.n	8008cf4 <GUI__ManageCacheEx+0xd8>
 8008ca8:	4d14      	ldr	r5, [pc, #80]	; (8008cfc <GUI__ManageCacheEx+0xe0>)
 8008caa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d001      	beq.n	8008cb6 <GUI__ManageCacheEx+0x9a>
 8008cb2:	2001      	movs	r0, #1
 8008cb4:	e015      	b.n	8008ce2 <GUI__ManageCacheEx+0xc6>
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	f001 fa1a 	bl	800a0f0 <GUI_DEVICE__GetpDriver>
 8008cbc:	9001      	str	r0, [sp, #4]
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	d0f7      	beq.n	8008cb2 <GUI__ManageCacheEx+0x96>
 8008cc2:	68c3      	ldr	r3, [r0, #12]
 8008cc4:	210d      	movs	r1, #13
 8008cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc8:	a801      	add	r0, sp, #4
 8008cca:	4798      	blx	r3
 8008ccc:	4606      	mov	r6, r0
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	d0ef      	beq.n	8008cb2 <GUI__ManageCacheEx+0x96>
 8008cd2:	4b0b      	ldr	r3, [pc, #44]	; (8008d00 <GUI__ManageCacheEx+0xe4>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	b103      	cbz	r3, 8008cda <GUI__ManageCacheEx+0xbe>
 8008cd8:	4798      	blx	r3
 8008cda:	9801      	ldr	r0, [sp, #4]
 8008cdc:	2100      	movs	r1, #0
 8008cde:	47b0      	blx	r6
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	bf18      	it	ne
 8008cea:	3b01      	subne	r3, #1
 8008cec:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 8008cf0:	e000      	b.n	8008cf4 <GUI__ManageCacheEx+0xd8>
 8008cf2:	2001      	movs	r0, #1
 8008cf4:	b003      	add	sp, #12
 8008cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cf8:	20019110 	.word	0x20019110
 8008cfc:	20019108 	.word	0x20019108
 8008d00:	20019104 	.word	0x20019104

08008d04 <GUI__ManageCache>:
 8008d04:	4b02      	ldr	r3, [pc, #8]	; (8008d10 <GUI__ManageCache+0xc>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4601      	mov	r1, r0
 8008d0a:	7c58      	ldrb	r0, [r3, #17]
 8008d0c:	f7ff bf86 	b.w	8008c1c <GUI__ManageCacheEx>
 8008d10:	20000024 	.word	0x20000024

08008d14 <GUI__IntersectRects>:
 8008d14:	b570      	push	{r4, r5, r6, lr}
 8008d16:	f9b2 3000 	ldrsh.w	r3, [r2]
 8008d1a:	f9b1 4000 	ldrsh.w	r4, [r1]
 8008d1e:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8008d22:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 8008d26:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 8008d2a:	429c      	cmp	r4, r3
 8008d2c:	bfb8      	it	lt
 8008d2e:	461c      	movlt	r4, r3
 8008d30:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8008d34:	429d      	cmp	r5, r3
 8008d36:	bfa8      	it	ge
 8008d38:	462b      	movge	r3, r5
 8008d3a:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8008d3e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8008d42:	42ae      	cmp	r6, r5
 8008d44:	bfb8      	it	lt
 8008d46:	4635      	movlt	r5, r6
 8008d48:	b2a4      	uxth	r4, r4
 8008d4a:	b2ad      	uxth	r5, r5
 8008d4c:	4291      	cmp	r1, r2
 8008d4e:	bfb8      	it	lt
 8008d50:	460a      	movlt	r2, r1
 8008d52:	8004      	strh	r4, [r0, #0]
 8008d54:	8085      	strh	r5, [r0, #4]
 8008d56:	b224      	sxth	r4, r4
 8008d58:	b22d      	sxth	r5, r5
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	b292      	uxth	r2, r2
 8008d5e:	42a5      	cmp	r5, r4
 8008d60:	8043      	strh	r3, [r0, #2]
 8008d62:	80c2      	strh	r2, [r0, #6]
 8008d64:	db06      	blt.n	8008d74 <GUI__IntersectRects+0x60>
 8008d66:	b210      	sxth	r0, r2
 8008d68:	b21b      	sxth	r3, r3
 8008d6a:	4298      	cmp	r0, r3
 8008d6c:	bfb4      	ite	lt
 8008d6e:	2000      	movlt	r0, #0
 8008d70:	2001      	movge	r0, #1
 8008d72:	bd70      	pop	{r4, r5, r6, pc}
 8008d74:	2000      	movs	r0, #0
 8008d76:	bd70      	pop	{r4, r5, r6, pc}

08008d78 <GUI__IntersectRect>:
 8008d78:	880b      	ldrh	r3, [r1, #0]
 8008d7a:	b510      	push	{r4, lr}
 8008d7c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8008d80:	b21a      	sxth	r2, r3
 8008d82:	4294      	cmp	r4, r2
 8008d84:	bfb8      	it	lt
 8008d86:	8003      	strhlt	r3, [r0, #0]
 8008d88:	884b      	ldrh	r3, [r1, #2]
 8008d8a:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8008d8e:	b21a      	sxth	r2, r3
 8008d90:	4294      	cmp	r4, r2
 8008d92:	bfb8      	it	lt
 8008d94:	8043      	strhlt	r3, [r0, #2]
 8008d96:	888b      	ldrh	r3, [r1, #4]
 8008d98:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8008d9c:	b21a      	sxth	r2, r3
 8008d9e:	4294      	cmp	r4, r2
 8008da0:	bfc8      	it	gt
 8008da2:	8083      	strhgt	r3, [r0, #4]
 8008da4:	88cb      	ldrh	r3, [r1, #6]
 8008da6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8008daa:	b21a      	sxth	r2, r3
 8008dac:	4291      	cmp	r1, r2
 8008dae:	bfc8      	it	gt
 8008db0:	80c3      	strhgt	r3, [r0, #6]
 8008db2:	bd10      	pop	{r4, pc}

08008db4 <GUI__MixColors>:
 8008db4:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 8008db8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8008dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dbe:	d027      	beq.n	8008e10 <GUI__MixColors+0x5c>
 8008dc0:	43d3      	mvns	r3, r2
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	b2cd      	uxtb	r5, r1
 8008dc6:	b2c6      	uxtb	r6, r0
 8008dc8:	435d      	muls	r5, r3
 8008dca:	fb02 5506 	mla	r5, r2, r6, r5
 8008dce:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 8008dd2:	f400 447f 	and.w	r4, r0, #65280	; 0xff00
 8008dd6:	435e      	muls	r6, r3
 8008dd8:	fb02 6604 	mla	r6, r2, r4, r6
 8008ddc:	f401 047f 	and.w	r4, r1, #16711680	; 0xff0000
 8008de0:	f400 077f 	and.w	r7, r0, #16711680	; 0xff0000
 8008de4:	435c      	muls	r4, r3
 8008de6:	0e09      	lsrs	r1, r1, #24
 8008de8:	0e00      	lsrs	r0, r0, #24
 8008dea:	fb02 4407 	mla	r4, r2, r7, r4
 8008dee:	434b      	muls	r3, r1
 8008df0:	0a36      	lsrs	r6, r6, #8
 8008df2:	fb02 3200 	mla	r2, r2, r0, r3
 8008df6:	0a24      	lsrs	r4, r4, #8
 8008df8:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8008dfc:	f406 407f 	and.w	r0, r6, #65280	; 0xff00
 8008e00:	4318      	orrs	r0, r3
 8008e02:	0412      	lsls	r2, r2, #16
 8008e04:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
 8008e08:	4318      	orrs	r0, r3
 8008e0a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008e0e:	4310      	orrs	r0, r2
 8008e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008e14 <_OnExit>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	4c0a      	ldr	r4, [pc, #40]	; (8008e40 <_OnExit+0x2c>)
 8008e18:	4d0a      	ldr	r5, [pc, #40]	; (8008e44 <_OnExit+0x30>)
 8008e1a:	6820      	ldr	r0, [r4, #0]
 8008e1c:	4e0a      	ldr	r6, [pc, #40]	; (8008e48 <_OnExit+0x34>)
 8008e1e:	f002 f91f 	bl	800b060 <GUI_ALLOC_FreeFixedBlock>
 8008e22:	6828      	ldr	r0, [r5, #0]
 8008e24:	f002 f91c 	bl	800b060 <GUI_ALLOC_FreeFixedBlock>
 8008e28:	6830      	ldr	r0, [r6, #0]
 8008e2a:	f002 f919 	bl	800b060 <GUI_ALLOC_FreeFixedBlock>
 8008e2e:	4a07      	ldr	r2, [pc, #28]	; (8008e4c <_OnExit+0x38>)
 8008e30:	2300      	movs	r3, #0
 8008e32:	6013      	str	r3, [r2, #0]
 8008e34:	4a06      	ldr	r2, [pc, #24]	; (8008e50 <_OnExit+0x3c>)
 8008e36:	6033      	str	r3, [r6, #0]
 8008e38:	602b      	str	r3, [r5, #0]
 8008e3a:	6023      	str	r3, [r4, #0]
 8008e3c:	6013      	str	r3, [r2, #0]
 8008e3e:	bd70      	pop	{r4, r5, r6, pc}
 8008e40:	20019118 	.word	0x20019118
 8008e44:	20019114 	.word	0x20019114
 8008e48:	2001911c 	.word	0x2001911c
 8008e4c:	20019120 	.word	0x20019120
 8008e50:	20019130 	.word	0x20019130

08008e54 <GUI__GetAlphaBuffer>:
 8008e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e58:	461c      	mov	r4, r3
 8008e5a:	4b28      	ldr	r3, [pc, #160]	; (8008efc <GUI__GetAlphaBuffer+0xa8>)
 8008e5c:	4617      	mov	r7, r2
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	4606      	mov	r6, r0
 8008e62:	4688      	mov	r8, r1
 8008e64:	b932      	cbnz	r2, 8008e74 <GUI__GetAlphaBuffer+0x20>
 8008e66:	2201      	movs	r2, #1
 8008e68:	4825      	ldr	r0, [pc, #148]	; (8008f00 <GUI__GetAlphaBuffer+0xac>)
 8008e6a:	601a      	str	r2, [r3, #0]
 8008e6c:	4b25      	ldr	r3, [pc, #148]	; (8008f04 <GUI__GetAlphaBuffer+0xb0>)
 8008e6e:	6003      	str	r3, [r0, #0]
 8008e70:	f001 fa78 	bl	800a364 <GUI__RegisterExit>
 8008e74:	4d24      	ldr	r5, [pc, #144]	; (8008f08 <GUI__GetAlphaBuffer+0xb4>)
 8008e76:	682b      	ldr	r3, [r5, #0]
 8008e78:	b933      	cbnz	r3, 8008e88 <GUI__GetAlphaBuffer+0x34>
 8008e7a:	4b24      	ldr	r3, [pc, #144]	; (8008f0c <GUI__GetAlphaBuffer+0xb8>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	602b      	str	r3, [r5, #0]
 8008e80:	b913      	cbnz	r3, 8008e88 <GUI__GetAlphaBuffer+0x34>
 8008e82:	f7ff fa97 	bl	80083b4 <LCD_GetVXSizeMax>
 8008e86:	6028      	str	r0, [r5, #0]
 8008e88:	b10c      	cbz	r4, 8008e8e <GUI__GetAlphaBuffer+0x3a>
 8008e8a:	682b      	ldr	r3, [r5, #0]
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	b196      	cbz	r6, 8008eb6 <GUI__GetAlphaBuffer+0x62>
 8008e90:	4b1f      	ldr	r3, [pc, #124]	; (8008f10 <GUI__GetAlphaBuffer+0xbc>)
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	4699      	mov	r9, r3
 8008e96:	2400      	movs	r4, #0
 8008e98:	b94a      	cbnz	r2, 8008eae <GUI__GetAlphaBuffer+0x5a>
 8008e9a:	6828      	ldr	r0, [r5, #0]
 8008e9c:	0080      	lsls	r0, r0, #2
 8008e9e:	f002 fa3f 	bl	800b320 <GUI_ALLOC_GetFixedBlock>
 8008ea2:	f1d0 0401 	rsbs	r4, r0, #1
 8008ea6:	f8c9 0000 	str.w	r0, [r9]
 8008eaa:	bf38      	it	cc
 8008eac:	2400      	movcc	r4, #0
 8008eae:	f8d9 3000 	ldr.w	r3, [r9]
 8008eb2:	6033      	str	r3, [r6, #0]
 8008eb4:	e000      	b.n	8008eb8 <GUI__GetAlphaBuffer+0x64>
 8008eb6:	4634      	mov	r4, r6
 8008eb8:	f1b8 0f00 	cmp.w	r8, #0
 8008ebc:	d00d      	beq.n	8008eda <GUI__GetAlphaBuffer+0x86>
 8008ebe:	4e15      	ldr	r6, [pc, #84]	; (8008f14 <GUI__GetAlphaBuffer+0xc0>)
 8008ec0:	6833      	ldr	r3, [r6, #0]
 8008ec2:	b93b      	cbnz	r3, 8008ed4 <GUI__GetAlphaBuffer+0x80>
 8008ec4:	6828      	ldr	r0, [r5, #0]
 8008ec6:	0080      	lsls	r0, r0, #2
 8008ec8:	f002 fa2a 	bl	800b320 <GUI_ALLOC_GetFixedBlock>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	6030      	str	r0, [r6, #0]
 8008ed0:	bf08      	it	eq
 8008ed2:	2401      	moveq	r4, #1
 8008ed4:	6833      	ldr	r3, [r6, #0]
 8008ed6:	f8c8 3000 	str.w	r3, [r8]
 8008eda:	b167      	cbz	r7, 8008ef6 <GUI__GetAlphaBuffer+0xa2>
 8008edc:	4e0e      	ldr	r6, [pc, #56]	; (8008f18 <GUI__GetAlphaBuffer+0xc4>)
 8008ede:	6833      	ldr	r3, [r6, #0]
 8008ee0:	b93b      	cbnz	r3, 8008ef2 <GUI__GetAlphaBuffer+0x9e>
 8008ee2:	6828      	ldr	r0, [r5, #0]
 8008ee4:	0080      	lsls	r0, r0, #2
 8008ee6:	f002 fa1b 	bl	800b320 <GUI_ALLOC_GetFixedBlock>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	6030      	str	r0, [r6, #0]
 8008eee:	bf08      	it	eq
 8008ef0:	2401      	moveq	r4, #1
 8008ef2:	6833      	ldr	r3, [r6, #0]
 8008ef4:	603b      	str	r3, [r7, #0]
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008efc:	20019130 	.word	0x20019130
 8008f00:	20019128 	.word	0x20019128
 8008f04:	08008e15 	.word	0x08008e15
 8008f08:	20019120 	.word	0x20019120
 8008f0c:	200194d0 	.word	0x200194d0
 8008f10:	20019118 	.word	0x20019118
 8008f14:	20019114 	.word	0x20019114
 8008f18:	2001911c 	.word	0x2001911c

08008f1c <GUI__DoAlphaBlending>:
 8008f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f20:	b093      	sub	sp, #76	; 0x4c
 8008f22:	2400      	movs	r4, #0
 8008f24:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008f26:	900b      	str	r0, [sp, #44]	; 0x2c
 8008f28:	910c      	str	r1, [sp, #48]	; 0x30
 8008f2a:	4690      	mov	r8, r2
 8008f2c:	461f      	mov	r7, r3
 8008f2e:	6034      	str	r4, [r6, #0]
 8008f30:	a80f      	add	r0, sp, #60	; 0x3c
 8008f32:	a910      	add	r1, sp, #64	; 0x40
 8008f34:	4622      	mov	r2, r4
 8008f36:	ab11      	add	r3, sp, #68	; 0x44
 8008f38:	f7ff ff8c 	bl	8008e54 <GUI__GetAlphaBuffer>
 8008f3c:	4605      	mov	r5, r0
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	f040 80c3 	bne.w	80090ca <GUI__DoAlphaBlending+0x1ae>
 8008f44:	4c63      	ldr	r4, [pc, #396]	; (80090d4 <GUI__DoAlphaBlending+0x1b8>)
 8008f46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	7c58      	ldrb	r0, [r3, #17]
 8008f4c:	4b62      	ldr	r3, [pc, #392]	; (80090d8 <GUI__DoAlphaBlending+0x1bc>)
 8008f4e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008f52:	9307      	str	r3, [sp, #28]
 8008f54:	4297      	cmp	r7, r2
 8008f56:	bfa8      	it	ge
 8008f58:	4617      	movge	r7, r2
 8008f5a:	691a      	ldr	r2, [r3, #16]
 8008f5c:	920d      	str	r2, [sp, #52]	; 0x34
 8008f5e:	970a      	str	r7, [sp, #40]	; 0x28
 8008f60:	f7ff f9f4 	bl	800834c <GUI_GetBitsPerPixelEx>
 8008f64:	6823      	ldr	r3, [r4, #0]
 8008f66:	9008      	str	r0, [sp, #32]
 8008f68:	7c58      	ldrb	r0, [r3, #17]
 8008f6a:	f7ff fa0d 	bl	8008388 <GUI_GetpfIndex2ColorEx>
 8008f6e:	4b5b      	ldr	r3, [pc, #364]	; (80090dc <GUI__DoAlphaBlending+0x1c0>)
 8008f70:	9004      	str	r0, [sp, #16]
 8008f72:	4298      	cmp	r0, r3
 8008f74:	d005      	beq.n	8008f82 <GUI__DoAlphaBlending+0x66>
 8008f76:	4b5a      	ldr	r3, [pc, #360]	; (80090e0 <GUI__DoAlphaBlending+0x1c4>)
 8008f78:	1ac3      	subs	r3, r0, r3
 8008f7a:	bf18      	it	ne
 8008f7c:	2301      	movne	r3, #1
 8008f7e:	9306      	str	r3, [sp, #24]
 8008f80:	e000      	b.n	8008f84 <GUI__DoAlphaBlending+0x68>
 8008f82:	9506      	str	r5, [sp, #24]
 8008f84:	2500      	movs	r5, #0
 8008f86:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008f88:	46ab      	mov	fp, r5
 8008f8a:	4643      	mov	r3, r8
 8008f8c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008f8e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008f92:	9305      	str	r3, [sp, #20]
 8008f94:	4790      	blx	r2
 8008f96:	0e03      	lsrs	r3, r0, #24
 8008f98:	4681      	mov	r9, r0
 8008f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f9c:	f000 8085 	beq.w	80090aa <GUI__DoAlphaBlending+0x18e>
 8008fa0:	f1bb 0f00 	cmp.w	fp, #0
 8008fa4:	d13f      	bne.n	8009026 <GUI__DoAlphaBlending+0x10a>
 8008fa6:	4b4b      	ldr	r3, [pc, #300]	; (80090d4 <GUI__DoAlphaBlending+0x1b8>)
 8008fa8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008fb2:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8008fb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008fb8:	442f      	add	r7, r5
 8008fba:	42bb      	cmp	r3, r7
 8008fbc:	bfc8      	it	gt
 8008fbe:	ebc7 0b03 	rsbgt	fp, r7, r3
 8008fc2:	eb0b 0a05 	add.w	sl, fp, r5
 8008fc6:	bfc8      	it	gt
 8008fc8:	461f      	movgt	r7, r3
 8008fca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fcc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8008fd0:	4453      	add	r3, sl
 8008fd2:	4494      	add	ip, r2
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	9b07      	ldr	r3, [sp, #28]
 8008fd8:	9301      	str	r3, [sp, #4]
 8008fda:	f10c 32ff 	add.w	r2, ip, #4294967295
 8008fde:	4638      	mov	r0, r7
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	f8cd c00c 	str.w	ip, [sp, #12]
 8008fe6:	f004 f84f 	bl	800d088 <GUI_ReadRectEx>
 8008fea:	9a08      	ldr	r2, [sp, #32]
 8008fec:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008fee:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008ff2:	2a17      	cmp	r2, #23
 8008ff4:	dc06      	bgt.n	8009004 <GUI__DoAlphaBlending+0xe8>
 8008ff6:	4450      	add	r0, sl
 8008ff8:	ebcb 0104 	rsb	r1, fp, r4
 8008ffc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ffe:	f004 f927 	bl	800d250 <GUI__ExpandPixelIndicesEx>
 8009002:	e001      	b.n	8009008 <GUI__DoAlphaBlending+0xec>
 8009004:	9b06      	ldr	r3, [sp, #24]
 8009006:	b913      	cbnz	r3, 800900e <GUI__DoAlphaBlending+0xf2>
 8009008:	f04f 0b01 	mov.w	fp, #1
 800900c:	e00b      	b.n	8009026 <GUI__DoAlphaBlending+0x10a>
 800900e:	ebc7 070c 	rsb	r7, r7, ip
 8009012:	4482      	add	sl, r0
 8009014:	f8da 0000 	ldr.w	r0, [sl]
 8009018:	9a04      	ldr	r2, [sp, #16]
 800901a:	4790      	blx	r2
 800901c:	3f01      	subs	r7, #1
 800901e:	f84a 0b04 	str.w	r0, [sl], #4
 8009022:	d1f7      	bne.n	8009014 <GUI__DoAlphaBlending+0xf8>
 8009024:	e7f0      	b.n	8009008 <GUI__DoAlphaBlending+0xec>
 8009026:	4b2f      	ldr	r3, [pc, #188]	; (80090e4 <GUI__DoAlphaBlending+0x1c8>)
 8009028:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800902a:	f8d3 c000 	ldr.w	ip, [r3]
 800902e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8009030:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 8009034:	f1bc 0f00 	cmp.w	ip, #0
 8009038:	d024      	beq.n	8009084 <GUI__DoAlphaBlending+0x168>
 800903a:	eb07 020a 	add.w	r2, r7, sl
 800903e:	4451      	add	r1, sl
 8009040:	9210      	str	r2, [sp, #64]	; 0x40
 8009042:	4623      	mov	r3, r4
 8009044:	910f      	str	r1, [sp, #60]	; 0x3c
 8009046:	4640      	mov	r0, r8
 8009048:	47e0      	blx	ip
 800904a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800904c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800904e:	2300      	movs	r3, #0
 8009050:	f858 1003 	ldr.w	r1, [r8, r3]
 8009054:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
 8009058:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800905c:	58e8      	ldr	r0, [r5, r3]
 800905e:	d101      	bne.n	8009064 <GUI__DoAlphaBlending+0x148>
 8009060:	50d0      	str	r0, [r2, r3]
 8009062:	e005      	b.n	8009070 <GUI__DoAlphaBlending+0x154>
 8009064:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 8009068:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800906c:	bf08      	it	eq
 800906e:	50d1      	streq	r1, [r2, r3]
 8009070:	3c01      	subs	r4, #1
 8009072:	f103 0304 	add.w	r3, r3, #4
 8009076:	d1eb      	bne.n	8009050 <GUI__DoAlphaBlending+0x134>
 8009078:	6833      	ldr	r3, [r6, #0]
 800907a:	9710      	str	r7, [sp, #64]	; 0x40
 800907c:	f043 0301 	orr.w	r3, r3, #1
 8009080:	6033      	str	r3, [r6, #0]
 8009082:	e020      	b.n	80090c6 <GUI__DoAlphaBlending+0x1aa>
 8009084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009086:	2bff      	cmp	r3, #255	; 0xff
 8009088:	d104      	bne.n	8009094 <GUI__DoAlphaBlending+0x178>
 800908a:	f851 300a 	ldr.w	r3, [r1, sl]
 800908e:	f847 300a 	str.w	r3, [r7, sl]
 8009092:	e011      	b.n	80090b8 <GUI__DoAlphaBlending+0x19c>
 8009094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009096:	f851 100a 	ldr.w	r1, [r1, sl]
 800909a:	43da      	mvns	r2, r3
 800909c:	4648      	mov	r0, r9
 800909e:	b2d2      	uxtb	r2, r2
 80090a0:	f7ff fe88 	bl	8008db4 <GUI__MixColors>
 80090a4:	f847 000a 	str.w	r0, [r7, sl]
 80090a8:	e002      	b.n	80090b0 <GUI__DoAlphaBlending+0x194>
 80090aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090ac:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80090b0:	6833      	ldr	r3, [r6, #0]
 80090b2:	f043 0301 	orr.w	r3, r3, #1
 80090b6:	6033      	str	r3, [r6, #0]
 80090b8:	3c01      	subs	r4, #1
 80090ba:	f105 0501 	add.w	r5, r5, #1
 80090be:	d002      	beq.n	80090c6 <GUI__DoAlphaBlending+0x1aa>
 80090c0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80090c4:	e761      	b.n	8008f8a <GUI__DoAlphaBlending+0x6e>
 80090c6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80090c8:	e000      	b.n	80090cc <GUI__DoAlphaBlending+0x1b0>
 80090ca:	4620      	mov	r0, r4
 80090cc:	b013      	add	sp, #76	; 0x4c
 80090ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d2:	bf00      	nop
 80090d4:	20000024 	.word	0x20000024
 80090d8:	200194c8 	.word	0x200194c8
 80090dc:	0800b64f 	.word	0x0800b64f
 80090e0:	0800b64d 	.word	0x0800b64d
 80090e4:	20019124 	.word	0x20019124

080090e8 <GUI__AllocAlphaBuffer>:
 80090e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090ea:	b108      	cbz	r0, 80090f0 <GUI__AllocAlphaBuffer+0x8>
 80090ec:	aa03      	add	r2, sp, #12
 80090ee:	e000      	b.n	80090f2 <GUI__AllocAlphaBuffer+0xa>
 80090f0:	4602      	mov	r2, r0
 80090f2:	a801      	add	r0, sp, #4
 80090f4:	a902      	add	r1, sp, #8
 80090f6:	2300      	movs	r3, #0
 80090f8:	f7ff feac 	bl	8008e54 <GUI__GetAlphaBuffer>
 80090fc:	b005      	add	sp, #20
 80090fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009104 <GUI_SignalEvent>:
 8009104:	b508      	push	{r3, lr}
 8009106:	4b02      	ldr	r3, [pc, #8]	; (8009110 <GUI_SignalEvent+0xc>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	b103      	cbz	r3, 800910e <GUI_SignalEvent+0xa>
 800910c:	4798      	blx	r3
 800910e:	bd08      	pop	{r3, pc}
 8009110:	20019134 	.word	0x20019134

08009114 <GUI_UC__GetCharCodeInc>:
 8009114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009116:	4e08      	ldr	r6, [pc, #32]	; (8009138 <GUI_UC__GetCharCodeInc+0x24>)
 8009118:	6804      	ldr	r4, [r0, #0]
 800911a:	6833      	ldr	r3, [r6, #0]
 800911c:	4605      	mov	r5, r0
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4620      	mov	r0, r4
 8009122:	4798      	blx	r3
 8009124:	6833      	ldr	r3, [r6, #0]
 8009126:	4607      	mov	r7, r0
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	4620      	mov	r0, r4
 800912c:	4798      	blx	r3
 800912e:	4420      	add	r0, r4
 8009130:	6028      	str	r0, [r5, #0]
 8009132:	4638      	mov	r0, r7
 8009134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009136:	bf00      	nop
 8009138:	200194c0 	.word	0x200194c0

0800913c <GUI_UC__NumChars2NumBytes>:
 800913c:	b570      	push	{r4, r5, r6, lr}
 800913e:	4604      	mov	r4, r0
 8009140:	460e      	mov	r6, r1
 8009142:	2500      	movs	r5, #0
 8009144:	b146      	cbz	r6, 8009158 <GUI_UC__NumChars2NumBytes+0x1c>
 8009146:	4b05      	ldr	r3, [pc, #20]	; (800915c <GUI_UC__NumChars2NumBytes+0x20>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4620      	mov	r0, r4
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	4798      	blx	r3
 8009150:	3e01      	subs	r6, #1
 8009152:	4404      	add	r4, r0
 8009154:	4405      	add	r5, r0
 8009156:	e7f5      	b.n	8009144 <GUI_UC__NumChars2NumBytes+0x8>
 8009158:	4628      	mov	r0, r5
 800915a:	bd70      	pop	{r4, r5, r6, pc}
 800915c:	200194c0 	.word	0x200194c0

08009160 <_Unlink>:
 8009160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009162:	4605      	mov	r5, r0
 8009164:	b1f0      	cbz	r0, 80091a4 <_Unlink+0x44>
 8009166:	f001 ff8f 	bl	800b088 <GUI_ALLOC_LockH>
 800916a:	4b0f      	ldr	r3, [pc, #60]	; (80091a8 <_Unlink+0x48>)
 800916c:	9000      	str	r0, [sp, #0]
 800916e:	681c      	ldr	r4, [r3, #0]
 8009170:	42ac      	cmp	r4, r5
 8009172:	d104      	bne.n	800917e <_Unlink+0x1e>
 8009174:	6842      	ldr	r2, [r0, #4]
 8009176:	601a      	str	r2, [r3, #0]
 8009178:	e011      	b.n	800919e <_Unlink+0x3e>
 800917a:	f001 ff93 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800917e:	b174      	cbz	r4, 800919e <_Unlink+0x3e>
 8009180:	4620      	mov	r0, r4
 8009182:	f001 ff81 	bl	800b088 <GUI_ALLOC_LockH>
 8009186:	4603      	mov	r3, r0
 8009188:	a802      	add	r0, sp, #8
 800918a:	685c      	ldr	r4, [r3, #4]
 800918c:	f840 3d04 	str.w	r3, [r0, #-4]!
 8009190:	42ac      	cmp	r4, r5
 8009192:	d1f2      	bne.n	800917a <_Unlink+0x1a>
 8009194:	9a00      	ldr	r2, [sp, #0]
 8009196:	6852      	ldr	r2, [r2, #4]
 8009198:	605a      	str	r2, [r3, #4]
 800919a:	f001 ff83 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800919e:	4668      	mov	r0, sp
 80091a0:	f001 ff80 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80091a4:	b003      	add	sp, #12
 80091a6:	bd30      	pop	{r4, r5, pc}
 80091a8:	2001913c 	.word	0x2001913c

080091ac <GUI_TIMER__GetFirstTimer>:
 80091ac:	2300      	movs	r3, #0
 80091ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091b0:	6003      	str	r3, [r0, #0]
 80091b2:	4b09      	ldr	r3, [pc, #36]	; (80091d8 <GUI_TIMER__GetFirstTimer+0x2c>)
 80091b4:	681c      	ldr	r4, [r3, #0]
 80091b6:	4605      	mov	r5, r0
 80091b8:	b154      	cbz	r4, 80091d0 <GUI_TIMER__GetFirstTimer+0x24>
 80091ba:	4620      	mov	r0, r4
 80091bc:	f001 ff64 	bl	800b088 <GUI_ALLOC_LockH>
 80091c0:	ab02      	add	r3, sp, #8
 80091c2:	6902      	ldr	r2, [r0, #16]
 80091c4:	f843 0d04 	str.w	r0, [r3, #-4]!
 80091c8:	602a      	str	r2, [r5, #0]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f001 ff6a 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80091d0:	4620      	mov	r0, r4
 80091d2:	b003      	add	sp, #12
 80091d4:	bd30      	pop	{r4, r5, pc}
 80091d6:	bf00      	nop
 80091d8:	20019138 	.word	0x20019138

080091dc <GUI_TIMER__GetNextTimerLin>:
 80091dc:	2300      	movs	r3, #0
 80091de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091e0:	600b      	str	r3, [r1, #0]
 80091e2:	460e      	mov	r6, r1
 80091e4:	4604      	mov	r4, r0
 80091e6:	b190      	cbz	r0, 800920e <GUI_TIMER__GetNextTimerLin+0x32>
 80091e8:	f001 ff4e 	bl	800b088 <GUI_ALLOC_LockH>
 80091ec:	ad02      	add	r5, sp, #8
 80091ee:	6884      	ldr	r4, [r0, #8]
 80091f0:	f845 0d04 	str.w	r0, [r5, #-4]!
 80091f4:	b144      	cbz	r4, 8009208 <GUI_TIMER__GetNextTimerLin+0x2c>
 80091f6:	4628      	mov	r0, r5
 80091f8:	f001 ff54 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 80091fc:	4620      	mov	r0, r4
 80091fe:	f001 ff43 	bl	800b088 <GUI_ALLOC_LockH>
 8009202:	6903      	ldr	r3, [r0, #16]
 8009204:	9001      	str	r0, [sp, #4]
 8009206:	6033      	str	r3, [r6, #0]
 8009208:	4628      	mov	r0, r5
 800920a:	f001 ff4b 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800920e:	4620      	mov	r0, r4
 8009210:	b002      	add	sp, #8
 8009212:	bd70      	pop	{r4, r5, r6, pc}

08009214 <GUI_TIMER_Delete>:
 8009214:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009216:	4604      	mov	r4, r0
 8009218:	b358      	cbz	r0, 8009272 <GUI_TIMER_Delete+0x5e>
 800921a:	4d17      	ldr	r5, [pc, #92]	; (8009278 <GUI_TIMER_Delete+0x64>)
 800921c:	682e      	ldr	r6, [r5, #0]
 800921e:	4286      	cmp	r6, r0
 8009220:	d10b      	bne.n	800923a <GUI_TIMER_Delete+0x26>
 8009222:	f001 ff31 	bl	800b088 <GUI_ALLOC_LockH>
 8009226:	ab02      	add	r3, sp, #8
 8009228:	6882      	ldr	r2, [r0, #8]
 800922a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800922e:	602a      	str	r2, [r5, #0]
 8009230:	4618      	mov	r0, r3
 8009232:	e016      	b.n	8009262 <GUI_TIMER_Delete+0x4e>
 8009234:	4668      	mov	r0, sp
 8009236:	f001 ff35 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800923a:	4630      	mov	r0, r6
 800923c:	f001 ff24 	bl	800b088 <GUI_ALLOC_LockH>
 8009240:	6886      	ldr	r6, [r0, #8]
 8009242:	ad02      	add	r5, sp, #8
 8009244:	42a6      	cmp	r6, r4
 8009246:	f845 0d08 	str.w	r0, [r5, #-8]!
 800924a:	d1f3      	bne.n	8009234 <GUI_TIMER_Delete+0x20>
 800924c:	4620      	mov	r0, r4
 800924e:	f001 ff1b 	bl	800b088 <GUI_ALLOC_LockH>
 8009252:	9b00      	ldr	r3, [sp, #0]
 8009254:	6882      	ldr	r2, [r0, #8]
 8009256:	9001      	str	r0, [sp, #4]
 8009258:	609a      	str	r2, [r3, #8]
 800925a:	a801      	add	r0, sp, #4
 800925c:	f001 ff22 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8009260:	4668      	mov	r0, sp
 8009262:	f001 ff1f 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 8009266:	4620      	mov	r0, r4
 8009268:	f7ff ff7a 	bl	8009160 <_Unlink>
 800926c:	4620      	mov	r0, r4
 800926e:	f001 ff39 	bl	800b0e4 <GUI_ALLOC_Free>
 8009272:	b002      	add	sp, #8
 8009274:	bd70      	pop	{r4, r5, r6, pc}
 8009276:	bf00      	nop
 8009278:	20019138 	.word	0x20019138

0800927c <GUI_TIMER_GetFlag>:
 800927c:	b513      	push	{r0, r1, r4, lr}
 800927e:	460c      	mov	r4, r1
 8009280:	b168      	cbz	r0, 800929e <GUI_TIMER_GetFlag+0x22>
 8009282:	f001 ff01 	bl	800b088 <GUI_ALLOC_LockH>
 8009286:	ab02      	add	r3, sp, #8
 8009288:	8982      	ldrh	r2, [r0, #12]
 800928a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800928e:	4214      	tst	r4, r2
 8009290:	4618      	mov	r0, r3
 8009292:	bf0c      	ite	eq
 8009294:	2400      	moveq	r4, #0
 8009296:	2401      	movne	r4, #1
 8009298:	f001 ff04 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800929c:	e000      	b.n	80092a0 <GUI_TIMER_GetFlag+0x24>
 800929e:	2401      	movs	r4, #1
 80092a0:	4620      	mov	r0, r4
 80092a2:	b002      	add	sp, #8
 80092a4:	bd10      	pop	{r4, pc}

080092a6 <GUI_Delay>:
 80092a6:	b538      	push	{r3, r4, r5, lr}
 80092a8:	4605      	mov	r5, r0
 80092aa:	f7fa fbd1 	bl	8003a50 <GUI_X_GetTime>
 80092ae:	4405      	add	r5, r0
 80092b0:	f7fa fbce 	bl	8003a50 <GUI_X_GetTime>
 80092b4:	1a2c      	subs	r4, r5, r0
 80092b6:	2c00      	cmp	r4, #0
 80092b8:	dd08      	ble.n	80092cc <GUI_Delay+0x26>
 80092ba:	f000 fbe9 	bl	8009a90 <GUI_Exec>
 80092be:	2c05      	cmp	r4, #5
 80092c0:	bfb4      	ite	lt
 80092c2:	4620      	movlt	r0, r4
 80092c4:	2005      	movge	r0, #5
 80092c6:	f7fa fbc9 	bl	8003a5c <GUI_X_Delay>
 80092ca:	e7f1      	b.n	80092b0 <GUI_Delay+0xa>
 80092cc:	bd38      	pop	{r3, r4, r5, pc}
	...

080092d0 <GUI_TOUCH_Calibrate>:
 80092d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80092d2:	2801      	cmp	r0, #1
 80092d4:	9c08      	ldr	r4, [sp, #32]
 80092d6:	d845      	bhi.n	8009364 <GUI_TOUCH_Calibrate+0x94>
 80092d8:	4d25      	ldr	r5, [pc, #148]	; (8009370 <GUI_TOUCH_Calibrate+0xa0>)
 80092da:	d00c      	beq.n	80092f6 <GUI_TOUCH_Calibrate+0x26>
 80092dc:	4e25      	ldr	r6, [pc, #148]	; (8009374 <GUI_TOUCH_Calibrate+0xa4>)
 80092de:	e886 0006 	stmia.w	r6, {r1, r2}
 80092e2:	6829      	ldr	r1, [r5, #0]
 80092e4:	f001 0206 	and.w	r2, r1, #6
 80092e8:	2a06      	cmp	r2, #6
 80092ea:	4a23      	ldr	r2, [pc, #140]	; (8009378 <GUI_TOUCH_Calibrate+0xa8>)
 80092ec:	d010      	beq.n	8009310 <GUI_TOUCH_Calibrate+0x40>
 80092ee:	f001 0105 	and.w	r1, r1, #5
 80092f2:	2901      	cmp	r1, #1
 80092f4:	e00b      	b.n	800930e <GUI_TOUCH_Calibrate+0x3e>
 80092f6:	4e21      	ldr	r6, [pc, #132]	; (800937c <GUI_TOUCH_Calibrate+0xac>)
 80092f8:	e886 0006 	stmia.w	r6, {r1, r2}
 80092fc:	6829      	ldr	r1, [r5, #0]
 80092fe:	f001 0205 	and.w	r2, r1, #5
 8009302:	2a05      	cmp	r2, #5
 8009304:	4a1e      	ldr	r2, [pc, #120]	; (8009380 <GUI_TOUCH_Calibrate+0xb0>)
 8009306:	d003      	beq.n	8009310 <GUI_TOUCH_Calibrate+0x40>
 8009308:	f001 0106 	and.w	r1, r1, #6
 800930c:	2902      	cmp	r1, #2
 800930e:	d102      	bne.n	8009316 <GUI_TOUCH_Calibrate+0x46>
 8009310:	6014      	str	r4, [r2, #0]
 8009312:	6053      	str	r3, [r2, #4]
 8009314:	e001      	b.n	800931a <GUI_TOUCH_Calibrate+0x4a>
 8009316:	e882 0018 	stmia.w	r2, {r3, r4}
 800931a:	4b1a      	ldr	r3, [pc, #104]	; (8009384 <GUI_TOUCH_Calibrate+0xb4>)
 800931c:	781a      	ldrb	r2, [r3, #0]
 800931e:	4102      	asrs	r2, r0
 8009320:	07d2      	lsls	r2, r2, #31
 8009322:	bf44      	itt	mi
 8009324:	2200      	movmi	r2, #0
 8009326:	701a      	strbmi	r2, [r3, #0]
 8009328:	2201      	movs	r2, #1
 800932a:	fa02 f000 	lsl.w	r0, r2, r0
 800932e:	781a      	ldrb	r2, [r3, #0]
 8009330:	4310      	orrs	r0, r2
 8009332:	b2c0      	uxtb	r0, r0
 8009334:	2803      	cmp	r0, #3
 8009336:	7018      	strb	r0, [r3, #0]
 8009338:	d116      	bne.n	8009368 <GUI_TOUCH_Calibrate+0x98>
 800933a:	4c13      	ldr	r4, [pc, #76]	; (8009388 <GUI_TOUCH_Calibrate+0xb8>)
 800933c:	6823      	ldr	r3, [r4, #0]
 800933e:	7c58      	ldrb	r0, [r3, #17]
 8009340:	f7fe ffda 	bl	80082f8 <LCD_GetXSizeEx>
 8009344:	6823      	ldr	r3, [r4, #0]
 8009346:	4605      	mov	r5, r0
 8009348:	7c58      	ldrb	r0, [r3, #17]
 800934a:	f7fe ffd8 	bl	80082fe <LCD_GetYSizeEx>
 800934e:	4b0c      	ldr	r3, [pc, #48]	; (8009380 <GUI_TOUCH_Calibrate+0xb0>)
 8009350:	9002      	str	r0, [sp, #8]
 8009352:	e88d 0028 	stmia.w	sp, {r3, r5}
 8009356:	4907      	ldr	r1, [pc, #28]	; (8009374 <GUI_TOUCH_Calibrate+0xa4>)
 8009358:	4a08      	ldr	r2, [pc, #32]	; (800937c <GUI_TOUCH_Calibrate+0xac>)
 800935a:	4b07      	ldr	r3, [pc, #28]	; (8009378 <GUI_TOUCH_Calibrate+0xa8>)
 800935c:	2002      	movs	r0, #2
 800935e:	f000 f815 	bl	800938c <GUI_TOUCH_CalcCoefficients>
 8009362:	e002      	b.n	800936a <GUI_TOUCH_Calibrate+0x9a>
 8009364:	2001      	movs	r0, #1
 8009366:	e000      	b.n	800936a <GUI_TOUCH_Calibrate+0x9a>
 8009368:	2000      	movs	r0, #0
 800936a:	b004      	add	sp, #16
 800936c:	bd70      	pop	{r4, r5, r6, pc}
 800936e:	bf00      	nop
 8009370:	20019154 	.word	0x20019154
 8009374:	20019140 	.word	0x20019140
 8009378:	20019158 	.word	0x20019158
 800937c:	20019160 	.word	0x20019160
 8009380:	20019148 	.word	0x20019148
 8009384:	20019150 	.word	0x20019150
 8009388:	20000024 	.word	0x20000024

0800938c <GUI_TOUCH_CalcCoefficients>:
 800938c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009390:	ed2d 8b02 	vpush	{d8}
 8009394:	f8df c3bc 	ldr.w	ip, [pc, #956]	; 8009754 <GUI_TOUCH_CalcCoefficients+0x3c8>
 8009398:	b08c      	sub	sp, #48	; 0x30
 800939a:	2400      	movs	r4, #0
 800939c:	2802      	cmp	r0, #2
 800939e:	9f16      	ldr	r7, [sp, #88]	; 0x58
 80093a0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80093a2:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 80093a6:	f8cc 4000 	str.w	r4, [ip]
 80093aa:	d135      	bne.n	8009418 <GUI_TOUCH_CalcCoefficients+0x8c>
 80093ac:	c912      	ldmia	r1, {r1, r4}
 80093ae:	6818      	ldr	r0, [r3, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	1a61      	subs	r1, r4, r1
 80093b4:	1a1b      	subs	r3, r3, r0
 80093b6:	ee00 1a10 	vmov	s0, r1
 80093ba:	ee07 3a90 	vmov	s15, r3
 80093be:	eeb8 7ac0 	vcvt.f32.s32	s14, s0
 80093c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093c6:	ee05 0a10 	vmov	s10, r0
 80093ca:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80093ce:	6850      	ldr	r0, [r2, #4]
 80093d0:	6812      	ldr	r2, [r2, #0]
 80093d2:	4bdb      	ldr	r3, [pc, #876]	; (8009740 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 80093d4:	2100      	movs	r1, #0
 80093d6:	1a82      	subs	r2, r0, r2
 80093d8:	6059      	str	r1, [r3, #4]
 80093da:	60d9      	str	r1, [r3, #12]
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	eeb8 7ac5 	vcvt.f32.s32	s14, s10
 80093e2:	ee06 2a10 	vmov	s12, r2
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	edc3 7a00 	vstr	s15, [r3]
 80093ec:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80093f0:	1a52      	subs	r2, r2, r1
 80093f2:	edc3 7a02 	vstr	s15, [r3, #8]
 80093f6:	ee07 2a90 	vmov	s15, r2
 80093fa:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 80093fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009402:	ee06 1a90 	vmov	s13, r1
 8009406:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800940a:	eeb8 7ae6 	vcvt.f32.s32	s14, s13
 800940e:	edc3 7a04 	vstr	s15, [r3, #16]
 8009412:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8009416:	e144      	b.n	80096a2 <GUI_TOUCH_CalcCoefficients+0x316>
 8009418:	f340 8148 	ble.w	80096ac <GUI_TOUCH_CalcCoefficients+0x320>
 800941c:	2803      	cmp	r0, #3
 800941e:	d128      	bne.n	8009472 <GUI_TOUCH_CalcCoefficients+0xe6>
 8009420:	4620      	mov	r0, r4
 8009422:	581d      	ldr	r5, [r3, r0]
 8009424:	ee00 5a10 	vmov	s0, r5
 8009428:	583d      	ldr	r5, [r7, r0]
 800942a:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 800942e:	ac00      	add	r4, sp, #0
 8009430:	ee00 5a10 	vmov	s0, r5
 8009434:	580d      	ldr	r5, [r1, r0]
 8009436:	4404      	add	r4, r0
 8009438:	edc4 7a00 	vstr	s15, [r4]
 800943c:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8009440:	ac03      	add	r4, sp, #12
 8009442:	ee00 5a10 	vmov	s0, r5
 8009446:	4404      	add	r4, r0
 8009448:	5815      	ldr	r5, [r2, r0]
 800944a:	edc4 7a00 	vstr	s15, [r4]
 800944e:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8009452:	ac0c      	add	r4, sp, #48	; 0x30
 8009454:	4404      	add	r4, r0
 8009456:	ee00 5a10 	vmov	s0, r5
 800945a:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 800945e:	ac0c      	add	r4, sp, #48	; 0x30
 8009460:	4404      	add	r4, r0
 8009462:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8009466:	3004      	adds	r0, #4
 8009468:	280c      	cmp	r0, #12
 800946a:	ed44 7a03 	vstr	s15, [r4, #-12]
 800946e:	d1d8      	bne.n	8009422 <GUI_TOUCH_CalcCoefficients+0x96>
 8009470:	e09b      	b.n	80095aa <GUI_TOUCH_CalcCoefficients+0x21e>
 8009472:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8009476:	44a1      	add	r9, r4
 8009478:	f04f 0800 	mov.w	r8, #0
 800947c:	f849 8c0c 	str.w	r8, [r9, #-12]
 8009480:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8009484:	44a1      	add	r9, r4
 8009486:	f849 8c18 	str.w	r8, [r9, #-24]
 800948a:	f10d 090c 	add.w	r9, sp, #12
 800948e:	44a1      	add	r9, r4
 8009490:	f8c9 8000 	str.w	r8, [r9]
 8009494:	f10d 0900 	add.w	r9, sp, #0
 8009498:	44a1      	add	r9, r4
 800949a:	3404      	adds	r4, #4
 800949c:	2c0c      	cmp	r4, #12
 800949e:	f8c9 8000 	str.w	r8, [r9]
 80094a2:	d1e6      	bne.n	8009472 <GUI_TOUCH_CalcCoefficients+0xe6>
 80094a4:	ed9d 7a02 	vldr	s14, [sp, #8]
 80094a8:	eddd 7a05 	vldr	s15, [sp, #20]
 80094ac:	eddd 3a08 	vldr	s7, [sp, #32]
 80094b0:	ed9d 4a0b 	vldr	s8, [sp, #44]	; 0x2c
 80094b4:	eddd 1a00 	vldr	s3, [sp]
 80094b8:	eddd 5a01 	vldr	s11, [sp, #4]
 80094bc:	ed9d 2a04 	vldr	s4, [sp, #16]
 80094c0:	eddd 2a06 	vldr	s5, [sp, #24]
 80094c4:	ed9d 3a07 	vldr	s6, [sp, #28]
 80094c8:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 80094cc:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 80094d0:	ea4f 0880 	mov.w	r8, r0, lsl #2
 80094d4:	2400      	movs	r4, #0
 80094d6:	591d      	ldr	r5, [r3, r4]
 80094d8:	ee00 5a10 	vmov	s0, r5
 80094dc:	593d      	ldr	r5, [r7, r4]
 80094de:	eeb8 6ac0 	vcvt.f32.s32	s12, s0
 80094e2:	ee00 5a10 	vmov	s0, r5
 80094e6:	590d      	ldr	r5, [r1, r4]
 80094e8:	eef8 6ac0 	vcvt.f32.s32	s13, s0
 80094ec:	ee00 5a10 	vmov	s0, r5
 80094f0:	5915      	ldr	r5, [r2, r4]
 80094f2:	eef8 4ac0 	vcvt.f32.s32	s9, s0
 80094f6:	ee00 5a10 	vmov	s0, r5
 80094fa:	eeb8 5ac0 	vcvt.f32.s32	s10, s0
 80094fe:	eee6 2a24 	vfma.f32	s5, s12, s9
 8009502:	3404      	adds	r4, #4
 8009504:	4544      	cmp	r4, r8
 8009506:	ee73 3aa4 	vadd.f32	s7, s7, s9
 800950a:	eea6 3aa4 	vfma.f32	s6, s13, s9
 800950e:	eef0 4a60 	vmov.f32	s9, s1
 8009512:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009516:	eee6 1a06 	vfma.f32	s3, s12, s12
 800951a:	eee6 5a26 	vfma.f32	s11, s12, s13
 800951e:	eee6 4a05 	vfma.f32	s9, s12, s10
 8009522:	eeb0 6a41 	vmov.f32	s12, s2
 8009526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800952a:	ee34 4a05 	vadd.f32	s8, s8, s10
 800952e:	eea6 2aa6 	vfma.f32	s4, s13, s13
 8009532:	eea6 6a85 	vfma.f32	s12, s13, s10
 8009536:	d004      	beq.n	8009542 <GUI_TOUCH_CalcCoefficients+0x1b6>
 8009538:	eef0 0a64 	vmov.f32	s1, s9
 800953c:	eeb0 1a46 	vmov.f32	s2, s12
 8009540:	e7c9      	b.n	80094d6 <GUI_TOUCH_CalcCoefficients+0x14a>
 8009542:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8009546:	ee05 0a10 	vmov	s10, r0
 800954a:	edcd 6a01 	vstr	s13, [sp, #4]
 800954e:	eef8 6ac5 	vcvt.f32.s32	s13, s10
 8009552:	eec1 1a87 	vdiv.f32	s3, s3, s14
 8009556:	eec5 5a87 	vdiv.f32	s11, s11, s14
 800955a:	ee82 2a27 	vdiv.f32	s4, s4, s15
 800955e:	eec2 2a87 	vdiv.f32	s5, s5, s14
 8009562:	ee83 3a27 	vdiv.f32	s6, s6, s15
 8009566:	eec4 4a87 	vdiv.f32	s9, s9, s14
 800956a:	ee86 6a27 	vdiv.f32	s12, s12, s15
 800956e:	ee87 7a26 	vdiv.f32	s14, s14, s13
 8009572:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 8009576:	eec3 3aa6 	vdiv.f32	s7, s7, s13
 800957a:	eec4 6a26 	vdiv.f32	s13, s8, s13
 800957e:	edcd 1a00 	vstr	s3, [sp]
 8009582:	edcd 5a03 	vstr	s11, [sp, #12]
 8009586:	ed8d 2a04 	vstr	s4, [sp, #16]
 800958a:	edcd 2a06 	vstr	s5, [sp, #24]
 800958e:	ed8d 3a07 	vstr	s6, [sp, #28]
 8009592:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 8009596:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 800959a:	ed8d 7a02 	vstr	s14, [sp, #8]
 800959e:	edcd 7a05 	vstr	s15, [sp, #20]
 80095a2:	edcd 3a08 	vstr	s7, [sp, #32]
 80095a6:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 80095aa:	ed9d 7a02 	vldr	s14, [sp, #8]
 80095ae:	eddd 4a05 	vldr	s9, [sp, #20]
 80095b2:	ed9d 6a01 	vldr	s12, [sp, #4]
 80095b6:	ed9d 3a03 	vldr	s6, [sp, #12]
 80095ba:	eddd 5a00 	vldr	s11, [sp]
 80095be:	eddd 2a04 	vldr	s5, [sp, #16]
 80095c2:	ee76 6a47 	vsub.f32	s13, s12, s14
 80095c6:	ee73 1a64 	vsub.f32	s3, s6, s9
 80095ca:	ee35 2ac7 	vsub.f32	s4, s11, s14
 80095ce:	ee32 1ae4 	vsub.f32	s2, s5, s9
 80095d2:	ee61 7ae6 	vnmul.f32	s15, s3, s13
 80095d6:	eee2 7a01 	vfma.f32	s15, s4, s2
 80095da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80095de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095e2:	d063      	beq.n	80096ac <GUI_TOUCH_CalcCoefficients+0x320>
 80095e4:	ed9d 4a08 	vldr	s8, [sp, #32]
 80095e8:	eddd 0a07 	vldr	s1, [sp, #28]
 80095ec:	eddd 3a06 	vldr	s7, [sp, #24]
 80095f0:	4b53      	ldr	r3, [pc, #332]	; (8009740 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 80095f2:	ee30 8ac4 	vsub.f32	s16, s1, s8
 80095f6:	ee33 5ac4 	vsub.f32	s10, s7, s8
 80095fa:	ee21 0ac8 	vnmul.f32	s0, s3, s16
 80095fe:	eea5 0a01 	vfma.f32	s0, s10, s2
 8009602:	ee26 5ac5 	vnmul.f32	s10, s13, s10
 8009606:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800960a:	eea8 5a02 	vfma.f32	s10, s16, s4
 800960e:	ed83 0a00 	vstr	s0, [r3]
 8009612:	ee85 5a27 	vdiv.f32	s10, s10, s15
 8009616:	ed83 5a01 	vstr	s10, [r3, #4]
 800961a:	ee23 5ac7 	vnmul.f32	s10, s7, s14
 800961e:	eea5 5a84 	vfma.f32	s10, s11, s8
 8009622:	ee24 4a46 	vnmul.f32	s8, s8, s12
 8009626:	ee22 5a85 	vmul.f32	s10, s5, s10
 800962a:	eea7 4a20 	vfma.f32	s8, s14, s1
 800962e:	eea3 5a04 	vfma.f32	s10, s6, s8
 8009632:	ee20 4ae5 	vnmul.f32	s8, s1, s11
 8009636:	eea6 4a23 	vfma.f32	s8, s12, s7
 800963a:	eddd 3a0a 	vldr	s7, [sp, #40]	; 0x28
 800963e:	eea4 5a84 	vfma.f32	s10, s9, s8
 8009642:	ed9d 4a09 	vldr	s8, [sp, #36]	; 0x24
 8009646:	ee85 5a27 	vdiv.f32	s10, s10, s15
 800964a:	ed83 5a02 	vstr	s10, [r3, #8]
 800964e:	ed9d 5a0b 	vldr	s10, [sp, #44]	; 0x2c
 8009652:	ee34 0a45 	vsub.f32	s0, s8, s10
 8009656:	ee73 0ac5 	vsub.f32	s1, s7, s10
 800965a:	ee66 6ac0 	vnmul.f32	s13, s13, s0
 800965e:	ee61 1ae0 	vnmul.f32	s3, s3, s1
 8009662:	eee0 6a82 	vfma.f32	s13, s1, s4
 8009666:	eee0 1a01 	vfma.f32	s3, s0, s2
 800966a:	eec6 6aa7 	vdiv.f32	s13, s13, s15
 800966e:	eec1 1aa7 	vdiv.f32	s3, s3, s15
 8009672:	edc3 6a04 	vstr	s13, [r3, #16]
 8009676:	ee64 6a47 	vnmul.f32	s13, s8, s14
 800967a:	edc3 1a03 	vstr	s3, [r3, #12]
 800967e:	eee5 6a85 	vfma.f32	s13, s11, s10
 8009682:	ee25 5a46 	vnmul.f32	s10, s10, s12
 8009686:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800968a:	eea7 5a23 	vfma.f32	s10, s14, s7
 800968e:	ee63 5ae5 	vnmul.f32	s11, s7, s11
 8009692:	eee3 6a05 	vfma.f32	s13, s6, s10
 8009696:	eee6 5a04 	vfma.f32	s11, s12, s8
 800969a:	eee4 6aa5 	vfma.f32	s13, s9, s11
 800969e:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 80096a2:	edc3 7a05 	vstr	s15, [r3, #20]
 80096a6:	2301      	movs	r3, #1
 80096a8:	f8cc 3000 	str.w	r3, [ip]
 80096ac:	f8dc 0000 	ldr.w	r0, [ip]
 80096b0:	2800      	cmp	r0, #0
 80096b2:	f000 80a7 	beq.w	8009804 <GUI_TOUCH_CalcCoefficients+0x478>
 80096b6:	4b23      	ldr	r3, [pc, #140]	; (8009744 <GUI_TOUCH_CalcCoefficients+0x3b8>)
 80096b8:	eddf 7a23 	vldr	s15, [pc, #140]	; 8009748 <GUI_TOUCH_CalcCoefficients+0x3bc>
 80096bc:	601e      	str	r6, [r3, #0]
 80096be:	4b23      	ldr	r3, [pc, #140]	; (800974c <GUI_TOUCH_CalcCoefficients+0x3c0>)
 80096c0:	f8c3 a000 	str.w	sl, [r3]
 80096c4:	4b1e      	ldr	r3, [pc, #120]	; (8009740 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 80096c6:	ed93 7a00 	vldr	s14, [r3]
 80096ca:	eeb4 7a67 	vcmp.f32	s14, s15
 80096ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096d2:	d012      	beq.n	80096fa <GUI_TOUCH_CalcCoefficients+0x36e>
 80096d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80096d8:	eee6 7ae7 	vfms.f32	s15, s13, s15
 80096dc:	edd3 6a02 	vldr	s13, [r3, #8]
 80096e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80096e4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80096e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80096ec:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80096f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80096f4:	ee17 1a90 	vmov	r1, s15
 80096f8:	e001      	b.n	80096fe <GUI_TOUCH_CalcCoefficients+0x372>
 80096fa:	f04f 31ff 	mov.w	r1, #4294967295
 80096fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8009702:	eddf 6a11 	vldr	s13, [pc, #68]	; 8009748 <GUI_TOUCH_CalcCoefficients+0x3bc>
 8009706:	4c12      	ldr	r4, [pc, #72]	; (8009750 <GUI_TOUCH_CalcCoefficients+0x3c4>)
 8009708:	4a0d      	ldr	r2, [pc, #52]	; (8009740 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 800970a:	6021      	str	r1, [r4, #0]
 800970c:	eef4 7a66 	vcmp.f32	s15, s13
 8009710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009714:	4627      	mov	r7, r4
 8009716:	d01f      	beq.n	8009758 <GUI_TOUCH_CalcCoefficients+0x3cc>
 8009718:	ed92 6a03 	vldr	s12, [r2, #12]
 800971c:	eee6 6a66 	vfms.f32	s13, s12, s13
 8009720:	ed92 6a05 	vldr	s12, [r2, #20]
 8009724:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8009728:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800972c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8009730:	eec6 6aa7 	vdiv.f32	s13, s13, s15
 8009734:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8009738:	ee16 2a90 	vmov	r2, s13
 800973c:	e00e      	b.n	800975c <GUI_TOUCH_CalcCoefficients+0x3d0>
 800973e:	bf00      	nop
 8009740:	2001917c 	.word	0x2001917c
 8009744:	20019170 	.word	0x20019170
 8009748:	00000000 	.word	0x00000000
 800974c:	20019174 	.word	0x20019174
 8009750:	20019168 	.word	0x20019168
 8009754:	20019178 	.word	0x20019178
 8009758:	f04f 32ff 	mov.w	r2, #4294967295
 800975c:	4c2e      	ldr	r4, [pc, #184]	; (8009818 <GUI_TOUCH_CalcCoefficients+0x48c>)
 800975e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009762:	3e01      	subs	r6, #1
 8009764:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800976c:	ee05 6a90 	vmov	s11, r6
 8009770:	6022      	str	r2, [r4, #0]
 8009772:	ee06 aa10 	vmov	s12, sl
 8009776:	4626      	mov	r6, r4
 8009778:	d016      	beq.n	80097a8 <GUI_TOUCH_CalcCoefficients+0x41c>
 800977a:	ed93 5a01 	vldr	s10, [r3, #4]
 800977e:	eef8 4ac6 	vcvt.f32.s32	s9, s12
 8009782:	eef8 6ae5 	vcvt.f32.s32	s13, s11
 8009786:	eee4 6ac5 	vfms.f32	s13, s9, s10
 800978a:	ed93 5a02 	vldr	s10, [r3, #8]
 800978e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8009792:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8009796:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800979a:	ee86 7a87 	vdiv.f32	s14, s13, s14
 800979e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80097a2:	ee17 4a10 	vmov	r4, s14
 80097a6:	e001      	b.n	80097ac <GUI_TOUCH_CalcCoefficients+0x420>
 80097a8:	f04f 34ff 	mov.w	r4, #4294967295
 80097ac:	4d1b      	ldr	r5, [pc, #108]	; (800981c <GUI_TOUCH_CalcCoefficients+0x490>)
 80097ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80097b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097b6:	602c      	str	r4, [r5, #0]
 80097b8:	46ac      	mov	ip, r5
 80097ba:	d016      	beq.n	80097ea <GUI_TOUCH_CalcCoefficients+0x45e>
 80097bc:	edd3 6a03 	vldr	s13, [r3, #12]
 80097c0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80097c4:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 80097c8:	eea5 7ae6 	vfms.f32	s14, s11, s13
 80097cc:	edd3 6a05 	vldr	s13, [r3, #20]
 80097d0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80097d4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80097d8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80097dc:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80097e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097e4:	ee17 3a90 	vmov	r3, s15
 80097e8:	e001      	b.n	80097ee <GUI_TOUCH_CalcCoefficients+0x462>
 80097ea:	f04f 33ff 	mov.w	r3, #4294967295
 80097ee:	42a1      	cmp	r1, r4
 80097f0:	4d0b      	ldr	r5, [pc, #44]	; (8009820 <GUI_TOUCH_CalcCoefficients+0x494>)
 80097f2:	bfc4      	itt	gt
 80097f4:	603c      	strgt	r4, [r7, #0]
 80097f6:	f8cc 1000 	strgt.w	r1, [ip]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	602b      	str	r3, [r5, #0]
 80097fe:	bfc4      	itt	gt
 8009800:	6033      	strgt	r3, [r6, #0]
 8009802:	602a      	strgt	r2, [r5, #0]
 8009804:	f1d0 0001 	rsbs	r0, r0, #1
 8009808:	bf38      	it	cc
 800980a:	2000      	movcc	r0, #0
 800980c:	b00c      	add	sp, #48	; 0x30
 800980e:	ecbd 8b02 	vpop	{d8}
 8009812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009816:	bf00      	nop
 8009818:	2001916c 	.word	0x2001916c
 800981c:	20019198 	.word	0x20019198
 8009820:	20019194 	.word	0x20019194

08009824 <GUI_SetTextMode>:
 8009824:	4b03      	ldr	r3, [pc, #12]	; (8009834 <GUI_SetTextMode+0x10>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800982c:	8558      	strh	r0, [r3, #42]	; 0x2a
 800982e:	4610      	mov	r0, r2
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	20000024 	.word	0x20000024

08009838 <GUI_SetFont>:
 8009838:	4b03      	ldr	r3, [pc, #12]	; (8009848 <GUI_SetFont+0x10>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	69d9      	ldr	r1, [r3, #28]
 800983e:	b100      	cbz	r0, 8009842 <GUI_SetFont+0xa>
 8009840:	61d8      	str	r0, [r3, #28]
 8009842:	4608      	mov	r0, r1
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	20000024 	.word	0x20000024

0800984c <GUI_SetDrawMode>:
 800984c:	f7fe be36 	b.w	80084bc <LCD_SetDrawMode>

08009850 <GL_SetDefault>:
 8009850:	b508      	push	{r3, lr}
 8009852:	2000      	movs	r0, #0
 8009854:	f000 f81c 	bl	8009890 <GUI_SetBkColor>
 8009858:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800985c:	f000 f81a 	bl	8009894 <GUI_SetColor>
 8009860:	2001      	movs	r0, #1
 8009862:	f000 f87d 	bl	8009960 <GUI_SetPenSize>
 8009866:	2000      	movs	r0, #0
 8009868:	f003 ff48 	bl	800d6fc <GUI_SetTextAlign>
 800986c:	2000      	movs	r0, #0
 800986e:	f7ff ffd9 	bl	8009824 <GUI_SetTextMode>
 8009872:	2000      	movs	r0, #0
 8009874:	f7ff ffea 	bl	800984c <GUI_SetDrawMode>
 8009878:	4b04      	ldr	r3, [pc, #16]	; (800988c <GL_SetDefault+0x3c>)
 800987a:	6818      	ldr	r0, [r3, #0]
 800987c:	f7ff ffdc 	bl	8009838 <GUI_SetFont>
 8009880:	2000      	movs	r0, #0
 8009882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009886:	f003 bf5d 	b.w	800d744 <GUI_SetLineStyle>
 800988a:	bf00      	nop
 800988c:	20000028 	.word	0x20000028

08009890 <GUI_SetBkColor>:
 8009890:	f7ff b95c 	b.w	8008b4c <LCD_SetBkColor>

08009894 <GUI_SetColor>:
 8009894:	f7ff b962 	b.w	8008b5c <LCD_SetColor>

08009898 <GUI__AlphaPreserveTrans>:
 8009898:	b510      	push	{r4, lr}
 800989a:	4b07      	ldr	r3, [pc, #28]	; (80098b8 <GUI__AlphaPreserveTrans+0x20>)
 800989c:	781c      	ldrb	r4, [r3, #0]
 800989e:	b120      	cbz	r0, 80098aa <GUI__AlphaPreserveTrans+0x12>
 80098a0:	2201      	movs	r2, #1
 80098a2:	701a      	strb	r2, [r3, #0]
 80098a4:	f04f 30ff 	mov.w	r0, #4294967295
 80098a8:	e002      	b.n	80098b0 <GUI__AlphaPreserveTrans+0x18>
 80098aa:	7018      	strb	r0, [r3, #0]
 80098ac:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80098b0:	f003 fc7e 	bl	800d1b0 <LCD_AA_SetAndMask>
 80098b4:	4620      	mov	r0, r4
 80098b6:	bd10      	pop	{r4, pc}
 80098b8:	200194b9 	.word	0x200194b9

080098bc <GUI_SelectLayer>:
 80098bc:	b570      	push	{r4, r5, r6, lr}
 80098be:	4d08      	ldr	r5, [pc, #32]	; (80098e0 <GUI_SelectLayer+0x24>)
 80098c0:	682b      	ldr	r3, [r5, #0]
 80098c2:	2801      	cmp	r0, #1
 80098c4:	4604      	mov	r4, r0
 80098c6:	7c5e      	ldrb	r6, [r3, #17]
 80098c8:	d808      	bhi.n	80098dc <GUI_SelectLayer+0x20>
 80098ca:	f000 fc11 	bl	800a0f0 <GUI_DEVICE__GetpDriver>
 80098ce:	b128      	cbz	r0, 80098dc <GUI_SelectLayer+0x20>
 80098d0:	682b      	ldr	r3, [r5, #0]
 80098d2:	745c      	strb	r4, [r3, #17]
 80098d4:	f000 f808 	bl	80098e8 <GUI_SelectLCD>
 80098d8:	4b02      	ldr	r3, [pc, #8]	; (80098e4 <GUI_SelectLayer+0x28>)
 80098da:	601c      	str	r4, [r3, #0]
 80098dc:	4630      	mov	r0, r6
 80098de:	bd70      	pop	{r4, r5, r6, pc}
 80098e0:	20000024 	.word	0x20000024
 80098e4:	2001946c 	.word	0x2001946c

080098e8 <GUI_SelectLCD>:
 80098e8:	b508      	push	{r3, lr}
 80098ea:	f003 fab9 	bl	800ce60 <LCD_SelectLCD>
 80098ee:	f7fe fc71 	bl	80081d4 <LCD_UpdateColorIndices>
 80098f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80098f6:	f7fc ba93 	b.w	8005e20 <WM_Activate>
	...

080098fc <GUI_SaveContext_W>:
 80098fc:	b508      	push	{r3, lr}
 80098fe:	4b03      	ldr	r3, [pc, #12]	; (800990c <GUI_SaveContext_W+0x10>)
 8009900:	2270      	movs	r2, #112	; 0x70
 8009902:	6819      	ldr	r1, [r3, #0]
 8009904:	f004 f90c 	bl	800db20 <memcpy>
 8009908:	bd08      	pop	{r3, pc}
 800990a:	bf00      	nop
 800990c:	20000024 	.word	0x20000024

08009910 <GUI_RestoreContext>:
 8009910:	b508      	push	{r3, lr}
 8009912:	4b03      	ldr	r3, [pc, #12]	; (8009920 <GUI_RestoreContext+0x10>)
 8009914:	4601      	mov	r1, r0
 8009916:	2270      	movs	r2, #112	; 0x70
 8009918:	6818      	ldr	r0, [r3, #0]
 800991a:	f004 f901 	bl	800db20 <memcpy>
 800991e:	bd08      	pop	{r3, pc}
 8009920:	20000024 	.word	0x20000024

08009924 <GUI_RectsIntersect>:
 8009924:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8009928:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800992c:	429a      	cmp	r2, r3
 800992e:	dc14      	bgt.n	800995a <GUI_RectsIntersect+0x36>
 8009930:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8009934:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8009938:	429a      	cmp	r2, r3
 800993a:	dc0e      	bgt.n	800995a <GUI_RectsIntersect+0x36>
 800993c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8009940:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8009944:	429a      	cmp	r2, r3
 8009946:	dc08      	bgt.n	800995a <GUI_RectsIntersect+0x36>
 8009948:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800994c:	f9b1 2000 	ldrsh.w	r2, [r1]
 8009950:	429a      	cmp	r2, r3
 8009952:	bfcc      	ite	gt
 8009954:	2000      	movgt	r0, #0
 8009956:	2001      	movle	r0, #1
 8009958:	4770      	bx	lr
 800995a:	2000      	movs	r0, #0
 800995c:	4770      	bx	lr
	...

08009960 <GUI_SetPenSize>:
 8009960:	4b02      	ldr	r3, [pc, #8]	; (800996c <GUI_SetPenSize+0xc>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	7e1a      	ldrb	r2, [r3, #24]
 8009966:	7618      	strb	r0, [r3, #24]
 8009968:	4610      	mov	r0, r2
 800996a:	4770      	bx	lr
 800996c:	20000024 	.word	0x20000024

08009970 <GUI_StoreKey>:
 8009970:	4b02      	ldr	r3, [pc, #8]	; (800997c <GUI_StoreKey+0xc>)
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	b902      	cbnz	r2, 8009978 <GUI_StoreKey+0x8>
 8009976:	6018      	str	r0, [r3, #0]
 8009978:	f7ff bbc4 	b.w	8009104 <GUI_SignalEvent>
 800997c:	2001919c 	.word	0x2001919c

08009980 <GUI_PollKeyMsg>:
 8009980:	4a0a      	ldr	r2, [pc, #40]	; (80099ac <GUI_PollKeyMsg+0x2c>)
 8009982:	490b      	ldr	r1, [pc, #44]	; (80099b0 <GUI_PollKeyMsg+0x30>)
 8009984:	6813      	ldr	r3, [r2, #0]
 8009986:	6809      	ldr	r1, [r1, #0]
 8009988:	428b      	cmp	r3, r1
 800998a:	b510      	push	{r4, lr}
 800998c:	d00b      	beq.n	80099a6 <GUI_PollKeyMsg+0x26>
 800998e:	4c09      	ldr	r4, [pc, #36]	; (80099b4 <GUI_PollKeyMsg+0x34>)
 8009990:	42a3      	cmp	r3, r4
 8009992:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009996:	bf14      	ite	ne
 8009998:	3308      	addne	r3, #8
 800999a:	3b50      	subeq	r3, #80	; 0x50
 800999c:	6013      	str	r3, [r2, #0]
 800999e:	f001 feeb 	bl	800b778 <WM_OnKey>
 80099a2:	2001      	movs	r0, #1
 80099a4:	bd10      	pop	{r4, pc}
 80099a6:	2000      	movs	r0, #0
 80099a8:	bd10      	pop	{r4, pc}
 80099aa:	bf00      	nop
 80099ac:	20000020 	.word	0x20000020
 80099b0:	2000001c 	.word	0x2000001c
 80099b4:	200191f0 	.word	0x200191f0

080099b8 <GUI_MoveRect>:
 80099b8:	b168      	cbz	r0, 80099d6 <GUI_MoveRect+0x1e>
 80099ba:	8803      	ldrh	r3, [r0, #0]
 80099bc:	b289      	uxth	r1, r1
 80099be:	440b      	add	r3, r1
 80099c0:	8003      	strh	r3, [r0, #0]
 80099c2:	8883      	ldrh	r3, [r0, #4]
 80099c4:	4419      	add	r1, r3
 80099c6:	8843      	ldrh	r3, [r0, #2]
 80099c8:	8081      	strh	r1, [r0, #4]
 80099ca:	b292      	uxth	r2, r2
 80099cc:	4413      	add	r3, r2
 80099ce:	8043      	strh	r3, [r0, #2]
 80099d0:	88c3      	ldrh	r3, [r0, #6]
 80099d2:	441a      	add	r2, r3
 80099d4:	80c2      	strh	r2, [r0, #6]
 80099d6:	4770      	bx	lr

080099d8 <GUI_MergeRect>:
 80099d8:	b510      	push	{r4, lr}
 80099da:	b338      	cbz	r0, 8009a2c <GUI_MergeRect+0x54>
 80099dc:	b309      	cbz	r1, 8009a22 <GUI_MergeRect+0x4a>
 80099de:	b30a      	cbz	r2, 8009a24 <GUI_MergeRect+0x4c>
 80099e0:	f9b1 4000 	ldrsh.w	r4, [r1]
 80099e4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80099e8:	429c      	cmp	r4, r3
 80099ea:	bfb8      	it	lt
 80099ec:	4623      	movlt	r3, r4
 80099ee:	8003      	strh	r3, [r0, #0]
 80099f0:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80099f4:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80099f8:	429c      	cmp	r4, r3
 80099fa:	bfb8      	it	lt
 80099fc:	4623      	movlt	r3, r4
 80099fe:	8043      	strh	r3, [r0, #2]
 8009a00:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8009a04:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8009a08:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 8009a0c:	429c      	cmp	r4, r3
 8009a0e:	bfa8      	it	ge
 8009a10:	4623      	movge	r3, r4
 8009a12:	8083      	strh	r3, [r0, #4]
 8009a14:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8009a18:	4299      	cmp	r1, r3
 8009a1a:	bfa8      	it	ge
 8009a1c:	460b      	movge	r3, r1
 8009a1e:	80c3      	strh	r3, [r0, #6]
 8009a20:	bd10      	pop	{r4, pc}
 8009a22:	4611      	mov	r1, r2
 8009a24:	680b      	ldr	r3, [r1, #0]
 8009a26:	6003      	str	r3, [r0, #0]
 8009a28:	684b      	ldr	r3, [r1, #4]
 8009a2a:	6043      	str	r3, [r0, #4]
 8009a2c:	bd10      	pop	{r4, pc}
	...

08009a30 <GUI_GotoXY>:
 8009a30:	4b02      	ldr	r3, [pc, #8]	; (8009a3c <GUI_GotoXY+0xc>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	8458      	strh	r0, [r3, #34]	; 0x22
 8009a36:	8499      	strh	r1, [r3, #36]	; 0x24
 8009a38:	2000      	movs	r0, #0
 8009a3a:	4770      	bx	lr
 8009a3c:	20000024 	.word	0x20000024

08009a40 <GUI_GetOrg>:
 8009a40:	4b04      	ldr	r3, [pc, #16]	; (8009a54 <GUI_GetOrg+0x14>)
 8009a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a46:	6003      	str	r3, [r0, #0]
 8009a48:	4b03      	ldr	r3, [pc, #12]	; (8009a58 <GUI_GetOrg+0x18>)
 8009a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a4e:	600b      	str	r3, [r1, #0]
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	200194b0 	.word	0x200194b0
 8009a58:	200194a4 	.word	0x200194a4

08009a5c <GUI_Exec1>:
 8009a5c:	4b0a      	ldr	r3, [pc, #40]	; (8009a88 <GUI_Exec1+0x2c>)
 8009a5e:	b510      	push	{r4, lr}
 8009a60:	681c      	ldr	r4, [r3, #0]
 8009a62:	b11c      	cbz	r4, 8009a6c <GUI_Exec1+0x10>
 8009a64:	47a0      	blx	r4
 8009a66:	1c04      	adds	r4, r0, #0
 8009a68:	bf18      	it	ne
 8009a6a:	2401      	movne	r4, #1
 8009a6c:	f7fc f92a 	bl	8005cc4 <WM_Exec>
 8009a70:	4b06      	ldr	r3, [pc, #24]	; (8009a8c <GUI_Exec1+0x30>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2800      	cmp	r0, #0
 8009a76:	bf18      	it	ne
 8009a78:	2401      	movne	r4, #1
 8009a7a:	b11b      	cbz	r3, 8009a84 <GUI_Exec1+0x28>
 8009a7c:	4798      	blx	r3
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	bf18      	it	ne
 8009a82:	2401      	movne	r4, #1
 8009a84:	4620      	mov	r0, r4
 8009a86:	bd10      	pop	{r4, pc}
 8009a88:	200194ac 	.word	0x200194ac
 8009a8c:	200194c4 	.word	0x200194c4

08009a90 <GUI_Exec>:
 8009a90:	b510      	push	{r4, lr}
 8009a92:	2400      	movs	r4, #0
 8009a94:	f7ff ffe2 	bl	8009a5c <GUI_Exec1>
 8009a98:	b108      	cbz	r0, 8009a9e <GUI_Exec+0xe>
 8009a9a:	2401      	movs	r4, #1
 8009a9c:	e7fa      	b.n	8009a94 <GUI_Exec+0x4>
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	bd10      	pop	{r4, pc}
	...

08009aa4 <GL_DrawPoint>:
 8009aa4:	b508      	push	{r3, lr}
 8009aa6:	4b08      	ldr	r3, [pc, #32]	; (8009ac8 <GL_DrawPoint+0x24>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	7e1a      	ldrb	r2, [r3, #24]
 8009aac:	2a01      	cmp	r2, #1
 8009aae:	d103      	bne.n	8009ab8 <GL_DrawPoint+0x14>
 8009ab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	4798      	blx	r3
 8009ab6:	bd08      	pop	{r3, pc}
 8009ab8:	2302      	movs	r3, #2
 8009aba:	3a01      	subs	r2, #1
 8009abc:	fb92 f2f3 	sdiv	r2, r2, r3
 8009ac0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009ac4:	f000 bccc 	b.w	800a460 <GL_FillCircle>
 8009ac8:	20000024 	.word	0x20000024

08009acc <GUI_DrawPoint>:
 8009acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ace:	4b09      	ldr	r3, [pc, #36]	; (8009af4 <GUI_DrawPoint+0x28>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4607      	mov	r7, r0
 8009ad4:	2000      	movs	r0, #0
 8009ad6:	460d      	mov	r5, r1
 8009ad8:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8009ada:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8009adc:	f7fb ffcc 	bl	8005a78 <WM__InitIVRSearch>
 8009ae0:	b130      	cbz	r0, 8009af0 <GUI_DrawPoint+0x24>
 8009ae2:	19b8      	adds	r0, r7, r6
 8009ae4:	1929      	adds	r1, r5, r4
 8009ae6:	f7ff ffdd 	bl	8009aa4 <GL_DrawPoint>
 8009aea:	f7fb ff03 	bl	80058f4 <WM__GetNextIVR>
 8009aee:	e7f7      	b.n	8009ae0 <GUI_DrawPoint+0x14>
 8009af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009af2:	bf00      	nop
 8009af4:	20000024 	.word	0x20000024

08009af8 <_SetLineColor>:
 8009af8:	4b1e      	ldr	r3, [pc, #120]	; (8009b74 <_SetLineColor+0x7c>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	7e9b      	ldrb	r3, [r3, #26]
 8009afe:	3b01      	subs	r3, #1
 8009b00:	2b03      	cmp	r3, #3
 8009b02:	d832      	bhi.n	8009b6a <_SetLineColor+0x72>
 8009b04:	e8df f003 	tbb	[pc, r3]
 8009b08:	221a0d02 	.word	0x221a0d02
 8009b0c:	4b1a      	ldr	r3, [pc, #104]	; (8009b78 <_SetLineColor+0x80>)
 8009b0e:	3006      	adds	r0, #6
 8009b10:	4003      	ands	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	da03      	bge.n	8009b1e <_SetLineColor+0x26>
 8009b16:	3b01      	subs	r3, #1
 8009b18:	f063 030f 	orn	r3, r3, #15
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	2b0b      	cmp	r3, #11
 8009b20:	e008      	b.n	8009b34 <_SetLineColor+0x3c>
 8009b22:	4b16      	ldr	r3, [pc, #88]	; (8009b7c <_SetLineColor+0x84>)
 8009b24:	4003      	ands	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	da03      	bge.n	8009b32 <_SetLineColor+0x3a>
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	f063 0303 	orn	r3, r3, #3
 8009b30:	3301      	adds	r3, #1
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	bfcc      	ite	gt
 8009b36:	2000      	movgt	r0, #0
 8009b38:	2001      	movle	r0, #1
 8009b3a:	4770      	bx	lr
 8009b3c:	2314      	movs	r3, #20
 8009b3e:	fb90 f2f3 	sdiv	r2, r0, r3
 8009b42:	fb03 0012 	mls	r0, r3, r2, r0
 8009b46:	280b      	cmp	r0, #11
 8009b48:	dc09      	bgt.n	8009b5e <_SetLineColor+0x66>
 8009b4a:	e010      	b.n	8009b6e <_SetLineColor+0x76>
 8009b4c:	2318      	movs	r3, #24
 8009b4e:	fb90 f2f3 	sdiv	r2, r0, r3
 8009b52:	fb03 0012 	mls	r0, r3, r2, r0
 8009b56:	280b      	cmp	r0, #11
 8009b58:	dd09      	ble.n	8009b6e <_SetLineColor+0x76>
 8009b5a:	f020 0004 	bic.w	r0, r0, #4
 8009b5e:	3810      	subs	r0, #16
 8009b60:	2801      	cmp	r0, #1
 8009b62:	bf8c      	ite	hi
 8009b64:	2000      	movhi	r0, #0
 8009b66:	2001      	movls	r0, #1
 8009b68:	4770      	bx	lr
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	4770      	bx	lr
 8009b6e:	2001      	movs	r0, #1
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	20000024 	.word	0x20000024
 8009b78:	8000000f 	.word	0x8000000f
 8009b7c:	80000003 	.word	0x80000003

08009b80 <GUI_sin>:
 8009b80:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8009b84:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8009b88:	bfc6      	itte	gt
 8009b8a:	f5a0 6000 	subgt.w	r0, r0, #2048	; 0x800
 8009b8e:	2101      	movgt	r1, #1
 8009b90:	2100      	movle	r1, #0
 8009b92:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009b96:	bfc8      	it	gt
 8009b98:	f5c0 6000 	rsbgt	r0, r0, #2048	; 0x800
 8009b9c:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 8009ba0:	b510      	push	{r4, lr}
 8009ba2:	1182      	asrs	r2, r0, #6
 8009ba4:	4c0b      	ldr	r4, [pc, #44]	; (8009bd4 <GUI_sin+0x54>)
 8009ba6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	f834 0012 	ldrh.w	r0, [r4, r2, lsl #1]
 8009bb0:	2b40      	cmp	r3, #64	; 0x40
 8009bb2:	fb00 f003 	mul.w	r0, r0, r3
 8009bb6:	d008      	beq.n	8009bca <GUI_sin+0x4a>
 8009bb8:	2a10      	cmp	r2, #16
 8009bba:	d006      	beq.n	8009bca <GUI_sin+0x4a>
 8009bbc:	3201      	adds	r2, #1
 8009bbe:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8009bc2:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 8009bc6:	fb03 0002 	mla	r0, r3, r2, r0
 8009bca:	3020      	adds	r0, #32
 8009bcc:	0980      	lsrs	r0, r0, #6
 8009bce:	b101      	cbz	r1, 8009bd2 <GUI_sin+0x52>
 8009bd0:	4240      	negs	r0, r0
 8009bd2:	bd10      	pop	{r4, pc}
 8009bd4:	08012de4 	.word	0x08012de4

08009bd8 <GUI_cos>:
 8009bd8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009bdc:	f7ff bfd0 	b.w	8009b80 <GUI_sin>

08009be0 <GL_DrawLine1Ex>:
 8009be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8009be8:	1a17      	subs	r7, r2, r0
 8009bea:	1a5c      	subs	r4, r3, r1
 8009bec:	ea54 0c07 	orrs.w	ip, r4, r7
 8009bf0:	4605      	mov	r5, r0
 8009bf2:	460e      	mov	r6, r1
 8009bf4:	f8d8 b000 	ldr.w	fp, [r8]
 8009bf8:	d104      	bne.n	8009c04 <GL_DrawLine1Ex+0x24>
 8009bfa:	b003      	add	sp, #12
 8009bfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c00:	f7ff bf50 	b.w	8009aa4 <GL_DrawPoint>
 8009c04:	ea87 70e7 	eor.w	r0, r7, r7, asr #31
 8009c08:	eba0 70e7 	sub.w	r0, r0, r7, asr #31
 8009c0c:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 8009c10:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8009c14:	4288      	cmp	r0, r1
 8009c16:	db04      	blt.n	8009c22 <GL_DrawLine1Ex+0x42>
 8009c18:	4621      	mov	r1, r4
 8009c1a:	463c      	mov	r4, r7
 8009c1c:	460f      	mov	r7, r1
 8009c1e:	2100      	movs	r1, #0
 8009c20:	e006      	b.n	8009c30 <GL_DrawLine1Ex+0x50>
 8009c22:	4611      	mov	r1, r2
 8009c24:	461a      	mov	r2, r3
 8009c26:	460b      	mov	r3, r1
 8009c28:	4629      	mov	r1, r5
 8009c2a:	4635      	mov	r5, r6
 8009c2c:	460e      	mov	r6, r1
 8009c2e:	2101      	movs	r1, #1
 8009c30:	9100      	str	r1, [sp, #0]
 8009c32:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 8009c36:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8009c3a:	428c      	cmp	r4, r1
 8009c3c:	d008      	beq.n	8009c50 <GL_DrawLine1Ex+0x70>
 8009c3e:	461e      	mov	r6, r3
 8009c40:	462b      	mov	r3, r5
 8009c42:	4264      	negs	r4, r4
 8009c44:	4615      	mov	r5, r2
 8009c46:	427f      	negs	r7, r7
 8009c48:	461a      	mov	r2, r3
 8009c4a:	f04f 3aff 	mov.w	sl, #4294967295
 8009c4e:	e001      	b.n	8009c54 <GL_DrawLine1Ex+0x74>
 8009c50:	f04f 0a01 	mov.w	sl, #1
 8009c54:	2f00      	cmp	r7, #0
 8009c56:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8009da0 <GL_DrawLine1Ex+0x1c0>
 8009c5a:	d13e      	bne.n	8009cda <GL_DrawLine1Ex+0xfa>
 8009c5c:	9b00      	ldr	r3, [sp, #0]
 8009c5e:	b1d3      	cbz	r3, 8009c96 <GL_DrawLine1Ex+0xb6>
 8009c60:	f8d9 3000 	ldr.w	r3, [r9]
 8009c64:	7e9b      	ldrb	r3, [r3, #26]
 8009c66:	b98b      	cbnz	r3, 8009c8c <GL_DrawLine1Ex+0xac>
 8009c68:	4630      	mov	r0, r6
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	b003      	add	sp, #12
 8009c6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c72:	f7fe bc7f 	b.w	8008574 <LCD_DrawVLine>
 8009c76:	f7ff ff3f 	bl	8009af8 <_SetLineColor>
 8009c7a:	b930      	cbnz	r0, 8009c8a <GL_DrawLine1Ex+0xaa>
 8009c7c:	f8d9 3000 	ldr.w	r3, [r9]
 8009c80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c82:	4630      	mov	r0, r6
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	1979      	adds	r1, r7, r5
 8009c88:	4798      	blx	r3
 8009c8a:	3701      	adds	r7, #1
 8009c8c:	42a7      	cmp	r7, r4
 8009c8e:	eb07 000b 	add.w	r0, r7, fp
 8009c92:	ddf0      	ble.n	8009c76 <GL_DrawLine1Ex+0x96>
 8009c94:	e01d      	b.n	8009cd2 <GL_DrawLine1Ex+0xf2>
 8009c96:	f8d9 3000 	ldr.w	r3, [r9]
 8009c9a:	7e99      	ldrb	r1, [r3, #26]
 8009c9c:	b111      	cbz	r1, 8009ca4 <GL_DrawLine1Ex+0xc4>
 8009c9e:	f8dd a000 	ldr.w	sl, [sp]
 8009ca2:	e012      	b.n	8009cca <GL_DrawLine1Ex+0xea>
 8009ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4631      	mov	r1, r6
 8009cac:	4798      	blx	r3
 8009cae:	e074      	b.n	8009d9a <GL_DrawLine1Ex+0x1ba>
 8009cb0:	f7ff ff22 	bl	8009af8 <_SetLineColor>
 8009cb4:	b938      	cbnz	r0, 8009cc6 <GL_DrawLine1Ex+0xe6>
 8009cb6:	f8d9 3000 	ldr.w	r3, [r9]
 8009cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cbc:	eb0a 0005 	add.w	r0, sl, r5
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	4798      	blx	r3
 8009cc6:	f10a 0a01 	add.w	sl, sl, #1
 8009cca:	45a2      	cmp	sl, r4
 8009ccc:	eb0a 000b 	add.w	r0, sl, fp
 8009cd0:	ddee      	ble.n	8009cb0 <GL_DrawLine1Ex+0xd0>
 8009cd2:	3801      	subs	r0, #1
 8009cd4:	f8c8 0000 	str.w	r0, [r8]
 8009cd8:	e05f      	b.n	8009d9a <GL_DrawLine1Ex+0x1ba>
 8009cda:	f8d9 1000 	ldr.w	r1, [r9]
 8009cde:	f04f 0202 	mov.w	r2, #2
 8009ce2:	7e89      	ldrb	r1, [r1, #26]
 8009ce4:	fb94 f2f2 	sdiv	r2, r4, r2
 8009ce8:	bfb8      	it	lt
 8009cea:	4252      	neglt	r2, r2
 8009cec:	b9d9      	cbnz	r1, 8009d26 <GL_DrawLine1Ex+0x146>
 8009cee:	4693      	mov	fp, r2
 8009cf0:	46a8      	mov	r8, r5
 8009cf2:	ebc5 0308 	rsb	r3, r5, r8
 8009cf6:	42a3      	cmp	r3, r4
 8009cf8:	dc4f      	bgt.n	8009d9a <GL_DrawLine1Ex+0x1ba>
 8009cfa:	9b00      	ldr	r3, [sp, #0]
 8009cfc:	fb9b f1f4 	sdiv	r1, fp, r4
 8009d00:	4431      	add	r1, r6
 8009d02:	b92b      	cbnz	r3, 8009d10 <GL_DrawLine1Ex+0x130>
 8009d04:	f8d9 3000 	ldr.w	r3, [r9]
 8009d08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d0a:	4640      	mov	r0, r8
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	e005      	b.n	8009d1c <GL_DrawLine1Ex+0x13c>
 8009d10:	f8d9 3000 	ldr.w	r3, [r9]
 8009d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	4608      	mov	r0, r1
 8009d1a:	4641      	mov	r1, r8
 8009d1c:	4798      	blx	r3
 8009d1e:	f108 0801 	add.w	r8, r8, #1
 8009d22:	44bb      	add	fp, r7
 8009d24:	e7e5      	b.n	8009cf2 <GL_DrawLine1Ex+0x112>
 8009d26:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009d2a:	bf04      	itt	eq
 8009d2c:	eb04 010b 	addeq.w	r1, r4, fp
 8009d30:	f8c8 1000 	streq.w	r1, [r8]
 8009d34:	9201      	str	r2, [sp, #4]
 8009d36:	46ab      	mov	fp, r5
 8009d38:	ebc5 010b 	rsb	r1, r5, fp
 8009d3c:	42a1      	cmp	r1, r4
 8009d3e:	f8d8 0000 	ldr.w	r0, [r8]
 8009d42:	dc1e      	bgt.n	8009d82 <GL_DrawLine1Ex+0x1a2>
 8009d44:	4450      	add	r0, sl
 8009d46:	f8c8 0000 	str.w	r0, [r8]
 8009d4a:	f7ff fed5 	bl	8009af8 <_SetLineColor>
 8009d4e:	b980      	cbnz	r0, 8009d72 <GL_DrawLine1Ex+0x192>
 8009d50:	f8dd c004 	ldr.w	ip, [sp, #4]
 8009d54:	f8d9 0000 	ldr.w	r0, [r9]
 8009d58:	9b00      	ldr	r3, [sp, #0]
 8009d5a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8009d5c:	fb9c f1f4 	sdiv	r1, ip, r4
 8009d60:	4431      	add	r1, r6
 8009d62:	b913      	cbnz	r3, 8009d6a <GL_DrawLine1Ex+0x18a>
 8009d64:	6843      	ldr	r3, [r0, #4]
 8009d66:	4658      	mov	r0, fp
 8009d68:	e002      	b.n	8009d70 <GL_DrawLine1Ex+0x190>
 8009d6a:	6843      	ldr	r3, [r0, #4]
 8009d6c:	4608      	mov	r0, r1
 8009d6e:	4659      	mov	r1, fp
 8009d70:	4798      	blx	r3
 8009d72:	f8dd c004 	ldr.w	ip, [sp, #4]
 8009d76:	44bc      	add	ip, r7
 8009d78:	f10b 0b01 	add.w	fp, fp, #1
 8009d7c:	f8cd c004 	str.w	ip, [sp, #4]
 8009d80:	e7da      	b.n	8009d38 <GL_DrawLine1Ex+0x158>
 8009d82:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009d86:	bf04      	itt	eq
 8009d88:	1824      	addeq	r4, r4, r0
 8009d8a:	f8c8 4000 	streq.w	r4, [r8]
 8009d8e:	f8d8 2000 	ldr.w	r2, [r8]
 8009d92:	ebca 0302 	rsb	r3, sl, r2
 8009d96:	f8c8 3000 	str.w	r3, [r8]
 8009d9a:	b003      	add	sp, #12
 8009d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da0:	20000024 	.word	0x20000024

08009da4 <GL_DrawLineEx>:
 8009da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da8:	4d67      	ldr	r5, [pc, #412]	; (8009f48 <GL_DrawLineEx+0x1a4>)
 8009daa:	682c      	ldr	r4, [r5, #0]
 8009dac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009db0:	f1bb 0f01 	cmp.w	fp, #1
 8009db4:	b087      	sub	sp, #28
 8009db6:	4681      	mov	r9, r0
 8009db8:	4688      	mov	r8, r1
 8009dba:	4617      	mov	r7, r2
 8009dbc:	461e      	mov	r6, r3
 8009dbe:	46aa      	mov	sl, r5
 8009dc0:	d104      	bne.n	8009dcc <GL_DrawLineEx+0x28>
 8009dc2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8009dc4:	9400      	str	r4, [sp, #0]
 8009dc6:	f7ff ff0b 	bl	8009be0 <GL_DrawLine1Ex>
 8009dca:	e0ba      	b.n	8009f42 <GL_DrawLineEx+0x19e>
 8009dcc:	1a84      	subs	r4, r0, r2
 8009dce:	1acd      	subs	r5, r1, r3
 8009dd0:	ea54 0305 	orrs.w	r3, r4, r5
 8009dd4:	f000 80b5 	beq.w	8009f42 <GL_DrawLineEx+0x19e>
 8009dd8:	2c00      	cmp	r4, #0
 8009dda:	bfba      	itte	lt
 8009ddc:	4264      	neglt	r4, r4
 8009dde:	2301      	movlt	r3, #1
 8009de0:	2300      	movge	r3, #0
 8009de2:	2d00      	cmp	r5, #0
 8009de4:	bfbc      	itt	lt
 8009de6:	426d      	neglt	r5, r5
 8009de8:	f043 0302 	orrlt.w	r3, r3, #2
 8009dec:	42a5      	cmp	r5, r4
 8009dee:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009df2:	dd04      	ble.n	8009dfe <GL_DrawLineEx+0x5a>
 8009df4:	4622      	mov	r2, r4
 8009df6:	f043 0304 	orr.w	r3, r3, #4
 8009dfa:	462c      	mov	r4, r5
 8009dfc:	4615      	mov	r5, r2
 8009dfe:	2202      	movs	r2, #2
 8009e00:	fb94 f2f2 	sdiv	r2, r4, r2
 8009e04:	eb02 2585 	add.w	r5, r2, r5, lsl #10
 8009e08:	fb95 f4f4 	sdiv	r4, r5, r4
 8009e0c:	11a1      	asrs	r1, r4, #6
 8009e0e:	4a4f      	ldr	r2, [pc, #316]	; (8009f4c <GL_DrawLineEx+0x1a8>)
 8009e10:	f3c4 0483 	ubfx	r4, r4, #2, #4
 8009e14:	f1c4 0510 	rsb	r5, r4, #16
 8009e18:	f932 0011 	ldrsh.w	r0, [r2, r1, lsl #1]
 8009e1c:	2d10      	cmp	r5, #16
 8009e1e:	fb05 f000 	mul.w	r0, r5, r0
 8009e22:	d004      	beq.n	8009e2e <GL_DrawLineEx+0x8a>
 8009e24:	3101      	adds	r1, #1
 8009e26:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8009e2a:	fb04 0002 	mla	r0, r4, r2, r0
 8009e2e:	2210      	movs	r2, #16
 8009e30:	3008      	adds	r0, #8
 8009e32:	fb90 f0f2 	sdiv	r0, r0, r2
 8009e36:	0759      	lsls	r1, r3, #29
 8009e38:	bf48      	it	mi
 8009e3a:	f5c0 6080 	rsbmi	r0, r0, #1024	; 0x400
 8009e3e:	07da      	lsls	r2, r3, #31
 8009e40:	bf48      	it	mi
 8009e42:	f5c0 6000 	rsbmi	r0, r0, #2048	; 0x800
 8009e46:	079b      	lsls	r3, r3, #30
 8009e48:	bf48      	it	mi
 8009e4a:	f5c0 5080 	rsbmi	r0, r0, #4096	; 0x1000
 8009e4e:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8009e52:	4628      	mov	r0, r5
 8009e54:	f7ff fec0 	bl	8009bd8 <GUI_cos>
 8009e58:	fb00 f40b 	mul.w	r4, r0, fp
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	f7ff fe8f 	bl	8009b80 <GUI_sin>
 8009e62:	2c00      	cmp	r4, #0
 8009e64:	fb00 f00b 	mul.w	r0, r0, fp
 8009e68:	da04      	bge.n	8009e74 <GL_DrawLineEx+0xd0>
 8009e6a:	f5c4 7300 	rsb	r3, r4, #512	; 0x200
 8009e6e:	129b      	asrs	r3, r3, #10
 8009e70:	425b      	negs	r3, r3
 8009e72:	e002      	b.n	8009e7a <GL_DrawLineEx+0xd6>
 8009e74:	f504 7300 	add.w	r3, r4, #512	; 0x200
 8009e78:	129b      	asrs	r3, r3, #10
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	da06      	bge.n	8009e8c <GL_DrawLineEx+0xe8>
 8009e7e:	f5c0 7b00 	rsb	fp, r0, #512	; 0x200
 8009e82:	ea4f 2bab 	mov.w	fp, fp, asr #10
 8009e86:	f1cb 0b00 	rsb	fp, fp, #0
 8009e8a:	e003      	b.n	8009e94 <GL_DrawLineEx+0xf0>
 8009e8c:	f500 7b00 	add.w	fp, r0, #512	; 0x200
 8009e90:	ea4f 2bab 	mov.w	fp, fp, asr #10
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	dd03      	ble.n	8009ea0 <GL_DrawLineEx+0xfc>
 8009e98:	1c58      	adds	r0, r3, #1
 8009e9a:	1040      	asrs	r0, r0, #1
 8009e9c:	105b      	asrs	r3, r3, #1
 8009e9e:	e005      	b.n	8009eac <GL_DrawLineEx+0x108>
 8009ea0:	2202      	movs	r2, #2
 8009ea2:	fb93 f0f2 	sdiv	r0, r3, r2
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009eac:	f1bb 0f00 	cmp.w	fp, #0
 8009eb0:	dd05      	ble.n	8009ebe <GL_DrawLineEx+0x11a>
 8009eb2:	f10b 0201 	add.w	r2, fp, #1
 8009eb6:	1052      	asrs	r2, r2, #1
 8009eb8:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 8009ebc:	e006      	b.n	8009ecc <GL_DrawLineEx+0x128>
 8009ebe:	2102      	movs	r1, #2
 8009ec0:	fb9b f2f1 	sdiv	r2, fp, r1
 8009ec4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ec8:	fb9b fbf1 	sdiv	fp, fp, r1
 8009ecc:	b280      	uxth	r0, r0
 8009ece:	fa1f f489 	uxth.w	r4, r9
 8009ed2:	1901      	adds	r1, r0, r4
 8009ed4:	b292      	uxth	r2, r2
 8009ed6:	f8ad 1008 	strh.w	r1, [sp, #8]
 8009eda:	fa1f fb8b 	uxth.w	fp, fp
 8009ede:	fa1f f188 	uxth.w	r1, r8
 8009ee2:	1855      	adds	r5, r2, r1
 8009ee4:	ebcb 0101 	rsb	r1, fp, r1
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	f8ad 100e 	strh.w	r1, [sp, #14]
 8009eee:	b2b9      	uxth	r1, r7
 8009ef0:	1ae4      	subs	r4, r4, r3
 8009ef2:	1acb      	subs	r3, r1, r3
 8009ef4:	f8ad 3010 	strh.w	r3, [sp, #16]
 8009ef8:	b2b3      	uxth	r3, r6
 8009efa:	4401      	add	r1, r0
 8009efc:	ebcb 0b03 	rsb	fp, fp, r3
 8009f00:	4413      	add	r3, r2
 8009f02:	2200      	movs	r2, #0
 8009f04:	f8ad 1014 	strh.w	r1, [sp, #20]
 8009f08:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009f0c:	a802      	add	r0, sp, #8
 8009f0e:	4613      	mov	r3, r2
 8009f10:	2104      	movs	r1, #4
 8009f12:	f8ad 500a 	strh.w	r5, [sp, #10]
 8009f16:	f8ad 400c 	strh.w	r4, [sp, #12]
 8009f1a:	f8ad b012 	strh.w	fp, [sp, #18]
 8009f1e:	f003 fc47 	bl	800d7b0 <GL_FillPolygon>
 8009f22:	f8da 3000 	ldr.w	r3, [sl]
 8009f26:	7e5b      	ldrb	r3, [r3, #25]
 8009f28:	b91b      	cbnz	r3, 8009f32 <GL_DrawLineEx+0x18e>
 8009f2a:	4648      	mov	r0, r9
 8009f2c:	4641      	mov	r1, r8
 8009f2e:	f7ff fdb9 	bl	8009aa4 <GL_DrawPoint>
 8009f32:	f8da 3000 	ldr.w	r3, [sl]
 8009f36:	7e5b      	ldrb	r3, [r3, #25]
 8009f38:	b91b      	cbnz	r3, 8009f42 <GL_DrawLineEx+0x19e>
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	4631      	mov	r1, r6
 8009f3e:	f7ff fdb1 	bl	8009aa4 <GL_DrawPoint>
 8009f42:	b007      	add	sp, #28
 8009f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f48:	20000024 	.word	0x20000024
 8009f4c:	08012e06 	.word	0x08012e06

08009f50 <GL_DrawLine>:
 8009f50:	b530      	push	{r4, r5, lr}
 8009f52:	b085      	sub	sp, #20
 8009f54:	ac04      	add	r4, sp, #16
 8009f56:	2500      	movs	r5, #0
 8009f58:	f844 5d04 	str.w	r5, [r4, #-4]!
 8009f5c:	9400      	str	r4, [sp, #0]
 8009f5e:	f7ff ff21 	bl	8009da4 <GL_DrawLineEx>
 8009f62:	b005      	add	sp, #20
 8009f64:	bd30      	pop	{r4, r5, pc}
	...

08009f68 <GUI_DrawLine>:
 8009f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f6c:	461e      	mov	r6, r3
 8009f6e:	4b0c      	ldr	r3, [pc, #48]	; (8009fa0 <GUI_DrawLine+0x38>)
 8009f70:	681c      	ldr	r4, [r3, #0]
 8009f72:	4681      	mov	r9, r0
 8009f74:	2000      	movs	r0, #0
 8009f76:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009f78:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8009f7a:	4688      	mov	r8, r1
 8009f7c:	4617      	mov	r7, r2
 8009f7e:	f7fb fd7b 	bl	8005a78 <WM__InitIVRSearch>
 8009f82:	b150      	cbz	r0, 8009f9a <GUI_DrawLine+0x32>
 8009f84:	eb09 0005 	add.w	r0, r9, r5
 8009f88:	eb08 0104 	add.w	r1, r8, r4
 8009f8c:	197a      	adds	r2, r7, r5
 8009f8e:	1933      	adds	r3, r6, r4
 8009f90:	f7ff ffde 	bl	8009f50 <GL_DrawLine>
 8009f94:	f7fb fcae 	bl	80058f4 <WM__GetNextIVR>
 8009f98:	e7f3      	b.n	8009f82 <GUI_DrawLine+0x1a>
 8009f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f9e:	bf00      	nop
 8009fa0:	20000024 	.word	0x20000024

08009fa4 <GUI_DispStringHCenterAt>:
 8009fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa6:	4b0b      	ldr	r3, [pc, #44]	; (8009fd4 <GUI_DispStringHCenterAt+0x30>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4605      	mov	r5, r0
 8009fac:	f9b3 002c 	ldrsh.w	r0, [r3, #44]	; 0x2c
 8009fb0:	f040 0002 	orr.w	r0, r0, #2
 8009fb4:	460f      	mov	r7, r1
 8009fb6:	4616      	mov	r6, r2
 8009fb8:	f003 fba0 	bl	800d6fc <GUI_SetTextAlign>
 8009fbc:	4639      	mov	r1, r7
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	4632      	mov	r2, r6
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	f000 f808 	bl	8009fd8 <GUI_DispStringAt>
 8009fc8:	4620      	mov	r0, r4
 8009fca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009fce:	f003 bb95 	b.w	800d6fc <GUI_SetTextAlign>
 8009fd2:	bf00      	nop
 8009fd4:	20000024 	.word	0x20000024

08009fd8 <GUI_DispStringAt>:
 8009fd8:	4b02      	ldr	r3, [pc, #8]	; (8009fe4 <GUI_DispStringAt+0xc>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	8459      	strh	r1, [r3, #34]	; 0x22
 8009fde:	849a      	strh	r2, [r3, #36]	; 0x24
 8009fe0:	f000 b802 	b.w	8009fe8 <GUI_DispString>
 8009fe4:	20000024 	.word	0x20000024

08009fe8 <GUI_DispString>:
 8009fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fec:	4604      	mov	r4, r0
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	d079      	beq.n	800a0e6 <GUI_DispString+0xfe>
 8009ff2:	4d3e      	ldr	r5, [pc, #248]	; (800a0ec <GUI_DispString+0x104>)
 8009ff4:	f000 fd1c 	bl	800aa30 <GUI_GetFontDistY>
 8009ff8:	682b      	ldr	r3, [r5, #0]
 8009ffa:	4680      	mov	r8, r0
 8009ffc:	f8b3 9022 	ldrh.w	r9, [r3, #34]	; 0x22
 800a000:	f000 fcfe 	bl	800aa00 <GUI_GetYAdjust>
 800a004:	682b      	ldr	r3, [r5, #0]
 800a006:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800a008:	b287      	uxth	r7, r0
 800a00a:	1bd2      	subs	r2, r2, r7
 800a00c:	849a      	strh	r2, [r3, #36]	; 0x24
 800a00e:	7823      	ldrb	r3, [r4, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d05d      	beq.n	800a0d0 <GUI_DispString+0xe8>
 800a014:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800a018:	4620      	mov	r0, r4
 800a01a:	f000 fc3f 	bl	800a89c <GUI__GetLineNumChars>
 800a01e:	4606      	mov	r6, r0
 800a020:	4631      	mov	r1, r6
 800a022:	4620      	mov	r0, r4
 800a024:	f000 fc68 	bl	800a8f8 <GUI__GetLineDistX>
 800a028:	682b      	ldr	r3, [r5, #0]
 800a02a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a02c:	f002 0203 	and.w	r2, r2, #3
 800a030:	2a01      	cmp	r2, #1
 800a032:	d005      	beq.n	800a040 <GUI_DispString+0x58>
 800a034:	2a02      	cmp	r2, #2
 800a036:	bf14      	ite	ne
 800a038:	2200      	movne	r2, #0
 800a03a:	fb90 f2f2 	sdiveq	r2, r0, r2
 800a03e:	e000      	b.n	800a042 <GUI_DispString+0x5a>
 800a040:	4602      	mov	r2, r0
 800a042:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800a044:	1a8a      	subs	r2, r1, r2
 800a046:	b292      	uxth	r2, r2
 800a048:	b291      	uxth	r1, r2
 800a04a:	8459      	strh	r1, [r3, #34]	; 0x22
 800a04c:	fa1f fa80 	uxth.w	sl, r0
 800a050:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a052:	f8ad 1000 	strh.w	r1, [sp]
 800a056:	f10a 31ff 	add.w	r1, sl, #4294967295
 800a05a:	440a      	add	r2, r1
 800a05c:	f8ad 3002 	strh.w	r3, [sp, #2]
 800a060:	fa1f fb88 	uxth.w	fp, r8
 800a064:	3b01      	subs	r3, #1
 800a066:	445b      	add	r3, fp
 800a068:	f8ad 2004 	strh.w	r2, [sp, #4]
 800a06c:	4620      	mov	r0, r4
 800a06e:	4631      	mov	r1, r6
 800a070:	466a      	mov	r2, sp
 800a072:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a076:	f000 fc6f 	bl	800a958 <GUI__DispLine>
 800a07a:	682b      	ldr	r3, [r5, #0]
 800a07c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800a080:	849a      	strh	r2, [r3, #36]	; 0x24
 800a082:	4620      	mov	r0, r4
 800a084:	4631      	mov	r1, r6
 800a086:	f7ff f859 	bl	800913c <GUI_UC__NumChars2NumBytes>
 800a08a:	5c23      	ldrb	r3, [r4, r0]
 800a08c:	2b0a      	cmp	r3, #10
 800a08e:	eb04 0200 	add.w	r2, r4, r0
 800a092:	d001      	beq.n	800a098 <GUI_DispString+0xb0>
 800a094:	2b0d      	cmp	r3, #13
 800a096:	d112      	bne.n	800a0be <GUI_DispString+0xd6>
 800a098:	682b      	ldr	r3, [r5, #0]
 800a09a:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 800a09c:	f001 0103 	and.w	r1, r1, #3
 800a0a0:	3901      	subs	r1, #1
 800a0a2:	2901      	cmp	r1, #1
 800a0a4:	bf8a      	itet	hi
 800a0a6:	8c19      	ldrhhi	r1, [r3, #32]
 800a0a8:	f8a3 9022 	strhls.w	r9, [r3, #34]	; 0x22
 800a0ac:	8459      	strhhi	r1, [r3, #34]	; 0x22
 800a0ae:	7811      	ldrb	r1, [r2, #0]
 800a0b0:	290a      	cmp	r1, #10
 800a0b2:	d10b      	bne.n	800a0cc <GUI_DispString+0xe4>
 800a0b4:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800a0b6:	448b      	add	fp, r1
 800a0b8:	f8a3 b024 	strh.w	fp, [r3, #36]	; 0x24
 800a0bc:	e006      	b.n	800a0cc <GUI_DispString+0xe4>
 800a0be:	4b0b      	ldr	r3, [pc, #44]	; (800a0ec <GUI_DispString+0x104>)
 800a0c0:	f8bd 0000 	ldrh.w	r0, [sp]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4482      	add	sl, r0
 800a0c8:	f8a3 a022 	strh.w	sl, [r3, #34]	; 0x22
 800a0cc:	7813      	ldrb	r3, [r2, #0]
 800a0ce:	b943      	cbnz	r3, 800a0e2 <GUI_DispString+0xfa>
 800a0d0:	682b      	ldr	r3, [r5, #0]
 800a0d2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800a0d4:	4417      	add	r7, r2
 800a0d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a0d8:	849f      	strh	r7, [r3, #36]	; 0x24
 800a0da:	f022 0203 	bic.w	r2, r2, #3
 800a0de:	859a      	strh	r2, [r3, #44]	; 0x2c
 800a0e0:	e001      	b.n	800a0e6 <GUI_DispString+0xfe>
 800a0e2:	1c54      	adds	r4, r2, #1
 800a0e4:	e793      	b.n	800a00e <GUI_DispString+0x26>
 800a0e6:	b003      	add	sp, #12
 800a0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ec:	20000024 	.word	0x20000024

0800a0f0 <GUI_DEVICE__GetpDriver>:
 800a0f0:	2801      	cmp	r0, #1
 800a0f2:	dc09      	bgt.n	800a108 <GUI_DEVICE__GetpDriver+0x18>
 800a0f4:	4b05      	ldr	r3, [pc, #20]	; (800a10c <GUI_DEVICE__GetpDriver+0x1c>)
 800a0f6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800a0fa:	b120      	cbz	r0, 800a106 <GUI_DEVICE__GetpDriver+0x16>
 800a0fc:	68c3      	ldr	r3, [r0, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	b11b      	cbz	r3, 800a10a <GUI_DEVICE__GetpDriver+0x1a>
 800a102:	6800      	ldr	r0, [r0, #0]
 800a104:	e7f9      	b.n	800a0fa <GUI_DEVICE__GetpDriver+0xa>
 800a106:	4770      	bx	lr
 800a108:	2000      	movs	r0, #0
 800a10a:	4770      	bx	lr
 800a10c:	200194c8 	.word	0x200194c8

0800a110 <GUI_DEVICE_Delete>:
 800a110:	f000 bfa6 	b.w	800b060 <GUI_ALLOC_FreeFixedBlock>

0800a114 <GUI_DEVICE_Create>:
 800a114:	2b01      	cmp	r3, #1
 800a116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a118:	4606      	mov	r6, r0
 800a11a:	460d      	mov	r5, r1
 800a11c:	4617      	mov	r7, r2
 800a11e:	461c      	mov	r4, r3
 800a120:	dd01      	ble.n	800a126 <GUI_DEVICE_Create+0x12>
 800a122:	2000      	movs	r0, #0
 800a124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a126:	201c      	movs	r0, #28
 800a128:	f001 f8fa 	bl	800b320 <GUI_ALLOC_GetFixedBlock>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	d0f8      	beq.n	800a122 <GUI_DEVICE_Create+0xe>
 800a130:	b10d      	cbz	r5, 800a136 <GUI_DEVICE_Create+0x22>
 800a132:	6105      	str	r5, [r0, #16]
 800a134:	e009      	b.n	800a14a <GUI_DEVICE_Create+0x36>
 800a136:	4b09      	ldr	r3, [pc, #36]	; (800a15c <GUI_DEVICE_Create+0x48>)
 800a138:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800a13c:	b129      	cbz	r1, 800a14a <GUI_DEVICE_Create+0x36>
 800a13e:	680b      	ldr	r3, [r1, #0]
 800a140:	b10b      	cbz	r3, 800a146 <GUI_DEVICE_Create+0x32>
 800a142:	4619      	mov	r1, r3
 800a144:	e7fb      	b.n	800a13e <GUI_DEVICE_Create+0x2a>
 800a146:	690b      	ldr	r3, [r1, #16]
 800a148:	6103      	str	r3, [r0, #16]
 800a14a:	2300      	movs	r3, #0
 800a14c:	6083      	str	r3, [r0, #8]
 800a14e:	6184      	str	r4, [r0, #24]
 800a150:	8287      	strh	r7, [r0, #20]
 800a152:	60c6      	str	r6, [r0, #12]
 800a154:	6003      	str	r3, [r0, #0]
 800a156:	6043      	str	r3, [r0, #4]
 800a158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a15a:	bf00      	nop
 800a15c:	200194c8 	.word	0x200194c8

0800a160 <GUI_DEVICE_Unlink>:
 800a160:	4b09      	ldr	r3, [pc, #36]	; (800a188 <GUI_DEVICE_Unlink+0x28>)
 800a162:	6982      	ldr	r2, [r0, #24]
 800a164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a168:	4281      	cmp	r1, r0
 800a16a:	bf04      	itt	eq
 800a16c:	6801      	ldreq	r1, [r0, #0]
 800a16e:	f843 1022 	streq.w	r1, [r3, r2, lsl #2]
 800a172:	6843      	ldr	r3, [r0, #4]
 800a174:	b10b      	cbz	r3, 800a17a <GUI_DEVICE_Unlink+0x1a>
 800a176:	6802      	ldr	r2, [r0, #0]
 800a178:	601a      	str	r2, [r3, #0]
 800a17a:	6802      	ldr	r2, [r0, #0]
 800a17c:	b102      	cbz	r2, 800a180 <GUI_DEVICE_Unlink+0x20>
 800a17e:	6053      	str	r3, [r2, #4]
 800a180:	2300      	movs	r3, #0
 800a182:	6003      	str	r3, [r0, #0]
 800a184:	6043      	str	r3, [r0, #4]
 800a186:	4770      	bx	lr
 800a188:	200194c8 	.word	0x200194c8

0800a18c <GUI_DEVICE_Link>:
 800a18c:	b570      	push	{r4, r5, r6, lr}
 800a18e:	b338      	cbz	r0, 800a1e0 <GUI_DEVICE_Link+0x54>
 800a190:	6982      	ldr	r2, [r0, #24]
 800a192:	2a01      	cmp	r2, #1
 800a194:	dc24      	bgt.n	800a1e0 <GUI_DEVICE_Link+0x54>
 800a196:	4919      	ldr	r1, [pc, #100]	; (800a1fc <GUI_DEVICE_Link+0x70>)
 800a198:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800a19c:	460d      	mov	r5, r1
 800a19e:	b913      	cbnz	r3, 800a1a6 <GUI_DEVICE_Link+0x1a>
 800a1a0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 800a1a4:	e01a      	b.n	800a1dc <GUI_DEVICE_Link+0x50>
 800a1a6:	6859      	ldr	r1, [r3, #4]
 800a1a8:	b109      	cbz	r1, 800a1ae <GUI_DEVICE_Link+0x22>
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	e7fb      	b.n	800a1a6 <GUI_DEVICE_Link+0x1a>
 800a1ae:	68c1      	ldr	r1, [r0, #12]
 800a1b0:	680e      	ldr	r6, [r1, #0]
 800a1b2:	68d9      	ldr	r1, [r3, #12]
 800a1b4:	680c      	ldr	r4, [r1, #0]
 800a1b6:	42b4      	cmp	r4, r6
 800a1b8:	dd03      	ble.n	800a1c2 <GUI_DEVICE_Link+0x36>
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1f8      	bne.n	800a1b2 <GUI_DEVICE_Link+0x26>
 800a1c0:	e00e      	b.n	800a1e0 <GUI_DEVICE_Link+0x54>
 800a1c2:	d102      	bne.n	800a1ca <GUI_DEVICE_Link+0x3e>
 800a1c4:	8a81      	ldrh	r1, [r0, #20]
 800a1c6:	2901      	cmp	r1, #1
 800a1c8:	d011      	beq.n	800a1ee <GUI_DEVICE_Link+0x62>
 800a1ca:	6859      	ldr	r1, [r3, #4]
 800a1cc:	b199      	cbz	r1, 800a1f6 <GUI_DEVICE_Link+0x6a>
 800a1ce:	6008      	str	r0, [r1, #0]
 800a1d0:	6041      	str	r1, [r0, #4]
 800a1d2:	6058      	str	r0, [r3, #4]
 800a1d4:	4298      	cmp	r0, r3
 800a1d6:	bf08      	it	eq
 800a1d8:	2300      	moveq	r3, #0
 800a1da:	6003      	str	r3, [r0, #0]
 800a1dc:	2000      	movs	r0, #0
 800a1de:	bd70      	pop	{r4, r5, r6, pc}
 800a1e0:	2001      	movs	r0, #1
 800a1e2:	bd70      	pop	{r4, r5, r6, pc}
 800a1e4:	68cb      	ldr	r3, [r1, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	42a3      	cmp	r3, r4
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	dbed      	blt.n	800a1ca <GUI_DEVICE_Link+0x3e>
 800a1ee:	6819      	ldr	r1, [r3, #0]
 800a1f0:	2900      	cmp	r1, #0
 800a1f2:	d1f7      	bne.n	800a1e4 <GUI_DEVICE_Link+0x58>
 800a1f4:	e7e9      	b.n	800a1ca <GUI_DEVICE_Link+0x3e>
 800a1f6:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 800a1fa:	e7ea      	b.n	800a1d2 <GUI_DEVICE_Link+0x46>
 800a1fc:	200194c8 	.word	0x200194c8

0800a200 <GUI_DEVICE_CreateAndLink>:
 800a200:	b538      	push	{r3, r4, r5, lr}
 800a202:	461d      	mov	r5, r3
 800a204:	f7ff ff86 	bl	800a114 <GUI_DEVICE_Create>
 800a208:	4604      	mov	r4, r0
 800a20a:	b148      	cbz	r0, 800a220 <GUI_DEVICE_CreateAndLink+0x20>
 800a20c:	f7ff ffbe 	bl	800a18c <GUI_DEVICE_Link>
 800a210:	68e3      	ldr	r3, [r4, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	b923      	cbnz	r3, 800a220 <GUI_DEVICE_CreateAndLink+0x20>
 800a216:	4b03      	ldr	r3, [pc, #12]	; (800a224 <GUI_DEVICE_CreateAndLink+0x24>)
 800a218:	3516      	adds	r5, #22
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 800a220:	4620      	mov	r0, r4
 800a222:	bd38      	pop	{r3, r4, r5, pc}
 800a224:	20000024 	.word	0x20000024

0800a228 <_OnExit>:
 800a228:	b510      	push	{r4, lr}
 800a22a:	4b07      	ldr	r3, [pc, #28]	; (800a248 <_OnExit+0x20>)
 800a22c:	4807      	ldr	r0, [pc, #28]	; (800a24c <_OnExit+0x24>)
 800a22e:	2400      	movs	r4, #0
 800a230:	4621      	mov	r1, r4
 800a232:	2270      	movs	r2, #112	; 0x70
 800a234:	601c      	str	r4, [r3, #0]
 800a236:	f7fe fcc7 	bl	8008bc8 <GUI__memset>
 800a23a:	4621      	mov	r1, r4
 800a23c:	4804      	ldr	r0, [pc, #16]	; (800a250 <_OnExit+0x28>)
 800a23e:	2208      	movs	r2, #8
 800a240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a244:	f7fe bcc0 	b.w	8008bc8 <GUI__memset>
 800a248:	20019274 	.word	0x20019274
 800a24c:	200191fc 	.word	0x200191fc
 800a250:	200194c8 	.word	0x200194c8

0800a254 <_InitContext>:
 800a254:	b538      	push	{r3, r4, r5, lr}
 800a256:	4d19      	ldr	r5, [pc, #100]	; (800a2bc <_InitContext+0x68>)
 800a258:	682b      	ldr	r3, [r5, #0]
 800a25a:	1d1a      	adds	r2, r3, #4
 800a25c:	63da      	str	r2, [r3, #60]	; 0x3c
 800a25e:	f103 0208 	add.w	r2, r3, #8
 800a262:	639b      	str	r3, [r3, #56]	; 0x38
 800a264:	641b      	str	r3, [r3, #64]	; 0x40
 800a266:	6142      	str	r2, [r0, #20]
 800a268:	7c5a      	ldrb	r2, [r3, #17]
 800a26a:	4b15      	ldr	r3, [pc, #84]	; (800a2c0 <_InitContext+0x6c>)
 800a26c:	4604      	mov	r4, r0
 800a26e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a272:	68c3      	ldr	r3, [r0, #12]
 800a274:	f104 0108 	add.w	r1, r4, #8
 800a278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a27a:	4798      	blx	r3
 800a27c:	4b11      	ldr	r3, [pc, #68]	; (800a2c4 <_InitContext+0x70>)
 800a27e:	6663      	str	r3, [r4, #100]	; 0x64
 800a280:	4b11      	ldr	r3, [pc, #68]	; (800a2c8 <_InitContext+0x74>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	61e3      	str	r3, [r4, #28]
 800a286:	682b      	ldr	r3, [r5, #0]
 800a288:	3308      	adds	r3, #8
 800a28a:	6163      	str	r3, [r4, #20]
 800a28c:	2301      	movs	r3, #1
 800a28e:	7623      	strb	r3, [r4, #24]
 800a290:	f7fa fd06 	bl	8004ca0 <WM_GetDesktopWindow>
 800a294:	2303      	movs	r3, #3
 800a296:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800a29a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800a29e:	6323      	str	r3, [r4, #48]	; 0x30
 800a2a0:	6363      	str	r3, [r4, #52]	; 0x34
 800a2a2:	64a0      	str	r0, [r4, #72]	; 0x48
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	f7fe fc51 	bl	8008b4c <LCD_SetBkColor>
 800a2aa:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a2ae:	f7fe fc55 	bl	8008b5c <LCD_SetColor>
 800a2b2:	4b06      	ldr	r3, [pc, #24]	; (800a2cc <_InitContext+0x78>)
 800a2b4:	4a06      	ldr	r2, [pc, #24]	; (800a2d0 <_InitContext+0x7c>)
 800a2b6:	601a      	str	r2, [r3, #0]
 800a2b8:	bd38      	pop	{r3, r4, r5, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20000024 	.word	0x20000024
 800a2c0:	200194c8 	.word	0x200194c8
 800a2c4:	08012e28 	.word	0x08012e28
 800a2c8:	20000028 	.word	0x20000028
 800a2cc:	200194c0 	.word	0x200194c0
 800a2d0:	080132b8 	.word	0x080132b8

0800a2d4 <GUI_SetDefaultFont>:
 800a2d4:	4b01      	ldr	r3, [pc, #4]	; (800a2dc <GUI_SetDefaultFont+0x8>)
 800a2d6:	6018      	str	r0, [r3, #0]
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	20000028 	.word	0x20000028

0800a2e0 <GUI_ClearRect>:
 800a2e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e4:	4607      	mov	r7, r0
 800a2e6:	2004      	movs	r0, #4
 800a2e8:	469a      	mov	sl, r3
 800a2ea:	460e      	mov	r6, r1
 800a2ec:	4691      	mov	r9, r2
 800a2ee:	f7fe f8e5 	bl	80084bc <LCD_SetDrawMode>
 800a2f2:	4b13      	ldr	r3, [pc, #76]	; (800a340 <GUI_ClearRect+0x60>)
 800a2f4:	681c      	ldr	r4, [r3, #0]
 800a2f6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800a2f8:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800a2fa:	442f      	add	r7, r5
 800a2fc:	4426      	add	r6, r4
 800a2fe:	4680      	mov	r8, r0
 800a300:	444d      	add	r5, r9
 800a302:	4454      	add	r4, sl
 800a304:	4668      	mov	r0, sp
 800a306:	f8ad 7000 	strh.w	r7, [sp]
 800a30a:	f8ad 5004 	strh.w	r5, [sp, #4]
 800a30e:	f8ad 6002 	strh.w	r6, [sp, #2]
 800a312:	f8ad 4006 	strh.w	r4, [sp, #6]
 800a316:	f7fb fbaf 	bl	8005a78 <WM__InitIVRSearch>
 800a31a:	b928      	cbnz	r0, 800a328 <GUI_ClearRect+0x48>
 800a31c:	4640      	mov	r0, r8
 800a31e:	f7fe f8cd 	bl	80084bc <LCD_SetDrawMode>
 800a322:	b002      	add	sp, #8
 800a324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a328:	4638      	mov	r0, r7
 800a32a:	4631      	mov	r1, r6
 800a32c:	462a      	mov	r2, r5
 800a32e:	4623      	mov	r3, r4
 800a330:	f7fe f946 	bl	80085c0 <LCD_FillRect>
 800a334:	f7fb fade 	bl	80058f4 <WM__GetNextIVR>
 800a338:	2800      	cmp	r0, #0
 800a33a:	d1f5      	bne.n	800a328 <GUI_ClearRect+0x48>
 800a33c:	e7ee      	b.n	800a31c <GUI_ClearRect+0x3c>
 800a33e:	bf00      	nop
 800a340:	20000024 	.word	0x20000024

0800a344 <GUI_Clear>:
 800a344:	b510      	push	{r4, lr}
 800a346:	2000      	movs	r0, #0
 800a348:	4601      	mov	r1, r0
 800a34a:	f7ff fb71 	bl	8009a30 <GUI_GotoXY>
 800a34e:	4804      	ldr	r0, [pc, #16]	; (800a360 <GUI_Clear+0x1c>)
 800a350:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800a354:	4601      	mov	r1, r0
 800a356:	4613      	mov	r3, r2
 800a358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a35c:	f7ff bfc0 	b.w	800a2e0 <GUI_ClearRect>
 800a360:	ffffc001 	.word	0xffffc001

0800a364 <GUI__RegisterExit>:
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	4b05      	ldr	r3, [pc, #20]	; (800a384 <GUI__RegisterExit+0x20>)
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	605a      	str	r2, [r3, #4]
 800a374:	4b03      	ldr	r3, [pc, #12]	; (800a384 <GUI__RegisterExit+0x20>)
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	601a      	str	r2, [r3, #0]
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr
 800a384:	200191f8 	.word	0x200191f8

0800a388 <GUI__Config>:
 800a388:	b508      	push	{r3, lr}
 800a38a:	4b08      	ldr	r3, [pc, #32]	; (800a3ac <GUI__Config+0x24>)
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	b962      	cbnz	r2, 800a3aa <GUI__Config+0x22>
 800a390:	2201      	movs	r2, #1
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	f7f9 fb4c 	bl	8003a30 <GUI_X_Config>
 800a398:	f7f9 fb6c 	bl	8003a74 <LCD_X_Config>
 800a39c:	4804      	ldr	r0, [pc, #16]	; (800a3b0 <GUI__Config+0x28>)
 800a39e:	4b05      	ldr	r3, [pc, #20]	; (800a3b4 <GUI__Config+0x2c>)
 800a3a0:	6003      	str	r3, [r0, #0]
 800a3a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a3a6:	f7ff bfdd 	b.w	800a364 <GUI__RegisterExit>
 800a3aa:	bd08      	pop	{r3, pc}
 800a3ac:	20019274 	.word	0x20019274
 800a3b0:	2001926c 	.word	0x2001926c
 800a3b4:	0800a229 	.word	0x0800a229

0800a3b8 <GUI_Init>:
 800a3b8:	b590      	push	{r4, r7, lr}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	4b20      	ldr	r3, [pc, #128]	; (800a440 <GUI_Init+0x88>)
 800a3c0:	4a1f      	ldr	r2, [pc, #124]	; (800a440 <GUI_Init+0x88>)
 800a3c2:	6812      	ldr	r2, [r2, #0]
 800a3c4:	f022 0201 	bic.w	r2, r2, #1
 800a3c8:	601a      	str	r2, [r3, #0]
 800a3ca:	4b1e      	ldr	r3, [pc, #120]	; (800a444 <GUI_Init+0x8c>)
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	4b1d      	ldr	r3, [pc, #116]	; (800a448 <GUI_Init+0x90>)
 800a3d2:	4a1e      	ldr	r2, [pc, #120]	; (800a44c <GUI_Init+0x94>)
 800a3d4:	601a      	str	r2, [r3, #0]
 800a3d6:	4b1c      	ldr	r3, [pc, #112]	; (800a448 <GUI_Init+0x90>)
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	4b1d      	ldr	r3, [pc, #116]	; (800a450 <GUI_Init+0x98>)
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d000      	beq.n	800a3e2 <GUI_Init+0x2a>
 800a3e0:	e7fe      	b.n	800a3e0 <GUI_Init+0x28>
 800a3e2:	f7ff ffd1 	bl	800a388 <GUI__Config>
 800a3e6:	4b1b      	ldr	r3, [pc, #108]	; (800a454 <GUI_Init+0x9c>)
 800a3e8:	222e      	movs	r2, #46	; 0x2e
 800a3ea:	701a      	strb	r2, [r3, #0]
 800a3ec:	f7f9 fb40 	bl	8003a70 <GUI_X_Init>
 800a3f0:	4819      	ldr	r0, [pc, #100]	; (800a458 <GUI_Init+0xa0>)
 800a3f2:	f7ff ff2f 	bl	800a254 <_InitContext>
 800a3f6:	f7fe fb07 	bl	8008a08 <emWin_LCD_Init>
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	f7fd ffe8 	bl	80083d0 <LCD_GetXSizeDisplay>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d004      	beq.n	800a410 <GUI_Init+0x58>
 800a406:	f7fd ffe9 	bl	80083dc <LCD_GetYSizeDisplay>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d109      	bne.n	800a424 <GUI_Init+0x6c>
 800a410:	f7fd ffca 	bl	80083a8 <LCD_GetXSizeMax>
 800a414:	4604      	mov	r4, r0
 800a416:	f7fd ffca 	bl	80083ae <LCD_GetYSizeMax>
 800a41a:	4603      	mov	r3, r0
 800a41c:	4620      	mov	r0, r4
 800a41e:	4619      	mov	r1, r3
 800a420:	f7fd ffcc 	bl	80083bc <LCD_SetDisplaySize>
 800a424:	2000      	movs	r0, #0
 800a426:	2100      	movs	r1, #0
 800a428:	f003 f972 	bl	800d710 <GUI_SetOrg>
 800a42c:	f7fb fd62 	bl	8005ef4 <WM_Init>
 800a430:	4b0a      	ldr	r3, [pc, #40]	; (800a45c <GUI_Init+0xa4>)
 800a432:	2201      	movs	r2, #1
 800a434:	701a      	strb	r2, [r3, #0]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4618      	mov	r0, r3
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd90      	pop	{r4, r7, pc}
 800a440:	e0002000 	.word	0xe0002000
 800a444:	40023008 	.word	0x40023008
 800a448:	40023000 	.word	0x40023000
 800a44c:	f407a5c2 	.word	0xf407a5c2
 800a450:	b5e8b5cd 	.word	0xb5e8b5cd
 800a454:	2001949a 	.word	0x2001949a
 800a458:	200191fc 	.word	0x200191fc
 800a45c:	200194b8 	.word	0x200194b8

0800a460 <GL_FillCircle>:
 800a460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a464:	f240 29c3 	movw	r9, #707	; 0x2c3
 800a468:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800a520 <GL_FillCircle+0xc0>
 800a46c:	fb09 f902 	mul.w	r9, r9, r2
 800a470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a474:	fb99 f9f3 	sdiv	r9, r9, r3
 800a478:	f8d8 3000 	ldr.w	r3, [r8]
 800a47c:	f04f 0b02 	mov.w	fp, #2
 800a480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a482:	4606      	mov	r6, r0
 800a484:	fb92 fbfb 	sdiv	fp, r2, fp
 800a488:	1a80      	subs	r0, r0, r2
 800a48a:	4614      	mov	r4, r2
 800a48c:	fb02 bb02 	mla	fp, r2, r2, fp
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	18b2      	adds	r2, r6, r2
 800a494:	460f      	mov	r7, r1
 800a496:	4798      	blx	r3
 800a498:	f109 0901 	add.w	r9, r9, #1
 800a49c:	2501      	movs	r5, #1
 800a49e:	454d      	cmp	r5, r9
 800a4a0:	dc3a      	bgt.n	800a518 <GL_FillCircle+0xb8>
 800a4a2:	fb04 f304 	mul.w	r3, r4, r4
 800a4a6:	fb05 3305 	mla	r3, r5, r5, r3
 800a4aa:	455b      	cmp	r3, fp
 800a4ac:	dd1b      	ble.n	800a4e6 <GL_FillCircle+0x86>
 800a4ae:	454c      	cmp	r4, r9
 800a4b0:	dd18      	ble.n	800a4e4 <GL_FillCircle+0x84>
 800a4b2:	f8d8 2000 	ldr.w	r2, [r8]
 800a4b6:	1c73      	adds	r3, r6, #1
 800a4b8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a4ba:	f106 3aff 	add.w	sl, r6, #4294967295
 800a4be:	1b5b      	subs	r3, r3, r5
 800a4c0:	44aa      	add	sl, r5
 800a4c2:	f8d2 c000 	ldr.w	ip, [r2]
 800a4c6:	9301      	str	r3, [sp, #4]
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	1939      	adds	r1, r7, r4
 800a4cc:	4652      	mov	r2, sl
 800a4ce:	47e0      	blx	ip
 800a4d0:	f8d8 2000 	ldr.w	r2, [r8]
 800a4d4:	9b01      	ldr	r3, [sp, #4]
 800a4d6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f8d2 c000 	ldr.w	ip, [r2]
 800a4de:	1b39      	subs	r1, r7, r4
 800a4e0:	4652      	mov	r2, sl
 800a4e2:	47e0      	blx	ip
 800a4e4:	3c01      	subs	r4, #1
 800a4e6:	f8d8 2000 	ldr.w	r2, [r8]
 800a4ea:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a4ec:	1b33      	subs	r3, r6, r4
 800a4ee:	eb06 0a04 	add.w	sl, r6, r4
 800a4f2:	f8d2 c000 	ldr.w	ip, [r2]
 800a4f6:	9301      	str	r3, [sp, #4]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	19e9      	adds	r1, r5, r7
 800a4fc:	4652      	mov	r2, sl
 800a4fe:	47e0      	blx	ip
 800a500:	f8d8 2000 	ldr.w	r2, [r8]
 800a504:	9b01      	ldr	r3, [sp, #4]
 800a506:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a508:	1b79      	subs	r1, r7, r5
 800a50a:	f8d2 c000 	ldr.w	ip, [r2]
 800a50e:	4618      	mov	r0, r3
 800a510:	4652      	mov	r2, sl
 800a512:	47e0      	blx	ip
 800a514:	3501      	adds	r5, #1
 800a516:	e7c2      	b.n	800a49e <GL_FillCircle+0x3e>
 800a518:	b003      	add	sp, #12
 800a51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a51e:	bf00      	nop
 800a520:	20000024 	.word	0x20000024

0800a524 <GUIPROP__FindChar>:
 800a524:	b138      	cbz	r0, 800a536 <GUIPROP__FindChar+0x12>
 800a526:	8803      	ldrh	r3, [r0, #0]
 800a528:	428b      	cmp	r3, r1
 800a52a:	d802      	bhi.n	800a532 <GUIPROP__FindChar+0xe>
 800a52c:	8843      	ldrh	r3, [r0, #2]
 800a52e:	428b      	cmp	r3, r1
 800a530:	d201      	bcs.n	800a536 <GUIPROP__FindChar+0x12>
 800a532:	6880      	ldr	r0, [r0, #8]
 800a534:	e7f6      	b.n	800a524 <GUIPROP__FindChar>
 800a536:	4770      	bx	lr

0800a538 <GUIPROP_DispChar>:
 800a538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a53c:	4c38      	ldr	r4, [pc, #224]	; (800a620 <GUIPROP_DispChar+0xe8>)
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 800a544:	69db      	ldr	r3, [r3, #28]
 800a546:	4605      	mov	r5, r0
 800a548:	b089      	sub	sp, #36	; 0x24
 800a54a:	69d8      	ldr	r0, [r3, #28]
 800a54c:	4629      	mov	r1, r5
 800a54e:	f7ff ffe9 	bl	800a524 <GUIPROP__FindChar>
 800a552:	2800      	cmp	r0, #0
 800a554:	d061      	beq.n	800a61a <GUIPROP_DispChar+0xe2>
 800a556:	f8b0 8000 	ldrh.w	r8, [r0]
 800a55a:	6847      	ldr	r7, [r0, #4]
 800a55c:	ebc8 0805 	rsb	r8, r8, r5
 800a560:	eb07 06c8 	add.w	r6, r7, r8, lsl #3
 800a564:	4648      	mov	r0, r9
 800a566:	f896 b002 	ldrb.w	fp, [r6, #2]
 800a56a:	f7fd ffa7 	bl	80084bc <LCD_SetDrawMode>
 800a56e:	6825      	ldr	r5, [r4, #0]
 800a570:	f817 2038 	ldrb.w	r2, [r7, r8, lsl #3]
 800a574:	f8d5 e01c 	ldr.w	lr, [r5, #28]
 800a578:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 800a57c:	f89e c01a 	ldrb.w	ip, [lr, #26]
 800a580:	f89e 3018 	ldrb.w	r3, [lr, #24]
 800a584:	9306      	str	r3, [sp, #24]
 800a586:	4682      	mov	sl, r0
 800a588:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 800a58c:	f8cd c000 	str.w	ip, [sp]
 800a590:	f89e e01b 	ldrb.w	lr, [lr, #27]
 800a594:	f8cd e004 	str.w	lr, [sp, #4]
 800a598:	f04f 0e01 	mov.w	lr, #1
 800a59c:	f8cd b00c 	str.w	fp, [sp, #12]
 800a5a0:	f8cd e008 	str.w	lr, [sp, #8]
 800a5a4:	6873      	ldr	r3, [r6, #4]
 800a5a6:	9304      	str	r3, [sp, #16]
 800a5a8:	6bad      	ldr	r5, [r5, #56]	; 0x38
 800a5aa:	9b06      	ldr	r3, [sp, #24]
 800a5ac:	9505      	str	r5, [sp, #20]
 800a5ae:	f7fe f90f 	bl	80087d0 <LCD_DrawBitmap>
 800a5b2:	6823      	ldr	r3, [r4, #0]
 800a5b4:	69da      	ldr	r2, [r3, #28]
 800a5b6:	f892 b019 	ldrb.w	fp, [r2, #25]
 800a5ba:	7e11      	ldrb	r1, [r2, #24]
 800a5bc:	458b      	cmp	fp, r1
 800a5be:	d920      	bls.n	800a602 <GUIPROP_DispChar+0xca>
 800a5c0:	f1b9 0f02 	cmp.w	r9, #2
 800a5c4:	7ed5      	ldrb	r5, [r2, #27]
 800a5c6:	d01c      	beq.n	800a602 <GUIPROP_DispChar+0xca>
 800a5c8:	9107      	str	r1, [sp, #28]
 800a5ca:	f003 f8ca 	bl	800d762 <GUI_GetColor>
 800a5ce:	4681      	mov	r9, r0
 800a5d0:	f003 f8c0 	bl	800d754 <GUI_GetBkColor>
 800a5d4:	f7ff f95e 	bl	8009894 <GUI_SetColor>
 800a5d8:	6824      	ldr	r4, [r4, #0]
 800a5da:	f817 7038 	ldrb.w	r7, [r7, r8, lsl #3]
 800a5de:	69e2      	ldr	r2, [r4, #28]
 800a5e0:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800a5e4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800a5e8:	7ed2      	ldrb	r2, [r2, #27]
 800a5ea:	9907      	ldr	r1, [sp, #28]
 800a5ec:	fb07 0202 	mla	r2, r7, r2, r0
 800a5f0:	fb01 3105 	mla	r1, r1, r5, r3
 800a5f4:	fb0b 3305 	mla	r3, fp, r5, r3
 800a5f8:	f7fd ffe2 	bl	80085c0 <LCD_FillRect>
 800a5fc:	4648      	mov	r0, r9
 800a5fe:	f7ff f949 	bl	8009894 <GUI_SetColor>
 800a602:	4650      	mov	r0, sl
 800a604:	f7fd ff5a 	bl	80084bc <LCD_SetDrawMode>
 800a608:	4b05      	ldr	r3, [pc, #20]	; (800a620 <GUIPROP_DispChar+0xe8>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	69da      	ldr	r2, [r3, #28]
 800a60e:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800a610:	7e90      	ldrb	r0, [r2, #26]
 800a612:	7872      	ldrb	r2, [r6, #1]
 800a614:	fb00 1202 	mla	r2, r0, r2, r1
 800a618:	845a      	strh	r2, [r3, #34]	; 0x22
 800a61a:	b009      	add	sp, #36	; 0x24
 800a61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a620:	20000024 	.word	0x20000024

0800a624 <GUIPROP_GetCharDistX>:
 800a624:	4b0d      	ldr	r3, [pc, #52]	; (800a65c <GUIPROP_GetCharDistX+0x38>)
 800a626:	b570      	push	{r4, r5, r6, lr}
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	69dd      	ldr	r5, [r3, #28]
 800a62c:	4606      	mov	r6, r0
 800a62e:	460c      	mov	r4, r1
 800a630:	69e8      	ldr	r0, [r5, #28]
 800a632:	4631      	mov	r1, r6
 800a634:	f7ff ff76 	bl	800a524 <GUIPROP__FindChar>
 800a638:	b170      	cbz	r0, 800a658 <GUIPROP_GetCharDistX+0x34>
 800a63a:	8803      	ldrh	r3, [r0, #0]
 800a63c:	6842      	ldr	r2, [r0, #4]
 800a63e:	1af6      	subs	r6, r6, r3
 800a640:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 800a644:	7858      	ldrb	r0, [r3, #1]
 800a646:	7eab      	ldrb	r3, [r5, #26]
 800a648:	fb10 f003 	smulbb	r0, r0, r3
 800a64c:	b124      	cbz	r4, 800a658 <GUIPROP_GetCharDistX+0x34>
 800a64e:	f812 2036 	ldrb.w	r2, [r2, r6, lsl #3]
 800a652:	fb12 f303 	smulbb	r3, r2, r3
 800a656:	6023      	str	r3, [r4, #0]
 800a658:	bd70      	pop	{r4, r5, r6, pc}
 800a65a:	bf00      	nop
 800a65c:	20000024 	.word	0x20000024

0800a660 <GUIPROP_GetFontInfo>:
 800a660:	2301      	movs	r3, #1
 800a662:	800b      	strh	r3, [r1, #0]
 800a664:	4770      	bx	lr

0800a666 <GUIPROP_IsInFont>:
 800a666:	b508      	push	{r3, lr}
 800a668:	69c0      	ldr	r0, [r0, #28]
 800a66a:	f7ff ff5b 	bl	800a524 <GUIPROP__FindChar>
 800a66e:	3000      	adds	r0, #0
 800a670:	bf18      	it	ne
 800a672:	2001      	movne	r0, #1
 800a674:	bd08      	pop	{r3, pc}
	...

0800a678 <GUIMONO_DispChar>:
 800a678:	4b52      	ldr	r3, [pc, #328]	; (800a7c4 <GUIMONO_DispChar+0x14c>)
 800a67a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	69d9      	ldr	r1, [r3, #28]
 800a682:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 800a684:	69cc      	ldr	r4, [r1, #28]
 800a686:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 800a688:	89a2      	ldrh	r2, [r4, #12]
 800a68a:	4290      	cmp	r0, r2
 800a68c:	b08b      	sub	sp, #44	; 0x2c
 800a68e:	d308      	bcc.n	800a6a2 <GUIMONO_DispChar+0x2a>
 800a690:	89e6      	ldrh	r6, [r4, #14]
 800a692:	4286      	cmp	r6, r0
 800a694:	d305      	bcc.n	800a6a2 <GUIMONO_DispChar+0x2a>
 800a696:	f8d4 9000 	ldr.w	r9, [r4]
 800a69a:	1a82      	subs	r2, r0, r2
 800a69c:	f04f 3bff 	mov.w	fp, #4294967295
 800a6a0:	e015      	b.n	800a6ce <GUIMONO_DispChar+0x56>
 800a6a2:	68a2      	ldr	r2, [r4, #8]
 800a6a4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a6a8:	2a00      	cmp	r2, #0
 800a6aa:	f000 8081 	beq.w	800a7b0 <GUIMONO_DispChar+0x138>
 800a6ae:	8816      	ldrh	r6, [r2, #0]
 800a6b0:	42b0      	cmp	r0, r6
 800a6b2:	d37d      	bcc.n	800a7b0 <GUIMONO_DispChar+0x138>
 800a6b4:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800a6b8:	4584      	cmp	ip, r0
 800a6ba:	d379      	bcc.n	800a7b0 <GUIMONO_DispChar+0x138>
 800a6bc:	6852      	ldr	r2, [r2, #4]
 800a6be:	1b80      	subs	r0, r0, r6
 800a6c0:	b280      	uxth	r0, r0
 800a6c2:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800a6c6:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 800a6ca:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 800a6ce:	1c50      	adds	r0, r2, #1
 800a6d0:	d06e      	beq.n	800a7b0 <GUIMONO_DispChar+0x138>
 800a6d2:	f891 8018 	ldrb.w	r8, [r1, #24]
 800a6d6:	7ca1      	ldrb	r1, [r4, #18]
 800a6d8:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 800a6dc:	7c26      	ldrb	r6, [r4, #16]
 800a6de:	9206      	str	r2, [sp, #24]
 800a6e0:	fb18 f101 	smulbb	r1, r8, r1
 800a6e4:	9107      	str	r1, [sp, #28]
 800a6e6:	fa0f f18a 	sxth.w	r1, sl
 800a6ea:	4608      	mov	r0, r1
 800a6ec:	9108      	str	r1, [sp, #32]
 800a6ee:	f7fd fee5 	bl	80084bc <LCD_SetDrawMode>
 800a6f2:	4934      	ldr	r1, [pc, #208]	; (800a7c4 <GUIMONO_DispChar+0x14c>)
 800a6f4:	9009      	str	r0, [sp, #36]	; 0x24
 800a6f6:	680b      	ldr	r3, [r1, #0]
 800a6f8:	9a06      	ldr	r2, [sp, #24]
 800a6fa:	69d9      	ldr	r1, [r3, #28]
 800a6fc:	7e88      	ldrb	r0, [r1, #26]
 800a6fe:	9000      	str	r0, [sp, #0]
 800a700:	7ec9      	ldrb	r1, [r1, #27]
 800a702:	9101      	str	r1, [sp, #4]
 800a704:	2101      	movs	r1, #1
 800a706:	9102      	str	r1, [sp, #8]
 800a708:	7ca1      	ldrb	r1, [r4, #18]
 800a70a:	9103      	str	r1, [sp, #12]
 800a70c:	9907      	ldr	r1, [sp, #28]
 800a70e:	fb01 9202 	mla	r2, r1, r2, r9
 800a712:	9204      	str	r2, [sp, #16]
 800a714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a716:	9305      	str	r3, [sp, #20]
 800a718:	b23f      	sxth	r7, r7
 800a71a:	b22d      	sxth	r5, r5
 800a71c:	4638      	mov	r0, r7
 800a71e:	4629      	mov	r1, r5
 800a720:	4632      	mov	r2, r6
 800a722:	4643      	mov	r3, r8
 800a724:	f7fe f854 	bl	80087d0 <LCD_DrawBitmap>
 800a728:	f1bb 3fff 	cmp.w	fp, #4294967295
 800a72c:	d01b      	beq.n	800a766 <GUIMONO_DispChar+0xee>
 800a72e:	f04a 0002 	orr.w	r0, sl, #2
 800a732:	b200      	sxth	r0, r0
 800a734:	f7fd fec2 	bl	80084bc <LCD_SetDrawMode>
 800a738:	4a22      	ldr	r2, [pc, #136]	; (800a7c4 <GUIMONO_DispChar+0x14c>)
 800a73a:	6813      	ldr	r3, [r2, #0]
 800a73c:	69da      	ldr	r2, [r3, #28]
 800a73e:	7e91      	ldrb	r1, [r2, #26]
 800a740:	9100      	str	r1, [sp, #0]
 800a742:	7ed2      	ldrb	r2, [r2, #27]
 800a744:	9201      	str	r2, [sp, #4]
 800a746:	2101      	movs	r1, #1
 800a748:	9102      	str	r1, [sp, #8]
 800a74a:	9907      	ldr	r1, [sp, #28]
 800a74c:	7ca2      	ldrb	r2, [r4, #18]
 800a74e:	9203      	str	r2, [sp, #12]
 800a750:	fb01 920b 	mla	r2, r1, fp, r9
 800a754:	9204      	str	r2, [sp, #16]
 800a756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a758:	9305      	str	r3, [sp, #20]
 800a75a:	4638      	mov	r0, r7
 800a75c:	4629      	mov	r1, r5
 800a75e:	4632      	mov	r2, r6
 800a760:	4643      	mov	r3, r8
 800a762:	f7fe f835 	bl	80087d0 <LCD_DrawBitmap>
 800a766:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800a7c4 <GUIMONO_DispChar+0x14c>
 800a76a:	f8d8 3000 	ldr.w	r3, [r8]
 800a76e:	69db      	ldr	r3, [r3, #28]
 800a770:	7e5a      	ldrb	r2, [r3, #25]
 800a772:	7e1b      	ldrb	r3, [r3, #24]
 800a774:	429a      	cmp	r2, r3
 800a776:	d917      	bls.n	800a7a8 <GUIMONO_DispChar+0x130>
 800a778:	9a08      	ldr	r2, [sp, #32]
 800a77a:	2a02      	cmp	r2, #2
 800a77c:	d014      	beq.n	800a7a8 <GUIMONO_DispChar+0x130>
 800a77e:	f08a 0004 	eor.w	r0, sl, #4
 800a782:	b200      	sxth	r0, r0
 800a784:	f7fd fe9a 	bl	80084bc <LCD_SetDrawMode>
 800a788:	f8d8 3000 	ldr.w	r3, [r8]
 800a78c:	69db      	ldr	r3, [r3, #28]
 800a78e:	f893 e018 	ldrb.w	lr, [r3, #24]
 800a792:	7ed9      	ldrb	r1, [r3, #27]
 800a794:	7e9a      	ldrb	r2, [r3, #26]
 800a796:	7e5b      	ldrb	r3, [r3, #25]
 800a798:	4638      	mov	r0, r7
 800a79a:	fb0e 5101 	mla	r1, lr, r1, r5
 800a79e:	fb06 7202 	mla	r2, r6, r2, r7
 800a7a2:	442b      	add	r3, r5
 800a7a4:	f7fd ff0c 	bl	80085c0 <LCD_FillRect>
 800a7a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7aa:	b2d8      	uxtb	r0, r3
 800a7ac:	f7fd fe86 	bl	80084bc <LCD_SetDrawMode>
 800a7b0:	4b04      	ldr	r3, [pc, #16]	; (800a7c4 <GUIMONO_DispChar+0x14c>)
 800a7b2:	7c61      	ldrb	r1, [r4, #17]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800a7b8:	440a      	add	r2, r1
 800a7ba:	845a      	strh	r2, [r3, #34]	; 0x22
 800a7bc:	b00b      	add	sp, #44	; 0x2c
 800a7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c2:	bf00      	nop
 800a7c4:	20000024 	.word	0x20000024

0800a7c8 <GUIMONO_GetCharDistX>:
 800a7c8:	4b04      	ldr	r3, [pc, #16]	; (800a7dc <GUIMONO_GetCharDistX+0x14>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	69db      	ldr	r3, [r3, #28]
 800a7ce:	69db      	ldr	r3, [r3, #28]
 800a7d0:	b109      	cbz	r1, 800a7d6 <GUIMONO_GetCharDistX+0xe>
 800a7d2:	7c1a      	ldrb	r2, [r3, #16]
 800a7d4:	600a      	str	r2, [r1, #0]
 800a7d6:	7c58      	ldrb	r0, [r3, #17]
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	20000024 	.word	0x20000024

0800a7e0 <GUIMONO_GetFontInfo>:
 800a7e0:	2302      	movs	r3, #2
 800a7e2:	800b      	strh	r3, [r1, #0]
 800a7e4:	4770      	bx	lr

0800a7e6 <GUIMONO_IsInFont>:
 800a7e6:	69c3      	ldr	r3, [r0, #28]
 800a7e8:	899a      	ldrh	r2, [r3, #12]
 800a7ea:	428a      	cmp	r2, r1
 800a7ec:	d802      	bhi.n	800a7f4 <GUIMONO_IsInFont+0xe>
 800a7ee:	89da      	ldrh	r2, [r3, #14]
 800a7f0:	428a      	cmp	r2, r1
 800a7f2:	d20f      	bcs.n	800a814 <GUIMONO_IsInFont+0x2e>
 800a7f4:	6898      	ldr	r0, [r3, #8]
 800a7f6:	b180      	cbz	r0, 800a81a <GUIMONO_IsInFont+0x34>
 800a7f8:	8803      	ldrh	r3, [r0, #0]
 800a7fa:	4299      	cmp	r1, r3
 800a7fc:	d30c      	bcc.n	800a818 <GUIMONO_IsInFont+0x32>
 800a7fe:	8842      	ldrh	r2, [r0, #2]
 800a800:	428a      	cmp	r2, r1
 800a802:	d309      	bcc.n	800a818 <GUIMONO_IsInFont+0x32>
 800a804:	1ac9      	subs	r1, r1, r3
 800a806:	6842      	ldr	r2, [r0, #4]
 800a808:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 800a80c:	43c0      	mvns	r0, r0
 800a80e:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800a812:	4770      	bx	lr
 800a814:	2001      	movs	r0, #1
 800a816:	4770      	bx	lr
 800a818:	2000      	movs	r0, #0
 800a81a:	4770      	bx	lr

0800a81c <_Log2VisBuffered>:
 800a81c:	4770      	bx	lr
	...

0800a820 <_DispLine>:
 800a820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a822:	4615      	mov	r5, r2
 800a824:	ab02      	add	r3, sp, #8
 800a826:	4a1a      	ldr	r2, [pc, #104]	; (800a890 <_DispLine+0x70>)
 800a828:	f843 1d08 	str.w	r1, [r3, #-8]!
 800a82c:	9001      	str	r0, [sp, #4]
 800a82e:	6812      	ldr	r2, [r2, #0]
 800a830:	4c18      	ldr	r4, [pc, #96]	; (800a894 <_DispLine+0x74>)
 800a832:	4669      	mov	r1, sp
 800a834:	4790      	blx	r2
 800a836:	6823      	ldr	r3, [r4, #0]
 800a838:	9001      	str	r0, [sp, #4]
 800a83a:	6958      	ldr	r0, [r3, #20]
 800a83c:	b958      	cbnz	r0, 800a856 <_DispLine+0x36>
 800a83e:	2001      	movs	r0, #1
 800a840:	f7fe fa60 	bl	8008d04 <GUI__ManageCache>
 800a844:	6823      	ldr	r3, [r4, #0]
 800a846:	69db      	ldr	r3, [r3, #28]
 800a848:	695b      	ldr	r3, [r3, #20]
 800a84a:	b1bb      	cbz	r3, 800a87c <_DispLine+0x5c>
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	9801      	ldr	r0, [sp, #4]
 800a850:	9900      	ldr	r1, [sp, #0]
 800a852:	4798      	blx	r3
 800a854:	e017      	b.n	800a886 <_DispLine+0x66>
 800a856:	4629      	mov	r1, r5
 800a858:	f7ff f864 	bl	8009924 <GUI_RectsIntersect>
 800a85c:	2800      	cmp	r0, #0
 800a85e:	d1ee      	bne.n	800a83e <_DispLine+0x1e>
 800a860:	e014      	b.n	800a88c <_DispLine+0x6c>
 800a862:	a801      	add	r0, sp, #4
 800a864:	f7fe fc56 	bl	8009114 <GUI_UC__GetCharCodeInc>
 800a868:	6823      	ldr	r3, [r4, #0]
 800a86a:	69db      	ldr	r3, [r3, #28]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4605      	mov	r5, r0
 800a870:	4798      	blx	r3
 800a872:	4b09      	ldr	r3, [pc, #36]	; (800a898 <_DispLine+0x78>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	b10b      	cbz	r3, 800a87c <_DispLine+0x5c>
 800a878:	4628      	mov	r0, r5
 800a87a:	4798      	blx	r3
 800a87c:	9b00      	ldr	r3, [sp, #0]
 800a87e:	3b01      	subs	r3, #1
 800a880:	2b00      	cmp	r3, #0
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	daed      	bge.n	800a862 <_DispLine+0x42>
 800a886:	2000      	movs	r0, #0
 800a888:	f7fe fa3c 	bl	8008d04 <GUI__ManageCache>
 800a88c:	b003      	add	sp, #12
 800a88e:	bd30      	pop	{r4, r5, pc}
 800a890:	2000002c 	.word	0x2000002c
 800a894:	20000024 	.word	0x20000024
 800a898:	200194b4 	.word	0x200194b4

0800a89c <GUI__GetLineNumChars>:
 800a89c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a89e:	460d      	mov	r5, r1
 800a8a0:	9001      	str	r0, [sp, #4]
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	b198      	cbz	r0, 800a8ce <GUI__GetLineNumChars+0x32>
 800a8a6:	4b0b      	ldr	r3, [pc, #44]	; (800a8d4 <GUI__GetLineNumChars+0x38>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	69db      	ldr	r3, [r3, #28]
 800a8ac:	695b      	ldr	r3, [r3, #20]
 800a8ae:	b10b      	cbz	r3, 800a8b4 <GUI__GetLineNumChars+0x18>
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	b90b      	cbnz	r3, 800a8b8 <GUI__GetLineNumChars+0x1c>
 800a8b4:	2400      	movs	r4, #0
 800a8b6:	e008      	b.n	800a8ca <GUI__GetLineNumChars+0x2e>
 800a8b8:	4798      	blx	r3
 800a8ba:	e009      	b.n	800a8d0 <GUI__GetLineNumChars+0x34>
 800a8bc:	a801      	add	r0, sp, #4
 800a8be:	f7fe fc29 	bl	8009114 <GUI_UC__GetCharCodeInc>
 800a8c2:	b120      	cbz	r0, 800a8ce <GUI__GetLineNumChars+0x32>
 800a8c4:	280a      	cmp	r0, #10
 800a8c6:	d002      	beq.n	800a8ce <GUI__GetLineNumChars+0x32>
 800a8c8:	3401      	adds	r4, #1
 800a8ca:	42ac      	cmp	r4, r5
 800a8cc:	dbf6      	blt.n	800a8bc <GUI__GetLineNumChars+0x20>
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	b003      	add	sp, #12
 800a8d2:	bd30      	pop	{r4, r5, pc}
 800a8d4:	20000024 	.word	0x20000024

0800a8d8 <GUI__GetOverlap>:
 800a8d8:	b513      	push	{r0, r1, r4, lr}
 800a8da:	a902      	add	r1, sp, #8
 800a8dc:	2400      	movs	r4, #0
 800a8de:	f841 4d04 	str.w	r4, [r1, #-4]!
 800a8e2:	f000 f8b7 	bl	800aa54 <GUI_GetCharDistXEx>
 800a8e6:	9b01      	ldr	r3, [sp, #4]
 800a8e8:	4283      	cmp	r3, r0
 800a8ea:	bfcc      	ite	gt
 800a8ec:	ebc0 0003 	rsbgt	r0, r0, r3
 800a8f0:	4620      	movle	r0, r4
 800a8f2:	b002      	add	sp, #8
 800a8f4:	bd10      	pop	{r4, pc}
	...

0800a8f8 <GUI__GetLineDistX>:
 800a8f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8fa:	4a15      	ldr	r2, [pc, #84]	; (800a950 <GUI__GetLineDistX+0x58>)
 800a8fc:	9001      	str	r0, [sp, #4]
 800a8fe:	ab02      	add	r3, sp, #8
 800a900:	6812      	ldr	r2, [r2, #0]
 800a902:	f843 1d08 	str.w	r1, [r3, #-8]!
 800a906:	4669      	mov	r1, sp
 800a908:	4790      	blx	r2
 800a90a:	9001      	str	r0, [sp, #4]
 800a90c:	b1f0      	cbz	r0, 800a94c <GUI__GetLineDistX+0x54>
 800a90e:	4b11      	ldr	r3, [pc, #68]	; (800a954 <GUI__GetLineDistX+0x5c>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	69db      	ldr	r3, [r3, #28]
 800a914:	695b      	ldr	r3, [r3, #20]
 800a916:	b10b      	cbz	r3, 800a91c <GUI__GetLineDistX+0x24>
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	b913      	cbnz	r3, 800a922 <GUI__GetLineDistX+0x2a>
 800a91c:	2500      	movs	r5, #0
 800a91e:	462c      	mov	r4, r5
 800a920:	e002      	b.n	800a928 <GUI__GetLineDistX+0x30>
 800a922:	9900      	ldr	r1, [sp, #0]
 800a924:	4798      	blx	r3
 800a926:	e011      	b.n	800a94c <GUI__GetLineDistX+0x54>
 800a928:	9b00      	ldr	r3, [sp, #0]
 800a92a:	3b01      	subs	r3, #1
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	db07      	blt.n	800a942 <GUI__GetLineDistX+0x4a>
 800a932:	a801      	add	r0, sp, #4
 800a934:	f7fe fbee 	bl	8009114 <GUI_UC__GetCharCodeInc>
 800a938:	4605      	mov	r5, r0
 800a93a:	f000 f881 	bl	800aa40 <GUI_GetCharDistX>
 800a93e:	4404      	add	r4, r0
 800a940:	e7f2      	b.n	800a928 <GUI__GetLineDistX+0x30>
 800a942:	4628      	mov	r0, r5
 800a944:	f7ff ffc8 	bl	800a8d8 <GUI__GetOverlap>
 800a948:	4420      	add	r0, r4
 800a94a:	e7ff      	b.n	800a94c <GUI__GetLineDistX+0x54>
 800a94c:	b003      	add	sp, #12
 800a94e:	bd30      	pop	{r4, r5, pc}
 800a950:	2000002c 	.word	0x2000002c
 800a954:	20000024 	.word	0x20000024

0800a958 <GUI__DispLine>:
 800a958:	4b27      	ldr	r3, [pc, #156]	; (800a9f8 <GUI__DispLine+0xa0>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a95e:	4605      	mov	r5, r0
 800a960:	460c      	mov	r4, r1
 800a962:	b163      	cbz	r3, 800a97e <GUI__DispLine+0x26>
 800a964:	2000      	movs	r0, #0
 800a966:	f7fb f887 	bl	8005a78 <WM__InitIVRSearch>
 800a96a:	2800      	cmp	r0, #0
 800a96c:	d041      	beq.n	800a9f2 <GUI__DispLine+0x9a>
 800a96e:	4628      	mov	r0, r5
 800a970:	4621      	mov	r1, r4
 800a972:	466a      	mov	r2, sp
 800a974:	f7ff ff54 	bl	800a820 <_DispLine>
 800a978:	f7fa ffbc 	bl	80058f4 <WM__GetNextIVR>
 800a97c:	e7f5      	b.n	800a96a <GUI__DispLine+0x12>
 800a97e:	6810      	ldr	r0, [r2, #0]
 800a980:	6851      	ldr	r1, [r2, #4]
 800a982:	4e1e      	ldr	r6, [pc, #120]	; (800a9fc <GUI__DispLine+0xa4>)
 800a984:	466b      	mov	r3, sp
 800a986:	c303      	stmia	r3!, {r0, r1}
 800a988:	6833      	ldr	r3, [r6, #0]
 800a98a:	f8bd 1000 	ldrh.w	r1, [sp]
 800a98e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800a992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a996:	4411      	add	r1, r2
 800a998:	f8ad 1000 	strh.w	r1, [sp]
 800a99c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800a9a0:	4419      	add	r1, r3
 800a9a2:	f8ad 1002 	strh.w	r1, [sp, #2]
 800a9a6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800a9aa:	440a      	add	r2, r1
 800a9ac:	f8ad 2004 	strh.w	r2, [sp, #4]
 800a9b0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a9b4:	4668      	mov	r0, sp
 800a9b6:	4413      	add	r3, r2
 800a9b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a9bc:	f7fb f85c 	bl	8005a78 <WM__InitIVRSearch>
 800a9c0:	6833      	ldr	r3, [r6, #0]
 800a9c2:	b940      	cbnz	r0, 800a9d6 <GUI__DispLine+0x7e>
 800a9c4:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800a9c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9c8:	1a8a      	subs	r2, r1, r2
 800a9ca:	845a      	strh	r2, [r3, #34]	; 0x22
 800a9cc:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800a9ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a9d0:	1a8a      	subs	r2, r1, r2
 800a9d2:	849a      	strh	r2, [r3, #36]	; 0x24
 800a9d4:	e00d      	b.n	800a9f2 <GUI__DispLine+0x9a>
 800a9d6:	f8bd 2000 	ldrh.w	r2, [sp]
 800a9da:	845a      	strh	r2, [r3, #34]	; 0x22
 800a9dc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800a9e0:	849a      	strh	r2, [r3, #36]	; 0x24
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	4621      	mov	r1, r4
 800a9e6:	466a      	mov	r2, sp
 800a9e8:	f7ff ff1a 	bl	800a820 <_DispLine>
 800a9ec:	f7fa ff82 	bl	80058f4 <WM__GetNextIVR>
 800a9f0:	e7e6      	b.n	800a9c0 <GUI__DispLine+0x68>
 800a9f2:	b002      	add	sp, #8
 800a9f4:	bd70      	pop	{r4, r5, r6, pc}
 800a9f6:	bf00      	nop
 800a9f8:	2001949c 	.word	0x2001949c
 800a9fc:	20000024 	.word	0x20000024

0800aa00 <GUI_GetYAdjust>:
 800aa00:	4b0a      	ldr	r3, [pc, #40]	; (800aa2c <GUI_GetYAdjust+0x2c>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aa06:	f002 020c 	and.w	r2, r2, #12
 800aa0a:	2a08      	cmp	r2, #8
 800aa0c:	d007      	beq.n	800aa1e <GUI_GetYAdjust+0x1e>
 800aa0e:	2a0c      	cmp	r2, #12
 800aa10:	d005      	beq.n	800aa1e <GUI_GetYAdjust+0x1e>
 800aa12:	2a04      	cmp	r2, #4
 800aa14:	d107      	bne.n	800aa26 <GUI_GetYAdjust+0x26>
 800aa16:	69db      	ldr	r3, [r3, #28]
 800aa18:	7e18      	ldrb	r0, [r3, #24]
 800aa1a:	3801      	subs	r0, #1
 800aa1c:	4770      	bx	lr
 800aa1e:	69db      	ldr	r3, [r3, #28]
 800aa20:	7e18      	ldrb	r0, [r3, #24]
 800aa22:	0840      	lsrs	r0, r0, #1
 800aa24:	4770      	bx	lr
 800aa26:	2000      	movs	r0, #0
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	20000024 	.word	0x20000024

0800aa30 <GUI_GetFontDistY>:
 800aa30:	4b02      	ldr	r3, [pc, #8]	; (800aa3c <GUI_GetFontDistY+0xc>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	69db      	ldr	r3, [r3, #28]
 800aa36:	7e58      	ldrb	r0, [r3, #25]
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop
 800aa3c:	20000024 	.word	0x20000024

0800aa40 <GUI_GetCharDistX>:
 800aa40:	b508      	push	{r3, lr}
 800aa42:	4b03      	ldr	r3, [pc, #12]	; (800aa50 <GUI_GetCharDistX+0x10>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	69db      	ldr	r3, [r3, #28]
 800aa48:	2100      	movs	r1, #0
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	4798      	blx	r3
 800aa4e:	bd08      	pop	{r3, pc}
 800aa50:	20000024 	.word	0x20000024

0800aa54 <GUI_GetCharDistXEx>:
 800aa54:	b508      	push	{r3, lr}
 800aa56:	4b03      	ldr	r3, [pc, #12]	; (800aa64 <GUI_GetCharDistXEx+0x10>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	69db      	ldr	r3, [r3, #28]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	4798      	blx	r3
 800aa60:	bd08      	pop	{r3, pc}
 800aa62:	bf00      	nop
 800aa64:	20000024 	.word	0x20000024

0800aa68 <_DrawArc.isra.0>:
 800aa68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa6c:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 800ad48 <_DrawArc.isra.0+0x2e0>
 800aa70:	ed2d 8b0a 	vpush	{d8-d12}
 800aa74:	ee06 2a10 	vmov	s12, r2
 800aa78:	f8da 2000 	ldr.w	r2, [sl]
 800aa7c:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 800aa80:	7e12      	ldrb	r2, [r2, #24]
 800aa82:	ee07 2a10 	vmov	s14, r2
 800aa86:	eeb8 8ac6 	vcvt.f32.s32	s16, s12
 800aa8a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800aa8e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800aa92:	fb04 f703 	mul.w	r7, r4, r3
 800aa96:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800aa9a:	eef0 8a48 	vmov.f32	s17, s16
 800aa9e:	4680      	mov	r8, r0
 800aaa0:	4638      	mov	r0, r7
 800aaa2:	eee7 8a67 	vfms.f32	s17, s14, s15
 800aaa6:	460d      	mov	r5, r1
 800aaa8:	eea7 8a27 	vfma.f32	s16, s14, s15
 800aaac:	f002 fb88 	bl	800d1c0 <GUI__SinHQ>
 800aab0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aab2:	435c      	muls	r4, r3
 800aab4:	ee0a 0a10 	vmov	s20, r0
 800aab8:	4620      	mov	r0, r4
 800aaba:	f002 fb81 	bl	800d1c0 <GUI__SinHQ>
 800aabe:	ee0a 0a90 	vmov	s21, r0
 800aac2:	4638      	mov	r0, r7
 800aac4:	f002 fbbe 	bl	800d244 <GUI__CosHQ>
 800aac8:	ee0b 0a90 	vmov	s23, r0
 800aacc:	4620      	mov	r0, r4
 800aace:	f002 fbb9 	bl	800d244 <GUI__CosHQ>
 800aad2:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 800aad6:	eef8 baeb 	vcvt.f32.s32	s23, s23
 800aada:	ee28 9a8a 	vmul.f32	s18, s17, s20
 800aade:	ee28 aa0a 	vmul.f32	s20, s16, s20
 800aae2:	ee06 0a10 	vmov	s12, r0
 800aae6:	eebd 9ac9 	vcvt.s32.f32	s18, s18
 800aaea:	eebd aaca 	vcvt.s32.f32	s20, s20
 800aaee:	ee28 baab 	vmul.f32	s22, s17, s23
 800aaf2:	ee68 ba2b 	vmul.f32	s23, s16, s23
 800aaf6:	eef8 7ac6 	vcvt.f32.s32	s15, s12
 800aafa:	ee19 1a10 	vmov	r1, s18
 800aafe:	ee1a 2a10 	vmov	r2, s20
 800ab02:	eef8 aaea 	vcvt.f32.s32	s21, s21
 800ab06:	eebd bacb 	vcvt.s32.f32	s22, s22
 800ab0a:	eefd baeb 	vcvt.s32.f32	s23, s23
 800ab0e:	ee68 9aaa 	vmul.f32	s19, s17, s21
 800ab12:	ee28 caa8 	vmul.f32	s24, s17, s17
 800ab16:	ee68 ca08 	vmul.f32	s25, s16, s16
 800ab1a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800ab1e:	1409      	asrs	r1, r1, #16
 800ab20:	1412      	asrs	r2, r2, #16
 800ab22:	ee68 aa2a 	vmul.f32	s21, s16, s21
 800ab26:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ab2a:	ee09 1a10 	vmov	s18, r1
 800ab2e:	ee0a 2a10 	vmov	s20, r2
 800ab32:	ee1b 1a10 	vmov	r1, s22
 800ab36:	ee1b 2a90 	vmov	r2, s23
 800ab3a:	eefd 9ae9 	vcvt.s32.f32	s19, s19
 800ab3e:	eefd aaea 	vcvt.s32.f32	s21, s21
 800ab42:	eefd 8ae8 	vcvt.s32.f32	s17, s17
 800ab46:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 800ab4a:	1409      	asrs	r1, r1, #16
 800ab4c:	1412      	asrs	r2, r2, #16
 800ab4e:	ee19 3a90 	vmov	r3, s19
 800ab52:	ee1a ea90 	vmov	lr, s21
 800ab56:	ee0b 1a10 	vmov	s22, r1
 800ab5a:	ee0b 2a90 	vmov	s23, r2
 800ab5e:	ee18 1a90 	vmov	r1, s17
 800ab62:	ee18 2a10 	vmov	r2, s16
 800ab66:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 800ab6a:	141b      	asrs	r3, r3, #16
 800ab6c:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 800ab70:	1412      	asrs	r2, r2, #16
 800ab72:	1409      	asrs	r1, r1, #16
 800ab74:	ee19 0a10 	vmov	r0, s18
 800ab78:	ee09 3a90 	vmov	s19, r3
 800ab7c:	ee0a ea90 	vmov	s21, lr
 800ab80:	ee08 2a10 	vmov	s16, r2
 800ab84:	ee08 1a90 	vmov	s17, r1
 800ab88:	f7f5 fcf6 	bl	8000578 <__aeabi_f2d>
 800ab8c:	ec41 0b10 	vmov	d0, r0, r1
 800ab90:	f003 fbd6 	bl	800e340 <ceil>
 800ab94:	ec51 0b10 	vmov	r0, r1, d0
 800ab98:	f7f5 ffe0 	bl	8000b5c <__aeabi_d2iz>
 800ab9c:	eef8 aaea 	vcvt.f32.s32	s21, s21
 800aba0:	4607      	mov	r7, r0
 800aba2:	ee1a 0a90 	vmov	r0, s21
 800aba6:	f7f5 fce7 	bl	8000578 <__aeabi_f2d>
 800abaa:	ec41 0b10 	vmov	d0, r0, r1
 800abae:	f003 fc8b 	bl	800e4c8 <floor>
 800abb2:	ec51 0b10 	vmov	r0, r1, d0
 800abb6:	f7f5 ffd1 	bl	8000b5c <__aeabi_d2iz>
 800abba:	f8da 3000 	ldr.w	r3, [sl]
 800abbe:	eebc cacc 	vcvt.u32.f32	s24, s24
 800abc2:	695b      	ldr	r3, [r3, #20]
 800abc4:	ee1c 6a10 	vmov	r6, s24
 800abc8:	eefc caec 	vcvt.u32.f32	s25, s25
 800abcc:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 800abd0:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 800abd4:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 800abd8:	eef8 baeb 	vcvt.f32.s32	s23, s23
 800abdc:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 800abe0:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800abe4:	4604      	mov	r4, r0
 800abe6:	b1f3      	cbz	r3, 800ac26 <_DrawArc.isra.0+0x1be>
 800abe8:	f1b9 0f01 	cmp.w	r9, #1
 800abec:	d10c      	bne.n	800ac08 <_DrawArc.isra.0+0x1a0>
 800abee:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800abf2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800abf6:	1b52      	subs	r2, r2, r5
 800abf8:	1b5b      	subs	r3, r3, r5
 800abfa:	4294      	cmp	r4, r2
 800abfc:	bfa8      	it	ge
 800abfe:	4614      	movge	r4, r2
 800ac00:	429f      	cmp	r7, r3
 800ac02:	bfb8      	it	lt
 800ac04:	461f      	movlt	r7, r3
 800ac06:	e00e      	b.n	800ac26 <_DrawArc.isra.0+0x1be>
 800ac08:	f1b9 3fff 	cmp.w	r9, #4294967295
 800ac0c:	d10b      	bne.n	800ac26 <_DrawArc.isra.0+0x1be>
 800ac0e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800ac12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ac16:	1b52      	subs	r2, r2, r5
 800ac18:	1b5b      	subs	r3, r3, r5
 800ac1a:	4297      	cmp	r7, r2
 800ac1c:	bfa8      	it	ge
 800ac1e:	4617      	movge	r7, r2
 800ac20:	429c      	cmp	r4, r3
 800ac22:	bfb8      	it	lt
 800ac24:	461c      	movlt	r4, r3
 800ac26:	f1c9 0a00 	rsb	sl, r9, #0
 800ac2a:	fb09 5904 	mla	r9, r9, r4, r5
 800ac2e:	2500      	movs	r5, #0
 800ac30:	46ab      	mov	fp, r5
 800ac32:	42bc      	cmp	r4, r7
 800ac34:	f2c0 8083 	blt.w	800ad3e <_DrawArc.isra.0+0x2d6>
 800ac38:	fb04 f304 	mul.w	r3, r4, r4
 800ac3c:	42b3      	cmp	r3, r6
 800ac3e:	d208      	bcs.n	800ac52 <_DrawArc.isra.0+0x1ea>
 800ac40:	f10b 0201 	add.w	r2, fp, #1
 800ac44:	fb02 f002 	mul.w	r0, r2, r2
 800ac48:	1af1      	subs	r1, r6, r3
 800ac4a:	4288      	cmp	r0, r1
 800ac4c:	d203      	bcs.n	800ac56 <_DrawArc.isra.0+0x1ee>
 800ac4e:	4693      	mov	fp, r2
 800ac50:	e7f6      	b.n	800ac40 <_DrawArc.isra.0+0x1d8>
 800ac52:	f04f 0b00 	mov.w	fp, #0
 800ac56:	ee1c ea90 	vmov	lr, s25
 800ac5a:	4573      	cmp	r3, lr
 800ac5c:	d20a      	bcs.n	800ac74 <_DrawArc.isra.0+0x20c>
 800ac5e:	ee1c ea90 	vmov	lr, s25
 800ac62:	1c6a      	adds	r2, r5, #1
 800ac64:	fb02 f002 	mul.w	r0, r2, r2
 800ac68:	ebc3 010e 	rsb	r1, r3, lr
 800ac6c:	4288      	cmp	r0, r1
 800ac6e:	d202      	bcs.n	800ac76 <_DrawArc.isra.0+0x20e>
 800ac70:	4615      	mov	r5, r2
 800ac72:	e7f4      	b.n	800ac5e <_DrawArc.isra.0+0x1f6>
 800ac74:	2500      	movs	r5, #0
 800ac76:	ee06 4a90 	vmov	s13, r4
 800ac7a:	eebd 6aeb 	vcvt.s32.f32	s12, s23
 800ac7e:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 800ac82:	1e6b      	subs	r3, r5, #1
 800ac84:	ee16 5a10 	vmov	r5, s12
 800ac88:	eef4 7aca 	vcmpe.f32	s15, s20
 800ac8c:	42ab      	cmp	r3, r5
 800ac8e:	bfb8      	it	lt
 800ac90:	461d      	movlt	r5, r3
 800ac92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac96:	d51a      	bpl.n	800acce <_DrawArc.isra.0+0x266>
 800ac98:	eeb4 aa49 	vcmp.f32	s20, s18
 800ac9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca0:	d00e      	beq.n	800acc0 <_DrawArc.isra.0+0x258>
 800aca2:	ee7a 6a49 	vsub.f32	s13, s20, s18
 800aca6:	ee3b 7acb 	vsub.f32	s14, s23, s22
 800acaa:	eeb0 6a4b 	vmov.f32	s12, s22
 800acae:	ee87 7a26 	vdiv.f32	s14, s14, s13
 800acb2:	ee77 6ac9 	vsub.f32	s13, s15, s18
 800acb6:	eea6 6a87 	vfma.f32	s12, s13, s14
 800acba:	eeb0 7a46 	vmov.f32	s14, s12
 800acbe:	e001      	b.n	800acc4 <_DrawArc.isra.0+0x25c>
 800acc0:	eeb0 7a49 	vmov.f32	s14, s18
 800acc4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800acc8:	ee17 2a10 	vmov	r2, s14
 800accc:	e000      	b.n	800acd0 <_DrawArc.isra.0+0x268>
 800acce:	462a      	mov	r2, r5
 800acd0:	eef4 7ae9 	vcmpe.f32	s15, s19
 800acd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acd8:	dd1a      	ble.n	800ad10 <_DrawArc.isra.0+0x2a8>
 800acda:	eef4 aa69 	vcmp.f32	s21, s19
 800acde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ace2:	d00e      	beq.n	800ad02 <_DrawArc.isra.0+0x29a>
 800ace4:	ee7a 6ae9 	vsub.f32	s13, s21, s19
 800ace8:	ee38 7a68 	vsub.f32	s14, s16, s17
 800acec:	ee77 7ae9 	vsub.f32	s15, s15, s19
 800acf0:	ee87 7a26 	vdiv.f32	s14, s14, s13
 800acf4:	eef0 6a68 	vmov.f32	s13, s17
 800acf8:	eee7 6a87 	vfma.f32	s13, s15, s14
 800acfc:	eef0 7a66 	vmov.f32	s15, s13
 800ad00:	e001      	b.n	800ad06 <_DrawArc.isra.0+0x29e>
 800ad02:	eef0 7a69 	vmov.f32	s15, s19
 800ad06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ad0a:	ee17 3a90 	vmov	r3, s15
 800ad0e:	e000      	b.n	800ad12 <_DrawArc.isra.0+0x2aa>
 800ad10:	465b      	mov	r3, fp
 800ad12:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ad14:	2900      	cmp	r1, #0
 800ad16:	490c      	ldr	r1, [pc, #48]	; (800ad48 <_DrawArc.isra.0+0x2e0>)
 800ad18:	6809      	ldr	r1, [r1, #0]
 800ad1a:	6e49      	ldr	r1, [r1, #100]	; 0x64
 800ad1c:	f8d1 c000 	ldr.w	ip, [r1]
 800ad20:	dd04      	ble.n	800ad2c <_DrawArc.isra.0+0x2c4>
 800ad22:	eb03 0008 	add.w	r0, r3, r8
 800ad26:	4649      	mov	r1, r9
 800ad28:	4442      	add	r2, r8
 800ad2a:	e004      	b.n	800ad36 <_DrawArc.isra.0+0x2ce>
 800ad2c:	ebc2 0008 	rsb	r0, r2, r8
 800ad30:	4649      	mov	r1, r9
 800ad32:	ebc3 0208 	rsb	r2, r3, r8
 800ad36:	47e0      	blx	ip
 800ad38:	3c01      	subs	r4, #1
 800ad3a:	44d1      	add	r9, sl
 800ad3c:	e779      	b.n	800ac32 <_DrawArc.isra.0+0x1ca>
 800ad3e:	ecbd 8b0a 	vpop	{d8-d12}
 800ad42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad46:	bf00      	nop
 800ad48:	20000024 	.word	0x20000024

0800ad4c <GL_DrawArc>:
 800ad4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800ad50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad52:	4690      	mov	r8, r2
 800ad54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad56:	4606      	mov	r6, r0
 800ad58:	460f      	mov	r7, r1
 800ad5a:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 800ad5e:	1ad5      	subs	r5, r2, r3
 800ad60:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 800ad64:	4425      	add	r5, r4
 800ad66:	db67      	blt.n	800ae38 <GL_DrawArc+0xec>
 800ad68:	f5a4 74b4 	sub.w	r4, r4, #360	; 0x168
 800ad6c:	e7f7      	b.n	800ad5e <GL_DrawArc+0x12>
 800ad6e:	2c59      	cmp	r4, #89	; 0x59
 800ad70:	dc11      	bgt.n	800ad96 <GL_DrawArc+0x4a>
 800ad72:	2d5a      	cmp	r5, #90	; 0x5a
 800ad74:	bfb4      	ite	lt
 800ad76:	462b      	movlt	r3, r5
 800ad78:	235a      	movge	r3, #90	; 0x5a
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800ad82:	9301      	str	r3, [sp, #4]
 800ad84:	f04f 33ff 	mov.w	r3, #4294967295
 800ad88:	9302      	str	r3, [sp, #8]
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	4639      	mov	r1, r7
 800ad8e:	4642      	mov	r2, r8
 800ad90:	4623      	mov	r3, r4
 800ad92:	f7ff fe69 	bl	800aa68 <_DrawArc.isra.0>
 800ad96:	f1a5 035a 	sub.w	r3, r5, #90	; 0x5a
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	f1a4 045a 	sub.w	r4, r4, #90	; 0x5a
 800ada0:	dd4c      	ble.n	800ae3c <GL_DrawArc+0xf0>
 800ada2:	2c59      	cmp	r4, #89	; 0x59
 800ada4:	dc12      	bgt.n	800adcc <GL_DrawArc+0x80>
 800ada6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800adaa:	f1c4 025a 	rsb	r2, r4, #90	; 0x5a
 800adae:	2b5a      	cmp	r3, #90	; 0x5a
 800adb0:	bfa8      	it	ge
 800adb2:	235a      	movge	r3, #90	; 0x5a
 800adb4:	9200      	str	r2, [sp, #0]
 800adb6:	f04f 32ff 	mov.w	r2, #4294967295
 800adba:	9201      	str	r2, [sp, #4]
 800adbc:	9202      	str	r2, [sp, #8]
 800adbe:	4630      	mov	r0, r6
 800adc0:	4639      	mov	r1, r7
 800adc2:	4642      	mov	r2, r8
 800adc4:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800adc8:	f7ff fe4e 	bl	800aa68 <_DrawArc.isra.0>
 800adcc:	f1a5 03b4 	sub.w	r3, r5, #180	; 0xb4
 800add0:	2b00      	cmp	r3, #0
 800add2:	f1a4 045a 	sub.w	r4, r4, #90	; 0x5a
 800add6:	dd31      	ble.n	800ae3c <GL_DrawArc+0xf0>
 800add8:	2c59      	cmp	r4, #89	; 0x59
 800adda:	dc10      	bgt.n	800adfe <GL_DrawArc+0xb2>
 800addc:	2b5a      	cmp	r3, #90	; 0x5a
 800adde:	bfa8      	it	ge
 800ade0:	235a      	movge	r3, #90	; 0x5a
 800ade2:	9300      	str	r3, [sp, #0]
 800ade4:	f04f 33ff 	mov.w	r3, #4294967295
 800ade8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800adec:	9301      	str	r3, [sp, #4]
 800adee:	2301      	movs	r3, #1
 800adf0:	9302      	str	r3, [sp, #8]
 800adf2:	4630      	mov	r0, r6
 800adf4:	4639      	mov	r1, r7
 800adf6:	4642      	mov	r2, r8
 800adf8:	4623      	mov	r3, r4
 800adfa:	f7ff fe35 	bl	800aa68 <_DrawArc.isra.0>
 800adfe:	f5a5 7387 	sub.w	r3, r5, #270	; 0x10e
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	f1a4 045a 	sub.w	r4, r4, #90	; 0x5a
 800ae08:	dd18      	ble.n	800ae3c <GL_DrawArc+0xf0>
 800ae0a:	2c59      	cmp	r4, #89	; 0x59
 800ae0c:	dc11      	bgt.n	800ae32 <GL_DrawArc+0xe6>
 800ae0e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800ae12:	f1c4 025a 	rsb	r2, r4, #90	; 0x5a
 800ae16:	2b5a      	cmp	r3, #90	; 0x5a
 800ae18:	bfa8      	it	ge
 800ae1a:	235a      	movge	r3, #90	; 0x5a
 800ae1c:	9200      	str	r2, [sp, #0]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	9201      	str	r2, [sp, #4]
 800ae22:	9202      	str	r2, [sp, #8]
 800ae24:	4630      	mov	r0, r6
 800ae26:	4639      	mov	r1, r7
 800ae28:	4642      	mov	r2, r8
 800ae2a:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800ae2e:	f7ff fe1b 	bl	800aa68 <_DrawArc.isra.0>
 800ae32:	f5a5 75b4 	sub.w	r5, r5, #360	; 0x168
 800ae36:	3c5a      	subs	r4, #90	; 0x5a
 800ae38:	2d00      	cmp	r5, #0
 800ae3a:	dc98      	bgt.n	800ad6e <GL_DrawArc+0x22>
 800ae3c:	b004      	add	sp, #16
 800ae3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800ae44 <GUI_DrawArc>:
 800ae44:	e92d 4bf3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, fp, lr}
 800ae48:	461f      	mov	r7, r3
 800ae4a:	4b0e      	ldr	r3, [pc, #56]	; (800ae84 <GUI_DrawArc+0x40>)
 800ae4c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ae4e:	681c      	ldr	r4, [r3, #0]
 800ae50:	4683      	mov	fp, r0
 800ae52:	2000      	movs	r0, #0
 800ae54:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800ae56:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800ae58:	4689      	mov	r9, r1
 800ae5a:	4690      	mov	r8, r2
 800ae5c:	f7fa fe0c 	bl	8005a78 <WM__InitIVRSearch>
 800ae60:	b168      	cbz	r0, 800ae7e <GUI_DrawArc+0x3a>
 800ae62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae64:	9301      	str	r3, [sp, #4]
 800ae66:	eb0b 0005 	add.w	r0, fp, r5
 800ae6a:	eb09 0104 	add.w	r1, r9, r4
 800ae6e:	4642      	mov	r2, r8
 800ae70:	463b      	mov	r3, r7
 800ae72:	9600      	str	r6, [sp, #0]
 800ae74:	f7ff ff6a 	bl	800ad4c <GL_DrawArc>
 800ae78:	f7fa fd3c 	bl	80058f4 <WM__GetNextIVR>
 800ae7c:	e7f0      	b.n	800ae60 <GUI_DrawArc+0x1c>
 800ae7e:	b002      	add	sp, #8
 800ae80:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 800ae84:	20000024 	.word	0x20000024

0800ae88 <_PushFreeBlock>:
 800ae88:	4b07      	ldr	r3, [pc, #28]	; (800aea8 <_PushFreeBlock+0x20>)
 800ae8a:	685a      	ldr	r2, [r3, #4]
 800ae8c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ae8e:	3201      	adds	r2, #1
 800ae90:	b510      	push	{r4, lr}
 800ae92:	605a      	str	r2, [r3, #4]
 800ae94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae96:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 800ae9a:	6061      	str	r1, [r4, #4]
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 800aea2:	6258      	str	r0, [r3, #36]	; 0x24
 800aea4:	bd10      	pop	{r4, pc}
 800aea6:	bf00      	nop
 800aea8:	200194d8 	.word	0x200194d8

0800aeac <_OnExit>:
 800aeac:	b538      	push	{r3, r4, r5, lr}
 800aeae:	4d0b      	ldr	r5, [pc, #44]	; (800aedc <_OnExit+0x30>)
 800aeb0:	2400      	movs	r4, #0
 800aeb2:	f105 0040 	add.w	r0, r5, #64	; 0x40
 800aeb6:	4621      	mov	r1, r4
 800aeb8:	2280      	movs	r2, #128	; 0x80
 800aeba:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
 800aebe:	f7fd fe83 	bl	8008bc8 <GUI__memset>
 800aec2:	4628      	mov	r0, r5
 800aec4:	4621      	mov	r1, r4
 800aec6:	22c0      	movs	r2, #192	; 0xc0
 800aec8:	f7fd fe7e 	bl	8008bc8 <GUI__memset>
 800aecc:	4621      	mov	r1, r4
 800aece:	4804      	ldr	r0, [pc, #16]	; (800aee0 <_OnExit+0x34>)
 800aed0:	220c      	movs	r2, #12
 800aed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aed6:	f7fd be77 	b.w	8008bc8 <GUI__memset>
 800aeda:	bf00      	nop
 800aedc:	200194d8 	.word	0x200194d8
 800aee0:	20019278 	.word	0x20019278

0800aee4 <_RemoveFreeBlock>:
 800aee4:	b510      	push	{r4, lr}
 800aee6:	6842      	ldr	r2, [r0, #4]
 800aee8:	230f      	movs	r3, #15
 800aeea:	490d      	ldr	r1, [pc, #52]	; (800af20 <_RemoveFreeBlock+0x3c>)
 800aeec:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 800aef0:	6c24      	ldr	r4, [r4, #64]	; 0x40
 800aef2:	42a2      	cmp	r2, r4
 800aef4:	d203      	bcs.n	800aefe <_RemoveFreeBlock+0x1a>
 800aef6:	f113 33ff 	adds.w	r3, r3, #4294967295
 800aefa:	d2f6      	bcs.n	800aeea <_RemoveFreeBlock+0x6>
 800aefc:	bd10      	pop	{r4, pc}
 800aefe:	2b0f      	cmp	r3, #15
 800af00:	d80c      	bhi.n	800af1c <_RemoveFreeBlock+0x38>
 800af02:	680c      	ldr	r4, [r1, #0]
 800af04:	1aa2      	subs	r2, r4, r2
 800af06:	600a      	str	r2, [r1, #0]
 800af08:	6882      	ldr	r2, [r0, #8]
 800af0a:	68c0      	ldr	r0, [r0, #12]
 800af0c:	b102      	cbz	r2, 800af10 <_RemoveFreeBlock+0x2c>
 800af0e:	6050      	str	r0, [r2, #4]
 800af10:	b108      	cbz	r0, 800af16 <_RemoveFreeBlock+0x32>
 800af12:	6002      	str	r2, [r0, #0]
 800af14:	bd10      	pop	{r4, pc}
 800af16:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800af1a:	645a      	str	r2, [r3, #68]	; 0x44
 800af1c:	bd10      	pop	{r4, pc}
 800af1e:	bf00      	nop
 800af20:	200194d8 	.word	0x200194d8

0800af24 <_AddFreeMemory>:
 800af24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af26:	4e26      	ldr	r6, [pc, #152]	; (800afc0 <_AddFreeMemory+0x9c>)
 800af28:	68f3      	ldr	r3, [r6, #12]
 800af2a:	1e5a      	subs	r2, r3, #1
 800af2c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800af2e:	4605      	mov	r5, r0
 800af30:	4413      	add	r3, r2
 800af32:	1808      	adds	r0, r1, r0
 800af34:	4298      	cmp	r0, r3
 800af36:	460c      	mov	r4, r1
 800af38:	d805      	bhi.n	800af46 <_AddFreeMemory+0x22>
 800af3a:	594b      	ldr	r3, [r1, r5]
 800af3c:	b91b      	cbnz	r3, 800af46 <_AddFreeMemory+0x22>
 800af3e:	6843      	ldr	r3, [r0, #4]
 800af40:	441d      	add	r5, r3
 800af42:	f7ff ffcf 	bl	800aee4 <_RemoveFreeBlock>
 800af46:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800af48:	429c      	cmp	r4, r3
 800af4a:	d90a      	bls.n	800af62 <_AddFreeMemory+0x3e>
 800af4c:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800af50:	1be7      	subs	r7, r4, r7
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	b92b      	cbnz	r3, 800af62 <_AddFreeMemory+0x3e>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4638      	mov	r0, r7
 800af5a:	441d      	add	r5, r3
 800af5c:	f7ff ffc2 	bl	800aee4 <_RemoveFreeBlock>
 800af60:	463c      	mov	r4, r7
 800af62:	230f      	movs	r3, #15
 800af64:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800af68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800af6a:	4295      	cmp	r5, r2
 800af6c:	d203      	bcs.n	800af76 <_AddFreeMemory+0x52>
 800af6e:	f113 33ff 	adds.w	r3, r3, #4294967295
 800af72:	d2f7      	bcs.n	800af64 <_AddFreeMemory+0x40>
 800af74:	e022      	b.n	800afbc <_AddFreeMemory+0x98>
 800af76:	2b0f      	cmp	r3, #15
 800af78:	d820      	bhi.n	800afbc <_AddFreeMemory+0x98>
 800af7a:	3308      	adds	r3, #8
 800af7c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800af80:	1961      	adds	r1, r4, r5
 800af82:	6852      	ldr	r2, [r2, #4]
 800af84:	60a2      	str	r2, [r4, #8]
 800af86:	2000      	movs	r0, #0
 800af88:	e884 0021 	stmia.w	r4, {r0, r5}
 800af8c:	6124      	str	r4, [r4, #16]
 800af8e:	f841 5c04 	str.w	r5, [r1, #-4]
 800af92:	f104 0108 	add.w	r1, r4, #8
 800af96:	b102      	cbz	r2, 800af9a <_AddFreeMemory+0x76>
 800af98:	6051      	str	r1, [r2, #4]
 800af9a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800af9e:	60e0      	str	r0, [r4, #12]
 800afa0:	6059      	str	r1, [r3, #4]
 800afa2:	6833      	ldr	r3, [r6, #0]
 800afa4:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 800afa8:	4a05      	ldr	r2, [pc, #20]	; (800afc0 <_AddFreeMemory+0x9c>)
 800afaa:	442b      	add	r3, r5
 800afac:	6033      	str	r3, [r6, #0]
 800afae:	b929      	cbnz	r1, 800afbc <_AddFreeMemory+0x98>
 800afb0:	68d1      	ldr	r1, [r2, #12]
 800afb2:	1acb      	subs	r3, r1, r3
 800afb4:	6891      	ldr	r1, [r2, #8]
 800afb6:	4299      	cmp	r1, r3
 800afb8:	bf38      	it	cc
 800afba:	6093      	strcc	r3, [r2, #8]
 800afbc:	4628      	mov	r0, r5
 800afbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afc0:	200194d8 	.word	0x200194d8

0800afc4 <_RemoveHoles>:
 800afc4:	4b25      	ldr	r3, [pc, #148]	; (800b05c <_RemoveHoles+0x98>)
 800afc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afca:	68da      	ldr	r2, [r3, #12]
 800afcc:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800afce:	3a01      	subs	r2, #1
 800afd0:	4682      	mov	sl, r0
 800afd2:	eb02 0904 	add.w	r9, r2, r4
 800afd6:	469b      	mov	fp, r3
 800afd8:	e894 0028 	ldmia.w	r4, {r3, r5}
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d133      	bne.n	800b048 <_RemoveHoles+0x84>
 800afe0:	eb04 0805 	add.w	r8, r4, r5
 800afe4:	45c8      	cmp	r8, r9
 800afe6:	d22f      	bcs.n	800b048 <_RemoveHoles+0x84>
 800afe8:	f854 c005 	ldr.w	ip, [r4, r5]
 800afec:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800aff0:	f1bc 0f00 	cmp.w	ip, #0
 800aff4:	d028      	beq.n	800b048 <_RemoveHoles+0x84>
 800aff6:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800affa:	4f18      	ldr	r7, [pc, #96]	; (800b05c <_RemoveHoles+0x98>)
 800affc:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 800b000:	2b01      	cmp	r3, #1
 800b002:	d121      	bne.n	800b048 <_RemoveHoles+0x84>
 800b004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b006:	4620      	mov	r0, r4
 800b008:	e88d 1008 	stmia.w	sp, {r3, ip}
 800b00c:	f7ff ff6a 	bl	800aee4 <_RemoveFreeBlock>
 800b010:	f8d8 1000 	ldr.w	r1, [r8]
 800b014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b016:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b01a:	4620      	mov	r0, r4
 800b01c:	6054      	str	r4, [r2, #4]
 800b01e:	4641      	mov	r1, r8
 800b020:	4632      	mov	r2, r6
 800b022:	f002 fd88 	bl	800db36 <memmove>
 800b026:	e89d 1008 	ldmia.w	sp, {r3, ip}
 800b02a:	459c      	cmp	ip, r3
 800b02c:	d102      	bne.n	800b034 <_RemoveHoles+0x70>
 800b02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b030:	1b5b      	subs	r3, r3, r5
 800b032:	637b      	str	r3, [r7, #52]	; 0x34
 800b034:	4628      	mov	r0, r5
 800b036:	19a1      	adds	r1, r4, r6
 800b038:	f7ff ff74 	bl	800af24 <_AddFreeMemory>
 800b03c:	f1ba 0f00 	cmp.w	sl, #0
 800b040:	d001      	beq.n	800b046 <_RemoveHoles+0x82>
 800b042:	4582      	cmp	sl, r0
 800b044:	d905      	bls.n	800b052 <_RemoveHoles+0x8e>
 800b046:	4635      	mov	r5, r6
 800b048:	442c      	add	r4, r5
 800b04a:	454c      	cmp	r4, r9
 800b04c:	d3c4      	bcc.n	800afd8 <_RemoveHoles+0x14>
 800b04e:	2001      	movs	r0, #1
 800b050:	e000      	b.n	800b054 <_RemoveHoles+0x90>
 800b052:	2000      	movs	r0, #0
 800b054:	b003      	add	sp, #12
 800b056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b05a:	bf00      	nop
 800b05c:	200194d8 	.word	0x200194d8

0800b060 <GUI_ALLOC_FreeFixedBlock>:
 800b060:	b128      	cbz	r0, 800b06e <GUI_ALLOC_FreeFixedBlock+0xe>
 800b062:	4a03      	ldr	r2, [pc, #12]	; (800b070 <GUI_ALLOC_FreeFixedBlock+0x10>)
 800b064:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800b066:	6003      	str	r3, [r0, #0]
 800b068:	b103      	cbz	r3, 800b06c <GUI_ALLOC_FreeFixedBlock+0xc>
 800b06a:	6058      	str	r0, [r3, #4]
 800b06c:	63d0      	str	r0, [r2, #60]	; 0x3c
 800b06e:	4770      	bx	lr
 800b070:	200194d8 	.word	0x200194d8

0800b074 <GUI_ALLOC_h2p>:
 800b074:	b128      	cbz	r0, 800b082 <GUI_ALLOC_h2p+0xe>
 800b076:	4b03      	ldr	r3, [pc, #12]	; (800b084 <GUI_ALLOC_h2p+0x10>)
 800b078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b07a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800b07e:	6840      	ldr	r0, [r0, #4]
 800b080:	3008      	adds	r0, #8
 800b082:	4770      	bx	lr
 800b084:	200194d8 	.word	0x200194d8

0800b088 <GUI_ALLOC_LockH>:
 800b088:	4b05      	ldr	r3, [pc, #20]	; (800b0a0 <GUI_ALLOC_LockH+0x18>)
 800b08a:	69d9      	ldr	r1, [r3, #28]
 800b08c:	3101      	adds	r1, #1
 800b08e:	61d9      	str	r1, [r3, #28]
 800b090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b092:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 800b096:	3101      	adds	r1, #1
 800b098:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 800b09c:	f7ff bfea 	b.w	800b074 <GUI_ALLOC_h2p>
 800b0a0:	200194d8 	.word	0x200194d8

0800b0a4 <GUI_ALLOC_UnlockH>:
 800b0a4:	b530      	push	{r4, r5, lr}
 800b0a6:	6802      	ldr	r2, [r0, #0]
 800b0a8:	4b09      	ldr	r3, [pc, #36]	; (800b0d0 <GUI_ALLOC_UnlockH+0x2c>)
 800b0aa:	f852 1c08 	ldr.w	r1, [r2, #-8]
 800b0ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0b0:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 800b0b4:	2c01      	cmp	r4, #1
 800b0b6:	d903      	bls.n	800b0c0 <GUI_ALLOC_UnlockH+0x1c>
 800b0b8:	69dd      	ldr	r5, [r3, #28]
 800b0ba:	b10d      	cbz	r5, 800b0c0 <GUI_ALLOC_UnlockH+0x1c>
 800b0bc:	3d01      	subs	r5, #1
 800b0be:	61dd      	str	r5, [r3, #28]
 800b0c0:	3c01      	subs	r4, #1
 800b0c2:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	6003      	str	r3, [r0, #0]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	bd30      	pop	{r4, r5, pc}
 800b0ce:	bf00      	nop
 800b0d0:	200194d8 	.word	0x200194d8

0800b0d4 <GUI_ALLOC_AssignMemory>:
 800b0d4:	4b02      	ldr	r3, [pc, #8]	; (800b0e0 <GUI_ALLOC_AssignMemory+0xc>)
 800b0d6:	f021 0103 	bic.w	r1, r1, #3
 800b0da:	6018      	str	r0, [r3, #0]
 800b0dc:	6059      	str	r1, [r3, #4]
 800b0de:	4770      	bx	lr
 800b0e0:	20019278 	.word	0x20019278

0800b0e4 <GUI_ALLOC_Free>:
 800b0e4:	b510      	push	{r4, lr}
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	b180      	cbz	r0, 800b10c <GUI_ALLOC_Free+0x28>
 800b0ea:	4b09      	ldr	r3, [pc, #36]	; (800b110 <GUI_ALLOC_Free+0x2c>)
 800b0ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ee:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 800b0f2:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d108      	bne.n	800b10c <GUI_ALLOC_Free+0x28>
 800b0fa:	6851      	ldr	r1, [r2, #4]
 800b0fc:	6848      	ldr	r0, [r1, #4]
 800b0fe:	f7ff ff11 	bl	800af24 <_AddFreeMemory>
 800b102:	4620      	mov	r0, r4
 800b104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b108:	f7ff bebe 	b.w	800ae88 <_PushFreeBlock>
 800b10c:	bd10      	pop	{r4, pc}
 800b10e:	bf00      	nop
 800b110:	200194d8 	.word	0x200194d8

0800b114 <_EnlargeBlocks>:
 800b114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b118:	4c22      	ldr	r4, [pc, #136]	; (800b1a4 <_EnlargeBlocks+0x90>)
 800b11a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b11c:	b93b      	cbnz	r3, 800b12e <_EnlargeBlocks+0x1a>
 800b11e:	4b22      	ldr	r3, [pc, #136]	; (800b1a8 <_EnlargeBlocks+0x94>)
 800b120:	689d      	ldr	r5, [r3, #8]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	3508      	adds	r5, #8
 800b126:	fbb3 f5f5 	udiv	r5, r3, r5
 800b12a:	3502      	adds	r5, #2
 800b12c:	e003      	b.n	800b136 <_EnlargeBlocks+0x22>
 800b12e:	6923      	ldr	r3, [r4, #16]
 800b130:	1d1d      	adds	r5, r3, #4
 800b132:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 800b136:	00e8      	lsls	r0, r5, #3
 800b138:	f000 f978 	bl	800b42c <_Alloc>
 800b13c:	4680      	mov	r8, r0
 800b13e:	b360      	cbz	r0, 800b19a <_EnlargeBlocks+0x86>
 800b140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b142:	6922      	ldr	r2, [r4, #16]
 800b144:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b146:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 800b14a:	00d2      	lsls	r2, r2, #3
 800b14c:	685e      	ldr	r6, [r3, #4]
 800b14e:	3608      	adds	r6, #8
 800b150:	4630      	mov	r0, r6
 800b152:	f002 fce5 	bl	800db20 <memcpy>
 800b156:	6922      	ldr	r2, [r4, #16]
 800b158:	6366      	str	r6, [r4, #52]	; 0x34
 800b15a:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 800b15e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800b162:	3104      	adds	r1, #4
 800b164:	4613      	mov	r3, r2
 800b166:	1e68      	subs	r0, r5, #1
 800b168:	4283      	cmp	r3, r0
 800b16a:	f101 0108 	add.w	r1, r1, #8
 800b16e:	d203      	bcs.n	800b178 <_EnlargeBlocks+0x64>
 800b170:	3301      	adds	r3, #1
 800b172:	f841 3c08 	str.w	r3, [r1, #-8]
 800b176:	e7f6      	b.n	800b166 <_EnlargeBlocks+0x52>
 800b178:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b17c:	2600      	movs	r6, #0
 800b17e:	605e      	str	r6, [r3, #4]
 800b180:	6863      	ldr	r3, [r4, #4]
 800b182:	6262      	str	r2, [r4, #36]	; 0x24
 800b184:	1a9b      	subs	r3, r3, r2
 800b186:	442b      	add	r3, r5
 800b188:	6063      	str	r3, [r4, #4]
 800b18a:	6125      	str	r5, [r4, #16]
 800b18c:	4638      	mov	r0, r7
 800b18e:	b13f      	cbz	r7, 800b1a0 <_EnlargeBlocks+0x8c>
 800b190:	f7ff ffa8 	bl	800b0e4 <GUI_ALLOC_Free>
 800b194:	4630      	mov	r0, r6
 800b196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b19a:	2001      	movs	r0, #1
 800b19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a4:	200194d8 	.word	0x200194d8
 800b1a8:	20019278 	.word	0x20019278

0800b1ac <_InitOnce>:
 800b1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ae:	4e58      	ldr	r6, [pc, #352]	; (800b310 <_InitOnce+0x164>)
 800b1b0:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800b1b4:	2900      	cmp	r1, #0
 800b1b6:	f040 80aa 	bne.w	800b30e <_InitOnce+0x162>
 800b1ba:	4d56      	ldr	r5, [pc, #344]	; (800b314 <_InitOnce+0x168>)
 800b1bc:	686a      	ldr	r2, [r5, #4]
 800b1be:	2301      	movs	r3, #1
 800b1c0:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 800b1c4:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800b1c8:	bf28      	it	cs
 800b1ca:	f44f 5220 	movcs.w	r2, #10240	; 0x2800
 800b1ce:	682b      	ldr	r3, [r5, #0]
 800b1d0:	0894      	lsrs	r4, r2, #2
 800b1d2:	2000      	movs	r0, #0
 800b1d4:	42a0      	cmp	r0, r4
 800b1d6:	d00c      	beq.n	800b1f2 <_InitOnce+0x46>
 800b1d8:	1847      	adds	r7, r0, r1
 800b1da:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800b1de:	fbb7 fefe 	udiv	lr, r7, lr
 800b1e2:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800b1e6:	ebce 0707 	rsb	r7, lr, r7
 800b1ea:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 800b1ee:	3001      	adds	r0, #1
 800b1f0:	e7f0      	b.n	800b1d4 <_InitOnce+0x28>
 800b1f2:	2000      	movs	r0, #0
 800b1f4:	42a0      	cmp	r0, r4
 800b1f6:	d016      	beq.n	800b226 <_InitOnce+0x7a>
 800b1f8:	1847      	adds	r7, r0, r1
 800b1fa:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800b1fe:	fbb7 fefe 	udiv	lr, r7, lr
 800b202:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800b206:	ebce 0e07 	rsb	lr, lr, r7
 800b20a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800b20e:	4577      	cmp	r7, lr
 800b210:	d007      	beq.n	800b222 <_InitOnce+0x76>
 800b212:	68aa      	ldr	r2, [r5, #8]
 800b214:	4b3f      	ldr	r3, [pc, #252]	; (800b314 <_InitOnce+0x168>)
 800b216:	2a00      	cmp	r2, #0
 800b218:	d155      	bne.n	800b2c6 <_InitOnce+0x11a>
 800b21a:	685a      	ldr	r2, [r3, #4]
 800b21c:	0892      	lsrs	r2, r2, #2
 800b21e:	609a      	str	r2, [r3, #8]
 800b220:	e051      	b.n	800b2c6 <_InitOnce+0x11a>
 800b222:	3001      	adds	r0, #1
 800b224:	e7e6      	b.n	800b1f4 <_InitOnce+0x48>
 800b226:	3101      	adds	r1, #1
 800b228:	2902      	cmp	r1, #2
 800b22a:	d1d2      	bne.n	800b1d2 <_InitOnce+0x26>
 800b22c:	0854      	lsrs	r4, r2, #1
 800b22e:	2100      	movs	r1, #0
 800b230:	2000      	movs	r0, #0
 800b232:	42a0      	cmp	r0, r4
 800b234:	d00c      	beq.n	800b250 <_InitOnce+0xa4>
 800b236:	1847      	adds	r7, r0, r1
 800b238:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800b23c:	fbb7 fefe 	udiv	lr, r7, lr
 800b240:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800b244:	ebce 0707 	rsb	r7, lr, r7
 800b248:	f823 7010 	strh.w	r7, [r3, r0, lsl #1]
 800b24c:	3001      	adds	r0, #1
 800b24e:	e7f0      	b.n	800b232 <_InitOnce+0x86>
 800b250:	2000      	movs	r0, #0
 800b252:	42a0      	cmp	r0, r4
 800b254:	d00f      	beq.n	800b276 <_InitOnce+0xca>
 800b256:	1847      	adds	r7, r0, r1
 800b258:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800b25c:	fbb7 fefe 	udiv	lr, r7, lr
 800b260:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800b264:	ebce 0707 	rsb	r7, lr, r7
 800b268:	f833 c010 	ldrh.w	ip, [r3, r0, lsl #1]
 800b26c:	b2bf      	uxth	r7, r7
 800b26e:	45bc      	cmp	ip, r7
 800b270:	d1cf      	bne.n	800b212 <_InitOnce+0x66>
 800b272:	3001      	adds	r0, #1
 800b274:	e7ed      	b.n	800b252 <_InitOnce+0xa6>
 800b276:	3101      	adds	r1, #1
 800b278:	2902      	cmp	r1, #2
 800b27a:	d1d9      	bne.n	800b230 <_InitOnce+0x84>
 800b27c:	2100      	movs	r1, #0
 800b27e:	2000      	movs	r0, #0
 800b280:	4290      	cmp	r0, r2
 800b282:	d007      	beq.n	800b294 <_InitOnce+0xe8>
 800b284:	1844      	adds	r4, r0, r1
 800b286:	27ff      	movs	r7, #255	; 0xff
 800b288:	fbb4 f7f7 	udiv	r7, r4, r7
 800b28c:	443c      	add	r4, r7
 800b28e:	541c      	strb	r4, [r3, r0]
 800b290:	3001      	adds	r0, #1
 800b292:	e7f5      	b.n	800b280 <_InitOnce+0xd4>
 800b294:	2000      	movs	r0, #0
 800b296:	4290      	cmp	r0, r2
 800b298:	d00b      	beq.n	800b2b2 <_InitOnce+0x106>
 800b29a:	1844      	adds	r4, r0, r1
 800b29c:	27ff      	movs	r7, #255	; 0xff
 800b29e:	fbb4 f7f7 	udiv	r7, r4, r7
 800b2a2:	443c      	add	r4, r7
 800b2a4:	5c1f      	ldrb	r7, [r3, r0]
 800b2a6:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 800b2aa:	42a7      	cmp	r7, r4
 800b2ac:	d1b1      	bne.n	800b212 <_InitOnce+0x66>
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	e7f1      	b.n	800b296 <_InitOnce+0xea>
 800b2b2:	3101      	adds	r1, #1
 800b2b4:	2902      	cmp	r1, #2
 800b2b6:	d1e2      	bne.n	800b27e <_InitOnce+0xd2>
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	4291      	cmp	r1, r2
 800b2bc:	d0a9      	beq.n	800b212 <_InitOnce+0x66>
 800b2be:	2000      	movs	r0, #0
 800b2c0:	5458      	strb	r0, [r3, r1]
 800b2c2:	3101      	adds	r1, #1
 800b2c4:	e7f9      	b.n	800b2ba <_InitOnce+0x10e>
 800b2c6:	4814      	ldr	r0, [pc, #80]	; (800b318 <_InitOnce+0x16c>)
 800b2c8:	4b14      	ldr	r3, [pc, #80]	; (800b31c <_InitOnce+0x170>)
 800b2ca:	6003      	str	r3, [r0, #0]
 800b2cc:	f7ff f84a 	bl	800a364 <GUI__RegisterExit>
 800b2d0:	235a      	movs	r3, #90	; 0x5a
 800b2d2:	6233      	str	r3, [r6, #32]
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	2110      	movs	r1, #16
 800b2d8:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800b2dc:	4099      	lsls	r1, r3
 800b2de:	3301      	adds	r3, #1
 800b2e0:	2b10      	cmp	r3, #16
 800b2e2:	4c0b      	ldr	r4, [pc, #44]	; (800b310 <_InitOnce+0x164>)
 800b2e4:	6411      	str	r1, [r2, #64]	; 0x40
 800b2e6:	d1f6      	bne.n	800b2d6 <_InitOnce+0x12a>
 800b2e8:	6868      	ldr	r0, [r5, #4]
 800b2ea:	6829      	ldr	r1, [r5, #0]
 800b2ec:	63a1      	str	r1, [r4, #56]	; 0x38
 800b2ee:	2302      	movs	r3, #2
 800b2f0:	6123      	str	r3, [r4, #16]
 800b2f2:	f1a0 0314 	sub.w	r3, r0, #20
 800b2f6:	440b      	add	r3, r1
 800b2f8:	2501      	movs	r5, #1
 800b2fa:	6363      	str	r3, [r4, #52]	; 0x34
 800b2fc:	60e0      	str	r0, [r4, #12]
 800b2fe:	605d      	str	r5, [r3, #4]
 800b300:	6265      	str	r5, [r4, #36]	; 0x24
 800b302:	6065      	str	r5, [r4, #4]
 800b304:	f7ff fe0e 	bl	800af24 <_AddFreeMemory>
 800b308:	f7ff ff04 	bl	800b114 <_EnlargeBlocks>
 800b30c:	6325      	str	r5, [r4, #48]	; 0x30
 800b30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b310:	200194d8 	.word	0x200194d8
 800b314:	20019278 	.word	0x20019278
 800b318:	20019284 	.word	0x20019284
 800b31c:	0800aead 	.word	0x0800aead

0800b320 <GUI_ALLOC_GetFixedBlock>:
 800b320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b324:	4605      	mov	r5, r0
 800b326:	4e26      	ldr	r6, [pc, #152]	; (800b3c0 <GUI_ALLOC_GetFixedBlock+0xa0>)
 800b328:	3503      	adds	r5, #3
 800b32a:	f7ff ff3f 	bl	800b1ac <_InitOnce>
 800b32e:	f025 0503 	bic.w	r5, r5, #3
 800b332:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800b334:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800b336:	3504      	adds	r5, #4
 800b338:	429d      	cmp	r5, r3
 800b33a:	bf38      	it	cc
 800b33c:	461d      	movcc	r5, r3
 800b33e:	4614      	mov	r4, r2
 800b340:	b12c      	cbz	r4, 800b34e <GUI_ALLOC_GetFixedBlock+0x2e>
 800b342:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b346:	42ab      	cmp	r3, r5
 800b348:	d02c      	beq.n	800b3a4 <GUI_ALLOC_GetFixedBlock+0x84>
 800b34a:	6824      	ldr	r4, [r4, #0]
 800b34c:	e7f8      	b.n	800b340 <GUI_ALLOC_GetFixedBlock+0x20>
 800b34e:	68f3      	ldr	r3, [r6, #12]
 800b350:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800b352:	eb02 0803 	add.w	r8, r2, r3
 800b356:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800b35a:	ebc7 0708 	rsb	r7, r7, r8
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	b133      	cbz	r3, 800b370 <GUI_ALLOC_GetFixedBlock+0x50>
 800b362:	4620      	mov	r0, r4
 800b364:	f7ff fe2e 	bl	800afc4 <_RemoveHoles>
 800b368:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800b36c:	ebc7 0708 	rsb	r7, r7, r8
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	bb13      	cbnz	r3, 800b3ba <GUI_ALLOC_GetFixedBlock+0x9a>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	42ab      	cmp	r3, r5
 800b378:	db1f      	blt.n	800b3ba <GUI_ALLOC_GetFixedBlock+0x9a>
 800b37a:	4638      	mov	r0, r7
 800b37c:	1d1c      	adds	r4, r3, #4
 800b37e:	f7ff fdb1 	bl	800aee4 <_RemoveFreeBlock>
 800b382:	68f3      	ldr	r3, [r6, #12]
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	1b5b      	subs	r3, r3, r5
 800b388:	60f3      	str	r3, [r6, #12]
 800b38a:	6973      	ldr	r3, [r6, #20]
 800b38c:	1b64      	subs	r4, r4, r5
 800b38e:	442b      	add	r3, r5
 800b390:	1b40      	subs	r0, r0, r5
 800b392:	443c      	add	r4, r7
 800b394:	6173      	str	r3, [r6, #20]
 800b396:	d002      	beq.n	800b39e <GUI_ALLOC_GetFixedBlock+0x7e>
 800b398:	4639      	mov	r1, r7
 800b39a:	f7ff fdc3 	bl	800af24 <_AddFreeMemory>
 800b39e:	f844 5c04 	str.w	r5, [r4, #-4]
 800b3a2:	e00a      	b.n	800b3ba <GUI_ALLOC_GetFixedBlock+0x9a>
 800b3a4:	6823      	ldr	r3, [r4, #0]
 800b3a6:	b10b      	cbz	r3, 800b3ac <GUI_ALLOC_GetFixedBlock+0x8c>
 800b3a8:	6861      	ldr	r1, [r4, #4]
 800b3aa:	6059      	str	r1, [r3, #4]
 800b3ac:	6861      	ldr	r1, [r4, #4]
 800b3ae:	b101      	cbz	r1, 800b3b2 <GUI_ALLOC_GetFixedBlock+0x92>
 800b3b0:	600b      	str	r3, [r1, #0]
 800b3b2:	42a2      	cmp	r2, r4
 800b3b4:	d101      	bne.n	800b3ba <GUI_ALLOC_GetFixedBlock+0x9a>
 800b3b6:	6823      	ldr	r3, [r4, #0]
 800b3b8:	63f3      	str	r3, [r6, #60]	; 0x3c
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c0:	200194d8 	.word	0x200194d8

0800b3c4 <GUI_ALLOC_GetMaxSize>:
 800b3c4:	b508      	push	{r3, lr}
 800b3c6:	f7ff fef1 	bl	800b1ac <_InitOnce>
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	4b0b      	ldr	r3, [pc, #44]	; (800b3fc <GUI_ALLOC_GetMaxSize+0x38>)
 800b3ce:	4413      	add	r3, r2
 800b3d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b3d4:	b113      	cbz	r3, 800b3dc <GUI_ALLOC_GetMaxSize+0x18>
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	2000      	movs	r0, #0
 800b3da:	e00b      	b.n	800b3f4 <GUI_ALLOC_GetMaxSize+0x30>
 800b3dc:	3a08      	subs	r2, #8
 800b3de:	f112 0f80 	cmn.w	r2, #128	; 0x80
 800b3e2:	d1f3      	bne.n	800b3cc <GUI_ALLOC_GetMaxSize+0x8>
 800b3e4:	e7f8      	b.n	800b3d8 <GUI_ALLOC_GetMaxSize+0x14>
 800b3e6:	685a      	ldr	r2, [r3, #4]
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	4290      	cmp	r0, r2
 800b3ec:	bf38      	it	cc
 800b3ee:	4610      	movcc	r0, r2
 800b3f0:	b113      	cbz	r3, 800b3f8 <GUI_ALLOC_GetMaxSize+0x34>
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d1f6      	bne.n	800b3e6 <GUI_ALLOC_GetMaxSize+0x22>
 800b3f8:	380c      	subs	r0, #12
 800b3fa:	bd08      	pop	{r3, pc}
 800b3fc:	200194d8 	.word	0x200194d8

0800b400 <GUI_ALLOC_RequestSize>:
 800b400:	b508      	push	{r3, lr}
 800b402:	f7ff ffdf 	bl	800b3c4 <GUI_ALLOC_GetMaxSize>
 800b406:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800b40a:	f04f 0364 	mov.w	r3, #100	; 0x64
 800b40e:	4a06      	ldr	r2, [pc, #24]	; (800b428 <GUI_ALLOC_RequestSize+0x28>)
 800b410:	d904      	bls.n	800b41c <GUI_ALLOC_RequestSize+0x1c>
 800b412:	fb90 f0f3 	sdiv	r0, r0, r3
 800b416:	6a13      	ldr	r3, [r2, #32]
 800b418:	4358      	muls	r0, r3
 800b41a:	bd08      	pop	{r3, pc}
 800b41c:	6a12      	ldr	r2, [r2, #32]
 800b41e:	4350      	muls	r0, r2
 800b420:	fbb0 f0f3 	udiv	r0, r0, r3
 800b424:	bd08      	pop	{r3, pc}
 800b426:	bf00      	nop
 800b428:	200194d8 	.word	0x200194d8

0800b42c <_Alloc>:
 800b42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b430:	4d38      	ldr	r5, [pc, #224]	; (800b514 <_Alloc+0xe8>)
 800b432:	4604      	mov	r4, r0
 800b434:	f7ff feba 	bl	800b1ac <_InitOnce>
 800b438:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 800b43a:	682b      	ldr	r3, [r5, #0]
 800b43c:	42bc      	cmp	r4, r7
 800b43e:	bf24      	itt	cs
 800b440:	1ce7      	addcs	r7, r4, #3
 800b442:	f027 0703 	biccs.w	r7, r7, #3
 800b446:	370c      	adds	r7, #12
 800b448:	429f      	cmp	r7, r3
 800b44a:	4c32      	ldr	r4, [pc, #200]	; (800b514 <_Alloc+0xe8>)
 800b44c:	d83e      	bhi.n	800b4cc <_Alloc+0xa0>
 800b44e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b450:	6862      	ldr	r2, [r4, #4]
 800b452:	429a      	cmp	r2, r3
 800b454:	d90f      	bls.n	800b476 <_Alloc+0x4a>
 800b456:	686b      	ldr	r3, [r5, #4]
 800b458:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800b45a:	3b01      	subs	r3, #1
 800b45c:	606b      	str	r3, [r5, #4]
 800b45e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b460:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800b464:	eb03 0209 	add.w	r2, r3, r9
 800b468:	6852      	ldr	r2, [r2, #4]
 800b46a:	626a      	str	r2, [r5, #36]	; 0x24
 800b46c:	2201      	movs	r2, #1
 800b46e:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 800b472:	b956      	cbnz	r6, 800b48a <_Alloc+0x5e>
 800b474:	e02a      	b.n	800b4cc <_Alloc+0xa0>
 800b476:	3b01      	subs	r3, #1
 800b478:	6323      	str	r3, [r4, #48]	; 0x30
 800b47a:	f7ff fe4b 	bl	800b114 <_EnlargeBlocks>
 800b47e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b480:	3301      	adds	r3, #1
 800b482:	6323      	str	r3, [r4, #48]	; 0x30
 800b484:	2800      	cmp	r0, #0
 800b486:	d0e6      	beq.n	800b456 <_Alloc+0x2a>
 800b488:	e020      	b.n	800b4cc <_Alloc+0xa0>
 800b48a:	230f      	movs	r3, #15
 800b48c:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800b490:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b492:	4297      	cmp	r7, r2
 800b494:	d20c      	bcs.n	800b4b0 <_Alloc+0x84>
 800b496:	f113 33ff 	adds.w	r3, r3, #4294967295
 800b49a:	d2f7      	bcs.n	800b48c <_Alloc+0x60>
 800b49c:	e008      	b.n	800b4b0 <_Alloc+0x84>
 800b49e:	6894      	ldr	r4, [r2, #8]
 800b4a0:	b12c      	cbz	r4, 800b4ae <_Alloc+0x82>
 800b4a2:	6862      	ldr	r2, [r4, #4]
 800b4a4:	4297      	cmp	r7, r2
 800b4a6:	d914      	bls.n	800b4d2 <_Alloc+0xa6>
 800b4a8:	68a2      	ldr	r2, [r4, #8]
 800b4aa:	2a00      	cmp	r2, #0
 800b4ac:	d1f7      	bne.n	800b49e <_Alloc+0x72>
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	2b0f      	cmp	r3, #15
 800b4b2:	d803      	bhi.n	800b4bc <_Alloc+0x90>
 800b4b4:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800b4b8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b4ba:	e7f6      	b.n	800b4aa <_Alloc+0x7e>
 800b4bc:	4638      	mov	r0, r7
 800b4be:	f7ff fd81 	bl	800afc4 <_RemoveHoles>
 800b4c2:	2800      	cmp	r0, #0
 800b4c4:	d0e1      	beq.n	800b48a <_Alloc+0x5e>
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	f7ff fcde 	bl	800ae88 <_PushFreeBlock>
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4d2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800b4d6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800b4d8:	ebc7 0208 	rsb	r2, r7, r8
 800b4dc:	330c      	adds	r3, #12
 800b4de:	4620      	mov	r0, r4
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	bf38      	it	cc
 800b4e4:	4647      	movcc	r7, r8
 800b4e6:	f7ff fcfd 	bl	800aee4 <_RemoveFreeBlock>
 800b4ea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b4ec:	444b      	add	r3, r9
 800b4ee:	19e1      	adds	r1, r4, r7
 800b4f0:	605c      	str	r4, [r3, #4]
 800b4f2:	45b8      	cmp	r8, r7
 800b4f4:	f04f 0300 	mov.w	r3, #0
 800b4f8:	e884 00c0 	stmia.w	r4, {r6, r7}
 800b4fc:	60a3      	str	r3, [r4, #8]
 800b4fe:	6124      	str	r4, [r4, #16]
 800b500:	f841 7c04 	str.w	r7, [r1, #-4]
 800b504:	dd03      	ble.n	800b50e <_Alloc+0xe2>
 800b506:	ebc7 0008 	rsb	r0, r7, r8
 800b50a:	f7ff fd0b 	bl	800af24 <_AddFreeMemory>
 800b50e:	4630      	mov	r0, r6
 800b510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b514:	200194d8 	.word	0x200194d8

0800b518 <GUI_ALLOC_AllocNoInit>:
 800b518:	b108      	cbz	r0, 800b51e <GUI_ALLOC_AllocNoInit+0x6>
 800b51a:	f7ff bf87 	b.w	800b42c <_Alloc>
 800b51e:	4770      	bx	lr

0800b520 <GUI_ALLOC_AllocZero>:
 800b520:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b522:	4605      	mov	r5, r0
 800b524:	f7ff fff8 	bl	800b518 <GUI_ALLOC_AllocNoInit>
 800b528:	4606      	mov	r6, r0
 800b52a:	b158      	cbz	r0, 800b544 <GUI_ALLOC_AllocZero+0x24>
 800b52c:	f7ff fdac 	bl	800b088 <GUI_ALLOC_LockH>
 800b530:	ac02      	add	r4, sp, #8
 800b532:	2100      	movs	r1, #0
 800b534:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b538:	462a      	mov	r2, r5
 800b53a:	f7fd fb45 	bl	8008bc8 <GUI__memset>
 800b53e:	4620      	mov	r0, r4
 800b540:	f7ff fdb0 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800b544:	4630      	mov	r0, r6
 800b546:	b002      	add	sp, #8
 800b548:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b54c <LCD_Index2Color_M565>:
 800b54c:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 800b550:	4b06      	ldr	r3, [pc, #24]	; (800b56c <LCD_Index2Color_M565+0x20>)
 800b552:	f000 021f 	and.w	r2, r0, #31
 800b556:	f3c0 1045 	ubfx	r0, r0, #5, #6
 800b55a:	5c9a      	ldrb	r2, [r3, r2]
 800b55c:	5c5b      	ldrb	r3, [r3, r1]
 800b55e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800b562:	4a03      	ldr	r2, [pc, #12]	; (800b570 <LCD_Index2Color_M565+0x24>)
 800b564:	5c10      	ldrb	r0, [r2, r0]
 800b566:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 800b56a:	4770      	bx	lr
 800b56c:	08013098 	.word	0x08013098
 800b570:	08013058 	.word	0x08013058

0800b574 <_Color2Index_M565>:
 800b574:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800b578:	4b06      	ldr	r3, [pc, #24]	; (800b594 <_Color2Index_M565+0x20>)
 800b57a:	b2c2      	uxtb	r2, r0
 800b57c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800b580:	5c9a      	ldrb	r2, [r3, r2]
 800b582:	5c5b      	ldrb	r3, [r3, r1]
 800b584:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 800b588:	4a03      	ldr	r2, [pc, #12]	; (800b598 <_Color2Index_M565+0x24>)
 800b58a:	5c10      	ldrb	r0, [r2, r0]
 800b58c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	080131b8 	.word	0x080131b8
 800b598:	080130b8 	.word	0x080130b8

0800b59c <_GetIndexMask_M565>:
 800b59c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b5a0:	4770      	bx	lr
	...

0800b5a4 <_Color2IndexBulk>:
 800b5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a6:	4f0f      	ldr	r7, [pc, #60]	; (800b5e4 <_Color2IndexBulk+0x40>)
 800b5a8:	683f      	ldr	r7, [r7, #0]
 800b5aa:	4606      	mov	r6, r0
 800b5ac:	460d      	mov	r5, r1
 800b5ae:	4614      	mov	r4, r2
 800b5b0:	469c      	mov	ip, r3
 800b5b2:	b10f      	cbz	r7, 800b5b8 <_Color2IndexBulk+0x14>
 800b5b4:	47b8      	blx	r7
 800b5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5b8:	f856 2b04 	ldr.w	r2, [r6], #4
 800b5bc:	490a      	ldr	r1, [pc, #40]	; (800b5e8 <_Color2IndexBulk+0x44>)
 800b5be:	b2d3      	uxtb	r3, r2
 800b5c0:	3c01      	subs	r4, #1
 800b5c2:	5cc8      	ldrb	r0, [r1, r3]
 800b5c4:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800b5c8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800b5cc:	5ccb      	ldrb	r3, [r1, r3]
 800b5ce:	4907      	ldr	r1, [pc, #28]	; (800b5ec <_Color2IndexBulk+0x48>)
 800b5d0:	5c8a      	ldrb	r2, [r1, r2]
 800b5d2:	eb03 23c0 	add.w	r3, r3, r0, lsl #11
 800b5d6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800b5da:	802b      	strh	r3, [r5, #0]
 800b5dc:	4465      	add	r5, ip
 800b5de:	d1eb      	bne.n	800b5b8 <_Color2IndexBulk+0x14>
 800b5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	20019290 	.word	0x20019290
 800b5e8:	080131b8 	.word	0x080131b8
 800b5ec:	080130b8 	.word	0x080130b8

0800b5f0 <_Index2ColorBulk>:
 800b5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5f2:	4e13      	ldr	r6, [pc, #76]	; (800b640 <_Index2ColorBulk+0x50>)
 800b5f4:	6836      	ldr	r6, [r6, #0]
 800b5f6:	4684      	mov	ip, r0
 800b5f8:	4614      	mov	r4, r2
 800b5fa:	461d      	mov	r5, r3
 800b5fc:	b10e      	cbz	r6, 800b602 <_Index2ColorBulk+0x12>
 800b5fe:	47b0      	blx	r6
 800b600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b602:	1e50      	subs	r0, r2, #1
 800b604:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800b608:	3a01      	subs	r2, #1
 800b60a:	fb03 c000 	mla	r0, r3, r0, ip
 800b60e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b612:	8802      	ldrh	r2, [r0, #0]
 800b614:	4b0b      	ldr	r3, [pc, #44]	; (800b644 <_Index2ColorBulk+0x54>)
 800b616:	f002 061f 	and.w	r6, r2, #31
 800b61a:	0ad7      	lsrs	r7, r2, #11
 800b61c:	5d9e      	ldrb	r6, [r3, r6]
 800b61e:	5ddb      	ldrb	r3, [r3, r7]
 800b620:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800b624:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 800b628:	4e07      	ldr	r6, [pc, #28]	; (800b648 <_Index2ColorBulk+0x58>)
 800b62a:	5cb2      	ldrb	r2, [r6, r2]
 800b62c:	3c01      	subs	r4, #1
 800b62e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b632:	f841 3904 	str.w	r3, [r1], #-4
 800b636:	ebc5 0000 	rsb	r0, r5, r0
 800b63a:	d1ea      	bne.n	800b612 <_Index2ColorBulk+0x22>
 800b63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b63e:	bf00      	nop
 800b640:	2001928c 	.word	0x2001928c
 800b644:	08013098 	.word	0x08013098
 800b648:	08013058 	.word	0x08013058

0800b64c <LCD_Index2Color_888>:
 800b64c:	4770      	bx	lr

0800b64e <LCD_Index2Color_8888>:
 800b64e:	4770      	bx	lr

0800b650 <_Color2Index_8888>:
 800b650:	4770      	bx	lr

0800b652 <_GetIndexMask_8888>:
 800b652:	f04f 30ff 	mov.w	r0, #4294967295
 800b656:	4770      	bx	lr

0800b658 <_Color2IndexBulk>:
 800b658:	b510      	push	{r4, lr}
 800b65a:	f850 4b04 	ldr.w	r4, [r0], #4
 800b65e:	600c      	str	r4, [r1, #0]
 800b660:	3a01      	subs	r2, #1
 800b662:	4419      	add	r1, r3
 800b664:	d1f9      	bne.n	800b65a <_Color2IndexBulk+0x2>
 800b666:	bd10      	pop	{r4, pc}

0800b668 <_Index2ColorBulk>:
 800b668:	b510      	push	{r4, lr}
 800b66a:	6804      	ldr	r4, [r0, #0]
 800b66c:	f841 4b04 	str.w	r4, [r1], #4
 800b670:	3a01      	subs	r2, #1
 800b672:	4418      	add	r0, r3
 800b674:	d1f9      	bne.n	800b66a <_Index2ColorBulk+0x2>
 800b676:	bd10      	pop	{r4, pc}

0800b678 <WM__SendMessageNoPara>:
 800b678:	b530      	push	{r4, r5, lr}
 800b67a:	b085      	sub	sp, #20
 800b67c:	4604      	mov	r4, r0
 800b67e:	2210      	movs	r2, #16
 800b680:	460d      	mov	r5, r1
 800b682:	4668      	mov	r0, sp
 800b684:	2100      	movs	r1, #0
 800b686:	f002 fa6f 	bl	800db68 <memset>
 800b68a:	4620      	mov	r0, r4
 800b68c:	f7ff fcf2 	bl	800b074 <GUI_ALLOC_h2p>
 800b690:	6903      	ldr	r3, [r0, #16]
 800b692:	b11b      	cbz	r3, 800b69c <WM__SendMessageNoPara+0x24>
 800b694:	9401      	str	r4, [sp, #4]
 800b696:	9500      	str	r5, [sp, #0]
 800b698:	4668      	mov	r0, sp
 800b69a:	4798      	blx	r3
 800b69c:	b005      	add	sp, #20
 800b69e:	bd30      	pop	{r4, r5, pc}

0800b6a0 <WM__SendMessage>:
 800b6a0:	b570      	push	{r4, r5, r6, lr}
 800b6a2:	4c0d      	ldr	r4, [pc, #52]	; (800b6d8 <WM__SendMessage+0x38>)
 800b6a4:	6823      	ldr	r3, [r4, #0]
 800b6a6:	2b13      	cmp	r3, #19
 800b6a8:	4606      	mov	r6, r0
 800b6aa:	460d      	mov	r5, r1
 800b6ac:	dc12      	bgt.n	800b6d4 <WM__SendMessage+0x34>
 800b6ae:	f7ff fce1 	bl	800b074 <GUI_ALLOC_h2p>
 800b6b2:	6903      	ldr	r3, [r0, #16]
 800b6b4:	606e      	str	r6, [r5, #4]
 800b6b6:	b143      	cbz	r3, 800b6ca <WM__SendMessage+0x2a>
 800b6b8:	6822      	ldr	r2, [r4, #0]
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	3201      	adds	r2, #1
 800b6be:	6022      	str	r2, [r4, #0]
 800b6c0:	4798      	blx	r3
 800b6c2:	6823      	ldr	r3, [r4, #0]
 800b6c4:	3b01      	subs	r3, #1
 800b6c6:	6023      	str	r3, [r4, #0]
 800b6c8:	bd70      	pop	{r4, r5, r6, pc}
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b6d0:	f7fa bbb8 	b.w	8005e44 <WM_DefaultProc>
 800b6d4:	bd70      	pop	{r4, r5, r6, pc}
 800b6d6:	bf00      	nop
 800b6d8:	20019294 	.word	0x20019294

0800b6dc <WM__GetPrevSibling>:
 800b6dc:	b538      	push	{r3, r4, r5, lr}
 800b6de:	4605      	mov	r5, r0
 800b6e0:	f000 f80f 	bl	800b702 <WM__GetFirstSibling>
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	b154      	cbz	r4, 800b6fe <WM__GetPrevSibling+0x22>
 800b6e8:	42ac      	cmp	r4, r5
 800b6ea:	d007      	beq.n	800b6fc <WM__GetPrevSibling+0x20>
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	f7ff fcc1 	bl	800b074 <GUI_ALLOC_h2p>
 800b6f2:	6a03      	ldr	r3, [r0, #32]
 800b6f4:	42ab      	cmp	r3, r5
 800b6f6:	d002      	beq.n	800b6fe <WM__GetPrevSibling+0x22>
 800b6f8:	461c      	mov	r4, r3
 800b6fa:	e7f4      	b.n	800b6e6 <WM__GetPrevSibling+0xa>
 800b6fc:	2400      	movs	r4, #0
 800b6fe:	4620      	mov	r0, r4
 800b700:	bd38      	pop	{r3, r4, r5, pc}

0800b702 <WM__GetFirstSibling>:
 800b702:	b508      	push	{r3, lr}
 800b704:	f7f9 fabc 	bl	8004c80 <WM_GetParent>
 800b708:	b118      	cbz	r0, 800b712 <WM__GetFirstSibling+0x10>
 800b70a:	f7ff fcb3 	bl	800b074 <GUI_ALLOC_h2p>
 800b70e:	69c0      	ldr	r0, [r0, #28]
 800b710:	bd08      	pop	{r3, pc}
 800b712:	bd08      	pop	{r3, pc}

0800b714 <WM_SetSize>:
 800b714:	e92d 41e7 	stmdb	sp!, {r0, r1, r2, r5, r6, r7, r8, lr}
 800b718:	460e      	mov	r6, r1
 800b71a:	4690      	mov	r8, r2
 800b71c:	4607      	mov	r7, r0
 800b71e:	b1d0      	cbz	r0, 800b756 <WM_SetSize+0x42>
 800b720:	f7ff fcb2 	bl	800b088 <GUI_ALLOC_LockH>
 800b724:	4603      	mov	r3, r0
 800b726:	a802      	add	r0, sp, #8
 800b728:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800b72c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b730:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 800b734:	f840 3d04 	str.w	r3, [r0, #-4]!
 800b738:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b73c:	1a8a      	subs	r2, r1, r2
 800b73e:	1aed      	subs	r5, r5, r3
 800b740:	43d2      	mvns	r2, r2
 800b742:	43ed      	mvns	r5, r5
 800b744:	4416      	add	r6, r2
 800b746:	4445      	add	r5, r8
 800b748:	f7ff fcac 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800b74c:	4638      	mov	r0, r7
 800b74e:	4631      	mov	r1, r6
 800b750:	462a      	mov	r2, r5
 800b752:	f7f9 f984 	bl	8004a5e <WM_ResizeWindow>
 800b756:	b003      	add	sp, #12
 800b758:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}

0800b75c <WM_SendToParent>:
 800b75c:	b538      	push	{r3, r4, r5, lr}
 800b75e:	4605      	mov	r5, r0
 800b760:	460c      	mov	r4, r1
 800b762:	b141      	cbz	r1, 800b776 <WM_SendToParent+0x1a>
 800b764:	f7f9 fa8c 	bl	8004c80 <WM_GetParent>
 800b768:	b128      	cbz	r0, 800b776 <WM_SendToParent+0x1a>
 800b76a:	60a5      	str	r5, [r4, #8]
 800b76c:	4621      	mov	r1, r4
 800b76e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b772:	f7ff bf95 	b.w	800b6a0 <WM__SendMessage>
 800b776:	bd38      	pop	{r3, r4, r5, pc}

0800b778 <WM_OnKey>:
 800b778:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b77a:	4a0a      	ldr	r2, [pc, #40]	; (800b7a4 <WM_OnKey+0x2c>)
 800b77c:	4603      	mov	r3, r0
 800b77e:	6810      	ldr	r0, [r2, #0]
 800b780:	4a09      	ldr	r2, [pc, #36]	; (800b7a8 <WM_OnKey+0x30>)
 800b782:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800b786:	b148      	cbz	r0, 800b79c <WM_OnKey+0x24>
 800b788:	9300      	str	r3, [sp, #0]
 800b78a:	230e      	movs	r3, #14
 800b78c:	9101      	str	r1, [sp, #4]
 800b78e:	9302      	str	r3, [sp, #8]
 800b790:	a902      	add	r1, sp, #8
 800b792:	ab00      	add	r3, sp, #0
 800b794:	9305      	str	r3, [sp, #20]
 800b796:	f7ff ff83 	bl	800b6a0 <WM__SendMessage>
 800b79a:	2001      	movs	r0, #1
 800b79c:	b007      	add	sp, #28
 800b79e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b7a2:	bf00      	nop
 800b7a4:	2001946c 	.word	0x2001946c
 800b7a8:	2001945c 	.word	0x2001945c

0800b7ac <WM_GetWindowOrgX>:
 800b7ac:	b508      	push	{r3, lr}
 800b7ae:	b120      	cbz	r0, 800b7ba <WM_GetWindowOrgX+0xe>
 800b7b0:	f7ff fc60 	bl	800b074 <GUI_ALLOC_h2p>
 800b7b4:	f9b0 0000 	ldrsh.w	r0, [r0]
 800b7b8:	bd08      	pop	{r3, pc}
 800b7ba:	bd08      	pop	{r3, pc}

0800b7bc <WM__AddCriticalHandle>:
 800b7bc:	4b02      	ldr	r3, [pc, #8]	; (800b7c8 <WM__AddCriticalHandle+0xc>)
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	6002      	str	r2, [r0, #0]
 800b7c2:	6018      	str	r0, [r3, #0]
 800b7c4:	4770      	bx	lr
 800b7c6:	bf00      	nop
 800b7c8:	20019480 	.word	0x20019480

0800b7cc <WM_BringToBottom>:
 800b7cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	b087      	sub	sp, #28
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	d039      	beq.n	800b84c <WM_BringToBottom+0x80>
 800b7d8:	f7ff fc56 	bl	800b088 <GUI_ALLOC_LockH>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	9001      	str	r0, [sp, #4]
 800b7e0:	c803      	ldmia	r0, {r0, r1}
 800b7e2:	ad04      	add	r5, sp, #16
 800b7e4:	e885 0003 	stmia.w	r5, {r0, r1}
 800b7e8:	a801      	add	r0, sp, #4
 800b7ea:	6a1e      	ldr	r6, [r3, #32]
 800b7ec:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 800b7f0:	f7ff fc58 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	f7ff ff71 	bl	800b6dc <WM__GetPrevSibling>
 800b7fa:	4607      	mov	r7, r0
 800b7fc:	b330      	cbz	r0, 800b84c <WM_BringToBottom+0x80>
 800b7fe:	4620      	mov	r0, r4
 800b800:	f7f9 fa3e 	bl	8004c80 <WM_GetParent>
 800b804:	f019 0f02 	tst.w	r9, #2
 800b808:	4680      	mov	r8, r0
 800b80a:	d004      	beq.n	800b816 <WM_BringToBottom+0x4a>
 800b80c:	4628      	mov	r0, r5
 800b80e:	4641      	mov	r1, r8
 800b810:	4632      	mov	r2, r6
 800b812:	f7f9 fe8f 	bl	8005534 <WM__InvalidateRectEx>
 800b816:	4620      	mov	r0, r4
 800b818:	f7ff fc36 	bl	800b088 <GUI_ALLOC_LockH>
 800b81c:	9001      	str	r0, [sp, #4]
 800b81e:	4640      	mov	r0, r8
 800b820:	f7ff fc32 	bl	800b088 <GUI_ALLOC_LockH>
 800b824:	9003      	str	r0, [sp, #12]
 800b826:	4638      	mov	r0, r7
 800b828:	f7ff fc2e 	bl	800b088 <GUI_ALLOC_LockH>
 800b82c:	9b03      	ldr	r3, [sp, #12]
 800b82e:	9a01      	ldr	r2, [sp, #4]
 800b830:	69d9      	ldr	r1, [r3, #28]
 800b832:	6206      	str	r6, [r0, #32]
 800b834:	9002      	str	r0, [sp, #8]
 800b836:	6211      	str	r1, [r2, #32]
 800b838:	a801      	add	r0, sp, #4
 800b83a:	61dc      	str	r4, [r3, #28]
 800b83c:	f7ff fc32 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800b840:	a803      	add	r0, sp, #12
 800b842:	f7ff fc2f 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800b846:	a802      	add	r0, sp, #8
 800b848:	f7ff fc2c 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800b84c:	b007      	add	sp, #28
 800b84e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b852 <_Convert16>:
 800b852:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b856:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b85a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800b85e:	4605      	mov	r5, r0
 800b860:	460e      	mov	r6, r1
 800b862:	4690      	mov	r8, r2
 800b864:	461f      	mov	r7, r3
 800b866:	4614      	mov	r4, r2
 800b868:	4689      	mov	r9, r1
 800b86a:	f835 0b02 	ldrh.w	r0, [r5], #2
 800b86e:	47d8      	blx	fp
 800b870:	47d0      	blx	sl
 800b872:	3c01      	subs	r4, #1
 800b874:	f849 0b04 	str.w	r0, [r9], #4
 800b878:	d1f7      	bne.n	800b86a <_Convert16+0x18>
 800b87a:	2f1f      	cmp	r7, #31
 800b87c:	d806      	bhi.n	800b88c <_Convert16+0x3a>
 800b87e:	4630      	mov	r0, r6
 800b880:	4641      	mov	r1, r8
 800b882:	463a      	mov	r2, r7
 800b884:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b888:	f001 bd9d 	b.w	800d3c6 <GUI__CompactPixelIndices>
 800b88c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b890 <_Convert8>:
 800b890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b894:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b898:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800b89c:	4605      	mov	r5, r0
 800b89e:	460e      	mov	r6, r1
 800b8a0:	4690      	mov	r8, r2
 800b8a2:	461f      	mov	r7, r3
 800b8a4:	4689      	mov	r9, r1
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b8ac:	47d8      	blx	fp
 800b8ae:	47d0      	blx	sl
 800b8b0:	1b2b      	subs	r3, r5, r4
 800b8b2:	4443      	add	r3, r8
 800b8b4:	f849 0b04 	str.w	r0, [r9], #4
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d1f5      	bne.n	800b8a8 <_Convert8+0x18>
 800b8bc:	2f1f      	cmp	r7, #31
 800b8be:	d806      	bhi.n	800b8ce <_Convert8+0x3e>
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	4641      	mov	r1, r8
 800b8c4:	463a      	mov	r2, r7
 800b8c6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ca:	f001 bd7c 	b.w	800d3c6 <GUI__CompactPixelIndices>
 800b8ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b8d4 <GUI_MEMDEV__WriteToActiveOpaque>:
 800b8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d8:	b09d      	sub	sp, #116	; 0x74
 800b8da:	4606      	mov	r6, r0
 800b8dc:	910f      	str	r1, [sp, #60]	; 0x3c
 800b8de:	920d      	str	r2, [sp, #52]	; 0x34
 800b8e0:	2800      	cmp	r0, #0
 800b8e2:	f000 8386 	beq.w	800bff2 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800b8e6:	f7ff fbcf 	bl	800b088 <GUI_ALLOC_LockH>
 800b8ea:	ab1c      	add	r3, sp, #112	; 0x70
 800b8ec:	6944      	ldr	r4, [r0, #20]
 800b8ee:	f843 0d1c 	str.w	r0, [r3, #-28]!
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7ff fbd6 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800b8f8:	4630      	mov	r0, r6
 800b8fa:	f7fb fadf 	bl	8006ebc <GUI_MEMDEV_GetBitsPerPixel>
 800b8fe:	2808      	cmp	r0, #8
 800b900:	4601      	mov	r1, r0
 800b902:	dd02      	ble.n	800b90a <GUI_MEMDEV__WriteToActiveOpaque+0x36>
 800b904:	2c00      	cmp	r4, #0
 800b906:	f000 81c3 	beq.w	800bc90 <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 800b90a:	2201      	movs	r2, #1
 800b90c:	f04f 0800 	mov.w	r8, #0
 800b910:	4630      	mov	r0, r6
 800b912:	921b      	str	r2, [sp, #108]	; 0x6c
 800b914:	920b      	str	r2, [sp, #44]	; 0x2c
 800b916:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800b91a:	f7ff fbb5 	bl	800b088 <GUI_ALLOC_LockH>
 800b91e:	6803      	ldr	r3, [r0, #0]
 800b920:	f8df a60c 	ldr.w	sl, [pc, #1548]	; 800bf30 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 800b924:	691b      	ldr	r3, [r3, #16]
 800b926:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	930e      	str	r3, [sp, #56]	; 0x38
 800b92e:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800b932:	f8da 3000 	ldr.w	r3, [sl]
 800b936:	f84b 0d14 	str.w	r0, [fp, #-20]!
 800b93a:	6904      	ldr	r4, [r0, #16]
 800b93c:	6945      	ldr	r5, [r0, #20]
 800b93e:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800b942:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 800b946:	7c58      	ldrb	r0, [r3, #17]
 800b948:	9112      	str	r1, [sp, #72]	; 0x48
 800b94a:	f7fc fcff 	bl	800834c <GUI_GetBitsPerPixelEx>
 800b94e:	f8da 3000 	ldr.w	r3, [sl]
 800b952:	9010      	str	r0, [sp, #64]	; 0x40
 800b954:	7c58      	ldrb	r0, [r3, #17]
 800b956:	f7fc fd17 	bl	8008388 <GUI_GetpfIndex2ColorEx>
 800b95a:	4603      	mov	r3, r0
 800b95c:	4658      	mov	r0, fp
 800b95e:	9309      	str	r3, [sp, #36]	; 0x24
 800b960:	f7ff fba0 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800b964:	2c08      	cmp	r4, #8
 800b966:	4651      	mov	r1, sl
 800b968:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b96a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b96c:	d904      	bls.n	800b978 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 800b96e:	2c10      	cmp	r4, #16
 800b970:	bf8c      	ite	hi
 800b972:	2204      	movhi	r2, #4
 800b974:	2202      	movls	r2, #2
 800b976:	e005      	b.n	800b984 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800b978:	2c01      	cmp	r4, #1
 800b97a:	d103      	bne.n	800b984 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800b97c:	9411      	str	r4, [sp, #68]	; 0x44
 800b97e:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 800b982:	e000      	b.n	800b986 <GUI_MEMDEV__WriteToActiveOpaque+0xb2>
 800b984:	9211      	str	r2, [sp, #68]	; 0x44
 800b986:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b988:	4298      	cmp	r0, r3
 800b98a:	f000 80e2 	beq.w	800bb52 <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 800b98e:	680b      	ldr	r3, [r1, #0]
 800b990:	7c58      	ldrb	r0, [r3, #17]
 800b992:	f7fc fd01 	bl	8008398 <GUI_GetpfColor2IndexEx>
 800b996:	9013      	str	r0, [sp, #76]	; 0x4c
 800b998:	00b8      	lsls	r0, r7, #2
 800b99a:	f7ff fdbd 	bl	800b518 <GUI_ALLOC_AllocNoInit>
 800b99e:	900c      	str	r0, [sp, #48]	; 0x30
 800b9a0:	2800      	cmp	r0, #0
 800b9a2:	f000 8326 	beq.w	800bff2 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800b9a6:	4630      	mov	r0, r6
 800b9a8:	f7fa fc24 	bl	80061f4 <GUI_MEMDEV_GetDataPtr>
 800b9ac:	4606      	mov	r6, r0
 800b9ae:	2d00      	cmp	r5, #0
 800b9b0:	f000 80be 	beq.w	800bb30 <GUI_MEMDEV__WriteToActiveOpaque+0x25c>
 800b9b4:	4628      	mov	r0, r5
 800b9b6:	f7ff fb67 	bl	800b088 <GUI_ALLOC_LockH>
 800b9ba:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800b9be:	9018      	str	r0, [sp, #96]	; 0x60
 800b9c0:	f04f 0a00 	mov.w	sl, #0
 800b9c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b9c6:	4592      	cmp	sl, r2
 800b9c8:	f280 80ae 	bge.w	800bb28 <GUI_MEMDEV__WriteToActiveOpaque+0x254>
 800b9cc:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	9319      	str	r3, [sp, #100]	; 0x64
 800b9d2:	6883      	ldr	r3, [r0, #8]
 800b9d4:	a919      	add	r1, sp, #100	; 0x64
 800b9d6:	695b      	ldr	r3, [r3, #20]
 800b9d8:	4652      	mov	r2, sl
 800b9da:	4798      	blx	r3
 800b9dc:	42b8      	cmp	r0, r7
 800b9de:	4605      	mov	r5, r0
 800b9e0:	d12f      	bne.n	800ba42 <GUI_MEMDEV__WriteToActiveOpaque+0x16e>
 800b9e2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b9e4:	f7ff fb50 	bl	800b088 <GUI_ALLOC_LockH>
 800b9e8:	2c08      	cmp	r4, #8
 800b9ea:	4601      	mov	r1, r0
 800b9ec:	9016      	str	r0, [sp, #88]	; 0x58
 800b9ee:	d909      	bls.n	800ba04 <GUI_MEMDEV__WriteToActiveOpaque+0x130>
 800b9f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b9f4:	9200      	str	r2, [sp, #0]
 800b9f6:	9301      	str	r3, [sp, #4]
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	463a      	mov	r2, r7
 800b9fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9fe:	f7ff ff28 	bl	800b852 <_Convert16>
 800ba02:	e008      	b.n	800ba16 <GUI_MEMDEV__WriteToActiveOpaque+0x142>
 800ba04:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ba06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ba08:	9000      	str	r0, [sp, #0]
 800ba0a:	9201      	str	r2, [sp, #4]
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	463a      	mov	r2, r7
 800ba10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba12:	f7ff ff3d 	bl	800b890 <_Convert8>
 800ba16:	2301      	movs	r3, #1
 800ba18:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ba1a:	9002      	str	r0, [sp, #8]
 800ba1c:	ad1c      	add	r5, sp, #112	; 0x70
 800ba1e:	2200      	movs	r2, #0
 800ba20:	9300      	str	r3, [sp, #0]
 800ba22:	9301      	str	r3, [sp, #4]
 800ba24:	9203      	str	r2, [sp, #12]
 800ba26:	f855 2d18 	ldr.w	r2, [r5, #-24]!
 800ba2a:	9204      	str	r2, [sp, #16]
 800ba2c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ba2e:	f8cd 8014 	str.w	r8, [sp, #20]
 800ba32:	4659      	mov	r1, fp
 800ba34:	463a      	mov	r2, r7
 800ba36:	f7fc fecb 	bl	80087d0 <LCD_DrawBitmap>
 800ba3a:	4628      	mov	r0, r5
 800ba3c:	f7ff fb32 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800ba40:	e060      	b.n	800bb04 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800ba42:	2c01      	cmp	r4, #1
 800ba44:	d15c      	bne.n	800bb00 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 800ba46:	2d00      	cmp	r5, #0
 800ba48:	d05c      	beq.n	800bb04 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800ba4a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ba4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ba4e:	f8cd 900c 	str.w	r9, [sp, #12]
 800ba52:	2208      	movs	r2, #8
 800ba54:	fb90 f2f2 	sdiv	r2, r0, r2
 800ba58:	4432      	add	r2, r6
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	9204      	str	r2, [sp, #16]
 800ba5e:	f000 0207 	and.w	r2, r0, #7
 800ba62:	9300      	str	r3, [sp, #0]
 800ba64:	4408      	add	r0, r1
 800ba66:	9301      	str	r3, [sp, #4]
 800ba68:	9302      	str	r3, [sp, #8]
 800ba6a:	9206      	str	r2, [sp, #24]
 800ba6c:	4659      	mov	r1, fp
 800ba6e:	462a      	mov	r2, r5
 800ba70:	f8cd 8014 	str.w	r8, [sp, #20]
 800ba74:	f7fc fdd0 	bl	8008618 <LCD__DrawBitmap_1bpp>
 800ba78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba7a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ba7c:	441d      	add	r5, r3
 800ba7e:	6883      	ldr	r3, [r0, #8]
 800ba80:	9519      	str	r5, [sp, #100]	; 0x64
 800ba82:	695b      	ldr	r3, [r3, #20]
 800ba84:	a919      	add	r1, sp, #100	; 0x64
 800ba86:	4652      	mov	r2, sl
 800ba88:	4798      	blx	r3
 800ba8a:	4605      	mov	r5, r0
 800ba8c:	e7db      	b.n	800ba46 <GUI_MEMDEV__WriteToActiveOpaque+0x172>
 800ba8e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ba90:	f7ff fafa 	bl	800b088 <GUI_ALLOC_LockH>
 800ba94:	2c08      	cmp	r4, #8
 800ba96:	4601      	mov	r1, r0
 800ba98:	9016      	str	r0, [sp, #88]	; 0x58
 800ba9a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ba9c:	d938      	bls.n	800bb10 <GUI_MEMDEV__WriteToActiveOpaque+0x23c>
 800ba9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800baa0:	9200      	str	r2, [sp, #0]
 800baa2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800baa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800baa6:	9301      	str	r3, [sp, #4]
 800baa8:	fb00 6002 	mla	r0, r0, r2, r6
 800baac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800baae:	462a      	mov	r2, r5
 800bab0:	f7ff fecf 	bl	800b852 <_Convert16>
 800bab4:	2301      	movs	r3, #1
 800bab6:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 800baba:	9810      	ldr	r0, [sp, #64]	; 0x40
 800babc:	9300      	str	r3, [sp, #0]
 800babe:	2200      	movs	r2, #0
 800bac0:	9301      	str	r3, [sp, #4]
 800bac2:	9002      	str	r0, [sp, #8]
 800bac4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bac6:	9203      	str	r2, [sp, #12]
 800bac8:	9819      	ldr	r0, [sp, #100]	; 0x64
 800baca:	f85c 2d18 	ldr.w	r2, [ip, #-24]!
 800bace:	9204      	str	r2, [sp, #16]
 800bad0:	4408      	add	r0, r1
 800bad2:	462a      	mov	r2, r5
 800bad4:	4659      	mov	r1, fp
 800bad6:	f8cd 8014 	str.w	r8, [sp, #20]
 800bada:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800bade:	f7fc fe77 	bl	80087d0 <LCD_DrawBitmap>
 800bae2:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800bae6:	4660      	mov	r0, ip
 800bae8:	f7ff fadc 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800baec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800baee:	9818      	ldr	r0, [sp, #96]	; 0x60
 800baf0:	441d      	add	r5, r3
 800baf2:	6883      	ldr	r3, [r0, #8]
 800baf4:	9519      	str	r5, [sp, #100]	; 0x64
 800baf6:	695b      	ldr	r3, [r3, #20]
 800baf8:	a919      	add	r1, sp, #100	; 0x64
 800bafa:	4652      	mov	r2, sl
 800bafc:	4798      	blx	r3
 800bafe:	4605      	mov	r5, r0
 800bb00:	2d00      	cmp	r5, #0
 800bb02:	d1c4      	bne.n	800ba8e <GUI_MEMDEV__WriteToActiveOpaque+0x1ba>
 800bb04:	444e      	add	r6, r9
 800bb06:	f10a 0a01 	add.w	sl, sl, #1
 800bb0a:	f10b 0b01 	add.w	fp, fp, #1
 800bb0e:	e759      	b.n	800b9c4 <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 800bb10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb12:	9300      	str	r3, [sp, #0]
 800bb14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb16:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bb18:	9201      	str	r2, [sp, #4]
 800bb1a:	fb00 6003 	mla	r0, r0, r3, r6
 800bb1e:	462a      	mov	r2, r5
 800bb20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb22:	f7ff feb5 	bl	800b890 <_Convert8>
 800bb26:	e7c5      	b.n	800bab4 <GUI_MEMDEV__WriteToActiveOpaque+0x1e0>
 800bb28:	a818      	add	r0, sp, #96	; 0x60
 800bb2a:	f7ff fabb 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800bb2e:	e00e      	b.n	800bb4e <GUI_MEMDEV__WriteToActiveOpaque+0x27a>
 800bb30:	2301      	movs	r3, #1
 800bb32:	9300      	str	r3, [sp, #0]
 800bb34:	9301      	str	r3, [sp, #4]
 800bb36:	9004      	str	r0, [sp, #16]
 800bb38:	9402      	str	r4, [sp, #8]
 800bb3a:	f8cd 900c 	str.w	r9, [sp, #12]
 800bb3e:	f8cd 8014 	str.w	r8, [sp, #20]
 800bb42:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800bb44:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bb46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb48:	463a      	mov	r2, r7
 800bb4a:	f7fc fe41 	bl	80087d0 <LCD_DrawBitmap>
 800bb4e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bb50:	e24d      	b.n	800bfee <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 800bb52:	4630      	mov	r0, r6
 800bb54:	f7fa fb4e 	bl	80061f4 <GUI_MEMDEV_GetDataPtr>
 800bb58:	4606      	mov	r6, r0
 800bb5a:	2d00      	cmp	r5, #0
 800bb5c:	f000 808a 	beq.w	800bc74 <GUI_MEMDEV__WriteToActiveOpaque+0x3a0>
 800bb60:	4628      	mov	r0, r5
 800bb62:	f7ff fa91 	bl	800b088 <GUI_ALLOC_LockH>
 800bb66:	2500      	movs	r5, #0
 800bb68:	9018      	str	r0, [sp, #96]	; 0x60
 800bb6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb6c:	429d      	cmp	r5, r3
 800bb6e:	da7d      	bge.n	800bc6c <GUI_MEMDEV__WriteToActiveOpaque+0x398>
 800bb70:	9818      	ldr	r0, [sp, #96]	; 0x60
 800bb72:	2300      	movs	r3, #0
 800bb74:	9319      	str	r3, [sp, #100]	; 0x64
 800bb76:	6883      	ldr	r3, [r0, #8]
 800bb78:	a919      	add	r1, sp, #100	; 0x64
 800bb7a:	695b      	ldr	r3, [r3, #20]
 800bb7c:	462a      	mov	r2, r5
 800bb7e:	4798      	blx	r3
 800bb80:	42b8      	cmp	r0, r7
 800bb82:	4682      	mov	sl, r0
 800bb84:	d124      	bne.n	800bbd0 <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 800bb86:	46aa      	mov	sl, r5
 800bb88:	9818      	ldr	r0, [sp, #96]	; 0x60
 800bb8a:	6883      	ldr	r3, [r0, #8]
 800bb8c:	f10a 0b01 	add.w	fp, sl, #1
 800bb90:	695b      	ldr	r3, [r3, #20]
 800bb92:	a919      	add	r1, sp, #100	; 0x64
 800bb94:	465a      	mov	r2, fp
 800bb96:	4798      	blx	r3
 800bb98:	42b8      	cmp	r0, r7
 800bb9a:	d101      	bne.n	800bba0 <GUI_MEMDEV__WriteToActiveOpaque+0x2cc>
 800bb9c:	46da      	mov	sl, fp
 800bb9e:	e7f3      	b.n	800bb88 <GUI_MEMDEV__WriteToActiveOpaque+0x2b4>
 800bba0:	ebc5 0b0a 	rsb	fp, r5, sl
 800bba4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bba6:	9604      	str	r6, [sp, #16]
 800bba8:	2301      	movs	r3, #1
 800bbaa:	f10b 0b01 	add.w	fp, fp, #1
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	9301      	str	r3, [sp, #4]
 800bbb2:	4429      	add	r1, r5
 800bbb4:	9402      	str	r4, [sp, #8]
 800bbb6:	f8cd 900c 	str.w	r9, [sp, #12]
 800bbba:	f8cd 8014 	str.w	r8, [sp, #20]
 800bbbe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800bbc0:	463a      	mov	r2, r7
 800bbc2:	465b      	mov	r3, fp
 800bbc4:	f7fc fe04 	bl	80087d0 <LCD_DrawBitmap>
 800bbc8:	fb09 660b 	mla	r6, r9, fp, r6
 800bbcc:	4655      	mov	r5, sl
 800bbce:	e04b      	b.n	800bc68 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800bbd0:	2c01      	cmp	r4, #1
 800bbd2:	d127      	bne.n	800bc24 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 800bbd4:	f1ba 0f00 	cmp.w	sl, #0
 800bbd8:	d022      	beq.n	800bc20 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800bbda:	9819      	ldr	r0, [sp, #100]	; 0x64
 800bbdc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bbde:	f8cd 900c 	str.w	r9, [sp, #12]
 800bbe2:	2208      	movs	r2, #8
 800bbe4:	fb90 f2f2 	sdiv	r2, r0, r2
 800bbe8:	4432      	add	r2, r6
 800bbea:	9204      	str	r2, [sp, #16]
 800bbec:	f000 0207 	and.w	r2, r0, #7
 800bbf0:	4408      	add	r0, r1
 800bbf2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bbf4:	9206      	str	r2, [sp, #24]
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	4652      	mov	r2, sl
 800bbfa:	9300      	str	r3, [sp, #0]
 800bbfc:	9301      	str	r3, [sp, #4]
 800bbfe:	9302      	str	r3, [sp, #8]
 800bc00:	4429      	add	r1, r5
 800bc02:	f8cd 8014 	str.w	r8, [sp, #20]
 800bc06:	f7fc fd07 	bl	8008618 <LCD__DrawBitmap_1bpp>
 800bc0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bc0c:	9818      	ldr	r0, [sp, #96]	; 0x60
 800bc0e:	4453      	add	r3, sl
 800bc10:	9319      	str	r3, [sp, #100]	; 0x64
 800bc12:	6883      	ldr	r3, [r0, #8]
 800bc14:	a919      	add	r1, sp, #100	; 0x64
 800bc16:	695b      	ldr	r3, [r3, #20]
 800bc18:	462a      	mov	r2, r5
 800bc1a:	4798      	blx	r3
 800bc1c:	4682      	mov	sl, r0
 800bc1e:	e7d9      	b.n	800bbd4 <GUI_MEMDEV__WriteToActiveOpaque+0x300>
 800bc20:	444e      	add	r6, r9
 800bc22:	e021      	b.n	800bc68 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800bc24:	f1ba 0f00 	cmp.w	sl, #0
 800bc28:	d0fa      	beq.n	800bc20 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800bc2a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800bc2c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bc2e:	9402      	str	r4, [sp, #8]
 800bc30:	fb00 6201 	mla	r2, r0, r1, r6
 800bc34:	9204      	str	r2, [sp, #16]
 800bc36:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bc38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bc3a:	f8cd 900c 	str.w	r9, [sp, #12]
 800bc3e:	2301      	movs	r3, #1
 800bc40:	4410      	add	r0, r2
 800bc42:	9300      	str	r3, [sp, #0]
 800bc44:	4652      	mov	r2, sl
 800bc46:	9301      	str	r3, [sp, #4]
 800bc48:	4429      	add	r1, r5
 800bc4a:	f8cd 8014 	str.w	r8, [sp, #20]
 800bc4e:	f7fc fdbf 	bl	80087d0 <LCD_DrawBitmap>
 800bc52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bc54:	9818      	ldr	r0, [sp, #96]	; 0x60
 800bc56:	4453      	add	r3, sl
 800bc58:	9319      	str	r3, [sp, #100]	; 0x64
 800bc5a:	6883      	ldr	r3, [r0, #8]
 800bc5c:	a919      	add	r1, sp, #100	; 0x64
 800bc5e:	695b      	ldr	r3, [r3, #20]
 800bc60:	462a      	mov	r2, r5
 800bc62:	4798      	blx	r3
 800bc64:	4682      	mov	sl, r0
 800bc66:	e7dd      	b.n	800bc24 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 800bc68:	3501      	adds	r5, #1
 800bc6a:	e77e      	b.n	800bb6a <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 800bc6c:	a818      	add	r0, sp, #96	; 0x60
 800bc6e:	f7ff fa19 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800bc72:	e1be      	b.n	800bff2 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800bc74:	2301      	movs	r3, #1
 800bc76:	9300      	str	r3, [sp, #0]
 800bc78:	9301      	str	r3, [sp, #4]
 800bc7a:	9004      	str	r0, [sp, #16]
 800bc7c:	9402      	str	r4, [sp, #8]
 800bc7e:	f8cd 900c 	str.w	r9, [sp, #12]
 800bc82:	f8cd 8014 	str.w	r8, [sp, #20]
 800bc86:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800bc88:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bc8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc8c:	463a      	mov	r2, r7
 800bc8e:	e041      	b.n	800bd14 <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 800bc90:	4630      	mov	r0, r6
 800bc92:	910a      	str	r1, [sp, #40]	; 0x28
 800bc94:	f7ff f9f8 	bl	800b088 <GUI_ALLOC_LockH>
 800bc98:	4682      	mov	sl, r0
 800bc9a:	a81c      	add	r0, sp, #112	; 0x70
 800bc9c:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800bca0:	f840 ad10 	str.w	sl, [r0, #-16]!
 800bca4:	f8da 4000 	ldr.w	r4, [sl]
 800bca8:	9210      	str	r2, [sp, #64]	; 0x40
 800bcaa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bcae:	f8ba 7008 	ldrh.w	r7, [sl, #8]
 800bcb2:	4c9e      	ldr	r4, [pc, #632]	; (800bf2c <GUI_MEMDEV__WriteToActiveOpaque+0x658>)
 800bcb4:	b213      	sxth	r3, r2
 800bcb6:	f8da 200c 	ldr.w	r2, [sl, #12]
 800bcba:	920b      	str	r2, [sp, #44]	; 0x2c
 800bcbc:	9309      	str	r3, [sp, #36]	; 0x24
 800bcbe:	f7ff f9f1 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800bcc2:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800bcc6:	900e      	str	r0, [sp, #56]	; 0x38
 800bcc8:	4899      	ldr	r0, [pc, #612]	; (800bf30 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>)
 800bcca:	6800      	ldr	r0, [r0, #0]
 800bccc:	7c40      	ldrb	r0, [r0, #17]
 800bcce:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 800bcd2:	6925      	ldr	r5, [r4, #16]
 800bcd4:	f8d5 8000 	ldr.w	r8, [r5]
 800bcd8:	f7fc fb38 	bl	800834c <GUI_GetBitsPerPixelEx>
 800bcdc:	2808      	cmp	r0, #8
 800bcde:	fa0f fb87 	sxth.w	fp, r7
 800bce2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bce4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bce8:	d904      	bls.n	800bcf4 <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 800bcea:	2810      	cmp	r0, #16
 800bcec:	bf8c      	ite	hi
 800bcee:	2404      	movhi	r4, #4
 800bcf0:	2402      	movls	r4, #2
 800bcf2:	e000      	b.n	800bcf6 <GUI_MEMDEV__WriteToActiveOpaque+0x422>
 800bcf4:	2401      	movs	r4, #1
 800bcf6:	45a9      	cmp	r9, r5
 800bcf8:	d10f      	bne.n	800bd1a <GUI_MEMDEV__WriteToActiveOpaque+0x446>
 800bcfa:	2001      	movs	r0, #1
 800bcfc:	9203      	str	r2, [sp, #12]
 800bcfe:	f10a 0218 	add.w	r2, sl, #24
 800bd02:	9000      	str	r0, [sp, #0]
 800bd04:	9001      	str	r0, [sp, #4]
 800bd06:	9102      	str	r1, [sp, #8]
 800bd08:	9204      	str	r2, [sp, #16]
 800bd0a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800bd0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bd0e:	2200      	movs	r2, #0
 800bd10:	9205      	str	r2, [sp, #20]
 800bd12:	465a      	mov	r2, fp
 800bd14:	f7fc fd5c 	bl	80087d0 <LCD_DrawBitmap>
 800bd18:	e16b      	b.n	800bff2 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800bd1a:	2920      	cmp	r1, #32
 800bd1c:	f040 808e 	bne.w	800be3c <GUI_MEMDEV__WriteToActiveOpaque+0x568>
 800bd20:	fb0b f004 	mul.w	r0, fp, r4
 800bd24:	f7ff fbf8 	bl	800b518 <GUI_ALLOC_AllocNoInit>
 800bd28:	900e      	str	r0, [sp, #56]	; 0x38
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	f000 8161 	beq.w	800bff2 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800bd30:	f7ff f9aa 	bl	800b088 <GUI_ALLOC_LockH>
 800bd34:	901a      	str	r0, [sp, #104]	; 0x68
 800bd36:	4630      	mov	r0, r6
 800bd38:	f7ff f9a6 	bl	800b088 <GUI_ALLOC_LockH>
 800bd3c:	9018      	str	r0, [sp, #96]	; 0x60
 800bd3e:	692b      	ldr	r3, [r5, #16]
 800bd40:	f100 0a18 	add.w	sl, r0, #24
 800bd44:	ea4f 068b 	mov.w	r6, fp, lsl #2
 800bd48:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d02f      	beq.n	800bdb0 <GUI_MEMDEV__WriteToActiveOpaque+0x4dc>
 800bd50:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800bd54:	2c02      	cmp	r4, #2
 800bd56:	d003      	beq.n	800bd60 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 800bd58:	2c04      	cmp	r4, #4
 800bd5a:	d001      	beq.n	800bd60 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 800bd5c:	2c01      	cmp	r4, #1
 800bd5e:	d106      	bne.n	800bd6e <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 800bd60:	4650      	mov	r0, sl
 800bd62:	692f      	ldr	r7, [r5, #16]
 800bd64:	991a      	ldr	r1, [sp, #104]	; 0x68
 800bd66:	465a      	mov	r2, fp
 800bd68:	4623      	mov	r3, r4
 800bd6a:	47b8      	blx	r7
 800bd6c:	44b2      	add	sl, r6
 800bd6e:	2301      	movs	r3, #1
 800bd70:	2200      	movs	r2, #0
 800bd72:	991a      	ldr	r1, [sp, #104]	; 0x68
 800bd74:	9300      	str	r3, [sp, #0]
 800bd76:	9301      	str	r3, [sp, #4]
 800bd78:	9203      	str	r2, [sp, #12]
 800bd7a:	9104      	str	r1, [sp, #16]
 800bd7c:	9205      	str	r2, [sp, #20]
 800bd7e:	4641      	mov	r1, r8
 800bd80:	465a      	mov	r2, fp
 800bd82:	f8cd 9008 	str.w	r9, [sp, #8]
 800bd86:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800bd88:	f7fc fd22 	bl	80087d0 <LCD_DrawBitmap>
 800bd8c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800bd8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd90:	f108 0701 	add.w	r7, r8, #1
 800bd94:	fa02 f381 	sxtah	r3, r2, r1
 800bd98:	42bb      	cmp	r3, r7
 800bd9a:	d107      	bne.n	800bdac <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 800bd9c:	a818      	add	r0, sp, #96	; 0x60
 800bd9e:	f7ff f981 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800bda2:	a81a      	add	r0, sp, #104	; 0x68
 800bda4:	f7ff f97e 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800bda8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bdaa:	e120      	b.n	800bfee <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 800bdac:	46b8      	mov	r8, r7
 800bdae:	e7d1      	b.n	800bd54 <GUI_MEMDEV__WriteToActiveOpaque+0x480>
 800bdb0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800bdb2:	2c02      	cmp	r4, #2
 800bdb4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800bdb6:	d00e      	beq.n	800bdd6 <GUI_MEMDEV__WriteToActiveOpaque+0x502>
 800bdb8:	2c04      	cmp	r4, #4
 800bdba:	d018      	beq.n	800bdee <GUI_MEMDEV__WriteToActiveOpaque+0x51a>
 800bdbc:	2c01      	cmp	r4, #1
 800bdbe:	d125      	bne.n	800be0c <GUI_MEMDEV__WriteToActiveOpaque+0x538>
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800bdc6:	9309      	str	r3, [sp, #36]	; 0x24
 800bdc8:	47c0      	blx	r8
 800bdca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdcc:	54f8      	strb	r0, [r7, r3]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	459b      	cmp	fp, r3
 800bdd2:	d1f6      	bne.n	800bdc2 <GUI_MEMDEV__WriteToActiveOpaque+0x4ee>
 800bdd4:	e019      	b.n	800be0a <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800bddc:	9309      	str	r3, [sp, #36]	; 0x24
 800bdde:	47c0      	blx	r8
 800bde0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bde2:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
 800bde6:	3301      	adds	r3, #1
 800bde8:	459b      	cmp	fp, r3
 800bdea:	d1f5      	bne.n	800bdd8 <GUI_MEMDEV__WriteToActiveOpaque+0x504>
 800bdec:	e00d      	b.n	800be0a <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 800bdee:	465a      	mov	r2, fp
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	f85a 0003 	ldr.w	r0, [sl, r3]
 800bdf6:	920b      	str	r2, [sp, #44]	; 0x2c
 800bdf8:	9309      	str	r3, [sp, #36]	; 0x24
 800bdfa:	47c0      	blx	r8
 800bdfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bdfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be00:	3a01      	subs	r2, #1
 800be02:	50f8      	str	r0, [r7, r3]
 800be04:	f103 0304 	add.w	r3, r3, #4
 800be08:	d1f3      	bne.n	800bdf2 <GUI_MEMDEV__WriteToActiveOpaque+0x51e>
 800be0a:	44b2      	add	sl, r6
 800be0c:	2301      	movs	r3, #1
 800be0e:	2200      	movs	r2, #0
 800be10:	991a      	ldr	r1, [sp, #104]	; 0x68
 800be12:	9300      	str	r3, [sp, #0]
 800be14:	9301      	str	r3, [sp, #4]
 800be16:	9203      	str	r2, [sp, #12]
 800be18:	9104      	str	r1, [sp, #16]
 800be1a:	9205      	str	r2, [sp, #20]
 800be1c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800be1e:	f8cd 9008 	str.w	r9, [sp, #8]
 800be22:	4629      	mov	r1, r5
 800be24:	465a      	mov	r2, fp
 800be26:	f7fc fcd3 	bl	80087d0 <LCD_DrawBitmap>
 800be2a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800be2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800be2e:	1c6f      	adds	r7, r5, #1
 800be30:	fa01 f380 	sxtah	r3, r1, r0
 800be34:	42bb      	cmp	r3, r7
 800be36:	d0b1      	beq.n	800bd9c <GUI_MEMDEV__WriteToActiveOpaque+0x4c8>
 800be38:	463d      	mov	r5, r7
 800be3a:	e7ba      	b.n	800bdb2 <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 800be3c:	2910      	cmp	r1, #16
 800be3e:	f040 80d8 	bne.w	800bff2 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800be42:	fa0f fa87 	sxth.w	sl, r7
 800be46:	fb0a f004 	mul.w	r0, sl, r4
 800be4a:	f7ff fb65 	bl	800b518 <GUI_ALLOC_AllocNoInit>
 800be4e:	9012      	str	r0, [sp, #72]	; 0x48
 800be50:	2800      	cmp	r0, #0
 800be52:	f000 80ce 	beq.w	800bff2 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800be56:	f7ff f917 	bl	800b088 <GUI_ALLOC_LockH>
 800be5a:	901a      	str	r0, [sp, #104]	; 0x68
 800be5c:	4630      	mov	r0, r6
 800be5e:	f7ff f913 	bl	800b088 <GUI_ALLOC_LockH>
 800be62:	9018      	str	r0, [sp, #96]	; 0x60
 800be64:	692b      	ldr	r3, [r5, #16]
 800be66:	f100 0618 	add.w	r6, r0, #24
 800be6a:	b113      	cbz	r3, 800be72 <GUI_MEMDEV__WriteToActiveOpaque+0x59e>
 800be6c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800be70:	b92b      	cbnz	r3, 800be7e <GUI_MEMDEV__WriteToActiveOpaque+0x5aa>
 800be72:	00e2      	lsls	r2, r4, #3
 800be74:	b23f      	sxth	r7, r7
 800be76:	9211      	str	r2, [sp, #68]	; 0x44
 800be78:	007f      	lsls	r7, r7, #1
 800be7a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800be7c:	e088      	b.n	800bf90 <GUI_MEMDEV__WriteToActiveOpaque+0x6bc>
 800be7e:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800be82:	0080      	lsls	r0, r0, #2
 800be84:	f7ff fb48 	bl	800b518 <GUI_ALLOC_AllocNoInit>
 800be88:	9011      	str	r0, [sp, #68]	; 0x44
 800be8a:	b118      	cbz	r0, 800be94 <GUI_MEMDEV__WriteToActiveOpaque+0x5c0>
 800be8c:	f7ff f8fc 	bl	800b088 <GUI_ALLOC_LockH>
 800be90:	9019      	str	r0, [sp, #100]	; 0x64
 800be92:	e001      	b.n	800be98 <GUI_MEMDEV__WriteToActiveOpaque+0x5c4>
 800be94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800be96:	9319      	str	r3, [sp, #100]	; 0x64
 800be98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	f000 80a0 	beq.w	800bfe0 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800bea0:	b23f      	sxth	r7, r7
 800bea2:	007f      	lsls	r7, r7, #1
 800bea4:	970e      	str	r7, [sp, #56]	; 0x38
 800bea6:	00e7      	lsls	r7, r4, #3
 800bea8:	9713      	str	r7, [sp, #76]	; 0x4c
 800beaa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800beac:	970c      	str	r7, [sp, #48]	; 0x30
 800beae:	2c02      	cmp	r4, #2
 800beb0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800beb4:	d004      	beq.n	800bec0 <GUI_MEMDEV__WriteToActiveOpaque+0x5ec>
 800beb6:	2c04      	cmp	r4, #4
 800beb8:	d007      	beq.n	800beca <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800beba:	2c01      	cmp	r4, #1
 800bebc:	d114      	bne.n	800bee8 <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 800bebe:	e004      	b.n	800beca <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800bec0:	4630      	mov	r0, r6
 800bec2:	9919      	ldr	r1, [sp, #100]	; 0x64
 800bec4:	4652      	mov	r2, sl
 800bec6:	4623      	mov	r3, r4
 800bec8:	e003      	b.n	800bed2 <GUI_MEMDEV__WriteToActiveOpaque+0x5fe>
 800beca:	9919      	ldr	r1, [sp, #100]	; 0x64
 800becc:	4630      	mov	r0, r6
 800bece:	4652      	mov	r2, sl
 800bed0:	2302      	movs	r3, #2
 800bed2:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800bed6:	47b8      	blx	r7
 800bed8:	692f      	ldr	r7, [r5, #16]
 800beda:	9819      	ldr	r0, [sp, #100]	; 0x64
 800bedc:	4641      	mov	r1, r8
 800bede:	4652      	mov	r2, sl
 800bee0:	4623      	mov	r3, r4
 800bee2:	47b8      	blx	r7
 800bee4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800bee6:	443e      	add	r6, r7
 800bee8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800beea:	991a      	ldr	r1, [sp, #104]	; 0x68
 800beec:	9104      	str	r1, [sp, #16]
 800beee:	2301      	movs	r3, #1
 800bef0:	2200      	movs	r2, #0
 800bef2:	f107 0801 	add.w	r8, r7, #1
 800bef6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800bef8:	9300      	str	r3, [sp, #0]
 800befa:	9301      	str	r3, [sp, #4]
 800befc:	9702      	str	r7, [sp, #8]
 800befe:	9203      	str	r2, [sp, #12]
 800bf00:	9205      	str	r2, [sp, #20]
 800bf02:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800bf04:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bf06:	465a      	mov	r2, fp
 800bf08:	f7fc fc62 	bl	80087d0 <LCD_DrawBitmap>
 800bf0c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800bf0e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bf10:	fa00 f387 	sxtah	r3, r0, r7
 800bf14:	4543      	cmp	r3, r8
 800bf16:	d002      	beq.n	800bf1e <GUI_MEMDEV__WriteToActiveOpaque+0x64a>
 800bf18:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800bf1c:	e7c7      	b.n	800beae <GUI_MEMDEV__WriteToActiveOpaque+0x5da>
 800bf1e:	a819      	add	r0, sp, #100	; 0x64
 800bf20:	f7ff f8c0 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800bf24:	9811      	ldr	r0, [sp, #68]	; 0x44
 800bf26:	f7ff f8dd 	bl	800b0e4 <GUI_ALLOC_Free>
 800bf2a:	e059      	b.n	800bfe0 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800bf2c:	200194c8 	.word	0x200194c8
 800bf30:	20000024 	.word	0x20000024
 800bf34:	2c04      	cmp	r4, #4
 800bf36:	d041      	beq.n	800bfbc <GUI_MEMDEV__WriteToActiveOpaque+0x6e8>
 800bf38:	2c01      	cmp	r4, #1
 800bf3a:	d111      	bne.n	800bf60 <GUI_MEMDEV__WriteToActiveOpaque+0x68c>
 800bf3c:	464a      	mov	r2, r9
 800bf3e:	4631      	mov	r1, r6
 800bf40:	f831 0b02 	ldrh.w	r0, [r1], #2
 800bf44:	910a      	str	r1, [sp, #40]	; 0x28
 800bf46:	920b      	str	r2, [sp, #44]	; 0x2c
 800bf48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf4a:	4798      	blx	r3
 800bf4c:	47c0      	blx	r8
 800bf4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf50:	f802 0b01 	strb.w	r0, [r2], #1
 800bf54:	eb09 000a 	add.w	r0, r9, sl
 800bf58:	4282      	cmp	r2, r0
 800bf5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bf5c:	d1f0      	bne.n	800bf40 <GUI_MEMDEV__WriteToActiveOpaque+0x66c>
 800bf5e:	443e      	add	r6, r7
 800bf60:	2301      	movs	r3, #1
 800bf62:	9811      	ldr	r0, [sp, #68]	; 0x44
 800bf64:	991a      	ldr	r1, [sp, #104]	; 0x68
 800bf66:	9300      	str	r3, [sp, #0]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	9301      	str	r3, [sp, #4]
 800bf6c:	9002      	str	r0, [sp, #8]
 800bf6e:	9203      	str	r2, [sp, #12]
 800bf70:	9104      	str	r1, [sp, #16]
 800bf72:	9205      	str	r2, [sp, #20]
 800bf74:	4629      	mov	r1, r5
 800bf76:	465a      	mov	r2, fp
 800bf78:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800bf7a:	f7fc fc29 	bl	80087d0 <LCD_DrawBitmap>
 800bf7e:	9910      	ldr	r1, [sp, #64]	; 0x40
 800bf80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf82:	f105 0901 	add.w	r9, r5, #1
 800bf86:	fa02 f381 	sxtah	r3, r2, r1
 800bf8a:	454b      	cmp	r3, r9
 800bf8c:	d028      	beq.n	800bfe0 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800bf8e:	464d      	mov	r5, r9
 800bf90:	2c02      	cmp	r4, #2
 800bf92:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800bf96:	d1cd      	bne.n	800bf34 <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 800bf98:	464b      	mov	r3, r9
 800bf9a:	4631      	mov	r1, r6
 800bf9c:	46d9      	mov	r9, fp
 800bf9e:	f831 0b02 	ldrh.w	r0, [r1], #2
 800bfa2:	910a      	str	r1, [sp, #40]	; 0x28
 800bfa4:	9309      	str	r3, [sp, #36]	; 0x24
 800bfa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfa8:	4790      	blx	r2
 800bfaa:	47c0      	blx	r8
 800bfac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfae:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bfb0:	f823 0b02 	strh.w	r0, [r3], #2
 800bfb4:	f1b9 0901 	subs.w	r9, r9, #1
 800bfb8:	d1f1      	bne.n	800bf9e <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 800bfba:	e7d0      	b.n	800bf5e <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 800bfbc:	464b      	mov	r3, r9
 800bfbe:	4631      	mov	r1, r6
 800bfc0:	46d9      	mov	r9, fp
 800bfc2:	f831 0b02 	ldrh.w	r0, [r1], #2
 800bfc6:	910a      	str	r1, [sp, #40]	; 0x28
 800bfc8:	9309      	str	r3, [sp, #36]	; 0x24
 800bfca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfcc:	4790      	blx	r2
 800bfce:	47c0      	blx	r8
 800bfd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfd2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bfd4:	f843 0b04 	str.w	r0, [r3], #4
 800bfd8:	f1b9 0901 	subs.w	r9, r9, #1
 800bfdc:	d1f1      	bne.n	800bfc2 <GUI_MEMDEV__WriteToActiveOpaque+0x6ee>
 800bfde:	e7be      	b.n	800bf5e <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 800bfe0:	a818      	add	r0, sp, #96	; 0x60
 800bfe2:	f7ff f85f 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800bfe6:	a81a      	add	r0, sp, #104	; 0x68
 800bfe8:	f7ff f85c 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800bfec:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bfee:	f7ff f879 	bl	800b0e4 <GUI_ALLOC_Free>
 800bff2:	b01d      	add	sp, #116	; 0x74
 800bff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bff8 <GUI_MEMDEV__WriteToActiveAlpha>:
 800bff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bffc:	b091      	sub	sp, #68	; 0x44
 800bffe:	460e      	mov	r6, r1
 800c000:	4614      	mov	r4, r2
 800c002:	900d      	str	r0, [sp, #52]	; 0x34
 800c004:	f7ff f840 	bl	800b088 <GUI_ALLOC_LockH>
 800c008:	4602      	mov	r2, r0
 800c00a:	a810      	add	r0, sp, #64	; 0x40
 800c00c:	6813      	ldr	r3, [r2, #0]
 800c00e:	4d5b      	ldr	r5, [pc, #364]	; (800c17c <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	f840 2d08 	str.w	r2, [r0, #-8]!
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	f8b2 b008 	ldrh.w	fp, [r2, #8]
 800c01c:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 800c020:	9309      	str	r3, [sp, #36]	; 0x24
 800c022:	f7ff f83f 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800c026:	682b      	ldr	r3, [r5, #0]
 800c028:	4f55      	ldr	r7, [pc, #340]	; (800c180 <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 800c02a:	7c5b      	ldrb	r3, [r3, #17]
 800c02c:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 800c030:	68c3      	ldr	r3, [r0, #12]
 800c032:	2108      	movs	r1, #8
 800c034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c036:	4798      	blx	r3
 800c038:	682b      	ldr	r3, [r5, #0]
 800c03a:	7c5b      	ldrb	r3, [r3, #17]
 800c03c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800c040:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800c044:	2817      	cmp	r0, #23
 800c046:	bf88      	it	hi
 800c048:	2020      	movhi	r0, #32
 800c04a:	9008      	str	r0, [sp, #32]
 800c04c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c050:	f8d8 2000 	ldr.w	r2, [r8]
 800c054:	910a      	str	r1, [sp, #40]	; 0x28
 800c056:	2000      	movs	r0, #0
 800c058:	920b      	str	r2, [sp, #44]	; 0x2c
 800c05a:	f7fd f845 	bl	80090e8 <GUI__AllocAlphaBuffer>
 800c05e:	2800      	cmp	r0, #0
 800c060:	f040 8089 	bne.w	800c176 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800c064:	682a      	ldr	r2, [r5, #0]
 800c066:	fa0f f78b 	sxth.w	r7, fp
 800c06a:	19f5      	adds	r5, r6, r7
 800c06c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800c070:	3d01      	subs	r5, #1
 800c072:	1aed      	subs	r5, r5, r3
 800c074:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 800c078:	2d00      	cmp	r5, #0
 800c07a:	bfcc      	ite	gt
 800c07c:	ebc5 0507 	rsbgt	r5, r5, r7
 800c080:	463d      	movle	r5, r7
 800c082:	42b3      	cmp	r3, r6
 800c084:	bfc3      	ittte	gt
 800c086:	ebc6 0103 	rsbgt	r1, r6, r3
 800c08a:	ebc1 0505 	rsbgt	r5, r1, r5
 800c08e:	461e      	movgt	r6, r3
 800c090:	2100      	movle	r1, #0
 800c092:	2d00      	cmp	r5, #0
 800c094:	dd6f      	ble.n	800c176 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800c096:	fa0f f389 	sxth.w	r3, r9
 800c09a:	18e0      	adds	r0, r4, r3
 800c09c:	f9b2 c00e 	ldrsh.w	ip, [r2, #14]
 800c0a0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800c0a4:	3801      	subs	r0, #1
 800c0a6:	ebcc 0000 	rsb	r0, ip, r0
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	bfc8      	it	gt
 800c0ae:	ebc0 0303 	rsbgt	r3, r0, r3
 800c0b2:	4294      	cmp	r4, r2
 800c0b4:	bfbd      	ittte	lt
 800c0b6:	ebc4 0a02 	rsblt	sl, r4, r2
 800c0ba:	ebca 0303 	rsblt	r3, sl, r3
 800c0be:	4614      	movlt	r4, r2
 800c0c0:	f04f 0a00 	movge.w	sl, #0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	dd56      	ble.n	800c176 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800c0c8:	fb07 1a0a 	mla	sl, r7, sl, r1
 800c0cc:	18e3      	adds	r3, r4, r3
 800c0ce:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800c0d2:	930c      	str	r3, [sp, #48]	; 0x30
 800c0d4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c0d6:	f7fa f88d 	bl	80061f4 <GUI_MEMDEV_GetDataPtr>
 800c0da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0dc:	9300      	str	r3, [sp, #0]
 800c0de:	ab0f      	add	r3, sp, #60	; 0x3c
 800c0e0:	eb00 020a 	add.w	r2, r0, sl
 800c0e4:	9301      	str	r3, [sp, #4]
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	4621      	mov	r1, r4
 800c0ea:	462b      	mov	r3, r5
 800c0ec:	f7fc ff16 	bl	8008f1c <GUI__DoAlphaBlending>
 800c0f0:	4681      	mov	r9, r0
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d03f      	beq.n	800c176 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800c0f6:	4b23      	ldr	r3, [pc, #140]	; (800c184 <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 800c0f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c0fa:	4299      	cmp	r1, r3
 800c0fc:	d01e      	beq.n	800c13c <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 800c0fe:	4629      	mov	r1, r5
 800c100:	9a08      	ldr	r2, [sp, #32]
 800c102:	4643      	mov	r3, r8
 800c104:	f001 fae9 	bl	800d6da <GUI__CompactPixelIndicesEx>
 800c108:	b9c0      	cbnz	r0, 800c13c <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 800c10a:	f8d8 c010 	ldr.w	ip, [r8, #16]
 800c10e:	f1bc 0f00 	cmp.w	ip, #0
 800c112:	d006      	beq.n	800c122 <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 800c114:	4648      	mov	r0, r9
 800c116:	4649      	mov	r1, r9
 800c118:	fa0f f28b 	sxth.w	r2, fp
 800c11c:	2304      	movs	r3, #4
 800c11e:	47e0      	blx	ip
 800c120:	e00c      	b.n	800c13c <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 800c122:	464a      	mov	r2, r9
 800c124:	463b      	mov	r3, r7
 800c126:	6810      	ldr	r0, [r2, #0]
 800c128:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c12a:	9206      	str	r2, [sp, #24]
 800c12c:	9307      	str	r3, [sp, #28]
 800c12e:	4788      	blx	r1
 800c130:	9b07      	ldr	r3, [sp, #28]
 800c132:	9a06      	ldr	r2, [sp, #24]
 800c134:	3b01      	subs	r3, #1
 800c136:	f842 0b04 	str.w	r0, [r2], #4
 800c13a:	d1f4      	bne.n	800c126 <GUI_MEMDEV__WriteToActiveAlpha+0x12e>
 800c13c:	9a08      	ldr	r2, [sp, #32]
 800c13e:	9202      	str	r2, [sp, #8]
 800c140:	2301      	movs	r3, #1
 800c142:	2200      	movs	r2, #0
 800c144:	f104 0c01 	add.w	ip, r4, #1
 800c148:	9300      	str	r3, [sp, #0]
 800c14a:	9301      	str	r3, [sp, #4]
 800c14c:	9203      	str	r2, [sp, #12]
 800c14e:	9205      	str	r2, [sp, #20]
 800c150:	f8cd 9010 	str.w	r9, [sp, #16]
 800c154:	4630      	mov	r0, r6
 800c156:	4621      	mov	r1, r4
 800c158:	462a      	mov	r2, r5
 800c15a:	f8cd c01c 	str.w	ip, [sp, #28]
 800c15e:	f7fc fb37 	bl	80087d0 <LCD_DrawBitmap>
 800c162:	2304      	movs	r3, #4
 800c164:	fb1b aa03 	smlabb	sl, fp, r3, sl
 800c168:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c16c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c16e:	459c      	cmp	ip, r3
 800c170:	d001      	beq.n	800c176 <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800c172:	4664      	mov	r4, ip
 800c174:	e7ae      	b.n	800c0d4 <GUI_MEMDEV__WriteToActiveAlpha+0xdc>
 800c176:	b011      	add	sp, #68	; 0x44
 800c178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c17c:	20000024 	.word	0x20000024
 800c180:	200194c8 	.word	0x200194c8
 800c184:	0800b64f 	.word	0x0800b64f

0800c188 <GUI_MEMDEV_WriteAt>:
 800c188:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c18a:	460c      	mov	r4, r1
 800c18c:	4615      	mov	r5, r2
 800c18e:	4606      	mov	r6, r0
 800c190:	b330      	cbz	r0, 800c1e0 <GUI_MEMDEV_WriteAt+0x58>
 800c192:	f7fe ff79 	bl	800b088 <GUI_ALLOC_LockH>
 800c196:	4a13      	ldr	r2, [pc, #76]	; (800c1e4 <GUI_MEMDEV_WriteAt+0x5c>)
 800c198:	8943      	ldrh	r3, [r0, #10]
 800c19a:	9001      	str	r0, [sp, #4]
 800c19c:	4294      	cmp	r4, r2
 800c19e:	8902      	ldrh	r2, [r0, #8]
 800c1a0:	bf04      	itt	eq
 800c1a2:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 800c1a6:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 800c1aa:	f8ad 4008 	strh.w	r4, [sp, #8]
 800c1ae:	3a01      	subs	r2, #1
 800c1b0:	3b01      	subs	r3, #1
 800c1b2:	4422      	add	r2, r4
 800c1b4:	442b      	add	r3, r5
 800c1b6:	a801      	add	r0, sp, #4
 800c1b8:	f8ad 200c 	strh.w	r2, [sp, #12]
 800c1bc:	f8ad 500a 	strh.w	r5, [sp, #10]
 800c1c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c1c4:	f7fe ff6e 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800c1c8:	a802      	add	r0, sp, #8
 800c1ca:	f7f9 fc55 	bl	8005a78 <WM__InitIVRSearch>
 800c1ce:	b138      	cbz	r0, 800c1e0 <GUI_MEMDEV_WriteAt+0x58>
 800c1d0:	4630      	mov	r0, r6
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	462a      	mov	r2, r5
 800c1d6:	f7fa fdd3 	bl	8006d80 <GUI_MEMDEV__WriteToActiveAt>
 800c1da:	f7f9 fb8b 	bl	80058f4 <WM__GetNextIVR>
 800c1de:	e7f6      	b.n	800c1ce <GUI_MEMDEV_WriteAt+0x46>
 800c1e0:	b004      	add	sp, #16
 800c1e2:	bd70      	pop	{r4, r5, r6, pc}
 800c1e4:	fffff001 	.word	0xfffff001

0800c1e8 <GUI_MEMDEV_Write>:
 800c1e8:	4901      	ldr	r1, [pc, #4]	; (800c1f0 <GUI_MEMDEV_Write+0x8>)
 800c1ea:	460a      	mov	r2, r1
 800c1ec:	f7ff bfcc 	b.w	800c188 <GUI_MEMDEV_WriteAt>
 800c1f0:	fffff001 	.word	0xfffff001

0800c1f4 <GUI_USAGE_BM_AddPixel>:
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	b510      	push	{r4, lr}
 800c1f8:	f933 4b14 	ldrsh.w	r4, [r3], #20
 800c1fc:	1b09      	subs	r1, r1, r4
 800c1fe:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800c202:	6900      	ldr	r0, [r0, #16]
 800c204:	1b12      	subs	r2, r2, r4
 800c206:	fb00 3302 	mla	r3, r0, r2, r3
 800c20a:	10c8      	asrs	r0, r1, #3
 800c20c:	2280      	movs	r2, #128	; 0x80
 800c20e:	f001 0107 	and.w	r1, r1, #7
 800c212:	fa42 f101 	asr.w	r1, r2, r1
 800c216:	5c1a      	ldrb	r2, [r3, r0]
 800c218:	4311      	orrs	r1, r2
 800c21a:	5419      	strb	r1, [r3, r0]
 800c21c:	bd10      	pop	{r4, pc}

0800c21e <GUI_USAGE_BM_GetNextDirty>:
 800c21e:	b570      	push	{r4, r5, r6, lr}
 800c220:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800c224:	680b      	ldr	r3, [r1, #0]
 800c226:	8886      	ldrh	r6, [r0, #4]
 800c228:	42a2      	cmp	r2, r4
 800c22a:	da41      	bge.n	800c2b0 <GUI_USAGE_BM_GetNextDirty+0x92>
 800c22c:	b236      	sxth	r6, r6
 800c22e:	42b3      	cmp	r3, r6
 800c230:	6904      	ldr	r4, [r0, #16]
 800c232:	da3d      	bge.n	800c2b0 <GUI_USAGE_BM_GetNextDirty+0x92>
 800c234:	3014      	adds	r0, #20
 800c236:	fb04 0202 	mla	r2, r4, r2, r0
 800c23a:	10dd      	asrs	r5, r3, #3
 800c23c:	1e70      	subs	r0, r6, #1
 800c23e:	1954      	adds	r4, r2, r5
 800c240:	ebc5 00e0 	rsb	r0, r5, r0, asr #3
 800c244:	5d55      	ldrb	r5, [r2, r5]
 800c246:	f003 0207 	and.w	r2, r3, #7
 800c24a:	fa05 f202 	lsl.w	r2, r5, r2
 800c24e:	3401      	adds	r4, #1
 800c250:	b2d2      	uxtb	r2, r2
 800c252:	b93a      	cbnz	r2, 800c264 <GUI_USAGE_BM_GetNextDirty+0x46>
 800c254:	b368      	cbz	r0, 800c2b2 <GUI_USAGE_BM_GetNextDirty+0x94>
 800c256:	3308      	adds	r3, #8
 800c258:	f814 2b01 	ldrb.w	r2, [r4], #1
 800c25c:	3801      	subs	r0, #1
 800c25e:	f023 0307 	bic.w	r3, r3, #7
 800c262:	e7f6      	b.n	800c252 <GUI_USAGE_BM_GetNextDirty+0x34>
 800c264:	0615      	lsls	r5, r2, #24
 800c266:	d403      	bmi.n	800c270 <GUI_USAGE_BM_GetNextDirty+0x52>
 800c268:	0052      	lsls	r2, r2, #1
 800c26a:	b2d2      	uxtb	r2, r2
 800c26c:	3301      	adds	r3, #1
 800c26e:	e7f9      	b.n	800c264 <GUI_USAGE_BM_GetNextDirty+0x46>
 800c270:	2aff      	cmp	r2, #255	; 0xff
 800c272:	461d      	mov	r5, r3
 800c274:	d005      	beq.n	800c282 <GUI_USAGE_BM_GetNextDirty+0x64>
 800c276:	0656      	lsls	r6, r2, #25
 800c278:	d504      	bpl.n	800c284 <GUI_USAGE_BM_GetNextDirty+0x66>
 800c27a:	0052      	lsls	r2, r2, #1
 800c27c:	b2d2      	uxtb	r2, r2
 800c27e:	3301      	adds	r3, #1
 800c280:	e7f9      	b.n	800c276 <GUI_USAGE_BM_GetNextDirty+0x58>
 800c282:	3307      	adds	r3, #7
 800c284:	f003 0207 	and.w	r2, r3, #7
 800c288:	2a07      	cmp	r2, #7
 800c28a:	d10d      	bne.n	800c2a8 <GUI_USAGE_BM_GetNextDirty+0x8a>
 800c28c:	3801      	subs	r0, #1
 800c28e:	d40b      	bmi.n	800c2a8 <GUI_USAGE_BM_GetNextDirty+0x8a>
 800c290:	f814 2b01 	ldrb.w	r2, [r4], #1
 800c294:	2aff      	cmp	r2, #255	; 0xff
 800c296:	d101      	bne.n	800c29c <GUI_USAGE_BM_GetNextDirty+0x7e>
 800c298:	3308      	adds	r3, #8
 800c29a:	e7f7      	b.n	800c28c <GUI_USAGE_BM_GetNextDirty+0x6e>
 800c29c:	0610      	lsls	r0, r2, #24
 800c29e:	d503      	bpl.n	800c2a8 <GUI_USAGE_BM_GetNextDirty+0x8a>
 800c2a0:	0052      	lsls	r2, r2, #1
 800c2a2:	b2d2      	uxtb	r2, r2
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	e7f9      	b.n	800c29c <GUI_USAGE_BM_GetNextDirty+0x7e>
 800c2a8:	1b58      	subs	r0, r3, r5
 800c2aa:	600d      	str	r5, [r1, #0]
 800c2ac:	3001      	adds	r0, #1
 800c2ae:	bd70      	pop	{r4, r5, r6, pc}
 800c2b0:	2000      	movs	r0, #0
 800c2b2:	bd70      	pop	{r4, r5, r6, pc}

0800c2b4 <_GUI_USAGE_BM_Delete>:
 800c2b4:	f7fe bf16 	b.w	800b0e4 <GUI_ALLOC_Free>

0800c2b8 <GUI_USAGE_BM_Clear>:
 800c2b8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800c2bc:	6902      	ldr	r2, [r0, #16]
 800c2be:	2100      	movs	r1, #0
 800c2c0:	3014      	adds	r0, #20
 800c2c2:	435a      	muls	r2, r3
 800c2c4:	f001 bc50 	b.w	800db68 <memset>

0800c2c8 <GUI_USAGE_BM_AddHLine>:
 800c2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ca:	f9b0 4000 	ldrsh.w	r4, [r0]
 800c2ce:	1b09      	subs	r1, r1, r4
 800c2d0:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800c2d4:	42a1      	cmp	r1, r4
 800c2d6:	da2f      	bge.n	800c338 <GUI_USAGE_BM_AddHLine+0x70>
 800c2d8:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 800c2dc:	440b      	add	r3, r1
 800c2de:	f100 0414 	add.w	r4, r0, #20
 800c2e2:	3b01      	subs	r3, #1
 800c2e4:	6900      	ldr	r0, [r0, #16]
 800c2e6:	1b52      	subs	r2, r2, r5
 800c2e8:	43de      	mvns	r6, r3
 800c2ea:	fb00 4202 	mla	r2, r0, r2, r4
 800c2ee:	f001 0707 	and.w	r7, r1, #7
 800c2f2:	10cc      	asrs	r4, r1, #3
 800c2f4:	f006 0607 	and.w	r6, r6, #7
 800c2f8:	21ff      	movs	r1, #255	; 0xff
 800c2fa:	fa41 f707 	asr.w	r7, r1, r7
 800c2fe:	fa01 f606 	lsl.w	r6, r1, r6
 800c302:	ebd4 03e3 	rsbs	r3, r4, r3, asr #3
 800c306:	eb02 0504 	add.w	r5, r2, r4
 800c30a:	b2ff      	uxtb	r7, r7
 800c30c:	b2f6      	uxtb	r6, r6
 800c30e:	5d10      	ldrb	r0, [r2, r4]
 800c310:	d103      	bne.n	800c31a <GUI_USAGE_BM_AddHLine+0x52>
 800c312:	403e      	ands	r6, r7
 800c314:	4330      	orrs	r0, r6
 800c316:	5510      	strb	r0, [r2, r4]
 800c318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c31a:	4338      	orrs	r0, r7
 800c31c:	5510      	strb	r0, [r2, r4]
 800c31e:	1e5c      	subs	r4, r3, #1
 800c320:	2c00      	cmp	r4, #0
 800c322:	f105 0501 	add.w	r5, r5, #1
 800c326:	dd04      	ble.n	800c332 <GUI_USAGE_BM_AddHLine+0x6a>
 800c328:	4628      	mov	r0, r5
 800c32a:	4622      	mov	r2, r4
 800c32c:	f001 fc1c 	bl	800db68 <memset>
 800c330:	4425      	add	r5, r4
 800c332:	782b      	ldrb	r3, [r5, #0]
 800c334:	431e      	orrs	r6, r3
 800c336:	702e      	strb	r6, [r5, #0]
 800c338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c33c <GUI_USAGE_BM_Create>:
 800c33c:	e92d 4fd3 	stmdb	sp!, {r0, r1, r4, r6, r7, r8, r9, sl, fp, lr}
 800c340:	f102 060f 	add.w	r6, r2, #15
 800c344:	1136      	asrs	r6, r6, #4
 800c346:	0076      	lsls	r6, r6, #1
 800c348:	4682      	mov	sl, r0
 800c34a:	fb06 f003 	mul.w	r0, r6, r3
 800c34e:	3014      	adds	r0, #20
 800c350:	4689      	mov	r9, r1
 800c352:	4690      	mov	r8, r2
 800c354:	461f      	mov	r7, r3
 800c356:	f7ff f8e3 	bl	800b520 <GUI_ALLOC_AllocZero>
 800c35a:	4683      	mov	fp, r0
 800c35c:	b198      	cbz	r0, 800c386 <GUI_USAGE_BM_Create+0x4a>
 800c35e:	f7fe fe93 	bl	800b088 <GUI_ALLOC_LockH>
 800c362:	4604      	mov	r4, r0
 800c364:	4b0a      	ldr	r3, [pc, #40]	; (800c390 <GUI_USAGE_BM_Create+0x54>)
 800c366:	60a3      	str	r3, [r4, #8]
 800c368:	a802      	add	r0, sp, #8
 800c36a:	2301      	movs	r3, #1
 800c36c:	f840 4d04 	str.w	r4, [r0, #-4]!
 800c370:	f8a4 8004 	strh.w	r8, [r4, #4]
 800c374:	f8a4 a000 	strh.w	sl, [r4]
 800c378:	f8a4 9002 	strh.w	r9, [r4, #2]
 800c37c:	80e7      	strh	r7, [r4, #6]
 800c37e:	81a3      	strh	r3, [r4, #12]
 800c380:	6126      	str	r6, [r4, #16]
 800c382:	f7fe fe8f 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800c386:	4658      	mov	r0, fp
 800c388:	b002      	add	sp, #8
 800c38a:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 800c38e:	bf00      	nop
 800c390:	08012e60 	.word	0x08012e60

0800c394 <GUI_USAGE_DecUseCnt>:
 800c394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c396:	4605      	mov	r5, r0
 800c398:	f7fe fe76 	bl	800b088 <GUI_ALLOC_LockH>
 800c39c:	4602      	mov	r2, r0
 800c39e:	a802      	add	r0, sp, #8
 800c3a0:	8994      	ldrh	r4, [r2, #12]
 800c3a2:	f840 2d04 	str.w	r2, [r0, #-4]!
 800c3a6:	3c01      	subs	r4, #1
 800c3a8:	b2a4      	uxth	r4, r4
 800c3aa:	8194      	strh	r4, [r2, #12]
 800c3ac:	f7fe fe7a 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800c3b0:	b914      	cbnz	r4, 800c3b8 <GUI_USAGE_DecUseCnt+0x24>
 800c3b2:	4628      	mov	r0, r5
 800c3b4:	f7fe fe96 	bl	800b0e4 <GUI_ALLOC_Free>
 800c3b8:	b003      	add	sp, #12
 800c3ba:	bd30      	pop	{r4, r5, pc}

0800c3bc <GUI_USAGE_AddRect>:
 800c3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3c0:	4605      	mov	r5, r0
 800c3c2:	4688      	mov	r8, r1
 800c3c4:	4617      	mov	r7, r2
 800c3c6:	4699      	mov	r9, r3
 800c3c8:	68a8      	ldr	r0, [r5, #8]
 800c3ca:	464b      	mov	r3, r9
 800c3cc:	6846      	ldr	r6, [r0, #4]
 800c3ce:	4641      	mov	r1, r8
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	1c54      	adds	r4, r2, #1
 800c3d4:	47b0      	blx	r6
 800c3d6:	9b08      	ldr	r3, [sp, #32]
 800c3d8:	443b      	add	r3, r7
 800c3da:	42a3      	cmp	r3, r4
 800c3dc:	d001      	beq.n	800c3e2 <GUI_USAGE_AddRect+0x26>
 800c3de:	4622      	mov	r2, r4
 800c3e0:	e7f2      	b.n	800c3c8 <GUI_USAGE_AddRect+0xc>
 800c3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800c3e8 <GUI_MEMDEV_ReduceYSize>:
 800c3e8:	b513      	push	{r0, r1, r4, lr}
 800c3ea:	460c      	mov	r4, r1
 800c3ec:	b918      	cbnz	r0, 800c3f6 <GUI_MEMDEV_ReduceYSize+0xe>
 800c3ee:	4b08      	ldr	r3, [pc, #32]	; (800c410 <GUI_MEMDEV_ReduceYSize+0x28>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c3f4:	b150      	cbz	r0, 800c40c <GUI_MEMDEV_ReduceYSize+0x24>
 800c3f6:	f7fe fe47 	bl	800b088 <GUI_ALLOC_LockH>
 800c3fa:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800c3fe:	9001      	str	r0, [sp, #4]
 800c400:	429c      	cmp	r4, r3
 800c402:	bfb8      	it	lt
 800c404:	8144      	strhlt	r4, [r0, #10]
 800c406:	a801      	add	r0, sp, #4
 800c408:	f7fe fe4c 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800c40c:	b002      	add	sp, #8
 800c40e:	bd10      	pop	{r4, pc}
 800c410:	20000024 	.word	0x20000024

0800c414 <GUI_MEMDEV_Clear>:
 800c414:	b513      	push	{r0, r1, r4, lr}
 800c416:	b918      	cbnz	r0, 800c420 <GUI_MEMDEV_Clear+0xc>
 800c418:	4b0d      	ldr	r3, [pc, #52]	; (800c450 <GUI_MEMDEV_Clear+0x3c>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c41e:	b1a8      	cbz	r0, 800c44c <GUI_MEMDEV_Clear+0x38>
 800c420:	f7fe fe32 	bl	800b088 <GUI_ALLOC_LockH>
 800c424:	ab02      	add	r3, sp, #8
 800c426:	6944      	ldr	r4, [r0, #20]
 800c428:	f843 0d08 	str.w	r0, [r3, #-8]!
 800c42c:	4668      	mov	r0, sp
 800c42e:	f7fe fe39 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800c432:	b15c      	cbz	r4, 800c44c <GUI_MEMDEV_Clear+0x38>
 800c434:	4620      	mov	r0, r4
 800c436:	f7fe fe27 	bl	800b088 <GUI_ALLOC_LockH>
 800c43a:	ac02      	add	r4, sp, #8
 800c43c:	6883      	ldr	r3, [r0, #8]
 800c43e:	f844 0d04 	str.w	r0, [r4, #-4]!
 800c442:	689b      	ldr	r3, [r3, #8]
 800c444:	4798      	blx	r3
 800c446:	4620      	mov	r0, r4
 800c448:	f7fe fe2c 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800c44c:	b002      	add	sp, #8
 800c44e:	bd10      	pop	{r4, pc}
 800c450:	20000024 	.word	0x20000024

0800c454 <_GetDevData>:
 800c454:	4802      	ldr	r0, [pc, #8]	; (800c460 <_GetDevData+0xc>)
 800c456:	2901      	cmp	r1, #1
 800c458:	bf18      	it	ne
 800c45a:	2000      	movne	r0, #0
 800c45c:	4770      	bx	lr
 800c45e:	bf00      	nop
 800c460:	08012eb8 	.word	0x08012eb8

0800c464 <_GetDevFunc>:
 800c464:	4802      	ldr	r0, [pc, #8]	; (800c470 <_GetDevFunc+0xc>)
 800c466:	2916      	cmp	r1, #22
 800c468:	bf18      	it	ne
 800c46a:	2000      	movne	r0, #0
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop
 800c470:	0800b8d5 	.word	0x0800b8d5

0800c474 <_SetOrg>:
 800c474:	6800      	ldr	r0, [r0, #0]
 800c476:	b508      	push	{r3, lr}
 800c478:	b110      	cbz	r0, 800c480 <_SetOrg+0xc>
 800c47a:	68c3      	ldr	r3, [r0, #12]
 800c47c:	6a1b      	ldr	r3, [r3, #32]
 800c47e:	4798      	blx	r3
 800c480:	bd08      	pop	{r3, pc}

0800c482 <_GetDevProp>:
 800c482:	6800      	ldr	r0, [r0, #0]
 800c484:	b508      	push	{r3, lr}
 800c486:	b118      	cbz	r0, 800c490 <_GetDevProp+0xe>
 800c488:	68c3      	ldr	r3, [r0, #12]
 800c48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c48c:	4798      	blx	r3
 800c48e:	bd08      	pop	{r3, pc}
 800c490:	f04f 30ff 	mov.w	r0, #4294967295
 800c494:	bd08      	pop	{r3, pc}

0800c496 <_GetRect>:
 800c496:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c498:	6880      	ldr	r0, [r0, #8]
 800c49a:	460c      	mov	r4, r1
 800c49c:	f7fe fdf4 	bl	800b088 <GUI_ALLOC_LockH>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	a802      	add	r0, sp, #8
 800c4a4:	8899      	ldrh	r1, [r3, #4]
 800c4a6:	88da      	ldrh	r2, [r3, #6]
 800c4a8:	891d      	ldrh	r5, [r3, #8]
 800c4aa:	f840 3d04 	str.w	r3, [r0, #-4]!
 800c4ae:	895b      	ldrh	r3, [r3, #10]
 800c4b0:	8021      	strh	r1, [r4, #0]
 800c4b2:	8062      	strh	r2, [r4, #2]
 800c4b4:	4429      	add	r1, r5
 800c4b6:	441a      	add	r2, r3
 800c4b8:	3901      	subs	r1, #1
 800c4ba:	3a01      	subs	r2, #1
 800c4bc:	80a1      	strh	r1, [r4, #4]
 800c4be:	80e2      	strh	r2, [r4, #6]
 800c4c0:	f7fe fdf0 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800c4c4:	b003      	add	sp, #12
 800c4c6:	bd30      	pop	{r4, r5, pc}

0800c4c8 <_XY2PTR>:
 800c4c8:	4b0e      	ldr	r3, [pc, #56]	; (800c504 <_XY2PTR+0x3c>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4ce:	4605      	mov	r5, r0
 800c4d0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c4d2:	460e      	mov	r6, r1
 800c4d4:	f7fe fdd8 	bl	800b088 <GUI_ALLOC_LockH>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	a802      	add	r0, sp, #8
 800c4dc:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800c4e0:	f840 3d04 	str.w	r3, [r0, #-4]!
 800c4e4:	f103 0118 	add.w	r1, r3, #24
 800c4e8:	1b36      	subs	r6, r6, r4
 800c4ea:	68dc      	ldr	r4, [r3, #12]
 800c4ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c4f0:	fb04 1406 	mla	r4, r4, r6, r1
 800c4f4:	1aed      	subs	r5, r5, r3
 800c4f6:	f7fe fdd5 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800c4fa:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800c4fe:	4620      	mov	r0, r4
 800c500:	b002      	add	sp, #8
 800c502:	bd70      	pop	{r4, r5, r6, pc}
 800c504:	20000024 	.word	0x20000024

0800c508 <_GetPixelIndex>:
 800c508:	b508      	push	{r3, lr}
 800c50a:	4608      	mov	r0, r1
 800c50c:	4611      	mov	r1, r2
 800c50e:	f7ff ffdb 	bl	800c4c8 <_XY2PTR>
 800c512:	8800      	ldrh	r0, [r0, #0]
 800c514:	bd08      	pop	{r3, pc}
	...

0800c518 <_XorPixel>:
 800c518:	4b14      	ldr	r3, [pc, #80]	; (800c56c <_XorPixel+0x54>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c51e:	4607      	mov	r7, r0
 800c520:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c522:	4615      	mov	r5, r2
 800c524:	460e      	mov	r6, r1
 800c526:	f7fe fdaf 	bl	800b088 <GUI_ALLOC_LockH>
 800c52a:	4629      	mov	r1, r5
 800c52c:	9000      	str	r0, [sp, #0]
 800c52e:	4630      	mov	r0, r6
 800c530:	f7ff ffca 	bl	800c4c8 <_XY2PTR>
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	4604      	mov	r4, r0
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	4798      	blx	r3
 800c53c:	8823      	ldrh	r3, [r4, #0]
 800c53e:	4058      	eors	r0, r3
 800c540:	9b00      	ldr	r3, [sp, #0]
 800c542:	8020      	strh	r0, [r4, #0]
 800c544:	6958      	ldr	r0, [r3, #20]
 800c546:	b160      	cbz	r0, 800c562 <_XorPixel+0x4a>
 800c548:	f7fe fd9e 	bl	800b088 <GUI_ALLOC_LockH>
 800c54c:	ac02      	add	r4, sp, #8
 800c54e:	6883      	ldr	r3, [r0, #8]
 800c550:	f844 0d04 	str.w	r0, [r4, #-4]!
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4631      	mov	r1, r6
 800c558:	462a      	mov	r2, r5
 800c55a:	4798      	blx	r3
 800c55c:	4620      	mov	r0, r4
 800c55e:	f7fe fda1 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800c562:	4668      	mov	r0, sp
 800c564:	f7fe fd9e 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800c568:	b003      	add	sp, #12
 800c56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c56c:	20000024 	.word	0x20000024

0800c570 <_SetPixelIndex>:
 800c570:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c572:	461c      	mov	r4, r3
 800c574:	4b10      	ldr	r3, [pc, #64]	; (800c5b8 <_SetPixelIndex+0x48>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c57a:	460e      	mov	r6, r1
 800c57c:	4615      	mov	r5, r2
 800c57e:	f7fe fd83 	bl	800b088 <GUI_ALLOC_LockH>
 800c582:	4629      	mov	r1, r5
 800c584:	9000      	str	r0, [sp, #0]
 800c586:	4630      	mov	r0, r6
 800c588:	f7ff ff9e 	bl	800c4c8 <_XY2PTR>
 800c58c:	9b00      	ldr	r3, [sp, #0]
 800c58e:	8004      	strh	r4, [r0, #0]
 800c590:	6958      	ldr	r0, [r3, #20]
 800c592:	b160      	cbz	r0, 800c5ae <_SetPixelIndex+0x3e>
 800c594:	f7fe fd78 	bl	800b088 <GUI_ALLOC_LockH>
 800c598:	ac02      	add	r4, sp, #8
 800c59a:	6883      	ldr	r3, [r0, #8]
 800c59c:	f844 0d04 	str.w	r0, [r4, #-4]!
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4631      	mov	r1, r6
 800c5a4:	462a      	mov	r2, r5
 800c5a6:	4798      	blx	r3
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	f7fe fd7b 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800c5ae:	4668      	mov	r0, sp
 800c5b0:	f7fe fd78 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800c5b4:	b002      	add	sp, #8
 800c5b6:	bd70      	pop	{r4, r5, r6, pc}
 800c5b8:	20000024 	.word	0x20000024

0800c5bc <_DrawVLine>:
 800c5bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5c0:	4d2c      	ldr	r5, [pc, #176]	; (800c674 <_DrawVLine+0xb8>)
 800c5c2:	461e      	mov	r6, r3
 800c5c4:	682b      	ldr	r3, [r5, #0]
 800c5c6:	4681      	mov	r9, r0
 800c5c8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c5ca:	460f      	mov	r7, r1
 800c5cc:	4614      	mov	r4, r2
 800c5ce:	f7fe fd5b 	bl	800b088 <GUI_ALLOC_LockH>
 800c5d2:	9000      	str	r0, [sp, #0]
 800c5d4:	6940      	ldr	r0, [r0, #20]
 800c5d6:	46aa      	mov	sl, r5
 800c5d8:	b108      	cbz	r0, 800c5de <_DrawVLine+0x22>
 800c5da:	f7fe fd55 	bl	800b088 <GUI_ALLOC_LockH>
 800c5de:	9001      	str	r0, [sp, #4]
 800c5e0:	4621      	mov	r1, r4
 800c5e2:	4638      	mov	r0, r7
 800c5e4:	f7ff ff70 	bl	800c4c8 <_XY2PTR>
 800c5e8:	9b00      	ldr	r3, [sp, #0]
 800c5ea:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800c5ee:	f8da 3000 	ldr.w	r3, [sl]
 800c5f2:	7c1a      	ldrb	r2, [r3, #16]
 800c5f4:	07d2      	lsls	r2, r2, #31
 800c5f6:	4605      	mov	r5, r0
 800c5f8:	d51f      	bpl.n	800c63a <_DrawVLine+0x7e>
 800c5fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c5fe:	689b      	ldr	r3, [r3, #8]
 800c600:	4798      	blx	r3
 800c602:	fa1f f880 	uxth.w	r8, r0
 800c606:	9801      	ldr	r0, [sp, #4]
 800c608:	b120      	cbz	r0, 800c614 <_DrawVLine+0x58>
 800c60a:	6883      	ldr	r3, [r0, #8]
 800c60c:	4639      	mov	r1, r7
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4622      	mov	r2, r4
 800c612:	4798      	blx	r3
 800c614:	882b      	ldrh	r3, [r5, #0]
 800c616:	ea88 0303 	eor.w	r3, r8, r3
 800c61a:	802b      	strh	r3, [r5, #0]
 800c61c:	9b00      	ldr	r3, [sp, #0]
 800c61e:	3401      	adds	r4, #1
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	42b4      	cmp	r4, r6
 800c624:	441d      	add	r5, r3
 800c626:	ddee      	ble.n	800c606 <_DrawVLine+0x4a>
 800c628:	4668      	mov	r0, sp
 800c62a:	f7fe fd3b 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800c62e:	9b01      	ldr	r3, [sp, #4]
 800c630:	b1eb      	cbz	r3, 800c66e <_DrawVLine+0xb2>
 800c632:	a801      	add	r0, sp, #4
 800c634:	f7fe fd36 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800c638:	e019      	b.n	800c66e <_DrawVLine+0xb2>
 800c63a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c63c:	f8d3 9000 	ldr.w	r9, [r3]
 800c640:	9b01      	ldr	r3, [sp, #4]
 800c642:	b163      	cbz	r3, 800c65e <_DrawVLine+0xa2>
 800c644:	9801      	ldr	r0, [sp, #4]
 800c646:	6883      	ldr	r3, [r0, #8]
 800c648:	4622      	mov	r2, r4
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	4639      	mov	r1, r7
 800c64e:	3401      	adds	r4, #1
 800c650:	4798      	blx	r3
 800c652:	42b4      	cmp	r4, r6
 800c654:	f8a5 9000 	strh.w	r9, [r5]
 800c658:	4445      	add	r5, r8
 800c65a:	ddf3      	ble.n	800c644 <_DrawVLine+0x88>
 800c65c:	e7e4      	b.n	800c628 <_DrawVLine+0x6c>
 800c65e:	1b34      	subs	r4, r6, r4
 800c660:	3401      	adds	r4, #1
 800c662:	3c01      	subs	r4, #1
 800c664:	f8a5 9000 	strh.w	r9, [r5]
 800c668:	4445      	add	r5, r8
 800c66a:	d1fa      	bne.n	800c662 <_DrawVLine+0xa6>
 800c66c:	e7dc      	b.n	800c628 <_DrawVLine+0x6c>
 800c66e:	b002      	add	sp, #8
 800c670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c674:	20000024 	.word	0x20000024

0800c678 <_FillRect>:
 800c678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c67c:	4f2a      	ldr	r7, [pc, #168]	; (800c728 <_FillRect+0xb0>)
 800c67e:	4614      	mov	r4, r2
 800c680:	683a      	ldr	r2, [r7, #0]
 800c682:	4698      	mov	r8, r3
 800c684:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800c686:	b087      	sub	sp, #28
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	9302      	str	r3, [sp, #8]
 800c68c:	4682      	mov	sl, r0
 800c68e:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800c690:	460e      	mov	r6, r1
 800c692:	f7fe fcf9 	bl	800b088 <GUI_ALLOC_LockH>
 800c696:	4621      	mov	r1, r4
 800c698:	9004      	str	r0, [sp, #16]
 800c69a:	4630      	mov	r0, r6
 800c69c:	f7ff ff14 	bl	800c4c8 <_XY2PTR>
 800c6a0:	9a04      	ldr	r2, [sp, #16]
 800c6a2:	4605      	mov	r5, r0
 800c6a4:	6950      	ldr	r0, [r2, #20]
 800c6a6:	68d3      	ldr	r3, [r2, #12]
 800c6a8:	9303      	str	r3, [sp, #12]
 800c6aa:	ebc6 0908 	rsb	r9, r6, r8
 800c6ae:	f109 0801 	add.w	r8, r9, #1
 800c6b2:	46bb      	mov	fp, r7
 800c6b4:	b180      	cbz	r0, 800c6d8 <_FillRect+0x60>
 800c6b6:	f7fe fce7 	bl	800b088 <GUI_ALLOC_LockH>
 800c6ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c6bc:	af06      	add	r7, sp, #24
 800c6be:	1b13      	subs	r3, r2, r4
 800c6c0:	f847 0d04 	str.w	r0, [r7, #-4]!
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	9300      	str	r3, [sp, #0]
 800c6c8:	4631      	mov	r1, r6
 800c6ca:	4622      	mov	r2, r4
 800c6cc:	4643      	mov	r3, r8
 800c6ce:	f7ff fe75 	bl	800c3bc <GUI_USAGE_AddRect>
 800c6d2:	4638      	mov	r0, r7
 800c6d4:	f7fe fce6 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800c6d8:	ea4f 0649 	mov.w	r6, r9, lsl #1
 800c6dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c6de:	429c      	cmp	r4, r3
 800c6e0:	dc1c      	bgt.n	800c71c <_FillRect+0xa4>
 800c6e2:	f8db 3000 	ldr.w	r3, [fp]
 800c6e6:	7c1b      	ldrb	r3, [r3, #16]
 800c6e8:	07db      	lsls	r3, r3, #31
 800c6ea:	d50d      	bpl.n	800c708 <_FillRect+0x90>
 800c6ec:	f8da 3010 	ldr.w	r3, [sl, #16]
 800c6f0:	689b      	ldr	r3, [r3, #8]
 800c6f2:	4798      	blx	r3
 800c6f4:	19aa      	adds	r2, r5, r6
 800c6f6:	b280      	uxth	r0, r0
 800c6f8:	1eab      	subs	r3, r5, #2
 800c6fa:	8859      	ldrh	r1, [r3, #2]
 800c6fc:	4041      	eors	r1, r0
 800c6fe:	f823 1f02 	strh.w	r1, [r3, #2]!
 800c702:	4293      	cmp	r3, r2
 800c704:	d1f9      	bne.n	800c6fa <_FillRect+0x82>
 800c706:	e005      	b.n	800c714 <_FillRect+0x9c>
 800c708:	9b02      	ldr	r3, [sp, #8]
 800c70a:	4628      	mov	r0, r5
 800c70c:	b299      	uxth	r1, r3
 800c70e:	4642      	mov	r2, r8
 800c710:	f7fc fa2c 	bl	8008b6c <GUI__memset16>
 800c714:	9a03      	ldr	r2, [sp, #12]
 800c716:	3401      	adds	r4, #1
 800c718:	4415      	add	r5, r2
 800c71a:	e7df      	b.n	800c6dc <_FillRect+0x64>
 800c71c:	a804      	add	r0, sp, #16
 800c71e:	f7fe fcc1 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800c722:	b007      	add	sp, #28
 800c724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c728:	20000024 	.word	0x20000024

0800c72c <_DrawHLine>:
 800c72c:	b507      	push	{r0, r1, r2, lr}
 800c72e:	9200      	str	r2, [sp, #0]
 800c730:	f7ff ffa2 	bl	800c678 <_FillRect>
 800c734:	b003      	add	sp, #12
 800c736:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c73c <_DrawBitmap>:
 800c73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c740:	4c8a      	ldr	r4, [pc, #552]	; (800c96c <_DrawBitmap+0x230>)
 800c742:	b093      	sub	sp, #76	; 0x4c
 800c744:	469b      	mov	fp, r3
 800c746:	6823      	ldr	r3, [r4, #0]
 800c748:	900d      	str	r0, [sp, #52]	; 0x34
 800c74a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c74c:	9207      	str	r2, [sp, #28]
 800c74e:	460d      	mov	r5, r1
 800c750:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 800c754:	f7fe fc98 	bl	800b088 <GUI_ALLOC_LockH>
 800c758:	9010      	str	r0, [sp, #64]	; 0x40
 800c75a:	6940      	ldr	r0, [r0, #20]
 800c75c:	b108      	cbz	r0, 800c762 <_DrawBitmap+0x26>
 800c75e:	f7fe fc93 	bl	800b088 <GUI_ALLOC_LockH>
 800c762:	9011      	str	r0, [sp, #68]	; 0x44
 800c764:	a812      	add	r0, sp, #72	; 0x48
 800c766:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	9308      	str	r3, [sp, #32]
 800c76e:	f7fe fc99 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800c772:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800c774:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c776:	442e      	add	r6, r5
 800c778:	9604      	str	r6, [sp, #16]
 800c77a:	b150      	cbz	r0, 800c792 <_DrawBitmap+0x56>
 800c77c:	6823      	ldr	r3, [r4, #0]
 800c77e:	7c1b      	ldrb	r3, [r3, #16]
 800c780:	0799      	lsls	r1, r3, #30
 800c782:	d106      	bne.n	800c792 <_DrawBitmap+0x56>
 800c784:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800c786:	9700      	str	r7, [sp, #0]
 800c788:	4631      	mov	r1, r6
 800c78a:	9a07      	ldr	r2, [sp, #28]
 800c78c:	465b      	mov	r3, fp
 800c78e:	f7ff fe15 	bl	800c3bc <GUI_USAGE_AddRect>
 800c792:	9804      	ldr	r0, [sp, #16]
 800c794:	9907      	ldr	r1, [sp, #28]
 800c796:	f7ff fe97 	bl	800c4c8 <_XY2PTR>
 800c79a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c79c:	2e10      	cmp	r6, #16
 800c79e:	4604      	mov	r4, r0
 800c7a0:	d139      	bne.n	800c816 <_DrawBitmap+0xda>
 800c7a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7a4:	b11b      	cbz	r3, 800c7ae <_DrawBitmap+0x72>
 800c7a6:	ea4f 064b 	mov.w	r6, fp, lsl #1
 800c7aa:	2500      	movs	r5, #0
 800c7ac:	e014      	b.n	800c7d8 <_DrawBitmap+0x9c>
 800c7ae:	4b70      	ldr	r3, [pc, #448]	; (800c970 <_DrawBitmap+0x234>)
 800c7b0:	681d      	ldr	r5, [r3, #0]
 800c7b2:	2d00      	cmp	r5, #0
 800c7b4:	d0f7      	beq.n	800c7a6 <_DrawBitmap+0x6a>
 800c7b6:	9e08      	ldr	r6, [sp, #32]
 800c7b8:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800c7ba:	9600      	str	r6, [sp, #0]
 800c7bc:	9701      	str	r7, [sp, #4]
 800c7be:	4651      	mov	r1, sl
 800c7c0:	465a      	mov	r2, fp
 800c7c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c7c4:	47a8      	blx	r5
 800c7c6:	e345      	b.n	800ce54 <_DrawBitmap+0x718>
 800c7c8:	f1ba 0f00 	cmp.w	sl, #0
 800c7cc:	d10a      	bne.n	800c7e4 <_DrawBitmap+0xa8>
 800c7ce:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800c7d0:	44ba      	add	sl, r7
 800c7d2:	9f08      	ldr	r7, [sp, #32]
 800c7d4:	3501      	adds	r5, #1
 800c7d6:	443c      	add	r4, r7
 800c7d8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800c7da:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800c7de:	42bd      	cmp	r5, r7
 800c7e0:	dbf2      	blt.n	800c7c8 <_DrawBitmap+0x8c>
 800c7e2:	e013      	b.n	800c80c <_DrawBitmap+0xd0>
 800c7e4:	2c00      	cmp	r4, #0
 800c7e6:	d0f2      	beq.n	800c7ce <_DrawBitmap+0x92>
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	4651      	mov	r1, sl
 800c7ec:	4632      	mov	r2, r6
 800c7ee:	f001 f997 	bl	800db20 <memcpy>
 800c7f2:	f1b8 0f00 	cmp.w	r8, #0
 800c7f6:	d0ea      	beq.n	800c7ce <_DrawBitmap+0x92>
 800c7f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7fc:	9a07      	ldr	r2, [sp, #28]
 800c7fe:	685f      	ldr	r7, [r3, #4]
 800c800:	9904      	ldr	r1, [sp, #16]
 800c802:	4640      	mov	r0, r8
 800c804:	442a      	add	r2, r5
 800c806:	465b      	mov	r3, fp
 800c808:	47b8      	blx	r7
 800c80a:	e7e0      	b.n	800c7ce <_DrawBitmap+0x92>
 800c80c:	f1b8 0f00 	cmp.w	r8, #0
 800c810:	f040 831d 	bne.w	800ce4e <_DrawBitmap+0x712>
 800c814:	e31e      	b.n	800ce54 <_DrawBitmap+0x718>
 800c816:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c818:	2e17      	cmp	r6, #23
 800c81a:	dd38      	ble.n	800c88e <_DrawBitmap+0x152>
 800c81c:	2600      	movs	r6, #0
 800c81e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800c820:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c822:	42be      	cmp	r6, r7
 800c824:	f280 809d 	bge.w	800c962 <_DrawBitmap+0x226>
 800c828:	9f07      	ldr	r7, [sp, #28]
 800c82a:	4437      	add	r7, r6
 800c82c:	f1ba 0f00 	cmp.w	sl, #0
 800c830:	d027      	beq.n	800c882 <_DrawBitmap+0x146>
 800c832:	b334      	cbz	r4, 800c882 <_DrawBitmap+0x146>
 800c834:	b13d      	cbz	r5, 800c846 <_DrawBitmap+0x10a>
 800c836:	68ab      	ldr	r3, [r5, #8]
 800c838:	9904      	ldr	r1, [sp, #16]
 800c83a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800c83e:	4628      	mov	r0, r5
 800c840:	463a      	mov	r2, r7
 800c842:	465b      	mov	r3, fp
 800c844:	47e0      	blx	ip
 800c846:	1ea3      	subs	r3, r4, #2
 800c848:	f1aa 0904 	sub.w	r9, sl, #4
 800c84c:	9303      	str	r3, [sp, #12]
 800c84e:	46d8      	mov	r8, fp
 800c850:	9b04      	ldr	r3, [sp, #16]
 800c852:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c854:	445b      	add	r3, fp
 800c856:	ebc8 0103 	rsb	r1, r8, r3
 800c85a:	6903      	ldr	r3, [r0, #16]
 800c85c:	f859 0f04 	ldr.w	r0, [r9, #4]!
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	9102      	str	r1, [sp, #8]
 800c864:	4798      	blx	r3
 800c866:	9b03      	ldr	r3, [sp, #12]
 800c868:	9902      	ldr	r1, [sp, #8]
 800c86a:	f823 0f02 	strh.w	r0, [r3, #2]!
 800c86e:	9303      	str	r3, [sp, #12]
 800c870:	b125      	cbz	r5, 800c87c <_DrawBitmap+0x140>
 800c872:	68ab      	ldr	r3, [r5, #8]
 800c874:	4628      	mov	r0, r5
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	463a      	mov	r2, r7
 800c87a:	4798      	blx	r3
 800c87c:	f1b8 0801 	subs.w	r8, r8, #1
 800c880:	d1e6      	bne.n	800c850 <_DrawBitmap+0x114>
 800c882:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800c884:	44ba      	add	sl, r7
 800c886:	9f08      	ldr	r7, [sp, #32]
 800c888:	3601      	adds	r6, #1
 800c88a:	443c      	add	r4, r7
 800c88c:	e7c7      	b.n	800c81e <_DrawBitmap+0xe2>
 800c88e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c890:	2e08      	cmp	r6, #8
 800c892:	f100 0402 	add.w	r4, r0, #2
 800c896:	d16d      	bne.n	800c974 <_DrawBitmap+0x238>
 800c898:	9e07      	ldr	r6, [sp, #28]
 800c89a:	9f07      	ldr	r7, [sp, #28]
 800c89c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c89e:	1bf3      	subs	r3, r6, r7
 800c8a0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800c8a2:	42bb      	cmp	r3, r7
 800c8a4:	f1a4 0002 	sub.w	r0, r4, #2
 800c8a8:	da5b      	bge.n	800c962 <_DrawBitmap+0x226>
 800c8aa:	4b30      	ldr	r3, [pc, #192]	; (800c96c <_DrawBitmap+0x230>)
 800c8ac:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	7c1b      	ldrb	r3, [r3, #16]
 800c8b2:	b367      	cbz	r7, 800c90e <_DrawBitmap+0x1d2>
 800c8b4:	f013 0303 	ands.w	r3, r3, #3
 800c8b8:	d004      	beq.n	800c8c4 <_DrawBitmap+0x188>
 800c8ba:	2b02      	cmp	r3, #2
 800c8bc:	d14b      	bne.n	800c956 <_DrawBitmap+0x21a>
 800c8be:	46a0      	mov	r8, r4
 800c8c0:	9f04      	ldr	r7, [sp, #16]
 800c8c2:	e01d      	b.n	800c900 <_DrawBitmap+0x1c4>
 800c8c4:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800c8c8:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800c8ca:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800c8ce:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	455b      	cmp	r3, fp
 800c8d6:	d1f5      	bne.n	800c8c4 <_DrawBitmap+0x188>
 800c8d8:	e03d      	b.n	800c956 <_DrawBitmap+0x21a>
 800c8da:	9921      	ldr	r1, [sp, #132]	; 0x84
 800c8dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c8e0:	f828 3c02 	strh.w	r3, [r8, #-2]
 800c8e4:	b12d      	cbz	r5, 800c8f2 <_DrawBitmap+0x1b6>
 800c8e6:	68ab      	ldr	r3, [r5, #8]
 800c8e8:	4628      	mov	r0, r5
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4639      	mov	r1, r7
 800c8ee:	4632      	mov	r2, r6
 800c8f0:	4798      	blx	r3
 800c8f2:	9b04      	ldr	r3, [sp, #16]
 800c8f4:	3701      	adds	r7, #1
 800c8f6:	445b      	add	r3, fp
 800c8f8:	42bb      	cmp	r3, r7
 800c8fa:	f108 0802 	add.w	r8, r8, #2
 800c8fe:	d02a      	beq.n	800c956 <_DrawBitmap+0x21a>
 800c900:	9804      	ldr	r0, [sp, #16]
 800c902:	ebc0 030a 	rsb	r3, r0, sl
 800c906:	5ddb      	ldrb	r3, [r3, r7]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d0f2      	beq.n	800c8f2 <_DrawBitmap+0x1b6>
 800c90c:	e7e5      	b.n	800c8da <_DrawBitmap+0x19e>
 800c90e:	f013 0303 	ands.w	r3, r3, #3
 800c912:	d004      	beq.n	800c91e <_DrawBitmap+0x1e2>
 800c914:	2b02      	cmp	r3, #2
 800c916:	d11e      	bne.n	800c956 <_DrawBitmap+0x21a>
 800c918:	46a0      	mov	r8, r4
 800c91a:	9f04      	ldr	r7, [sp, #16]
 800c91c:	e014      	b.n	800c948 <_DrawBitmap+0x20c>
 800c91e:	4651      	mov	r1, sl
 800c920:	465a      	mov	r2, fp
 800c922:	f001 f8fd 	bl	800db20 <memcpy>
 800c926:	e016      	b.n	800c956 <_DrawBitmap+0x21a>
 800c928:	f828 3c02 	strh.w	r3, [r8, #-2]
 800c92c:	b12d      	cbz	r5, 800c93a <_DrawBitmap+0x1fe>
 800c92e:	68ab      	ldr	r3, [r5, #8]
 800c930:	4628      	mov	r0, r5
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	4639      	mov	r1, r7
 800c936:	4632      	mov	r2, r6
 800c938:	4798      	blx	r3
 800c93a:	9b04      	ldr	r3, [sp, #16]
 800c93c:	3701      	adds	r7, #1
 800c93e:	445b      	add	r3, fp
 800c940:	42bb      	cmp	r3, r7
 800c942:	f108 0802 	add.w	r8, r8, #2
 800c946:	d006      	beq.n	800c956 <_DrawBitmap+0x21a>
 800c948:	9a04      	ldr	r2, [sp, #16]
 800c94a:	ebc2 030a 	rsb	r3, r2, sl
 800c94e:	5ddb      	ldrb	r3, [r3, r7]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d0f2      	beq.n	800c93a <_DrawBitmap+0x1fe>
 800c954:	e7e8      	b.n	800c928 <_DrawBitmap+0x1ec>
 800c956:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800c958:	44ba      	add	sl, r7
 800c95a:	9f08      	ldr	r7, [sp, #32]
 800c95c:	3601      	adds	r6, #1
 800c95e:	443c      	add	r4, r7
 800c960:	e79b      	b.n	800c89a <_DrawBitmap+0x15e>
 800c962:	2d00      	cmp	r5, #0
 800c964:	f040 8273 	bne.w	800ce4e <_DrawBitmap+0x712>
 800c968:	e274      	b.n	800ce54 <_DrawBitmap+0x718>
 800c96a:	bf00      	nop
 800c96c:	20000024 	.word	0x20000024
 800c970:	20019298 	.word	0x20019298
 800c974:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800c976:	4bab      	ldr	r3, [pc, #684]	; (800cc24 <_DrawBitmap+0x4e8>)
 800c978:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800c97a:	9409      	str	r4, [sp, #36]	; 0x24
 800c97c:	2e00      	cmp	r6, #0
 800c97e:	bf08      	it	eq
 800c980:	461e      	moveq	r6, r3
 800c982:	9621      	str	r6, [sp, #132]	; 0x84
 800c984:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800c986:	0076      	lsls	r6, r6, #1
 800c988:	960e      	str	r6, [sp, #56]	; 0x38
 800c98a:	00bf      	lsls	r7, r7, #2
 800c98c:	9e07      	ldr	r6, [sp, #28]
 800c98e:	970f      	str	r7, [sp, #60]	; 0x3c
 800c990:	9605      	str	r6, [sp, #20]
 800c992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c994:	9e05      	ldr	r6, [sp, #20]
 800c996:	9f07      	ldr	r7, [sp, #28]
 800c998:	1e9c      	subs	r4, r3, #2
 800c99a:	1bf3      	subs	r3, r6, r7
 800c99c:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800c99e:	42b3      	cmp	r3, r6
 800c9a0:	f280 8253 	bge.w	800ce4a <_DrawBitmap+0x70e>
 800c9a4:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c9a6:	2f02      	cmp	r7, #2
 800c9a8:	f000 80d9 	beq.w	800cb5e <_DrawBitmap+0x422>
 800c9ac:	2f04      	cmp	r7, #4
 800c9ae:	f000 8178 	beq.w	800cca2 <_DrawBitmap+0x566>
 800c9b2:	2f01      	cmp	r7, #1
 800c9b4:	f040 823f 	bne.w	800ce36 <_DrawBitmap+0x6fa>
 800c9b8:	f8df 9270 	ldr.w	r9, [pc, #624]	; 800cc2c <_DrawBitmap+0x4f0>
 800c9bc:	f8d9 3000 	ldr.w	r3, [r9]
 800c9c0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c9c2:	f7fe fb61 	bl	800b088 <GUI_ALLOC_LockH>
 800c9c6:	f89a 3000 	ldrb.w	r3, [sl]
 800c9ca:	4a97      	ldr	r2, [pc, #604]	; (800cc28 <_DrawBitmap+0x4ec>)
 800c9cc:	9010      	str	r0, [sp, #64]	; 0x40
 800c9ce:	5cd5      	ldrb	r5, [r2, r3]
 800c9d0:	f8d9 3000 	ldr.w	r3, [r9]
 800c9d4:	9820      	ldr	r0, [sp, #128]	; 0x80
 800c9d6:	7c1b      	ldrb	r3, [r3, #16]
 800c9d8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800c9da:	f003 0303 	and.w	r3, r3, #3
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	465e      	mov	r6, fp
 800c9e2:	f1c0 0808 	rsb	r8, r0, #8
 800c9e6:	fa45 f500 	asr.w	r5, r5, r0
 800c9ea:	d022      	beq.n	800ca32 <_DrawBitmap+0x2f6>
 800c9ec:	2b03      	cmp	r3, #3
 800c9ee:	d062      	beq.n	800cab6 <_DrawBitmap+0x37a>
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d060      	beq.n	800cab6 <_DrawBitmap+0x37a>
 800c9f4:	4652      	mov	r2, sl
 800c9f6:	4546      	cmp	r6, r8
 800c9f8:	bf38      	it	cc
 800c9fa:	46b0      	movcc	r8, r6
 800c9fc:	ebc8 0606 	rsb	r6, r8, r6
 800ca00:	4643      	mov	r3, r8
 800ca02:	4621      	mov	r1, r4
 800ca04:	f005 0001 	and.w	r0, r5, #1
 800ca08:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800ca10:	f821 0b02 	strh.w	r0, [r1], #2
 800ca14:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800ca18:	d1f4      	bne.n	800ca04 <_DrawBitmap+0x2c8>
 800ca1a:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800ca1e:	2e00      	cmp	r6, #0
 800ca20:	f000 8099 	beq.w	800cb56 <_DrawBitmap+0x41a>
 800ca24:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800ca28:	497f      	ldr	r1, [pc, #508]	; (800cc28 <_DrawBitmap+0x4ec>)
 800ca2a:	f04f 0808 	mov.w	r8, #8
 800ca2e:	5ccd      	ldrb	r5, [r1, r3]
 800ca30:	e7e1      	b.n	800c9f6 <_DrawBitmap+0x2ba>
 800ca32:	9821      	ldr	r0, [sp, #132]	; 0x84
 800ca34:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800ca38:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 800ca3c:	f8cd a018 	str.w	sl, [sp, #24]
 800ca40:	4546      	cmp	r6, r8
 800ca42:	bf38      	it	cc
 800ca44:	46b0      	movcc	r8, r6
 800ca46:	ebc8 0606 	rsb	r6, r8, r6
 800ca4a:	b32f      	cbz	r7, 800ca98 <_DrawBitmap+0x35c>
 800ca4c:	b91d      	cbnz	r5, 800ca56 <_DrawBitmap+0x31a>
 800ca4e:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800ca52:	44c1      	add	r9, r8
 800ca54:	e024      	b.n	800caa0 <_DrawBitmap+0x364>
 800ca56:	07ea      	lsls	r2, r5, #31
 800ca58:	d50b      	bpl.n	800ca72 <_DrawBitmap+0x336>
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	9a05      	ldr	r2, [sp, #20]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f8cd c008 	str.w	ip, [sp, #8]
 800ca64:	4638      	mov	r0, r7
 800ca66:	4649      	mov	r1, r9
 800ca68:	4798      	blx	r3
 800ca6a:	f8dd c008 	ldr.w	ip, [sp, #8]
 800ca6e:	f8a4 c000 	strh.w	ip, [r4]
 800ca72:	f1b8 0801 	subs.w	r8, r8, #1
 800ca76:	f109 0901 	add.w	r9, r9, #1
 800ca7a:	f104 0402 	add.w	r4, r4, #2
 800ca7e:	d00f      	beq.n	800caa0 <_DrawBitmap+0x364>
 800ca80:	086d      	lsrs	r5, r5, #1
 800ca82:	e7e3      	b.n	800ca4c <_DrawBitmap+0x310>
 800ca84:	07eb      	lsls	r3, r5, #31
 800ca86:	bf48      	it	mi
 800ca88:	f8a4 c000 	strhmi.w	ip, [r4]
 800ca8c:	f1b8 0801 	subs.w	r8, r8, #1
 800ca90:	f104 0402 	add.w	r4, r4, #2
 800ca94:	d004      	beq.n	800caa0 <_DrawBitmap+0x364>
 800ca96:	086d      	lsrs	r5, r5, #1
 800ca98:	2d00      	cmp	r5, #0
 800ca9a:	d1f3      	bne.n	800ca84 <_DrawBitmap+0x348>
 800ca9c:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800caa0:	2e00      	cmp	r6, #0
 800caa2:	d058      	beq.n	800cb56 <_DrawBitmap+0x41a>
 800caa4:	9906      	ldr	r1, [sp, #24]
 800caa6:	4a60      	ldr	r2, [pc, #384]	; (800cc28 <_DrawBitmap+0x4ec>)
 800caa8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800caac:	9106      	str	r1, [sp, #24]
 800caae:	5cd5      	ldrb	r5, [r2, r3]
 800cab0:	f04f 0808 	mov.w	r8, #8
 800cab4:	e7c4      	b.n	800ca40 <_DrawBitmap+0x304>
 800cab6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cab8:	6913      	ldr	r3, [r2, #16]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	4798      	blx	r3
 800cabe:	9b04      	ldr	r3, [sp, #16]
 800cac0:	930b      	str	r3, [sp, #44]	; 0x2c
 800cac2:	b280      	uxth	r0, r0
 800cac4:	900a      	str	r0, [sp, #40]	; 0x28
 800cac6:	f10a 0901 	add.w	r9, sl, #1
 800caca:	4546      	cmp	r6, r8
 800cacc:	bf38      	it	cc
 800cace:	46b0      	movcc	r8, r6
 800cad0:	ebc8 0606 	rsb	r6, r8, r6
 800cad4:	1ca3      	adds	r3, r4, #2
 800cad6:	b31f      	cbz	r7, 800cb20 <_DrawBitmap+0x3e4>
 800cad8:	f8cd 8018 	str.w	r8, [sp, #24]
 800cadc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800cade:	9a06      	ldr	r2, [sp, #24]
 800cae0:	4440      	add	r0, r8
 800cae2:	900c      	str	r0, [sp, #48]	; 0x30
 800cae4:	1a81      	subs	r1, r0, r2
 800cae6:	07e8      	lsls	r0, r5, #31
 800cae8:	d50d      	bpl.n	800cb06 <_DrawBitmap+0x3ca>
 800caea:	68ba      	ldr	r2, [r7, #8]
 800caec:	4638      	mov	r0, r7
 800caee:	f8d2 c000 	ldr.w	ip, [r2]
 800caf2:	9a05      	ldr	r2, [sp, #20]
 800caf4:	9302      	str	r3, [sp, #8]
 800caf6:	47e0      	blx	ip
 800caf8:	9b02      	ldr	r3, [sp, #8]
 800cafa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cafc:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800cb00:	4042      	eors	r2, r0
 800cb02:	f823 2c02 	strh.w	r2, [r3, #-2]
 800cb06:	9906      	ldr	r1, [sp, #24]
 800cb08:	3901      	subs	r1, #1
 800cb0a:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800cb0e:	f103 0302 	add.w	r3, r3, #2
 800cb12:	9106      	str	r1, [sp, #24]
 800cb14:	d1e2      	bne.n	800cadc <_DrawBitmap+0x3a0>
 800cb16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb18:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb1a:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800cb1e:	e010      	b.n	800cb42 <_DrawBitmap+0x406>
 800cb20:	4642      	mov	r2, r8
 800cb22:	07e9      	lsls	r1, r5, #31
 800cb24:	d505      	bpl.n	800cb32 <_DrawBitmap+0x3f6>
 800cb26:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 800cb2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cb2c:	4041      	eors	r1, r0
 800cb2e:	f823 1c02 	strh.w	r1, [r3, #-2]
 800cb32:	3a01      	subs	r2, #1
 800cb34:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800cb38:	f103 0302 	add.w	r3, r3, #2
 800cb3c:	d1f1      	bne.n	800cb22 <_DrawBitmap+0x3e6>
 800cb3e:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800cb42:	b146      	cbz	r6, 800cb56 <_DrawBitmap+0x41a>
 800cb44:	f899 3000 	ldrb.w	r3, [r9]
 800cb48:	4a37      	ldr	r2, [pc, #220]	; (800cc28 <_DrawBitmap+0x4ec>)
 800cb4a:	f109 0901 	add.w	r9, r9, #1
 800cb4e:	5cd5      	ldrb	r5, [r2, r3]
 800cb50:	f04f 0808 	mov.w	r8, #8
 800cb54:	e7b9      	b.n	800caca <_DrawBitmap+0x38e>
 800cb56:	a810      	add	r0, sp, #64	; 0x40
 800cb58:	f7fe faa4 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800cb5c:	e16b      	b.n	800ce36 <_DrawBitmap+0x6fa>
 800cb5e:	4b33      	ldr	r3, [pc, #204]	; (800cc2c <_DrawBitmap+0x4f0>)
 800cb60:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800cb66:	7c1b      	ldrb	r3, [r3, #16]
 800cb68:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 800cb6c:	f1c6 0504 	rsb	r5, r6, #4
 800cb70:	f89a 6000 	ldrb.w	r6, [sl]
 800cb74:	f003 0303 	and.w	r3, r3, #3
 800cb78:	40be      	lsls	r6, r7
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	b2ed      	uxtb	r5, r5
 800cb7e:	b2f6      	uxtb	r6, r6
 800cb80:	d06a      	beq.n	800cc58 <_DrawBitmap+0x51c>
 800cb82:	d308      	bcc.n	800cb96 <_DrawBitmap+0x45a>
 800cb84:	2b02      	cmp	r3, #2
 800cb86:	f040 8156 	bne.w	800ce36 <_DrawBitmap+0x6fa>
 800cb8a:	f8cd a018 	str.w	sl, [sp, #24]
 800cb8e:	465f      	mov	r7, fp
 800cb90:	f8dd c010 	ldr.w	ip, [sp, #16]
 800cb94:	e03e      	b.n	800cc14 <_DrawBitmap+0x4d8>
 800cb96:	4652      	mov	r2, sl
 800cb98:	465b      	mov	r3, fp
 800cb9a:	429d      	cmp	r5, r3
 800cb9c:	bfc8      	it	gt
 800cb9e:	b2dd      	uxtbgt	r5, r3
 800cba0:	1b5b      	subs	r3, r3, r5
 800cba2:	4629      	mov	r1, r5
 800cba4:	4620      	mov	r0, r4
 800cba6:	ea4f 1c96 	mov.w	ip, r6, lsr #6
 800cbaa:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800cbac:	3901      	subs	r1, #1
 800cbae:	f857 c02c 	ldr.w	ip, [r7, ip, lsl #2]
 800cbb2:	f820 cb02 	strh.w	ip, [r0], #2
 800cbb6:	00b6      	lsls	r6, r6, #2
 800cbb8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800cbbc:	b2f6      	uxtb	r6, r6
 800cbbe:	d1f2      	bne.n	800cba6 <_DrawBitmap+0x46a>
 800cbc0:	3d01      	subs	r5, #1
 800cbc2:	b2ed      	uxtb	r5, r5
 800cbc4:	3501      	adds	r5, #1
 800cbc6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	f000 8133 	beq.w	800ce36 <_DrawBitmap+0x6fa>
 800cbd0:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800cbd4:	2504      	movs	r5, #4
 800cbd6:	e7e0      	b.n	800cb9a <_DrawBitmap+0x45e>
 800cbd8:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800cbdc:	eb08 010c 	add.w	r1, r8, ip
 800cbe0:	d126      	bne.n	800cc30 <_DrawBitmap+0x4f4>
 800cbe2:	f108 0801 	add.w	r8, r8, #1
 800cbe6:	fa5f f388 	uxtb.w	r3, r8
 800cbea:	00b6      	lsls	r6, r6, #2
 800cbec:	429d      	cmp	r5, r3
 800cbee:	b2f6      	uxtb	r6, r6
 800cbf0:	d1f2      	bne.n	800cbd8 <_DrawBitmap+0x49c>
 800cbf2:	3d01      	subs	r5, #1
 800cbf4:	b2ed      	uxtb	r5, r5
 800cbf6:	1c6b      	adds	r3, r5, #1
 800cbf8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800cbfc:	f10c 0301 	add.w	r3, ip, #1
 800cc00:	eb03 0c05 	add.w	ip, r3, r5
 800cc04:	2f00      	cmp	r7, #0
 800cc06:	f000 8116 	beq.w	800ce36 <_DrawBitmap+0x6fa>
 800cc0a:	9b06      	ldr	r3, [sp, #24]
 800cc0c:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800cc10:	9306      	str	r3, [sp, #24]
 800cc12:	2504      	movs	r5, #4
 800cc14:	42bd      	cmp	r5, r7
 800cc16:	bfc8      	it	gt
 800cc18:	b2fd      	uxtbgt	r5, r7
 800cc1a:	1b7f      	subs	r7, r7, r5
 800cc1c:	f04f 0800 	mov.w	r8, #0
 800cc20:	e7da      	b.n	800cbd8 <_DrawBitmap+0x49c>
 800cc22:	bf00      	nop
 800cc24:	08012e78 	.word	0x08012e78
 800cc28:	08012cd8 	.word	0x08012cd8
 800cc2c:	20000024 	.word	0x20000024
 800cc30:	09b3      	lsrs	r3, r6, #6
 800cc32:	9821      	ldr	r0, [sp, #132]	; 0x84
 800cc34:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800cc38:	f824 3018 	strh.w	r3, [r4, r8, lsl #1]
 800cc3c:	f1b9 0f00 	cmp.w	r9, #0
 800cc40:	d0cf      	beq.n	800cbe2 <_DrawBitmap+0x4a6>
 800cc42:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800cc46:	9a05      	ldr	r2, [sp, #20]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f8cd c008 	str.w	ip, [sp, #8]
 800cc4e:	4648      	mov	r0, r9
 800cc50:	4798      	blx	r3
 800cc52:	f8dd c008 	ldr.w	ip, [sp, #8]
 800cc56:	e7c4      	b.n	800cbe2 <_DrawBitmap+0x4a6>
 800cc58:	4651      	mov	r1, sl
 800cc5a:	465b      	mov	r3, fp
 800cc5c:	429d      	cmp	r5, r3
 800cc5e:	bfc8      	it	gt
 800cc60:	b2dd      	uxtbgt	r5, r3
 800cc62:	1b5b      	subs	r3, r3, r5
 800cc64:	1ca2      	adds	r2, r4, #2
 800cc66:	4628      	mov	r0, r5
 800cc68:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800cc6c:	d005      	beq.n	800cc7a <_DrawBitmap+0x53e>
 800cc6e:	f832 7c02 	ldrh.w	r7, [r2, #-2]
 800cc72:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 800cc76:	f822 7c02 	strh.w	r7, [r2, #-2]
 800cc7a:	3801      	subs	r0, #1
 800cc7c:	00b6      	lsls	r6, r6, #2
 800cc7e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800cc82:	b2f6      	uxtb	r6, r6
 800cc84:	f102 0202 	add.w	r2, r2, #2
 800cc88:	d1ee      	bne.n	800cc68 <_DrawBitmap+0x52c>
 800cc8a:	3d01      	subs	r5, #1
 800cc8c:	b2ed      	uxtb	r5, r5
 800cc8e:	3501      	adds	r5, #1
 800cc90:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	f000 80ce 	beq.w	800ce36 <_DrawBitmap+0x6fa>
 800cc9a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 800cc9e:	2504      	movs	r5, #4
 800cca0:	e7dc      	b.n	800cc5c <_DrawBitmap+0x520>
 800cca2:	4a6e      	ldr	r2, [pc, #440]	; (800ce5c <_DrawBitmap+0x720>)
 800cca4:	f89a 3000 	ldrb.w	r3, [sl]
 800cca8:	6812      	ldr	r2, [r2, #0]
 800ccaa:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800ccac:	7c12      	ldrb	r2, [r2, #16]
 800ccae:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800ccb0:	f002 0203 	and.w	r2, r2, #3
 800ccb4:	40bb      	lsls	r3, r7
 800ccb6:	2a01      	cmp	r2, #1
 800ccb8:	b2dd      	uxtb	r5, r3
 800ccba:	f000 8095 	beq.w	800cde8 <_DrawBitmap+0x6ac>
 800ccbe:	d302      	bcc.n	800ccc6 <_DrawBitmap+0x58a>
 800ccc0:	2a02      	cmp	r2, #2
 800ccc2:	d036      	beq.n	800cd32 <_DrawBitmap+0x5f6>
 800ccc4:	e0b7      	b.n	800ce36 <_DrawBitmap+0x6fa>
 800ccc6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800ccc8:	b166      	cbz	r6, 800cce4 <_DrawBitmap+0x5a8>
 800ccca:	092d      	lsrs	r5, r5, #4
 800cccc:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800ccce:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800ccd2:	8023      	strh	r3, [r4, #0]
 800ccd4:	f10a 0201 	add.w	r2, sl, #1
 800ccd8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ccda:	f89a 5001 	ldrb.w	r5, [sl, #1]
 800ccde:	f10b 33ff 	add.w	r3, fp, #4294967295
 800cce2:	e001      	b.n	800cce8 <_DrawBitmap+0x5ac>
 800cce4:	465b      	mov	r3, fp
 800cce6:	4652      	mov	r2, sl
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	dd19      	ble.n	800cd20 <_DrawBitmap+0x5e4>
 800ccec:	1058      	asrs	r0, r3, #1
 800ccee:	1d21      	adds	r1, r4, #4
 800ccf0:	f003 0301 	and.w	r3, r3, #1
 800ccf4:	eb02 0c00 	add.w	ip, r2, r0
 800ccf8:	092f      	lsrs	r7, r5, #4
 800ccfa:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800ccfc:	f005 050f 	and.w	r5, r5, #15
 800cd00:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 800cd04:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800cd08:	f821 7c04 	strh.w	r7, [r1, #-4]
 800cd0c:	f821 5c02 	strh.w	r5, [r1, #-2]
 800cd10:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800cd14:	4562      	cmp	r2, ip
 800cd16:	f101 0104 	add.w	r1, r1, #4
 800cd1a:	d1ed      	bne.n	800ccf8 <_DrawBitmap+0x5bc>
 800cd1c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	f000 8088 	beq.w	800ce36 <_DrawBitmap+0x6fa>
 800cd26:	092d      	lsrs	r5, r5, #4
 800cd28:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800cd2a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800cd2e:	8023      	strh	r3, [r4, #0]
 800cd30:	e081      	b.n	800ce36 <_DrawBitmap+0x6fa>
 800cd32:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800cd34:	b1c7      	cbz	r7, 800cd68 <_DrawBitmap+0x62c>
 800cd36:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800cd3a:	d00b      	beq.n	800cd54 <_DrawBitmap+0x618>
 800cd3c:	092d      	lsrs	r5, r5, #4
 800cd3e:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800cd40:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800cd44:	8023      	strh	r3, [r4, #0]
 800cd46:	b12e      	cbz	r6, 800cd54 <_DrawBitmap+0x618>
 800cd48:	68b3      	ldr	r3, [r6, #8]
 800cd4a:	9904      	ldr	r1, [sp, #16]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	9a05      	ldr	r2, [sp, #20]
 800cd50:	4630      	mov	r0, r6
 800cd52:	4798      	blx	r3
 800cd54:	9804      	ldr	r0, [sp, #16]
 800cd56:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800cd58:	f89a 5001 	ldrb.w	r5, [sl, #1]
 800cd5c:	1c47      	adds	r7, r0, #1
 800cd5e:	f10b 39ff 	add.w	r9, fp, #4294967295
 800cd62:	f10a 0801 	add.w	r8, sl, #1
 800cd66:	e00f      	b.n	800cd88 <_DrawBitmap+0x64c>
 800cd68:	46d9      	mov	r9, fp
 800cd6a:	46d0      	mov	r8, sl
 800cd6c:	9f04      	ldr	r7, [sp, #16]
 800cd6e:	e00b      	b.n	800cd88 <_DrawBitmap+0x64c>
 800cd70:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 800cd74:	d10c      	bne.n	800cd90 <_DrawBitmap+0x654>
 800cd76:	f015 050f 	ands.w	r5, r5, #15
 800cd7a:	d117      	bne.n	800cdac <_DrawBitmap+0x670>
 800cd7c:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 800cd80:	3404      	adds	r4, #4
 800cd82:	3702      	adds	r7, #2
 800cd84:	f1a9 0902 	sub.w	r9, r9, #2
 800cd88:	f1b9 0f01 	cmp.w	r9, #1
 800cd8c:	dcf0      	bgt.n	800cd70 <_DrawBitmap+0x634>
 800cd8e:	e01a      	b.n	800cdc6 <_DrawBitmap+0x68a>
 800cd90:	092b      	lsrs	r3, r5, #4
 800cd92:	9921      	ldr	r1, [sp, #132]	; 0x84
 800cd94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cd98:	8023      	strh	r3, [r4, #0]
 800cd9a:	2e00      	cmp	r6, #0
 800cd9c:	d0eb      	beq.n	800cd76 <_DrawBitmap+0x63a>
 800cd9e:	68b3      	ldr	r3, [r6, #8]
 800cda0:	9a05      	ldr	r2, [sp, #20]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	4630      	mov	r0, r6
 800cda6:	4639      	mov	r1, r7
 800cda8:	4798      	blx	r3
 800cdaa:	e7e4      	b.n	800cd76 <_DrawBitmap+0x63a>
 800cdac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cdae:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 800cdb2:	8063      	strh	r3, [r4, #2]
 800cdb4:	2e00      	cmp	r6, #0
 800cdb6:	d0e1      	beq.n	800cd7c <_DrawBitmap+0x640>
 800cdb8:	68b3      	ldr	r3, [r6, #8]
 800cdba:	9a05      	ldr	r2, [sp, #20]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	4630      	mov	r0, r6
 800cdc0:	1c79      	adds	r1, r7, #1
 800cdc2:	4798      	blx	r3
 800cdc4:	e7da      	b.n	800cd7c <_DrawBitmap+0x640>
 800cdc6:	f1b9 0f00 	cmp.w	r9, #0
 800cdca:	d034      	beq.n	800ce36 <_DrawBitmap+0x6fa>
 800cdcc:	092d      	lsrs	r5, r5, #4
 800cdce:	d032      	beq.n	800ce36 <_DrawBitmap+0x6fa>
 800cdd0:	9821      	ldr	r0, [sp, #132]	; 0x84
 800cdd2:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 800cdd6:	8023      	strh	r3, [r4, #0]
 800cdd8:	b36e      	cbz	r6, 800ce36 <_DrawBitmap+0x6fa>
 800cdda:	68b3      	ldr	r3, [r6, #8]
 800cddc:	9a05      	ldr	r2, [sp, #20]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4630      	mov	r0, r6
 800cde2:	4639      	mov	r1, r7
 800cde4:	4798      	blx	r3
 800cde6:	e026      	b.n	800ce36 <_DrawBitmap+0x6fa>
 800cde8:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800cdea:	f1c6 0302 	rsb	r3, r6, #2
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	4650      	mov	r0, sl
 800cdf2:	465a      	mov	r2, fp
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	bfc8      	it	gt
 800cdf8:	b2d3      	uxtbgt	r3, r2
 800cdfa:	1ad2      	subs	r2, r2, r3
 800cdfc:	1ca1      	adds	r1, r4, #2
 800cdfe:	461e      	mov	r6, r3
 800ce00:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 800ce04:	d005      	beq.n	800ce12 <_DrawBitmap+0x6d6>
 800ce06:	f831 7c02 	ldrh.w	r7, [r1, #-2]
 800ce0a:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 800ce0e:	f821 7c02 	strh.w	r7, [r1, #-2]
 800ce12:	3e01      	subs	r6, #1
 800ce14:	012d      	lsls	r5, r5, #4
 800ce16:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 800ce1a:	b2ed      	uxtb	r5, r5
 800ce1c:	f101 0102 	add.w	r1, r1, #2
 800ce20:	d1ee      	bne.n	800ce00 <_DrawBitmap+0x6c4>
 800ce22:	3b01      	subs	r3, #1
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	3301      	adds	r3, #1
 800ce28:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800ce2c:	b11a      	cbz	r2, 800ce36 <_DrawBitmap+0x6fa>
 800ce2e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ce32:	2302      	movs	r3, #2
 800ce34:	e7de      	b.n	800cdf4 <_DrawBitmap+0x6b8>
 800ce36:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800ce38:	9b05      	ldr	r3, [sp, #20]
 800ce3a:	9e08      	ldr	r6, [sp, #32]
 800ce3c:	44ba      	add	sl, r7
 800ce3e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ce40:	3301      	adds	r3, #1
 800ce42:	4437      	add	r7, r6
 800ce44:	9305      	str	r3, [sp, #20]
 800ce46:	9709      	str	r7, [sp, #36]	; 0x24
 800ce48:	e5a3      	b.n	800c992 <_DrawBitmap+0x256>
 800ce4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce4c:	b113      	cbz	r3, 800ce54 <_DrawBitmap+0x718>
 800ce4e:	a811      	add	r0, sp, #68	; 0x44
 800ce50:	f7fe f928 	bl	800b0a4 <GUI_ALLOC_UnlockH>
 800ce54:	b013      	add	sp, #76	; 0x4c
 800ce56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce5a:	bf00      	nop
 800ce5c:	20000024 	.word	0x20000024

0800ce60 <LCD_SelectLCD>:
 800ce60:	b510      	push	{r4, lr}
 800ce62:	4b0d      	ldr	r3, [pc, #52]	; (800ce98 <LCD_SelectLCD+0x38>)
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	7c51      	ldrb	r1, [r2, #17]
 800ce68:	4a0c      	ldr	r2, [pc, #48]	; (800ce9c <LCD_SelectLCD+0x3c>)
 800ce6a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800ce6e:	461c      	mov	r4, r3
 800ce70:	b140      	cbz	r0, 800ce84 <LCD_SelectLCD+0x24>
 800ce72:	68c3      	ldr	r3, [r0, #12]
 800ce74:	b113      	cbz	r3, 800ce7c <LCD_SelectLCD+0x1c>
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	2b04      	cmp	r3, #4
 800ce7a:	d001      	beq.n	800ce80 <LCD_SelectLCD+0x20>
 800ce7c:	6800      	ldr	r0, [r0, #0]
 800ce7e:	e7f7      	b.n	800ce70 <LCD_SelectLCD+0x10>
 800ce80:	f7fd f96e 	bl	800a160 <GUI_DEVICE_Unlink>
 800ce84:	6823      	ldr	r3, [r4, #0]
 800ce86:	2200      	movs	r2, #0
 800ce88:	661a      	str	r2, [r3, #96]	; 0x60
 800ce8a:	f103 0208 	add.w	r2, r3, #8
 800ce8e:	615a      	str	r2, [r3, #20]
 800ce90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce94:	f7fb bda8 	b.w	80089e8 <LCD_SetClipRectMax>
 800ce98:	20000024 	.word	0x20000024
 800ce9c:	200194c8 	.word	0x200194c8

0800cea0 <LCD_ReadRectEx>:
 800cea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea4:	b087      	sub	sp, #28
 800cea6:	4617      	mov	r7, r2
 800cea8:	9304      	str	r3, [sp, #16]
 800ceaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ceac:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800ceae:	68da      	ldr	r2, [r3, #12]
 800ceb0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800ceb2:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800ceb6:	4606      	mov	r6, r0
 800ceb8:	460d      	mov	r5, r1
 800ceba:	b973      	cbnz	r3, 800ceda <LCD_ReadRectEx+0x3a>
 800cebc:	4b71      	ldr	r3, [pc, #452]	; (800d084 <LCD_ReadRectEx+0x1e4>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	7c58      	ldrb	r0, [r3, #17]
 800cec2:	f7fb fa43 	bl	800834c <GUI_GetBitsPerPixelEx>
 800cec6:	2808      	cmp	r0, #8
 800cec8:	4682      	mov	sl, r0
 800ceca:	dd15      	ble.n	800cef8 <LCD_ReadRectEx+0x58>
 800cecc:	2810      	cmp	r0, #16
 800cece:	bfcc      	ite	gt
 800ced0:	f04f 0904 	movgt.w	r9, #4
 800ced4:	f04f 0902 	movle.w	r9, #2
 800ced8:	e010      	b.n	800cefc <LCD_ReadRectEx+0x5c>
 800ceda:	a811      	add	r0, sp, #68	; 0x44
 800cedc:	2101      	movs	r1, #1
 800cede:	4798      	blx	r3
 800cee0:	4684      	mov	ip, r0
 800cee2:	2800      	cmp	r0, #0
 800cee4:	d0ea      	beq.n	800cebc <LCD_ReadRectEx+0x1c>
 800cee6:	9b04      	ldr	r3, [sp, #16]
 800cee8:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ceea:	e88d 0018 	stmia.w	sp, {r3, r4}
 800ceee:	4631      	mov	r1, r6
 800cef0:	462a      	mov	r2, r5
 800cef2:	463b      	mov	r3, r7
 800cef4:	47e0      	blx	ip
 800cef6:	e0c1      	b.n	800d07c <LCD_ReadRectEx+0x1dc>
 800cef8:	f04f 0901 	mov.w	r9, #1
 800cefc:	f04f 0b00 	mov.w	fp, #0
 800cf00:	9b04      	ldr	r3, [sp, #16]
 800cf02:	429d      	cmp	r5, r3
 800cf04:	f300 80ba 	bgt.w	800d07c <LCD_ReadRectEx+0x1dc>
 800cf08:	f1b9 0f02 	cmp.w	r9, #2
 800cf0c:	d009      	beq.n	800cf22 <LCD_ReadRectEx+0x82>
 800cf0e:	f1b9 0f04 	cmp.w	r9, #4
 800cf12:	d004      	beq.n	800cf1e <LCD_ReadRectEx+0x7e>
 800cf14:	f1b9 0f01 	cmp.w	r9, #1
 800cf18:	f040 80ae 	bne.w	800d078 <LCD_ReadRectEx+0x1d8>
 800cf1c:	e003      	b.n	800cf26 <LCD_ReadRectEx+0x86>
 800cf1e:	46b4      	mov	ip, r6
 800cf20:	e09b      	b.n	800d05a <LCD_ReadRectEx+0x1ba>
 800cf22:	46b4      	mov	ip, r6
 800cf24:	e08a      	b.n	800d03c <LCD_ReadRectEx+0x19c>
 800cf26:	f10a 32ff 	add.w	r2, sl, #4294967295
 800cf2a:	2a07      	cmp	r2, #7
 800cf2c:	f200 80a4 	bhi.w	800d078 <LCD_ReadRectEx+0x1d8>
 800cf30:	e8df f002 	tbb	[pc, r2]
 800cf34:	0606080a 	.word	0x0606080a
 800cf38:	04040404 	.word	0x04040404
 800cf3c:	46b4      	mov	ip, r6
 800cf3e:	e066      	b.n	800d00e <LCD_ReadRectEx+0x16e>
 800cf40:	46b4      	mov	ip, r6
 800cf42:	e047      	b.n	800cfd4 <LCD_ReadRectEx+0x134>
 800cf44:	46b4      	mov	ip, r6
 800cf46:	e022      	b.n	800cf8e <LCD_ReadRectEx+0xee>
 800cf48:	46b4      	mov	ip, r6
 800cf4a:	45bc      	cmp	ip, r7
 800cf4c:	f300 8094 	bgt.w	800d078 <LCD_ReadRectEx+0x1d8>
 800cf50:	4661      	mov	r1, ip
 800cf52:	462a      	mov	r2, r5
 800cf54:	f8cd c00c 	str.w	ip, [sp, #12]
 800cf58:	9811      	ldr	r0, [sp, #68]	; 0x44
 800cf5a:	47c0      	blx	r8
 800cf5c:	f1cb 0207 	rsb	r2, fp, #7
 800cf60:	fa00 f202 	lsl.w	r2, r0, r2
 800cf64:	f64f 717f 	movw	r1, #65407	; 0xff7f
 800cf68:	7820      	ldrb	r0, [r4, #0]
 800cf6a:	fa41 f10b 	asr.w	r1, r1, fp
 800cf6e:	4001      	ands	r1, r0
 800cf70:	430a      	orrs	r2, r1
 800cf72:	7022      	strb	r2, [r4, #0]
 800cf74:	f10b 0301 	add.w	r3, fp, #1
 800cf78:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800cf7c:	f023 0207 	bic.w	r2, r3, #7
 800cf80:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800cf84:	fa43 fb02 	asr.w	fp, r3, r2
 800cf88:	f10c 0c01 	add.w	ip, ip, #1
 800cf8c:	e7dd      	b.n	800cf4a <LCD_ReadRectEx+0xaa>
 800cf8e:	45bc      	cmp	ip, r7
 800cf90:	dc72      	bgt.n	800d078 <LCD_ReadRectEx+0x1d8>
 800cf92:	4661      	mov	r1, ip
 800cf94:	462a      	mov	r2, r5
 800cf96:	f8cd c00c 	str.w	ip, [sp, #12]
 800cf9a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800cf9c:	47c0      	blx	r8
 800cf9e:	ea4f 024b 	mov.w	r2, fp, lsl #1
 800cfa2:	f1c2 0106 	rsb	r1, r2, #6
 800cfa6:	fa00 f101 	lsl.w	r1, r0, r1
 800cfaa:	f64f 703f 	movw	r0, #65343	; 0xff3f
 800cfae:	fa40 f202 	asr.w	r2, r0, r2
 800cfb2:	7820      	ldrb	r0, [r4, #0]
 800cfb4:	4002      	ands	r2, r0
 800cfb6:	4311      	orrs	r1, r2
 800cfb8:	7021      	strb	r1, [r4, #0]
 800cfba:	f10b 0301 	add.w	r3, fp, #1
 800cfbe:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800cfc2:	f023 0203 	bic.w	r2, r3, #3
 800cfc6:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800cfca:	fa43 fb02 	asr.w	fp, r3, r2
 800cfce:	f10c 0c01 	add.w	ip, ip, #1
 800cfd2:	e7dc      	b.n	800cf8e <LCD_ReadRectEx+0xee>
 800cfd4:	45bc      	cmp	ip, r7
 800cfd6:	dc4f      	bgt.n	800d078 <LCD_ReadRectEx+0x1d8>
 800cfd8:	4661      	mov	r1, ip
 800cfda:	462a      	mov	r2, r5
 800cfdc:	f8cd c00c 	str.w	ip, [sp, #12]
 800cfe0:	9811      	ldr	r0, [sp, #68]	; 0x44
 800cfe2:	47c0      	blx	r8
 800cfe4:	ea4f 028b 	mov.w	r2, fp, lsl #2
 800cfe8:	f1c2 0104 	rsb	r1, r2, #4
 800cfec:	fa00 f101 	lsl.w	r1, r0, r1
 800cff0:	200f      	movs	r0, #15
 800cff2:	fa00 f202 	lsl.w	r2, r0, r2
 800cff6:	7820      	ldrb	r0, [r4, #0]
 800cff8:	4002      	ands	r2, r0
 800cffa:	4311      	orrs	r1, r2
 800cffc:	7021      	strb	r1, [r4, #0]
 800cffe:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d002:	445c      	add	r4, fp
 800d004:	f10c 0c01 	add.w	ip, ip, #1
 800d008:	f08b 0b01 	eor.w	fp, fp, #1
 800d00c:	e7e2      	b.n	800cfd4 <LCD_ReadRectEx+0x134>
 800d00e:	4273      	negs	r3, r6
 800d010:	1ba2      	subs	r2, r4, r6
 800d012:	45bc      	cmp	ip, r7
 800d014:	9305      	str	r3, [sp, #20]
 800d016:	4462      	add	r2, ip
 800d018:	dc0e      	bgt.n	800d038 <LCD_ReadRectEx+0x198>
 800d01a:	4661      	mov	r1, ip
 800d01c:	462a      	mov	r2, r5
 800d01e:	f8cd c00c 	str.w	ip, [sp, #12]
 800d022:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d024:	47c0      	blx	r8
 800d026:	9a05      	ldr	r2, [sp, #20]
 800d028:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d02c:	4422      	add	r2, r4
 800d02e:	f802 000c 	strb.w	r0, [r2, ip]
 800d032:	f10c 0c01 	add.w	ip, ip, #1
 800d036:	e7ea      	b.n	800d00e <LCD_ReadRectEx+0x16e>
 800d038:	4614      	mov	r4, r2
 800d03a:	e01d      	b.n	800d078 <LCD_ReadRectEx+0x1d8>
 800d03c:	45bc      	cmp	ip, r7
 800d03e:	dc1b      	bgt.n	800d078 <LCD_ReadRectEx+0x1d8>
 800d040:	4661      	mov	r1, ip
 800d042:	f8cd c00c 	str.w	ip, [sp, #12]
 800d046:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d048:	462a      	mov	r2, r5
 800d04a:	47c0      	blx	r8
 800d04c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d050:	f824 0b02 	strh.w	r0, [r4], #2
 800d054:	f10c 0c01 	add.w	ip, ip, #1
 800d058:	e7f0      	b.n	800d03c <LCD_ReadRectEx+0x19c>
 800d05a:	45bc      	cmp	ip, r7
 800d05c:	dc0c      	bgt.n	800d078 <LCD_ReadRectEx+0x1d8>
 800d05e:	4661      	mov	r1, ip
 800d060:	f8cd c00c 	str.w	ip, [sp, #12]
 800d064:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d066:	462a      	mov	r2, r5
 800d068:	47c0      	blx	r8
 800d06a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d06e:	f844 0b04 	str.w	r0, [r4], #4
 800d072:	f10c 0c01 	add.w	ip, ip, #1
 800d076:	e7f0      	b.n	800d05a <LCD_ReadRectEx+0x1ba>
 800d078:	3501      	adds	r5, #1
 800d07a:	e741      	b.n	800cf00 <LCD_ReadRectEx+0x60>
 800d07c:	b007      	add	sp, #28
 800d07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d082:	bf00      	nop
 800d084:	20000024 	.word	0x20000024

0800d088 <GUI_ReadRectEx>:
 800d088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d08a:	4d16      	ldr	r5, [pc, #88]	; (800d0e4 <GUI_ReadRectEx+0x5c>)
 800d08c:	9e05      	ldr	r6, [sp, #20]
 800d08e:	682d      	ldr	r5, [r5, #0]
 800d090:	9c06      	ldr	r4, [sp, #24]
 800d092:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 800d096:	42b8      	cmp	r0, r7
 800d098:	bfb8      	it	lt
 800d09a:	4638      	movlt	r0, r7
 800d09c:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 800d0a0:	42ba      	cmp	r2, r7
 800d0a2:	bfa8      	it	ge
 800d0a4:	463a      	movge	r2, r7
 800d0a6:	4282      	cmp	r2, r0
 800d0a8:	db1b      	blt.n	800d0e2 <GUI_ReadRectEx+0x5a>
 800d0aa:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 800d0ae:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 800d0b2:	42b9      	cmp	r1, r7
 800d0b4:	bfb8      	it	lt
 800d0b6:	4639      	movlt	r1, r7
 800d0b8:	42ab      	cmp	r3, r5
 800d0ba:	bfa8      	it	ge
 800d0bc:	462b      	movge	r3, r5
 800d0be:	428b      	cmp	r3, r1
 800d0c0:	db0f      	blt.n	800d0e2 <GUI_ReadRectEx+0x5a>
 800d0c2:	68e5      	ldr	r5, [r4, #12]
 800d0c4:	682d      	ldr	r5, [r5, #0]
 800d0c6:	f035 0704 	bics.w	r7, r5, #4
 800d0ca:	d105      	bne.n	800d0d8 <GUI_ReadRectEx+0x50>
 800d0cc:	9605      	str	r6, [sp, #20]
 800d0ce:	9406      	str	r4, [sp, #24]
 800d0d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d0d4:	f7ff bee4 	b.w	800cea0 <LCD_ReadRectEx>
 800d0d8:	6825      	ldr	r5, [r4, #0]
 800d0da:	2d00      	cmp	r5, #0
 800d0dc:	d0f6      	beq.n	800d0cc <GUI_ReadRectEx+0x44>
 800d0de:	462c      	mov	r4, r5
 800d0e0:	e7ef      	b.n	800d0c2 <GUI_ReadRectEx+0x3a>
 800d0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0e4:	20000024 	.word	0x20000024

0800d0e8 <_OnExit>:
 800d0e8:	b510      	push	{r4, lr}
 800d0ea:	4c03      	ldr	r4, [pc, #12]	; (800d0f8 <_OnExit+0x10>)
 800d0ec:	6820      	ldr	r0, [r4, #0]
 800d0ee:	f7fd ffb7 	bl	800b060 <GUI_ALLOC_FreeFixedBlock>
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	6023      	str	r3, [r4, #0]
 800d0f6:	bd10      	pop	{r4, pc}
 800d0f8:	200195c8 	.word	0x200195c8

0800d0fc <LCD_InitColors>:
 800d0fc:	b538      	push	{r3, r4, r5, lr}
 800d0fe:	4d09      	ldr	r5, [pc, #36]	; (800d124 <LCD_InitColors+0x28>)
 800d100:	682c      	ldr	r4, [r5, #0]
 800d102:	b95c      	cbnz	r4, 800d11c <LCD_InitColors+0x20>
 800d104:	4b08      	ldr	r3, [pc, #32]	; (800d128 <LCD_InitColors+0x2c>)
 800d106:	6818      	ldr	r0, [r3, #0]
 800d108:	0080      	lsls	r0, r0, #2
 800d10a:	f7fe f909 	bl	800b320 <GUI_ALLOC_GetFixedBlock>
 800d10e:	6028      	str	r0, [r5, #0]
 800d110:	b130      	cbz	r0, 800d120 <LCD_InitColors+0x24>
 800d112:	4806      	ldr	r0, [pc, #24]	; (800d12c <LCD_InitColors+0x30>)
 800d114:	4b06      	ldr	r3, [pc, #24]	; (800d130 <LCD_InitColors+0x34>)
 800d116:	6003      	str	r3, [r0, #0]
 800d118:	f7fd f924 	bl	800a364 <GUI__RegisterExit>
 800d11c:	2000      	movs	r0, #0
 800d11e:	bd38      	pop	{r3, r4, r5, pc}
 800d120:	2001      	movs	r0, #1
 800d122:	bd38      	pop	{r3, r4, r5, pc}
 800d124:	200195c8 	.word	0x200195c8
 800d128:	20000030 	.word	0x20000030
 800d12c:	2001929c 	.word	0x2001929c
 800d130:	0800d0e9 	.word	0x0800d0e9

0800d134 <LCD_InitLUT>:
 800d134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d138:	f000 fc81 	bl	800da3e <LCD_GetNumLayers>
 800d13c:	2400      	movs	r4, #0
 800d13e:	4680      	mov	r8, r0
 800d140:	4544      	cmp	r4, r8
 800d142:	da2c      	bge.n	800d19e <LCD_InitLUT+0x6a>
 800d144:	4620      	mov	r0, r4
 800d146:	f7fc ffd3 	bl	800a0f0 <GUI_DEVICE__GetpDriver>
 800d14a:	b330      	cbz	r0, 800d19a <LCD_InitLUT+0x66>
 800d14c:	4e15      	ldr	r6, [pc, #84]	; (800d1a4 <LCD_InitLUT+0x70>)
 800d14e:	6833      	ldr	r3, [r6, #0]
 800d150:	4620      	mov	r0, r4
 800d152:	f893 9011 	ldrb.w	r9, [r3, #17]
 800d156:	745c      	strb	r4, [r3, #17]
 800d158:	f7fb f8da 	bl	8008310 <LCD_GetBitsPerPixelEx>
 800d15c:	2808      	cmp	r0, #8
 800d15e:	dd03      	ble.n	800d168 <LCD_InitLUT+0x34>
 800d160:	6833      	ldr	r3, [r6, #0]
 800d162:	f883 9011 	strb.w	r9, [r3, #17]
 800d166:	e018      	b.n	800d19a <LCD_InitLUT+0x66>
 800d168:	4b0f      	ldr	r3, [pc, #60]	; (800d1a8 <LCD_InitLUT+0x74>)
 800d16a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d16e:	691a      	ldr	r2, [r3, #16]
 800d170:	4b0e      	ldr	r3, [pc, #56]	; (800d1ac <LCD_InitLUT+0x78>)
 800d172:	429a      	cmp	r2, r3
 800d174:	d0f4      	beq.n	800d160 <LCD_InitLUT+0x2c>
 800d176:	4620      	mov	r0, r4
 800d178:	f7fb f8cd 	bl	8008316 <LCD_GetNumColorsEx>
 800d17c:	2500      	movs	r5, #0
 800d17e:	4682      	mov	sl, r0
 800d180:	4555      	cmp	r5, sl
 800d182:	daed      	bge.n	800d160 <LCD_InitLUT+0x2c>
 800d184:	b2ef      	uxtb	r7, r5
 800d186:	4638      	mov	r0, r7
 800d188:	f7fb fc98 	bl	8008abc <LCD_Index2Color>
 800d18c:	4639      	mov	r1, r7
 800d18e:	4602      	mov	r2, r0
 800d190:	4620      	mov	r0, r4
 800d192:	f7fb f879 	bl	8008288 <LCD_SetLUTEntryEx>
 800d196:	3501      	adds	r5, #1
 800d198:	e7f2      	b.n	800d180 <LCD_InitLUT+0x4c>
 800d19a:	3401      	adds	r4, #1
 800d19c:	e7d0      	b.n	800d140 <LCD_InitLUT+0xc>
 800d19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1a2:	bf00      	nop
 800d1a4:	20000024 	.word	0x20000024
 800d1a8:	200194c8 	.word	0x200194c8
 800d1ac:	080132c8 	.word	0x080132c8

0800d1b0 <LCD_AA_SetAndMask>:
 800d1b0:	4b02      	ldr	r3, [pc, #8]	; (800d1bc <LCD_AA_SetAndMask+0xc>)
 800d1b2:	681a      	ldr	r2, [r3, #0]
 800d1b4:	6018      	str	r0, [r3, #0]
 800d1b6:	4610      	mov	r0, r2
 800d1b8:	4770      	bx	lr
 800d1ba:	bf00      	nop
 800d1bc:	20000034 	.word	0x20000034

0800d1c0 <GUI__SinHQ>:
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	4b1b      	ldr	r3, [pc, #108]	; (800d230 <GUI__SinHQ+0x70>)
 800d1c4:	bfb8      	it	lt
 800d1c6:	4240      	neglt	r0, r0
 800d1c8:	fb90 f1f3 	sdiv	r1, r0, r3
 800d1cc:	fb03 0311 	mls	r3, r3, r1, r0
 800d1d0:	4918      	ldr	r1, [pc, #96]	; (800d234 <GUI__SinHQ+0x74>)
 800d1d2:	bfb4      	ite	lt
 800d1d4:	f04f 32ff 	movlt.w	r2, #4294967295
 800d1d8:	2201      	movge	r2, #1
 800d1da:	428b      	cmp	r3, r1
 800d1dc:	b570      	push	{r4, r5, r6, lr}
 800d1de:	dd04      	ble.n	800d1ea <GUI__SinHQ+0x2a>
 800d1e0:	f5a3 332f 	sub.w	r3, r3, #179200	; 0x2bc00
 800d1e4:	4252      	negs	r2, r2
 800d1e6:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800d1ea:	4913      	ldr	r1, [pc, #76]	; (800d238 <GUI__SinHQ+0x78>)
 800d1ec:	428b      	cmp	r3, r1
 800d1ee:	bfc4      	itt	gt
 800d1f0:	f5c3 332f 	rsbgt	r3, r3, #179200	; 0x2bc00
 800d1f4:	f503 7348 	addgt.w	r3, r3, #800	; 0x320
 800d1f8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800d1fc:	fb93 f1f5 	sdiv	r1, r3, r5
 800d200:	295a      	cmp	r1, #90	; 0x5a
 800d202:	d00e      	beq.n	800d222 <GUI__SinHQ+0x62>
 800d204:	4e0d      	ldr	r6, [pc, #52]	; (800d23c <GUI__SinHQ+0x7c>)
 800d206:	480e      	ldr	r0, [pc, #56]	; (800d240 <GUI__SinHQ+0x80>)
 800d208:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 800d20c:	fb00 3301 	mla	r3, r0, r1, r3
 800d210:	3101      	adds	r1, #1
 800d212:	f856 0021 	ldr.w	r0, [r6, r1, lsl #2]
 800d216:	1b00      	subs	r0, r0, r4
 800d218:	4358      	muls	r0, r3
 800d21a:	fbb0 f0f5 	udiv	r0, r0, r5
 800d21e:	4420      	add	r0, r4
 800d220:	e001      	b.n	800d226 <GUI__SinHQ+0x66>
 800d222:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d226:	2a01      	cmp	r2, #1
 800d228:	bf18      	it	ne
 800d22a:	4240      	negne	r0, r0
 800d22c:	bd70      	pop	{r4, r5, r6, pc}
 800d22e:	bf00      	nop
 800d230:	00057e40 	.word	0x00057e40
 800d234:	0002bf20 	.word	0x0002bf20
 800d238:	00015f90 	.word	0x00015f90
 800d23c:	08012eec 	.word	0x08012eec
 800d240:	fffffc18 	.word	0xfffffc18

0800d244 <GUI__CosHQ>:
 800d244:	f500 30af 	add.w	r0, r0, #89600	; 0x15e00
 800d248:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 800d24c:	f7ff bfb8 	b.w	800d1c0 <GUI__SinHQ>

0800d250 <GUI__ExpandPixelIndicesEx>:
 800d250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d254:	1e0c      	subs	r4, r1, #0
 800d256:	4605      	mov	r5, r0
 800d258:	f340 80b3 	ble.w	800d3c2 <GUI__ExpandPixelIndicesEx+0x172>
 800d25c:	2a08      	cmp	r2, #8
 800d25e:	685f      	ldr	r7, [r3, #4]
 800d260:	dd04      	ble.n	800d26c <GUI__ExpandPixelIndicesEx+0x1c>
 800d262:	2a10      	cmp	r2, #16
 800d264:	f340 8098 	ble.w	800d398 <GUI__ExpandPixelIndicesEx+0x148>
 800d268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d26c:	3a01      	subs	r2, #1
 800d26e:	2a07      	cmp	r2, #7
 800d270:	f200 80a7 	bhi.w	800d3c2 <GUI__ExpandPixelIndicesEx+0x172>
 800d274:	e8df f002 	tbb	[pc, r2]
 800d278:	58a52d04 	.word	0x58a52d04
 800d27c:	83a5a5a5 	.word	0x83a5a5a5
 800d280:	1e66      	subs	r6, r4, #1
 800d282:	10f2      	asrs	r2, r6, #3
 800d284:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800d288:	3b01      	subs	r3, #1
 800d28a:	eb05 0802 	add.w	r8, r5, r2
 800d28e:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 800d292:	f006 0607 	and.w	r6, r6, #7
 800d296:	f815 a002 	ldrb.w	sl, [r5, r2]
 800d29a:	2580      	movs	r5, #128	; 0x80
 800d29c:	4135      	asrs	r5, r6
 800d29e:	f108 38ff 	add.w	r8, r8, #4294967295
 800d2a2:	b2ed      	uxtb	r5, r5
 800d2a4:	f1c6 0307 	rsb	r3, r6, #7
 800d2a8:	ea0a 0005 	and.w	r0, sl, r5
 800d2ac:	4118      	asrs	r0, r3
 800d2ae:	47b8      	blx	r7
 800d2b0:	f849 0904 	str.w	r0, [r9], #-4
 800d2b4:	b936      	cbnz	r6, 800d2c4 <GUI__ExpandPixelIndicesEx+0x74>
 800d2b6:	f898 a000 	ldrb.w	sl, [r8]
 800d2ba:	2501      	movs	r5, #1
 800d2bc:	f108 38ff 	add.w	r8, r8, #4294967295
 800d2c0:	2607      	movs	r6, #7
 800d2c2:	e002      	b.n	800d2ca <GUI__ExpandPixelIndicesEx+0x7a>
 800d2c4:	006d      	lsls	r5, r5, #1
 800d2c6:	3e01      	subs	r6, #1
 800d2c8:	b2ed      	uxtb	r5, r5
 800d2ca:	3c01      	subs	r4, #1
 800d2cc:	d1ea      	bne.n	800d2a4 <GUI__ExpandPixelIndicesEx+0x54>
 800d2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2d2:	1e66      	subs	r6, r4, #1
 800d2d4:	10b2      	asrs	r2, r6, #2
 800d2d6:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800d2da:	3b01      	subs	r3, #1
 800d2dc:	f006 0603 	and.w	r6, r6, #3
 800d2e0:	eb05 0802 	add.w	r8, r5, r2
 800d2e4:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 800d2e8:	f815 a002 	ldrb.w	sl, [r5, r2]
 800d2ec:	0073      	lsls	r3, r6, #1
 800d2ee:	25c0      	movs	r5, #192	; 0xc0
 800d2f0:	411d      	asrs	r5, r3
 800d2f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800d2f6:	b2ed      	uxtb	r5, r5
 800d2f8:	0073      	lsls	r3, r6, #1
 800d2fa:	f1c3 0306 	rsb	r3, r3, #6
 800d2fe:	ea0a 0005 	and.w	r0, sl, r5
 800d302:	4118      	asrs	r0, r3
 800d304:	47b8      	blx	r7
 800d306:	f849 0904 	str.w	r0, [r9], #-4
 800d30a:	b936      	cbnz	r6, 800d31a <GUI__ExpandPixelIndicesEx+0xca>
 800d30c:	2503      	movs	r5, #3
 800d30e:	f898 a000 	ldrb.w	sl, [r8]
 800d312:	462e      	mov	r6, r5
 800d314:	f108 38ff 	add.w	r8, r8, #4294967295
 800d318:	e002      	b.n	800d320 <GUI__ExpandPixelIndicesEx+0xd0>
 800d31a:	00ad      	lsls	r5, r5, #2
 800d31c:	3e01      	subs	r6, #1
 800d31e:	b2ed      	uxtb	r5, r5
 800d320:	3c01      	subs	r4, #1
 800d322:	d1e9      	bne.n	800d2f8 <GUI__ExpandPixelIndicesEx+0xa8>
 800d324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d328:	1e66      	subs	r6, r4, #1
 800d32a:	1072      	asrs	r2, r6, #1
 800d32c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800d330:	3b01      	subs	r3, #1
 800d332:	f006 0601 	and.w	r6, r6, #1
 800d336:	eb05 0802 	add.w	r8, r5, r2
 800d33a:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 800d33e:	f815 a002 	ldrb.w	sl, [r5, r2]
 800d342:	00b3      	lsls	r3, r6, #2
 800d344:	25f0      	movs	r5, #240	; 0xf0
 800d346:	411d      	asrs	r5, r3
 800d348:	f108 38ff 	add.w	r8, r8, #4294967295
 800d34c:	b2ed      	uxtb	r5, r5
 800d34e:	00b3      	lsls	r3, r6, #2
 800d350:	f1c3 0304 	rsb	r3, r3, #4
 800d354:	ea0a 0005 	and.w	r0, sl, r5
 800d358:	4118      	asrs	r0, r3
 800d35a:	47b8      	blx	r7
 800d35c:	f849 0904 	str.w	r0, [r9], #-4
 800d360:	b936      	cbnz	r6, 800d370 <GUI__ExpandPixelIndicesEx+0x120>
 800d362:	f898 a000 	ldrb.w	sl, [r8]
 800d366:	250f      	movs	r5, #15
 800d368:	f108 38ff 	add.w	r8, r8, #4294967295
 800d36c:	2601      	movs	r6, #1
 800d36e:	e002      	b.n	800d376 <GUI__ExpandPixelIndicesEx+0x126>
 800d370:	012d      	lsls	r5, r5, #4
 800d372:	b2ed      	uxtb	r5, r5
 800d374:	2600      	movs	r6, #0
 800d376:	3c01      	subs	r4, #1
 800d378:	d1e9      	bne.n	800d34e <GUI__ExpandPixelIndicesEx+0xfe>
 800d37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d37e:	192e      	adds	r6, r5, r4
 800d380:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 800d384:	1b34      	subs	r4, r6, r4
 800d386:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 800d38a:	47b8      	blx	r7
 800d38c:	42a6      	cmp	r6, r4
 800d38e:	f845 0d04 	str.w	r0, [r5, #-4]!
 800d392:	d1f8      	bne.n	800d386 <GUI__ExpandPixelIndicesEx+0x136>
 800d394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d398:	695e      	ldr	r6, [r3, #20]
 800d39a:	b12e      	cbz	r6, 800d3a8 <GUI__ExpandPixelIndicesEx+0x158>
 800d39c:	4629      	mov	r1, r5
 800d39e:	4622      	mov	r2, r4
 800d3a0:	2302      	movs	r3, #2
 800d3a2:	47b0      	blx	r6
 800d3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3a8:	0064      	lsls	r4, r4, #1
 800d3aa:	4425      	add	r5, r4
 800d3ac:	192e      	adds	r6, r5, r4
 800d3ae:	1b2c      	subs	r4, r5, r4
 800d3b0:	f835 0d02 	ldrh.w	r0, [r5, #-2]!
 800d3b4:	47b8      	blx	r7
 800d3b6:	42a5      	cmp	r5, r4
 800d3b8:	f846 0d04 	str.w	r0, [r6, #-4]!
 800d3bc:	d1f8      	bne.n	800d3b0 <GUI__ExpandPixelIndicesEx+0x160>
 800d3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d3c6 <GUI__CompactPixelIndices>:
 800d3c6:	2a08      	cmp	r2, #8
 800d3c8:	b510      	push	{r4, lr}
 800d3ca:	dd0e      	ble.n	800d3ea <GUI__CompactPixelIndices+0x24>
 800d3cc:	2a10      	cmp	r2, #16
 800d3ce:	dc0a      	bgt.n	800d3e6 <GUI__CompactPixelIndices+0x20>
 800d3d0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	f850 2b04 	ldr.w	r2, [r0], #4
 800d3da:	f823 2b02 	strh.w	r2, [r3], #2
 800d3de:	428b      	cmp	r3, r1
 800d3e0:	d1f9      	bne.n	800d3d6 <GUI__CompactPixelIndices+0x10>
 800d3e2:	2001      	movs	r0, #1
 800d3e4:	bd10      	pop	{r4, pc}
 800d3e6:	2000      	movs	r0, #0
 800d3e8:	bd10      	pop	{r4, pc}
 800d3ea:	2a02      	cmp	r2, #2
 800d3ec:	d06d      	beq.n	800d4ca <GUI__CompactPixelIndices+0x104>
 800d3ee:	2a04      	cmp	r2, #4
 800d3f0:	d054      	beq.n	800d49c <GUI__CompactPixelIndices+0xd6>
 800d3f2:	2a01      	cmp	r2, #1
 800d3f4:	f040 8095 	bne.w	800d522 <GUI__CompactPixelIndices+0x15c>
 800d3f8:	4604      	mov	r4, r0
 800d3fa:	6803      	ldr	r3, [r0, #0]
 800d3fc:	2901      	cmp	r1, #1
 800d3fe:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 800d402:	b2db      	uxtb	r3, r3
 800d404:	d047      	beq.n	800d496 <GUI__CompactPixelIndices+0xd0>
 800d406:	6842      	ldr	r2, [r0, #4]
 800d408:	2902      	cmp	r1, #2
 800d40a:	f002 0201 	and.w	r2, r2, #1
 800d40e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800d412:	d102      	bne.n	800d41a <GUI__CompactPixelIndices+0x54>
 800d414:	f100 0208 	add.w	r2, r0, #8
 800d418:	e03e      	b.n	800d498 <GUI__CompactPixelIndices+0xd2>
 800d41a:	6882      	ldr	r2, [r0, #8]
 800d41c:	2903      	cmp	r1, #3
 800d41e:	f002 0201 	and.w	r2, r2, #1
 800d422:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800d426:	d102      	bne.n	800d42e <GUI__CompactPixelIndices+0x68>
 800d428:	f100 020c 	add.w	r2, r0, #12
 800d42c:	e034      	b.n	800d498 <GUI__CompactPixelIndices+0xd2>
 800d42e:	68c2      	ldr	r2, [r0, #12]
 800d430:	2904      	cmp	r1, #4
 800d432:	f002 0201 	and.w	r2, r2, #1
 800d436:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800d43a:	d102      	bne.n	800d442 <GUI__CompactPixelIndices+0x7c>
 800d43c:	f100 0210 	add.w	r2, r0, #16
 800d440:	e02a      	b.n	800d498 <GUI__CompactPixelIndices+0xd2>
 800d442:	6902      	ldr	r2, [r0, #16]
 800d444:	2905      	cmp	r1, #5
 800d446:	f002 0201 	and.w	r2, r2, #1
 800d44a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800d44e:	d102      	bne.n	800d456 <GUI__CompactPixelIndices+0x90>
 800d450:	f100 0214 	add.w	r2, r0, #20
 800d454:	e020      	b.n	800d498 <GUI__CompactPixelIndices+0xd2>
 800d456:	6942      	ldr	r2, [r0, #20]
 800d458:	2906      	cmp	r1, #6
 800d45a:	f002 0201 	and.w	r2, r2, #1
 800d45e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800d462:	d102      	bne.n	800d46a <GUI__CompactPixelIndices+0xa4>
 800d464:	f100 0218 	add.w	r2, r0, #24
 800d468:	e016      	b.n	800d498 <GUI__CompactPixelIndices+0xd2>
 800d46a:	6982      	ldr	r2, [r0, #24]
 800d46c:	3907      	subs	r1, #7
 800d46e:	f002 0201 	and.w	r2, r2, #1
 800d472:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800d476:	d102      	bne.n	800d47e <GUI__CompactPixelIndices+0xb8>
 800d478:	f100 021c 	add.w	r2, r0, #28
 800d47c:	e005      	b.n	800d48a <GUI__CompactPixelIndices+0xc4>
 800d47e:	f100 0220 	add.w	r2, r0, #32
 800d482:	69c0      	ldr	r0, [r0, #28]
 800d484:	f000 0001 	and.w	r0, r0, #1
 800d488:	4303      	orrs	r3, r0
 800d48a:	f804 3b01 	strb.w	r3, [r4], #1
 800d48e:	2900      	cmp	r1, #0
 800d490:	d0a7      	beq.n	800d3e2 <GUI__CompactPixelIndices+0x1c>
 800d492:	4610      	mov	r0, r2
 800d494:	e7b1      	b.n	800d3fa <GUI__CompactPixelIndices+0x34>
 800d496:	1d02      	adds	r2, r0, #4
 800d498:	2100      	movs	r1, #0
 800d49a:	e7f6      	b.n	800d48a <GUI__CompactPixelIndices+0xc4>
 800d49c:	4602      	mov	r2, r0
 800d49e:	6803      	ldr	r3, [r0, #0]
 800d4a0:	2901      	cmp	r1, #1
 800d4a2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	d102      	bne.n	800d4b0 <GUI__CompactPixelIndices+0xea>
 800d4aa:	1d04      	adds	r4, r0, #4
 800d4ac:	2100      	movs	r1, #0
 800d4ae:	e006      	b.n	800d4be <GUI__CompactPixelIndices+0xf8>
 800d4b0:	f100 0408 	add.w	r4, r0, #8
 800d4b4:	6840      	ldr	r0, [r0, #4]
 800d4b6:	f000 000f 	and.w	r0, r0, #15
 800d4ba:	4303      	orrs	r3, r0
 800d4bc:	3902      	subs	r1, #2
 800d4be:	f802 3b01 	strb.w	r3, [r2], #1
 800d4c2:	2900      	cmp	r1, #0
 800d4c4:	d08d      	beq.n	800d3e2 <GUI__CompactPixelIndices+0x1c>
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	e7e9      	b.n	800d49e <GUI__CompactPixelIndices+0xd8>
 800d4ca:	4604      	mov	r4, r0
 800d4cc:	6803      	ldr	r3, [r0, #0]
 800d4ce:	2901      	cmp	r1, #1
 800d4d0:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800d4d4:	b2db      	uxtb	r3, r3
 800d4d6:	d021      	beq.n	800d51c <GUI__CompactPixelIndices+0x156>
 800d4d8:	6842      	ldr	r2, [r0, #4]
 800d4da:	2902      	cmp	r1, #2
 800d4dc:	f002 0203 	and.w	r2, r2, #3
 800d4e0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800d4e4:	d102      	bne.n	800d4ec <GUI__CompactPixelIndices+0x126>
 800d4e6:	f100 0208 	add.w	r2, r0, #8
 800d4ea:	e018      	b.n	800d51e <GUI__CompactPixelIndices+0x158>
 800d4ec:	6882      	ldr	r2, [r0, #8]
 800d4ee:	2903      	cmp	r1, #3
 800d4f0:	f002 0203 	and.w	r2, r2, #3
 800d4f4:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800d4f8:	d102      	bne.n	800d500 <GUI__CompactPixelIndices+0x13a>
 800d4fa:	f100 020c 	add.w	r2, r0, #12
 800d4fe:	e00e      	b.n	800d51e <GUI__CompactPixelIndices+0x158>
 800d500:	f100 0210 	add.w	r2, r0, #16
 800d504:	68c0      	ldr	r0, [r0, #12]
 800d506:	f000 0003 	and.w	r0, r0, #3
 800d50a:	4303      	orrs	r3, r0
 800d50c:	3904      	subs	r1, #4
 800d50e:	f804 3b01 	strb.w	r3, [r4], #1
 800d512:	2900      	cmp	r1, #0
 800d514:	f43f af65 	beq.w	800d3e2 <GUI__CompactPixelIndices+0x1c>
 800d518:	4610      	mov	r0, r2
 800d51a:	e7d7      	b.n	800d4cc <GUI__CompactPixelIndices+0x106>
 800d51c:	1d02      	adds	r2, r0, #4
 800d51e:	2100      	movs	r1, #0
 800d520:	e7f5      	b.n	800d50e <GUI__CompactPixelIndices+0x148>
 800d522:	2300      	movs	r3, #0
 800d524:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800d528:	54c2      	strb	r2, [r0, r3]
 800d52a:	3301      	adds	r3, #1
 800d52c:	428b      	cmp	r3, r1
 800d52e:	d1f9      	bne.n	800d524 <GUI__CompactPixelIndices+0x15e>
 800d530:	e757      	b.n	800d3e2 <GUI__CompactPixelIndices+0x1c>

0800d532 <GUI__ConvertColor2Index>:
 800d532:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d536:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d53a:	681e      	ldr	r6, [r3, #0]
 800d53c:	f1b8 0f00 	cmp.w	r8, #0
 800d540:	bf08      	it	eq
 800d542:	4680      	moveq	r8, r0
 800d544:	2a08      	cmp	r2, #8
 800d546:	4604      	mov	r4, r0
 800d548:	460d      	mov	r5, r1
 800d54a:	dd05      	ble.n	800d558 <GUI__ConvertColor2Index+0x26>
 800d54c:	2a10      	cmp	r2, #16
 800d54e:	f340 80b6 	ble.w	800d6be <GUI__ConvertColor2Index+0x18c>
 800d552:	2000      	movs	r0, #0
 800d554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d558:	3a01      	subs	r2, #1
 800d55a:	2a07      	cmp	r2, #7
 800d55c:	f200 80a4 	bhi.w	800d6a8 <GUI__ConvertColor2Index+0x176>
 800d560:	e8df f002 	tbb	[pc, r2]
 800d564:	87a26111 	.word	0x87a26111
 800d568:	92a2a2a2 	.word	0x92a2a2a2
 800d56c:	69e0      	ldr	r0, [r4, #28]
 800d56e:	47b0      	blx	r6
 800d570:	4338      	orrs	r0, r7
 800d572:	f104 0920 	add.w	r9, r4, #32
 800d576:	b2c7      	uxtb	r7, r0
 800d578:	3d08      	subs	r5, #8
 800d57a:	f808 7b01 	strb.w	r7, [r8], #1
 800d57e:	2d00      	cmp	r5, #0
 800d580:	f000 8092 	beq.w	800d6a8 <GUI__ConvertColor2Index+0x176>
 800d584:	464c      	mov	r4, r9
 800d586:	6820      	ldr	r0, [r4, #0]
 800d588:	47b0      	blx	r6
 800d58a:	2d01      	cmp	r5, #1
 800d58c:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 800d590:	b2c7      	uxtb	r7, r0
 800d592:	f000 808c 	beq.w	800d6ae <GUI__ConvertColor2Index+0x17c>
 800d596:	6860      	ldr	r0, [r4, #4]
 800d598:	47b0      	blx	r6
 800d59a:	2d02      	cmp	r5, #2
 800d59c:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 800d5a0:	b2c7      	uxtb	r7, r0
 800d5a2:	d102      	bne.n	800d5aa <GUI__ConvertColor2Index+0x78>
 800d5a4:	f104 0908 	add.w	r9, r4, #8
 800d5a8:	e083      	b.n	800d6b2 <GUI__ConvertColor2Index+0x180>
 800d5aa:	68a0      	ldr	r0, [r4, #8]
 800d5ac:	47b0      	blx	r6
 800d5ae:	2d03      	cmp	r5, #3
 800d5b0:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 800d5b4:	b2c7      	uxtb	r7, r0
 800d5b6:	d102      	bne.n	800d5be <GUI__ConvertColor2Index+0x8c>
 800d5b8:	f104 090c 	add.w	r9, r4, #12
 800d5bc:	e079      	b.n	800d6b2 <GUI__ConvertColor2Index+0x180>
 800d5be:	68e0      	ldr	r0, [r4, #12]
 800d5c0:	47b0      	blx	r6
 800d5c2:	2d04      	cmp	r5, #4
 800d5c4:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 800d5c8:	b2c7      	uxtb	r7, r0
 800d5ca:	d102      	bne.n	800d5d2 <GUI__ConvertColor2Index+0xa0>
 800d5cc:	f104 0910 	add.w	r9, r4, #16
 800d5d0:	e06f      	b.n	800d6b2 <GUI__ConvertColor2Index+0x180>
 800d5d2:	6920      	ldr	r0, [r4, #16]
 800d5d4:	47b0      	blx	r6
 800d5d6:	2d05      	cmp	r5, #5
 800d5d8:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 800d5dc:	b2c7      	uxtb	r7, r0
 800d5de:	d102      	bne.n	800d5e6 <GUI__ConvertColor2Index+0xb4>
 800d5e0:	f104 0914 	add.w	r9, r4, #20
 800d5e4:	e065      	b.n	800d6b2 <GUI__ConvertColor2Index+0x180>
 800d5e6:	6960      	ldr	r0, [r4, #20]
 800d5e8:	47b0      	blx	r6
 800d5ea:	2d06      	cmp	r5, #6
 800d5ec:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 800d5f0:	b2c7      	uxtb	r7, r0
 800d5f2:	d102      	bne.n	800d5fa <GUI__ConvertColor2Index+0xc8>
 800d5f4:	f104 0918 	add.w	r9, r4, #24
 800d5f8:	e05b      	b.n	800d6b2 <GUI__ConvertColor2Index+0x180>
 800d5fa:	69a0      	ldr	r0, [r4, #24]
 800d5fc:	47b0      	blx	r6
 800d5fe:	2d07      	cmp	r5, #7
 800d600:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 800d604:	b2c7      	uxtb	r7, r0
 800d606:	d1b1      	bne.n	800d56c <GUI__ConvertColor2Index+0x3a>
 800d608:	f104 091c 	add.w	r9, r4, #28
 800d60c:	e051      	b.n	800d6b2 <GUI__ConvertColor2Index+0x180>
 800d60e:	68e0      	ldr	r0, [r4, #12]
 800d610:	47b0      	blx	r6
 800d612:	4338      	orrs	r0, r7
 800d614:	f104 0910 	add.w	r9, r4, #16
 800d618:	b2c7      	uxtb	r7, r0
 800d61a:	3d04      	subs	r5, #4
 800d61c:	f808 7b01 	strb.w	r7, [r8], #1
 800d620:	2d00      	cmp	r5, #0
 800d622:	d041      	beq.n	800d6a8 <GUI__ConvertColor2Index+0x176>
 800d624:	464c      	mov	r4, r9
 800d626:	6820      	ldr	r0, [r4, #0]
 800d628:	47b0      	blx	r6
 800d62a:	2d01      	cmp	r5, #1
 800d62c:	ea4f 1080 	mov.w	r0, r0, lsl #6
 800d630:	b2c7      	uxtb	r7, r0
 800d632:	d040      	beq.n	800d6b6 <GUI__ConvertColor2Index+0x184>
 800d634:	6860      	ldr	r0, [r4, #4]
 800d636:	47b0      	blx	r6
 800d638:	2d02      	cmp	r5, #2
 800d63a:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 800d63e:	b2c7      	uxtb	r7, r0
 800d640:	d102      	bne.n	800d648 <GUI__ConvertColor2Index+0x116>
 800d642:	f104 0908 	add.w	r9, r4, #8
 800d646:	e038      	b.n	800d6ba <GUI__ConvertColor2Index+0x188>
 800d648:	68a0      	ldr	r0, [r4, #8]
 800d64a:	47b0      	blx	r6
 800d64c:	2d03      	cmp	r5, #3
 800d64e:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 800d652:	b2c7      	uxtb	r7, r0
 800d654:	d1db      	bne.n	800d60e <GUI__ConvertColor2Index+0xdc>
 800d656:	f104 090c 	add.w	r9, r4, #12
 800d65a:	e02e      	b.n	800d6ba <GUI__ConvertColor2Index+0x188>
 800d65c:	6860      	ldr	r0, [r4, #4]
 800d65e:	47b0      	blx	r6
 800d660:	4338      	orrs	r0, r7
 800d662:	f104 0908 	add.w	r9, r4, #8
 800d666:	b2c7      	uxtb	r7, r0
 800d668:	3d02      	subs	r5, #2
 800d66a:	f808 7b01 	strb.w	r7, [r8], #1
 800d66e:	b1dd      	cbz	r5, 800d6a8 <GUI__ConvertColor2Index+0x176>
 800d670:	464c      	mov	r4, r9
 800d672:	6820      	ldr	r0, [r4, #0]
 800d674:	47b0      	blx	r6
 800d676:	2d01      	cmp	r5, #1
 800d678:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800d67c:	b2c7      	uxtb	r7, r0
 800d67e:	d1ed      	bne.n	800d65c <GUI__ConvertColor2Index+0x12a>
 800d680:	f104 0904 	add.w	r9, r4, #4
 800d684:	2500      	movs	r5, #0
 800d686:	e7f0      	b.n	800d66a <GUI__ConvertColor2Index+0x138>
 800d688:	691f      	ldr	r7, [r3, #16]
 800d68a:	b12f      	cbz	r7, 800d698 <GUI__ConvertColor2Index+0x166>
 800d68c:	4620      	mov	r0, r4
 800d68e:	4641      	mov	r1, r8
 800d690:	462a      	mov	r2, r5
 800d692:	2301      	movs	r3, #1
 800d694:	47b8      	blx	r7
 800d696:	e007      	b.n	800d6a8 <GUI__ConvertColor2Index+0x176>
 800d698:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 800d69c:	47b0      	blx	r6
 800d69e:	f808 0007 	strb.w	r0, [r8, r7]
 800d6a2:	3701      	adds	r7, #1
 800d6a4:	42bd      	cmp	r5, r7
 800d6a6:	d1f7      	bne.n	800d698 <GUI__ConvertColor2Index+0x166>
 800d6a8:	2001      	movs	r0, #1
 800d6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6ae:	f104 0904 	add.w	r9, r4, #4
 800d6b2:	2500      	movs	r5, #0
 800d6b4:	e761      	b.n	800d57a <GUI__ConvertColor2Index+0x48>
 800d6b6:	f104 0904 	add.w	r9, r4, #4
 800d6ba:	2500      	movs	r5, #0
 800d6bc:	e7ae      	b.n	800d61c <GUI__ConvertColor2Index+0xea>
 800d6be:	691f      	ldr	r7, [r3, #16]
 800d6c0:	b11f      	cbz	r7, 800d6ca <GUI__ConvertColor2Index+0x198>
 800d6c2:	4641      	mov	r1, r8
 800d6c4:	462a      	mov	r2, r5
 800d6c6:	2302      	movs	r3, #2
 800d6c8:	e7e4      	b.n	800d694 <GUI__ConvertColor2Index+0x162>
 800d6ca:	f854 0b04 	ldr.w	r0, [r4], #4
 800d6ce:	47b0      	blx	r6
 800d6d0:	3d01      	subs	r5, #1
 800d6d2:	f828 0b02 	strh.w	r0, [r8], #2
 800d6d6:	d1f8      	bne.n	800d6ca <GUI__ConvertColor2Index+0x198>
 800d6d8:	e7e6      	b.n	800d6a8 <GUI__ConvertColor2Index+0x176>

0800d6da <GUI__CompactPixelIndicesEx>:
 800d6da:	b513      	push	{r0, r1, r4, lr}
 800d6dc:	2400      	movs	r4, #0
 800d6de:	9400      	str	r4, [sp, #0]
 800d6e0:	f7ff ff27 	bl	800d532 <GUI__ConvertColor2Index>
 800d6e4:	b002      	add	sp, #8
 800d6e6:	bd10      	pop	{r4, pc}

0800d6e8 <_GetCharCode>:
 800d6e8:	7800      	ldrb	r0, [r0, #0]
 800d6ea:	4770      	bx	lr

0800d6ec <_GetCharSize>:
 800d6ec:	2001      	movs	r0, #1
 800d6ee:	4770      	bx	lr

0800d6f0 <_CalcSizeOfChar>:
 800d6f0:	2001      	movs	r0, #1
 800d6f2:	4770      	bx	lr

0800d6f4 <_Encode>:
 800d6f4:	7001      	strb	r1, [r0, #0]
 800d6f6:	2001      	movs	r0, #1
 800d6f8:	4770      	bx	lr
	...

0800d6fc <GUI_SetTextAlign>:
 800d6fc:	4b03      	ldr	r3, [pc, #12]	; (800d70c <GUI_SetTextAlign+0x10>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800d704:	8598      	strh	r0, [r3, #44]	; 0x2c
 800d706:	4610      	mov	r0, r2
 800d708:	4770      	bx	lr
 800d70a:	bf00      	nop
 800d70c:	20000024 	.word	0x20000024

0800d710 <GUI_SetOrg>:
 800d710:	460a      	mov	r2, r1
 800d712:	4908      	ldr	r1, [pc, #32]	; (800d734 <GUI_SetOrg+0x24>)
 800d714:	b510      	push	{r4, lr}
 800d716:	8008      	strh	r0, [r1, #0]
 800d718:	4907      	ldr	r1, [pc, #28]	; (800d738 <GUI_SetOrg+0x28>)
 800d71a:	800a      	strh	r2, [r1, #0]
 800d71c:	4907      	ldr	r1, [pc, #28]	; (800d73c <GUI_SetOrg+0x2c>)
 800d71e:	6809      	ldr	r1, [r1, #0]
 800d720:	4603      	mov	r3, r0
 800d722:	7c48      	ldrb	r0, [r1, #17]
 800d724:	4906      	ldr	r1, [pc, #24]	; (800d740 <GUI_SetOrg+0x30>)
 800d726:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800d72a:	68c1      	ldr	r1, [r0, #12]
 800d72c:	6a0c      	ldr	r4, [r1, #32]
 800d72e:	4619      	mov	r1, r3
 800d730:	47a0      	blx	r4
 800d732:	bd10      	pop	{r4, pc}
 800d734:	200194b0 	.word	0x200194b0
 800d738:	200194a4 	.word	0x200194a4
 800d73c:	20000024 	.word	0x20000024
 800d740:	200194c8 	.word	0x200194c8

0800d744 <GUI_SetLineStyle>:
 800d744:	4b02      	ldr	r3, [pc, #8]	; (800d750 <GUI_SetLineStyle+0xc>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	7e9a      	ldrb	r2, [r3, #26]
 800d74a:	7698      	strb	r0, [r3, #26]
 800d74c:	4610      	mov	r0, r2
 800d74e:	4770      	bx	lr
 800d750:	20000024 	.word	0x20000024

0800d754 <GUI_GetBkColor>:
 800d754:	b508      	push	{r3, lr}
 800d756:	f000 f981 	bl	800da5c <LCD_GetBkColorIndex>
 800d75a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d75e:	f7fb b9ad 	b.w	8008abc <LCD_Index2Color>

0800d762 <GUI_GetColor>:
 800d762:	b508      	push	{r3, lr}
 800d764:	f000 f982 	bl	800da6c <LCD_GetColorIndex>
 800d768:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d76c:	f7fb b9a6 	b.w	8008abc <LCD_Index2Color>

0800d770 <_Add>:
 800d770:	4a0d      	ldr	r2, [pc, #52]	; (800d7a8 <_Add+0x38>)
 800d772:	6813      	ldr	r3, [r2, #0]
 800d774:	2b0b      	cmp	r3, #11
 800d776:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d778:	4615      	mov	r5, r2
 800d77a:	dc14      	bgt.n	800d7a6 <_Add+0x36>
 800d77c:	4c0b      	ldr	r4, [pc, #44]	; (800d7ac <_Add+0x3c>)
 800d77e:	461a      	mov	r2, r3
 800d780:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 800d784:	4626      	mov	r6, r4
 800d786:	b152      	cbz	r2, 800d79e <_Add+0x2e>
 800d788:	f831 4d02 	ldrh.w	r4, [r1, #-2]!
 800d78c:	fa0f fc84 	sxth.w	ip, r4
 800d790:	4584      	cmp	ip, r0
 800d792:	f102 37ff 	add.w	r7, r2, #4294967295
 800d796:	db02      	blt.n	800d79e <_Add+0x2e>
 800d798:	804c      	strh	r4, [r1, #2]
 800d79a:	463a      	mov	r2, r7
 800d79c:	e7f3      	b.n	800d786 <_Add+0x16>
 800d79e:	3301      	adds	r3, #1
 800d7a0:	f826 0012 	strh.w	r0, [r6, r2, lsl #1]
 800d7a4:	602b      	str	r3, [r5, #0]
 800d7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7a8:	200192a4 	.word	0x200192a4
 800d7ac:	200192a8 	.word	0x200192a8

0800d7b0 <GL_FillPolygon>:
 800d7b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b4:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 800d970 <GL_FillPolygon+0x1c0>
 800d7b8:	9101      	str	r1, [sp, #4]
 800d7ba:	4692      	mov	sl, r2
 800d7bc:	4606      	mov	r6, r0
 800d7be:	f643 74ff 	movw	r4, #16383	; 0x3fff
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	9901      	ldr	r1, [sp, #4]
 800d7c6:	428a      	cmp	r2, r1
 800d7c8:	da0b      	bge.n	800d7e2 <GL_FillPolygon+0x32>
 800d7ca:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800d7ce:	3201      	adds	r2, #1
 800d7d0:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800d7d4:	428c      	cmp	r4, r1
 800d7d6:	bfa8      	it	ge
 800d7d8:	460c      	movge	r4, r1
 800d7da:	4589      	cmp	r9, r1
 800d7dc:	bfb8      	it	lt
 800d7de:	4689      	movlt	r9, r1
 800d7e0:	e7f0      	b.n	800d7c4 <GL_FillPolygon+0x14>
 800d7e2:	4960      	ldr	r1, [pc, #384]	; (800d964 <GL_FillPolygon+0x1b4>)
 800d7e4:	680a      	ldr	r2, [r1, #0]
 800d7e6:	6952      	ldr	r2, [r2, #20]
 800d7e8:	468b      	mov	fp, r1
 800d7ea:	b15a      	cbz	r2, 800d804 <GL_FillPolygon+0x54>
 800d7ec:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 800d7f0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800d7f4:	1ac9      	subs	r1, r1, r3
 800d7f6:	1ad2      	subs	r2, r2, r3
 800d7f8:	4589      	cmp	r9, r1
 800d7fa:	bfa8      	it	ge
 800d7fc:	4689      	movge	r9, r1
 800d7fe:	4294      	cmp	r4, r2
 800d800:	bfb8      	it	lt
 800d802:	4614      	movlt	r4, r2
 800d804:	eb04 0803 	add.w	r8, r4, r3
 800d808:	454c      	cmp	r4, r9
 800d80a:	f300 80a7 	bgt.w	800d95c <GL_FillPolygon+0x1ac>
 800d80e:	4b56      	ldr	r3, [pc, #344]	; (800d968 <GL_FillPolygon+0x1b8>)
 800d810:	2700      	movs	r7, #0
 800d812:	601f      	str	r7, [r3, #0]
 800d814:	4635      	mov	r5, r6
 800d816:	9901      	ldr	r1, [sp, #4]
 800d818:	428f      	cmp	r7, r1
 800d81a:	da55      	bge.n	800d8c8 <GL_FillPolygon+0x118>
 800d81c:	9b01      	ldr	r3, [sp, #4]
 800d81e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800d822:	1e59      	subs	r1, r3, #1
 800d824:	428f      	cmp	r7, r1
 800d826:	bfb4      	ite	lt
 800d828:	f107 0c01 	addlt.w	ip, r7, #1
 800d82c:	f04f 0c00 	movge.w	ip, #0
 800d830:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800d834:	eb06 030c 	add.w	r3, r6, ip
 800d838:	42a2      	cmp	r2, r4
 800d83a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d83e:	d136      	bne.n	800d8ae <GL_FillPolygon+0xfe>
 800d840:	42a3      	cmp	r3, r4
 800d842:	d002      	beq.n	800d84a <GL_FillPolygon+0x9a>
 800d844:	463a      	mov	r2, r7
 800d846:	2000      	movs	r0, #0
 800d848:	e01b      	b.n	800d882 <GL_FillPolygon+0xd2>
 800d84a:	f9b5 e000 	ldrsh.w	lr, [r5]
 800d84e:	f936 200c 	ldrsh.w	r2, [r6, ip]
 800d852:	f8db 3000 	ldr.w	r3, [fp]
 800d856:	44d6      	add	lr, sl
 800d858:	4452      	add	r2, sl
 800d85a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d85c:	4596      	cmp	lr, r2
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	da02      	bge.n	800d868 <GL_FillPolygon+0xb8>
 800d862:	4670      	mov	r0, lr
 800d864:	4641      	mov	r1, r8
 800d866:	e020      	b.n	800d8aa <GL_FillPolygon+0xfa>
 800d868:	4610      	mov	r0, r2
 800d86a:	4641      	mov	r1, r8
 800d86c:	4672      	mov	r2, lr
 800d86e:	e01c      	b.n	800d8aa <GL_FillPolygon+0xfa>
 800d870:	b152      	cbz	r2, 800d888 <GL_FillPolygon+0xd8>
 800d872:	3a01      	subs	r2, #1
 800d874:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
 800d878:	f9bc c002 	ldrsh.w	ip, [ip, #2]
 800d87c:	45a4      	cmp	ip, r4
 800d87e:	d105      	bne.n	800d88c <GL_FillPolygon+0xdc>
 800d880:	3001      	adds	r0, #1
 800d882:	4288      	cmp	r0, r1
 800d884:	dbf4      	blt.n	800d870 <GL_FillPolygon+0xc0>
 800d886:	e01c      	b.n	800d8c2 <GL_FillPolygon+0x112>
 800d888:	460a      	mov	r2, r1
 800d88a:	e7f3      	b.n	800d874 <GL_FillPolygon+0xc4>
 800d88c:	ebc4 0c0c 	rsb	ip, r4, ip
 800d890:	1b1b      	subs	r3, r3, r4
 800d892:	ea9c 0f03 	teq	ip, r3
 800d896:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d89a:	d44d      	bmi.n	800d938 <GL_FillPolygon+0x188>
 800d89c:	f8db 3000 	ldr.w	r3, [fp]
 800d8a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8a2:	4450      	add	r0, sl
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	4641      	mov	r1, r8
 800d8a8:	4602      	mov	r2, r0
 800d8aa:	4798      	blx	r3
 800d8ac:	e009      	b.n	800d8c2 <GL_FillPolygon+0x112>
 800d8ae:	42a3      	cmp	r3, r4
 800d8b0:	d007      	beq.n	800d8c2 <GL_FillPolygon+0x112>
 800d8b2:	db44      	blt.n	800d93e <GL_FillPolygon+0x18e>
 800d8b4:	42a2      	cmp	r2, r4
 800d8b6:	dd27      	ble.n	800d908 <GL_FillPolygon+0x158>
 800d8b8:	42a3      	cmp	r3, r4
 800d8ba:	dd42      	ble.n	800d942 <GL_FillPolygon+0x192>
 800d8bc:	e001      	b.n	800d8c2 <GL_FillPolygon+0x112>
 800d8be:	42a3      	cmp	r3, r4
 800d8c0:	dd49      	ble.n	800d956 <GL_FillPolygon+0x1a6>
 800d8c2:	3701      	adds	r7, #1
 800d8c4:	3504      	adds	r5, #4
 800d8c6:	e7a6      	b.n	800d816 <GL_FillPolygon+0x66>
 800d8c8:	2500      	movs	r5, #0
 800d8ca:	4628      	mov	r0, r5
 800d8cc:	462f      	mov	r7, r5
 800d8ce:	4b26      	ldr	r3, [pc, #152]	; (800d968 <GL_FillPolygon+0x1b8>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	429f      	cmp	r7, r3
 800d8d4:	da14      	bge.n	800d900 <GL_FillPolygon+0x150>
 800d8d6:	4b25      	ldr	r3, [pc, #148]	; (800d96c <GL_FillPolygon+0x1bc>)
 800d8d8:	f933 3017 	ldrsh.w	r3, [r3, r7, lsl #1]
 800d8dc:	b15d      	cbz	r5, 800d8f6 <GL_FillPolygon+0x146>
 800d8de:	f8db 2000 	ldr.w	r2, [fp]
 800d8e2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d8e4:	4450      	add	r0, sl
 800d8e6:	f8d2 c000 	ldr.w	ip, [r2]
 800d8ea:	9300      	str	r3, [sp, #0]
 800d8ec:	eb0a 0203 	add.w	r2, sl, r3
 800d8f0:	4641      	mov	r1, r8
 800d8f2:	47e0      	blx	ip
 800d8f4:	9b00      	ldr	r3, [sp, #0]
 800d8f6:	f085 0501 	eor.w	r5, r5, #1
 800d8fa:	3701      	adds	r7, #1
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	e7e6      	b.n	800d8ce <GL_FillPolygon+0x11e>
 800d900:	3401      	adds	r4, #1
 800d902:	f108 0801 	add.w	r8, r8, #1
 800d906:	e77f      	b.n	800d808 <GL_FillPolygon+0x58>
 800d908:	429a      	cmp	r2, r3
 800d90a:	dcd8      	bgt.n	800d8be <GL_FillPolygon+0x10e>
 800d90c:	f9b5 1000 	ldrsh.w	r1, [r5]
 800d910:	f936 000c 	ldrsh.w	r0, [r6, ip]
 800d914:	ebc2 0e04 	rsb	lr, r2, r4
 800d918:	1a40      	subs	r0, r0, r1
 800d91a:	fb0e f000 	mul.w	r0, lr, r0
 800d91e:	2800      	cmp	r0, #0
 800d920:	ebc2 0303 	rsb	r3, r2, r3
 800d924:	bfdb      	ittet	le
 800d926:	105a      	asrle	r2, r3, #1
 800d928:	f1c2 0201 	rsble	r2, r2, #1
 800d92c:	eb00 0063 	addgt.w	r0, r0, r3, asr #1
 800d930:	1880      	addle	r0, r0, r2
 800d932:	fb90 f0f3 	sdiv	r0, r0, r3
 800d936:	4408      	add	r0, r1
 800d938:	f7ff ff1a 	bl	800d770 <_Add>
 800d93c:	e7c1      	b.n	800d8c2 <GL_FillPolygon+0x112>
 800d93e:	42a2      	cmp	r2, r4
 800d940:	dbbf      	blt.n	800d8c2 <GL_FillPolygon+0x112>
 800d942:	429a      	cmp	r2, r3
 800d944:	ddbd      	ble.n	800d8c2 <GL_FillPolygon+0x112>
 800d946:	4696      	mov	lr, r2
 800d948:	f936 100c 	ldrsh.w	r1, [r6, ip]
 800d94c:	f9b5 0000 	ldrsh.w	r0, [r5]
 800d950:	461a      	mov	r2, r3
 800d952:	4673      	mov	r3, lr
 800d954:	e7de      	b.n	800d914 <GL_FillPolygon+0x164>
 800d956:	42a2      	cmp	r2, r4
 800d958:	daf5      	bge.n	800d946 <GL_FillPolygon+0x196>
 800d95a:	e7b2      	b.n	800d8c2 <GL_FillPolygon+0x112>
 800d95c:	b003      	add	sp, #12
 800d95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d962:	bf00      	nop
 800d964:	20000024 	.word	0x20000024
 800d968:	200192a4 	.word	0x200192a4
 800d96c:	200192a8 	.word	0x200192a8
 800d970:	ffffc001 	.word	0xffffc001

0800d974 <_GetIndexMask_0>:
 800d974:	b508      	push	{r3, lr}
 800d976:	f7fa fce1 	bl	800833c <LCD_GetNumColors>
 800d97a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800d97e:	d010      	beq.n	800d9a2 <_GetIndexMask_0+0x2e>
 800d980:	287f      	cmp	r0, #127	; 0x7f
 800d982:	d810      	bhi.n	800d9a6 <_GetIndexMask_0+0x32>
 800d984:	283f      	cmp	r0, #63	; 0x3f
 800d986:	d810      	bhi.n	800d9aa <_GetIndexMask_0+0x36>
 800d988:	281f      	cmp	r0, #31
 800d98a:	d810      	bhi.n	800d9ae <_GetIndexMask_0+0x3a>
 800d98c:	280f      	cmp	r0, #15
 800d98e:	d810      	bhi.n	800d9b2 <_GetIndexMask_0+0x3e>
 800d990:	2807      	cmp	r0, #7
 800d992:	d810      	bhi.n	800d9b6 <_GetIndexMask_0+0x42>
 800d994:	2803      	cmp	r0, #3
 800d996:	d810      	bhi.n	800d9ba <_GetIndexMask_0+0x46>
 800d998:	2801      	cmp	r0, #1
 800d99a:	bf94      	ite	ls
 800d99c:	2000      	movls	r0, #0
 800d99e:	2001      	movhi	r0, #1
 800d9a0:	e00c      	b.n	800d9bc <_GetIndexMask_0+0x48>
 800d9a2:	2008      	movs	r0, #8
 800d9a4:	e00a      	b.n	800d9bc <_GetIndexMask_0+0x48>
 800d9a6:	2007      	movs	r0, #7
 800d9a8:	e008      	b.n	800d9bc <_GetIndexMask_0+0x48>
 800d9aa:	2006      	movs	r0, #6
 800d9ac:	e006      	b.n	800d9bc <_GetIndexMask_0+0x48>
 800d9ae:	2005      	movs	r0, #5
 800d9b0:	e004      	b.n	800d9bc <_GetIndexMask_0+0x48>
 800d9b2:	2004      	movs	r0, #4
 800d9b4:	e002      	b.n	800d9bc <_GetIndexMask_0+0x48>
 800d9b6:	2003      	movs	r0, #3
 800d9b8:	e000      	b.n	800d9bc <_GetIndexMask_0+0x48>
 800d9ba:	2002      	movs	r0, #2
 800d9bc:	2301      	movs	r3, #1
 800d9be:	fa03 f000 	lsl.w	r0, r3, r0
 800d9c2:	3801      	subs	r0, #1
 800d9c4:	bd08      	pop	{r3, pc}

0800d9c6 <_Index2Color_0>:
 800d9c6:	b538      	push	{r3, r4, r5, lr}
 800d9c8:	4604      	mov	r4, r0
 800d9ca:	f7fa fcb7 	bl	800833c <LCD_GetNumColors>
 800d9ce:	4605      	mov	r5, r0
 800d9d0:	f7fa fcd2 	bl	8008378 <LCD_GetPalette>
 800d9d4:	42ac      	cmp	r4, r5
 800d9d6:	d203      	bcs.n	800d9e0 <_Index2Color_0+0x1a>
 800d9d8:	b118      	cbz	r0, 800d9e2 <_Index2Color_0+0x1c>
 800d9da:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800d9de:	bd38      	pop	{r3, r4, r5, pc}
 800d9e0:	2000      	movs	r0, #0
 800d9e2:	bd38      	pop	{r3, r4, r5, pc}

0800d9e4 <_Color2Index_0>:
 800d9e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9e8:	4681      	mov	r9, r0
 800d9ea:	f7fa fca7 	bl	800833c <LCD_GetNumColors>
 800d9ee:	4680      	mov	r8, r0
 800d9f0:	f7fa fcc2 	bl	8008378 <LCD_GetPalette>
 800d9f4:	4606      	mov	r6, r0
 800d9f6:	b1d8      	cbz	r0, 800da30 <_Color2Index_0+0x4c>
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 800d9fe:	4591      	cmp	r9, r2
 800da00:	d01a      	beq.n	800da38 <_Color2Index_0+0x54>
 800da02:	3301      	adds	r3, #1
 800da04:	4543      	cmp	r3, r8
 800da06:	dbf8      	blt.n	800d9fa <_Color2Index_0+0x16>
 800da08:	2500      	movs	r5, #0
 800da0a:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 800da0e:	462c      	mov	r4, r5
 800da10:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800da14:	4648      	mov	r0, r9
 800da16:	f000 f831 	bl	800da7c <GUI_CalcColorDist>
 800da1a:	42b8      	cmp	r0, r7
 800da1c:	bf38      	it	cc
 800da1e:	4625      	movcc	r5, r4
 800da20:	f104 0401 	add.w	r4, r4, #1
 800da24:	bf28      	it	cs
 800da26:	4638      	movcs	r0, r7
 800da28:	4544      	cmp	r4, r8
 800da2a:	da02      	bge.n	800da32 <_Color2Index_0+0x4e>
 800da2c:	4607      	mov	r7, r0
 800da2e:	e7ef      	b.n	800da10 <_Color2Index_0+0x2c>
 800da30:	4605      	mov	r5, r0
 800da32:	4628      	mov	r0, r5
 800da34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da38:	4618      	mov	r0, r3
 800da3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800da3e <LCD_GetNumLayers>:
 800da3e:	b510      	push	{r4, lr}
 800da40:	2000      	movs	r0, #0
 800da42:	f7fc fb55 	bl	800a0f0 <GUI_DEVICE__GetpDriver>
 800da46:	1c04      	adds	r4, r0, #0
 800da48:	f04f 0001 	mov.w	r0, #1
 800da4c:	bf18      	it	ne
 800da4e:	2401      	movne	r4, #1
 800da50:	f7fc fb4e 	bl	800a0f0 <GUI_DEVICE__GetpDriver>
 800da54:	b100      	cbz	r0, 800da58 <LCD_GetNumLayers+0x1a>
 800da56:	3401      	adds	r4, #1
 800da58:	4620      	mov	r0, r4
 800da5a:	bd10      	pop	{r4, pc}

0800da5c <LCD_GetBkColorIndex>:
 800da5c:	4b02      	ldr	r3, [pc, #8]	; (800da68 <LCD_GetBkColorIndex+0xc>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da62:	6818      	ldr	r0, [r3, #0]
 800da64:	4770      	bx	lr
 800da66:	bf00      	nop
 800da68:	20000024 	.word	0x20000024

0800da6c <LCD_GetColorIndex>:
 800da6c:	4b02      	ldr	r3, [pc, #8]	; (800da78 <LCD_GetColorIndex+0xc>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da72:	6818      	ldr	r0, [r3, #0]
 800da74:	4770      	bx	lr
 800da76:	bf00      	nop
 800da78:	20000024 	.word	0x20000024

0800da7c <GUI_CalcColorDist>:
 800da7c:	b2cb      	uxtb	r3, r1
 800da7e:	b2c2      	uxtb	r2, r0
 800da80:	1ad2      	subs	r2, r2, r3
 800da82:	b292      	uxth	r2, r2
 800da84:	b293      	uxth	r3, r2
 800da86:	b530      	push	{r4, r5, lr}
 800da88:	041c      	lsls	r4, r3, #16
 800da8a:	bf48      	it	mi
 800da8c:	4253      	negmi	r3, r2
 800da8e:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800da92:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800da96:	ebc5 0202 	rsb	r2, r5, r2
 800da9a:	bf48      	it	mi
 800da9c:	b29b      	uxthmi	r3, r3
 800da9e:	b292      	uxth	r2, r2
 800daa0:	0c09      	lsrs	r1, r1, #16
 800daa2:	fb13 f403 	smulbb	r4, r3, r3
 800daa6:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 800daaa:	b293      	uxth	r3, r2
 800daac:	041d      	lsls	r5, r3, #16
 800daae:	b289      	uxth	r1, r1
 800dab0:	b288      	uxth	r0, r1
 800dab2:	bf44      	itt	mi
 800dab4:	4253      	negmi	r3, r2
 800dab6:	b29b      	uxthmi	r3, r3
 800dab8:	0402      	lsls	r2, r0, #16
 800daba:	bf48      	it	mi
 800dabc:	4248      	negmi	r0, r1
 800dabe:	fb13 4303 	smlabb	r3, r3, r3, r4
 800dac2:	bf48      	it	mi
 800dac4:	b280      	uxthmi	r0, r0
 800dac6:	fb00 3000 	mla	r0, r0, r0, r3
 800daca:	bd30      	pop	{r4, r5, pc}

0800dacc <__errno>:
 800dacc:	4b01      	ldr	r3, [pc, #4]	; (800dad4 <__errno+0x8>)
 800dace:	6818      	ldr	r0, [r3, #0]
 800dad0:	4770      	bx	lr
 800dad2:	bf00      	nop
 800dad4:	20000038 	.word	0x20000038

0800dad8 <__libc_init_array>:
 800dad8:	b570      	push	{r4, r5, r6, lr}
 800dada:	4e0d      	ldr	r6, [pc, #52]	; (800db10 <__libc_init_array+0x38>)
 800dadc:	4c0d      	ldr	r4, [pc, #52]	; (800db14 <__libc_init_array+0x3c>)
 800dade:	1ba4      	subs	r4, r4, r6
 800dae0:	10a4      	asrs	r4, r4, #2
 800dae2:	2500      	movs	r5, #0
 800dae4:	42a5      	cmp	r5, r4
 800dae6:	d109      	bne.n	800dafc <__libc_init_array+0x24>
 800dae8:	4e0b      	ldr	r6, [pc, #44]	; (800db18 <__libc_init_array+0x40>)
 800daea:	4c0c      	ldr	r4, [pc, #48]	; (800db1c <__libc_init_array+0x44>)
 800daec:	f001 fcfe 	bl	800f4ec <_init>
 800daf0:	1ba4      	subs	r4, r4, r6
 800daf2:	10a4      	asrs	r4, r4, #2
 800daf4:	2500      	movs	r5, #0
 800daf6:	42a5      	cmp	r5, r4
 800daf8:	d105      	bne.n	800db06 <__libc_init_array+0x2e>
 800dafa:	bd70      	pop	{r4, r5, r6, pc}
 800dafc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800db00:	4798      	blx	r3
 800db02:	3501      	adds	r5, #1
 800db04:	e7ee      	b.n	800dae4 <__libc_init_array+0xc>
 800db06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800db0a:	4798      	blx	r3
 800db0c:	3501      	adds	r5, #1
 800db0e:	e7f2      	b.n	800daf6 <__libc_init_array+0x1e>
 800db10:	080134f8 	.word	0x080134f8
 800db14:	080134f8 	.word	0x080134f8
 800db18:	080134f8 	.word	0x080134f8
 800db1c:	080134fc 	.word	0x080134fc

0800db20 <memcpy>:
 800db20:	b510      	push	{r4, lr}
 800db22:	1e43      	subs	r3, r0, #1
 800db24:	440a      	add	r2, r1
 800db26:	4291      	cmp	r1, r2
 800db28:	d100      	bne.n	800db2c <memcpy+0xc>
 800db2a:	bd10      	pop	{r4, pc}
 800db2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db34:	e7f7      	b.n	800db26 <memcpy+0x6>

0800db36 <memmove>:
 800db36:	4288      	cmp	r0, r1
 800db38:	b510      	push	{r4, lr}
 800db3a:	eb01 0302 	add.w	r3, r1, r2
 800db3e:	d807      	bhi.n	800db50 <memmove+0x1a>
 800db40:	1e42      	subs	r2, r0, #1
 800db42:	4299      	cmp	r1, r3
 800db44:	d00a      	beq.n	800db5c <memmove+0x26>
 800db46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db4a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800db4e:	e7f8      	b.n	800db42 <memmove+0xc>
 800db50:	4283      	cmp	r3, r0
 800db52:	d9f5      	bls.n	800db40 <memmove+0xa>
 800db54:	1881      	adds	r1, r0, r2
 800db56:	1ad2      	subs	r2, r2, r3
 800db58:	42d3      	cmn	r3, r2
 800db5a:	d100      	bne.n	800db5e <memmove+0x28>
 800db5c:	bd10      	pop	{r4, pc}
 800db5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db62:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800db66:	e7f7      	b.n	800db58 <memmove+0x22>

0800db68 <memset>:
 800db68:	4402      	add	r2, r0
 800db6a:	4603      	mov	r3, r0
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d100      	bne.n	800db72 <memset+0xa>
 800db70:	4770      	bx	lr
 800db72:	f803 1b01 	strb.w	r1, [r3], #1
 800db76:	e7f9      	b.n	800db6c <memset+0x4>

0800db78 <siprintf>:
 800db78:	b40e      	push	{r1, r2, r3}
 800db7a:	b500      	push	{lr}
 800db7c:	b09c      	sub	sp, #112	; 0x70
 800db7e:	ab1d      	add	r3, sp, #116	; 0x74
 800db80:	9002      	str	r0, [sp, #8]
 800db82:	9006      	str	r0, [sp, #24]
 800db84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800db88:	4809      	ldr	r0, [pc, #36]	; (800dbb0 <siprintf+0x38>)
 800db8a:	9107      	str	r1, [sp, #28]
 800db8c:	9104      	str	r1, [sp, #16]
 800db8e:	4909      	ldr	r1, [pc, #36]	; (800dbb4 <siprintf+0x3c>)
 800db90:	f853 2b04 	ldr.w	r2, [r3], #4
 800db94:	9105      	str	r1, [sp, #20]
 800db96:	6800      	ldr	r0, [r0, #0]
 800db98:	9301      	str	r3, [sp, #4]
 800db9a:	a902      	add	r1, sp, #8
 800db9c:	f000 f866 	bl	800dc6c <_svfiprintf_r>
 800dba0:	9b02      	ldr	r3, [sp, #8]
 800dba2:	2200      	movs	r2, #0
 800dba4:	701a      	strb	r2, [r3, #0]
 800dba6:	b01c      	add	sp, #112	; 0x70
 800dba8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dbac:	b003      	add	sp, #12
 800dbae:	4770      	bx	lr
 800dbb0:	20000038 	.word	0x20000038
 800dbb4:	ffff0208 	.word	0xffff0208

0800dbb8 <__ssputs_r>:
 800dbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbbc:	688e      	ldr	r6, [r1, #8]
 800dbbe:	429e      	cmp	r6, r3
 800dbc0:	4682      	mov	sl, r0
 800dbc2:	460c      	mov	r4, r1
 800dbc4:	4690      	mov	r8, r2
 800dbc6:	4699      	mov	r9, r3
 800dbc8:	d837      	bhi.n	800dc3a <__ssputs_r+0x82>
 800dbca:	898a      	ldrh	r2, [r1, #12]
 800dbcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dbd0:	d031      	beq.n	800dc36 <__ssputs_r+0x7e>
 800dbd2:	6825      	ldr	r5, [r4, #0]
 800dbd4:	6909      	ldr	r1, [r1, #16]
 800dbd6:	1a6f      	subs	r7, r5, r1
 800dbd8:	6965      	ldr	r5, [r4, #20]
 800dbda:	2302      	movs	r3, #2
 800dbdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dbe0:	fb95 f5f3 	sdiv	r5, r5, r3
 800dbe4:	f109 0301 	add.w	r3, r9, #1
 800dbe8:	443b      	add	r3, r7
 800dbea:	429d      	cmp	r5, r3
 800dbec:	bf38      	it	cc
 800dbee:	461d      	movcc	r5, r3
 800dbf0:	0553      	lsls	r3, r2, #21
 800dbf2:	d530      	bpl.n	800dc56 <__ssputs_r+0x9e>
 800dbf4:	4629      	mov	r1, r5
 800dbf6:	f000 fb07 	bl	800e208 <_malloc_r>
 800dbfa:	4606      	mov	r6, r0
 800dbfc:	b950      	cbnz	r0, 800dc14 <__ssputs_r+0x5c>
 800dbfe:	230c      	movs	r3, #12
 800dc00:	f8ca 3000 	str.w	r3, [sl]
 800dc04:	89a3      	ldrh	r3, [r4, #12]
 800dc06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc0a:	81a3      	strh	r3, [r4, #12]
 800dc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc14:	463a      	mov	r2, r7
 800dc16:	6921      	ldr	r1, [r4, #16]
 800dc18:	f7ff ff82 	bl	800db20 <memcpy>
 800dc1c:	89a3      	ldrh	r3, [r4, #12]
 800dc1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dc22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc26:	81a3      	strh	r3, [r4, #12]
 800dc28:	6126      	str	r6, [r4, #16]
 800dc2a:	6165      	str	r5, [r4, #20]
 800dc2c:	443e      	add	r6, r7
 800dc2e:	1bed      	subs	r5, r5, r7
 800dc30:	6026      	str	r6, [r4, #0]
 800dc32:	60a5      	str	r5, [r4, #8]
 800dc34:	464e      	mov	r6, r9
 800dc36:	454e      	cmp	r6, r9
 800dc38:	d900      	bls.n	800dc3c <__ssputs_r+0x84>
 800dc3a:	464e      	mov	r6, r9
 800dc3c:	4632      	mov	r2, r6
 800dc3e:	4641      	mov	r1, r8
 800dc40:	6820      	ldr	r0, [r4, #0]
 800dc42:	f7ff ff78 	bl	800db36 <memmove>
 800dc46:	68a3      	ldr	r3, [r4, #8]
 800dc48:	1b9b      	subs	r3, r3, r6
 800dc4a:	60a3      	str	r3, [r4, #8]
 800dc4c:	6823      	ldr	r3, [r4, #0]
 800dc4e:	441e      	add	r6, r3
 800dc50:	6026      	str	r6, [r4, #0]
 800dc52:	2000      	movs	r0, #0
 800dc54:	e7dc      	b.n	800dc10 <__ssputs_r+0x58>
 800dc56:	462a      	mov	r2, r5
 800dc58:	f000 fb30 	bl	800e2bc <_realloc_r>
 800dc5c:	4606      	mov	r6, r0
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	d1e2      	bne.n	800dc28 <__ssputs_r+0x70>
 800dc62:	6921      	ldr	r1, [r4, #16]
 800dc64:	4650      	mov	r0, sl
 800dc66:	f000 fa81 	bl	800e16c <_free_r>
 800dc6a:	e7c8      	b.n	800dbfe <__ssputs_r+0x46>

0800dc6c <_svfiprintf_r>:
 800dc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc70:	461d      	mov	r5, r3
 800dc72:	898b      	ldrh	r3, [r1, #12]
 800dc74:	061f      	lsls	r7, r3, #24
 800dc76:	b09d      	sub	sp, #116	; 0x74
 800dc78:	4680      	mov	r8, r0
 800dc7a:	460c      	mov	r4, r1
 800dc7c:	4616      	mov	r6, r2
 800dc7e:	d50f      	bpl.n	800dca0 <_svfiprintf_r+0x34>
 800dc80:	690b      	ldr	r3, [r1, #16]
 800dc82:	b96b      	cbnz	r3, 800dca0 <_svfiprintf_r+0x34>
 800dc84:	2140      	movs	r1, #64	; 0x40
 800dc86:	f000 fabf 	bl	800e208 <_malloc_r>
 800dc8a:	6020      	str	r0, [r4, #0]
 800dc8c:	6120      	str	r0, [r4, #16]
 800dc8e:	b928      	cbnz	r0, 800dc9c <_svfiprintf_r+0x30>
 800dc90:	230c      	movs	r3, #12
 800dc92:	f8c8 3000 	str.w	r3, [r8]
 800dc96:	f04f 30ff 	mov.w	r0, #4294967295
 800dc9a:	e0c8      	b.n	800de2e <_svfiprintf_r+0x1c2>
 800dc9c:	2340      	movs	r3, #64	; 0x40
 800dc9e:	6163      	str	r3, [r4, #20]
 800dca0:	2300      	movs	r3, #0
 800dca2:	9309      	str	r3, [sp, #36]	; 0x24
 800dca4:	2320      	movs	r3, #32
 800dca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcaa:	2330      	movs	r3, #48	; 0x30
 800dcac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dcb0:	9503      	str	r5, [sp, #12]
 800dcb2:	f04f 0b01 	mov.w	fp, #1
 800dcb6:	4637      	mov	r7, r6
 800dcb8:	463d      	mov	r5, r7
 800dcba:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dcbe:	b10b      	cbz	r3, 800dcc4 <_svfiprintf_r+0x58>
 800dcc0:	2b25      	cmp	r3, #37	; 0x25
 800dcc2:	d13e      	bne.n	800dd42 <_svfiprintf_r+0xd6>
 800dcc4:	ebb7 0a06 	subs.w	sl, r7, r6
 800dcc8:	d00b      	beq.n	800dce2 <_svfiprintf_r+0x76>
 800dcca:	4653      	mov	r3, sl
 800dccc:	4632      	mov	r2, r6
 800dcce:	4621      	mov	r1, r4
 800dcd0:	4640      	mov	r0, r8
 800dcd2:	f7ff ff71 	bl	800dbb8 <__ssputs_r>
 800dcd6:	3001      	adds	r0, #1
 800dcd8:	f000 80a4 	beq.w	800de24 <_svfiprintf_r+0x1b8>
 800dcdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcde:	4453      	add	r3, sl
 800dce0:	9309      	str	r3, [sp, #36]	; 0x24
 800dce2:	783b      	ldrb	r3, [r7, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	f000 809d 	beq.w	800de24 <_svfiprintf_r+0x1b8>
 800dcea:	2300      	movs	r3, #0
 800dcec:	f04f 32ff 	mov.w	r2, #4294967295
 800dcf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dcf4:	9304      	str	r3, [sp, #16]
 800dcf6:	9307      	str	r3, [sp, #28]
 800dcf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dcfc:	931a      	str	r3, [sp, #104]	; 0x68
 800dcfe:	462f      	mov	r7, r5
 800dd00:	2205      	movs	r2, #5
 800dd02:	f817 1b01 	ldrb.w	r1, [r7], #1
 800dd06:	4850      	ldr	r0, [pc, #320]	; (800de48 <_svfiprintf_r+0x1dc>)
 800dd08:	f7f2 fa82 	bl	8000210 <memchr>
 800dd0c:	9b04      	ldr	r3, [sp, #16]
 800dd0e:	b9d0      	cbnz	r0, 800dd46 <_svfiprintf_r+0xda>
 800dd10:	06d9      	lsls	r1, r3, #27
 800dd12:	bf44      	itt	mi
 800dd14:	2220      	movmi	r2, #32
 800dd16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dd1a:	071a      	lsls	r2, r3, #28
 800dd1c:	bf44      	itt	mi
 800dd1e:	222b      	movmi	r2, #43	; 0x2b
 800dd20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dd24:	782a      	ldrb	r2, [r5, #0]
 800dd26:	2a2a      	cmp	r2, #42	; 0x2a
 800dd28:	d015      	beq.n	800dd56 <_svfiprintf_r+0xea>
 800dd2a:	9a07      	ldr	r2, [sp, #28]
 800dd2c:	462f      	mov	r7, r5
 800dd2e:	2000      	movs	r0, #0
 800dd30:	250a      	movs	r5, #10
 800dd32:	4639      	mov	r1, r7
 800dd34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd38:	3b30      	subs	r3, #48	; 0x30
 800dd3a:	2b09      	cmp	r3, #9
 800dd3c:	d94d      	bls.n	800ddda <_svfiprintf_r+0x16e>
 800dd3e:	b1b8      	cbz	r0, 800dd70 <_svfiprintf_r+0x104>
 800dd40:	e00f      	b.n	800dd62 <_svfiprintf_r+0xf6>
 800dd42:	462f      	mov	r7, r5
 800dd44:	e7b8      	b.n	800dcb8 <_svfiprintf_r+0x4c>
 800dd46:	4a40      	ldr	r2, [pc, #256]	; (800de48 <_svfiprintf_r+0x1dc>)
 800dd48:	1a80      	subs	r0, r0, r2
 800dd4a:	fa0b f000 	lsl.w	r0, fp, r0
 800dd4e:	4318      	orrs	r0, r3
 800dd50:	9004      	str	r0, [sp, #16]
 800dd52:	463d      	mov	r5, r7
 800dd54:	e7d3      	b.n	800dcfe <_svfiprintf_r+0x92>
 800dd56:	9a03      	ldr	r2, [sp, #12]
 800dd58:	1d11      	adds	r1, r2, #4
 800dd5a:	6812      	ldr	r2, [r2, #0]
 800dd5c:	9103      	str	r1, [sp, #12]
 800dd5e:	2a00      	cmp	r2, #0
 800dd60:	db01      	blt.n	800dd66 <_svfiprintf_r+0xfa>
 800dd62:	9207      	str	r2, [sp, #28]
 800dd64:	e004      	b.n	800dd70 <_svfiprintf_r+0x104>
 800dd66:	4252      	negs	r2, r2
 800dd68:	f043 0302 	orr.w	r3, r3, #2
 800dd6c:	9207      	str	r2, [sp, #28]
 800dd6e:	9304      	str	r3, [sp, #16]
 800dd70:	783b      	ldrb	r3, [r7, #0]
 800dd72:	2b2e      	cmp	r3, #46	; 0x2e
 800dd74:	d10c      	bne.n	800dd90 <_svfiprintf_r+0x124>
 800dd76:	787b      	ldrb	r3, [r7, #1]
 800dd78:	2b2a      	cmp	r3, #42	; 0x2a
 800dd7a:	d133      	bne.n	800dde4 <_svfiprintf_r+0x178>
 800dd7c:	9b03      	ldr	r3, [sp, #12]
 800dd7e:	1d1a      	adds	r2, r3, #4
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	9203      	str	r2, [sp, #12]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	bfb8      	it	lt
 800dd88:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd8c:	3702      	adds	r7, #2
 800dd8e:	9305      	str	r3, [sp, #20]
 800dd90:	4d2e      	ldr	r5, [pc, #184]	; (800de4c <_svfiprintf_r+0x1e0>)
 800dd92:	7839      	ldrb	r1, [r7, #0]
 800dd94:	2203      	movs	r2, #3
 800dd96:	4628      	mov	r0, r5
 800dd98:	f7f2 fa3a 	bl	8000210 <memchr>
 800dd9c:	b138      	cbz	r0, 800ddae <_svfiprintf_r+0x142>
 800dd9e:	2340      	movs	r3, #64	; 0x40
 800dda0:	1b40      	subs	r0, r0, r5
 800dda2:	fa03 f000 	lsl.w	r0, r3, r0
 800dda6:	9b04      	ldr	r3, [sp, #16]
 800dda8:	4303      	orrs	r3, r0
 800ddaa:	3701      	adds	r7, #1
 800ddac:	9304      	str	r3, [sp, #16]
 800ddae:	7839      	ldrb	r1, [r7, #0]
 800ddb0:	4827      	ldr	r0, [pc, #156]	; (800de50 <_svfiprintf_r+0x1e4>)
 800ddb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ddb6:	2206      	movs	r2, #6
 800ddb8:	1c7e      	adds	r6, r7, #1
 800ddba:	f7f2 fa29 	bl	8000210 <memchr>
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d038      	beq.n	800de34 <_svfiprintf_r+0x1c8>
 800ddc2:	4b24      	ldr	r3, [pc, #144]	; (800de54 <_svfiprintf_r+0x1e8>)
 800ddc4:	bb13      	cbnz	r3, 800de0c <_svfiprintf_r+0x1a0>
 800ddc6:	9b03      	ldr	r3, [sp, #12]
 800ddc8:	3307      	adds	r3, #7
 800ddca:	f023 0307 	bic.w	r3, r3, #7
 800ddce:	3308      	adds	r3, #8
 800ddd0:	9303      	str	r3, [sp, #12]
 800ddd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddd4:	444b      	add	r3, r9
 800ddd6:	9309      	str	r3, [sp, #36]	; 0x24
 800ddd8:	e76d      	b.n	800dcb6 <_svfiprintf_r+0x4a>
 800ddda:	fb05 3202 	mla	r2, r5, r2, r3
 800ddde:	2001      	movs	r0, #1
 800dde0:	460f      	mov	r7, r1
 800dde2:	e7a6      	b.n	800dd32 <_svfiprintf_r+0xc6>
 800dde4:	2300      	movs	r3, #0
 800dde6:	3701      	adds	r7, #1
 800dde8:	9305      	str	r3, [sp, #20]
 800ddea:	4619      	mov	r1, r3
 800ddec:	250a      	movs	r5, #10
 800ddee:	4638      	mov	r0, r7
 800ddf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddf4:	3a30      	subs	r2, #48	; 0x30
 800ddf6:	2a09      	cmp	r2, #9
 800ddf8:	d903      	bls.n	800de02 <_svfiprintf_r+0x196>
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d0c8      	beq.n	800dd90 <_svfiprintf_r+0x124>
 800ddfe:	9105      	str	r1, [sp, #20]
 800de00:	e7c6      	b.n	800dd90 <_svfiprintf_r+0x124>
 800de02:	fb05 2101 	mla	r1, r5, r1, r2
 800de06:	2301      	movs	r3, #1
 800de08:	4607      	mov	r7, r0
 800de0a:	e7f0      	b.n	800ddee <_svfiprintf_r+0x182>
 800de0c:	ab03      	add	r3, sp, #12
 800de0e:	9300      	str	r3, [sp, #0]
 800de10:	4622      	mov	r2, r4
 800de12:	4b11      	ldr	r3, [pc, #68]	; (800de58 <_svfiprintf_r+0x1ec>)
 800de14:	a904      	add	r1, sp, #16
 800de16:	4640      	mov	r0, r8
 800de18:	f3af 8000 	nop.w
 800de1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800de20:	4681      	mov	r9, r0
 800de22:	d1d6      	bne.n	800ddd2 <_svfiprintf_r+0x166>
 800de24:	89a3      	ldrh	r3, [r4, #12]
 800de26:	065b      	lsls	r3, r3, #25
 800de28:	f53f af35 	bmi.w	800dc96 <_svfiprintf_r+0x2a>
 800de2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de2e:	b01d      	add	sp, #116	; 0x74
 800de30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de34:	ab03      	add	r3, sp, #12
 800de36:	9300      	str	r3, [sp, #0]
 800de38:	4622      	mov	r2, r4
 800de3a:	4b07      	ldr	r3, [pc, #28]	; (800de58 <_svfiprintf_r+0x1ec>)
 800de3c:	a904      	add	r1, sp, #16
 800de3e:	4640      	mov	r0, r8
 800de40:	f000 f882 	bl	800df48 <_printf_i>
 800de44:	e7ea      	b.n	800de1c <_svfiprintf_r+0x1b0>
 800de46:	bf00      	nop
 800de48:	080132e0 	.word	0x080132e0
 800de4c:	080132e6 	.word	0x080132e6
 800de50:	080132ea 	.word	0x080132ea
 800de54:	00000000 	.word	0x00000000
 800de58:	0800dbb9 	.word	0x0800dbb9

0800de5c <_printf_common>:
 800de5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de60:	4691      	mov	r9, r2
 800de62:	461f      	mov	r7, r3
 800de64:	688a      	ldr	r2, [r1, #8]
 800de66:	690b      	ldr	r3, [r1, #16]
 800de68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800de6c:	4293      	cmp	r3, r2
 800de6e:	bfb8      	it	lt
 800de70:	4613      	movlt	r3, r2
 800de72:	f8c9 3000 	str.w	r3, [r9]
 800de76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800de7a:	4606      	mov	r6, r0
 800de7c:	460c      	mov	r4, r1
 800de7e:	b112      	cbz	r2, 800de86 <_printf_common+0x2a>
 800de80:	3301      	adds	r3, #1
 800de82:	f8c9 3000 	str.w	r3, [r9]
 800de86:	6823      	ldr	r3, [r4, #0]
 800de88:	0699      	lsls	r1, r3, #26
 800de8a:	bf42      	ittt	mi
 800de8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800de90:	3302      	addmi	r3, #2
 800de92:	f8c9 3000 	strmi.w	r3, [r9]
 800de96:	6825      	ldr	r5, [r4, #0]
 800de98:	f015 0506 	ands.w	r5, r5, #6
 800de9c:	d107      	bne.n	800deae <_printf_common+0x52>
 800de9e:	f104 0a19 	add.w	sl, r4, #25
 800dea2:	68e3      	ldr	r3, [r4, #12]
 800dea4:	f8d9 2000 	ldr.w	r2, [r9]
 800dea8:	1a9b      	subs	r3, r3, r2
 800deaa:	42ab      	cmp	r3, r5
 800deac:	dc28      	bgt.n	800df00 <_printf_common+0xa4>
 800deae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800deb2:	6822      	ldr	r2, [r4, #0]
 800deb4:	3300      	adds	r3, #0
 800deb6:	bf18      	it	ne
 800deb8:	2301      	movne	r3, #1
 800deba:	0692      	lsls	r2, r2, #26
 800debc:	d42d      	bmi.n	800df1a <_printf_common+0xbe>
 800debe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dec2:	4639      	mov	r1, r7
 800dec4:	4630      	mov	r0, r6
 800dec6:	47c0      	blx	r8
 800dec8:	3001      	adds	r0, #1
 800deca:	d020      	beq.n	800df0e <_printf_common+0xb2>
 800decc:	6823      	ldr	r3, [r4, #0]
 800dece:	68e5      	ldr	r5, [r4, #12]
 800ded0:	f8d9 2000 	ldr.w	r2, [r9]
 800ded4:	f003 0306 	and.w	r3, r3, #6
 800ded8:	2b04      	cmp	r3, #4
 800deda:	bf08      	it	eq
 800dedc:	1aad      	subeq	r5, r5, r2
 800dede:	68a3      	ldr	r3, [r4, #8]
 800dee0:	6922      	ldr	r2, [r4, #16]
 800dee2:	bf0c      	ite	eq
 800dee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dee8:	2500      	movne	r5, #0
 800deea:	4293      	cmp	r3, r2
 800deec:	bfc4      	itt	gt
 800deee:	1a9b      	subgt	r3, r3, r2
 800def0:	18ed      	addgt	r5, r5, r3
 800def2:	f04f 0900 	mov.w	r9, #0
 800def6:	341a      	adds	r4, #26
 800def8:	454d      	cmp	r5, r9
 800defa:	d11a      	bne.n	800df32 <_printf_common+0xd6>
 800defc:	2000      	movs	r0, #0
 800defe:	e008      	b.n	800df12 <_printf_common+0xb6>
 800df00:	2301      	movs	r3, #1
 800df02:	4652      	mov	r2, sl
 800df04:	4639      	mov	r1, r7
 800df06:	4630      	mov	r0, r6
 800df08:	47c0      	blx	r8
 800df0a:	3001      	adds	r0, #1
 800df0c:	d103      	bne.n	800df16 <_printf_common+0xba>
 800df0e:	f04f 30ff 	mov.w	r0, #4294967295
 800df12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df16:	3501      	adds	r5, #1
 800df18:	e7c3      	b.n	800dea2 <_printf_common+0x46>
 800df1a:	18e1      	adds	r1, r4, r3
 800df1c:	1c5a      	adds	r2, r3, #1
 800df1e:	2030      	movs	r0, #48	; 0x30
 800df20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800df24:	4422      	add	r2, r4
 800df26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800df2e:	3302      	adds	r3, #2
 800df30:	e7c5      	b.n	800debe <_printf_common+0x62>
 800df32:	2301      	movs	r3, #1
 800df34:	4622      	mov	r2, r4
 800df36:	4639      	mov	r1, r7
 800df38:	4630      	mov	r0, r6
 800df3a:	47c0      	blx	r8
 800df3c:	3001      	adds	r0, #1
 800df3e:	d0e6      	beq.n	800df0e <_printf_common+0xb2>
 800df40:	f109 0901 	add.w	r9, r9, #1
 800df44:	e7d8      	b.n	800def8 <_printf_common+0x9c>
	...

0800df48 <_printf_i>:
 800df48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df4c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800df50:	460c      	mov	r4, r1
 800df52:	7e09      	ldrb	r1, [r1, #24]
 800df54:	b085      	sub	sp, #20
 800df56:	296e      	cmp	r1, #110	; 0x6e
 800df58:	4617      	mov	r7, r2
 800df5a:	4606      	mov	r6, r0
 800df5c:	4698      	mov	r8, r3
 800df5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df60:	f000 80b3 	beq.w	800e0ca <_printf_i+0x182>
 800df64:	d822      	bhi.n	800dfac <_printf_i+0x64>
 800df66:	2963      	cmp	r1, #99	; 0x63
 800df68:	d036      	beq.n	800dfd8 <_printf_i+0x90>
 800df6a:	d80a      	bhi.n	800df82 <_printf_i+0x3a>
 800df6c:	2900      	cmp	r1, #0
 800df6e:	f000 80b9 	beq.w	800e0e4 <_printf_i+0x19c>
 800df72:	2958      	cmp	r1, #88	; 0x58
 800df74:	f000 8083 	beq.w	800e07e <_printf_i+0x136>
 800df78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df7c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800df80:	e032      	b.n	800dfe8 <_printf_i+0xa0>
 800df82:	2964      	cmp	r1, #100	; 0x64
 800df84:	d001      	beq.n	800df8a <_printf_i+0x42>
 800df86:	2969      	cmp	r1, #105	; 0x69
 800df88:	d1f6      	bne.n	800df78 <_printf_i+0x30>
 800df8a:	6820      	ldr	r0, [r4, #0]
 800df8c:	6813      	ldr	r3, [r2, #0]
 800df8e:	0605      	lsls	r5, r0, #24
 800df90:	f103 0104 	add.w	r1, r3, #4
 800df94:	d52a      	bpl.n	800dfec <_printf_i+0xa4>
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	6011      	str	r1, [r2, #0]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	da03      	bge.n	800dfa6 <_printf_i+0x5e>
 800df9e:	222d      	movs	r2, #45	; 0x2d
 800dfa0:	425b      	negs	r3, r3
 800dfa2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dfa6:	486f      	ldr	r0, [pc, #444]	; (800e164 <_printf_i+0x21c>)
 800dfa8:	220a      	movs	r2, #10
 800dfaa:	e039      	b.n	800e020 <_printf_i+0xd8>
 800dfac:	2973      	cmp	r1, #115	; 0x73
 800dfae:	f000 809d 	beq.w	800e0ec <_printf_i+0x1a4>
 800dfb2:	d808      	bhi.n	800dfc6 <_printf_i+0x7e>
 800dfb4:	296f      	cmp	r1, #111	; 0x6f
 800dfb6:	d020      	beq.n	800dffa <_printf_i+0xb2>
 800dfb8:	2970      	cmp	r1, #112	; 0x70
 800dfba:	d1dd      	bne.n	800df78 <_printf_i+0x30>
 800dfbc:	6823      	ldr	r3, [r4, #0]
 800dfbe:	f043 0320 	orr.w	r3, r3, #32
 800dfc2:	6023      	str	r3, [r4, #0]
 800dfc4:	e003      	b.n	800dfce <_printf_i+0x86>
 800dfc6:	2975      	cmp	r1, #117	; 0x75
 800dfc8:	d017      	beq.n	800dffa <_printf_i+0xb2>
 800dfca:	2978      	cmp	r1, #120	; 0x78
 800dfcc:	d1d4      	bne.n	800df78 <_printf_i+0x30>
 800dfce:	2378      	movs	r3, #120	; 0x78
 800dfd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dfd4:	4864      	ldr	r0, [pc, #400]	; (800e168 <_printf_i+0x220>)
 800dfd6:	e055      	b.n	800e084 <_printf_i+0x13c>
 800dfd8:	6813      	ldr	r3, [r2, #0]
 800dfda:	1d19      	adds	r1, r3, #4
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	6011      	str	r1, [r2, #0]
 800dfe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dfe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dfe8:	2301      	movs	r3, #1
 800dfea:	e08c      	b.n	800e106 <_printf_i+0x1be>
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	6011      	str	r1, [r2, #0]
 800dff0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dff4:	bf18      	it	ne
 800dff6:	b21b      	sxthne	r3, r3
 800dff8:	e7cf      	b.n	800df9a <_printf_i+0x52>
 800dffa:	6813      	ldr	r3, [r2, #0]
 800dffc:	6825      	ldr	r5, [r4, #0]
 800dffe:	1d18      	adds	r0, r3, #4
 800e000:	6010      	str	r0, [r2, #0]
 800e002:	0628      	lsls	r0, r5, #24
 800e004:	d501      	bpl.n	800e00a <_printf_i+0xc2>
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	e002      	b.n	800e010 <_printf_i+0xc8>
 800e00a:	0668      	lsls	r0, r5, #25
 800e00c:	d5fb      	bpl.n	800e006 <_printf_i+0xbe>
 800e00e:	881b      	ldrh	r3, [r3, #0]
 800e010:	4854      	ldr	r0, [pc, #336]	; (800e164 <_printf_i+0x21c>)
 800e012:	296f      	cmp	r1, #111	; 0x6f
 800e014:	bf14      	ite	ne
 800e016:	220a      	movne	r2, #10
 800e018:	2208      	moveq	r2, #8
 800e01a:	2100      	movs	r1, #0
 800e01c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e020:	6865      	ldr	r5, [r4, #4]
 800e022:	60a5      	str	r5, [r4, #8]
 800e024:	2d00      	cmp	r5, #0
 800e026:	f2c0 8095 	blt.w	800e154 <_printf_i+0x20c>
 800e02a:	6821      	ldr	r1, [r4, #0]
 800e02c:	f021 0104 	bic.w	r1, r1, #4
 800e030:	6021      	str	r1, [r4, #0]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d13d      	bne.n	800e0b2 <_printf_i+0x16a>
 800e036:	2d00      	cmp	r5, #0
 800e038:	f040 808e 	bne.w	800e158 <_printf_i+0x210>
 800e03c:	4665      	mov	r5, ip
 800e03e:	2a08      	cmp	r2, #8
 800e040:	d10b      	bne.n	800e05a <_printf_i+0x112>
 800e042:	6823      	ldr	r3, [r4, #0]
 800e044:	07db      	lsls	r3, r3, #31
 800e046:	d508      	bpl.n	800e05a <_printf_i+0x112>
 800e048:	6923      	ldr	r3, [r4, #16]
 800e04a:	6862      	ldr	r2, [r4, #4]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	bfde      	ittt	le
 800e050:	2330      	movle	r3, #48	; 0x30
 800e052:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e056:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e05a:	ebac 0305 	sub.w	r3, ip, r5
 800e05e:	6123      	str	r3, [r4, #16]
 800e060:	f8cd 8000 	str.w	r8, [sp]
 800e064:	463b      	mov	r3, r7
 800e066:	aa03      	add	r2, sp, #12
 800e068:	4621      	mov	r1, r4
 800e06a:	4630      	mov	r0, r6
 800e06c:	f7ff fef6 	bl	800de5c <_printf_common>
 800e070:	3001      	adds	r0, #1
 800e072:	d14d      	bne.n	800e110 <_printf_i+0x1c8>
 800e074:	f04f 30ff 	mov.w	r0, #4294967295
 800e078:	b005      	add	sp, #20
 800e07a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e07e:	4839      	ldr	r0, [pc, #228]	; (800e164 <_printf_i+0x21c>)
 800e080:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e084:	6813      	ldr	r3, [r2, #0]
 800e086:	6821      	ldr	r1, [r4, #0]
 800e088:	1d1d      	adds	r5, r3, #4
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	6015      	str	r5, [r2, #0]
 800e08e:	060a      	lsls	r2, r1, #24
 800e090:	d50b      	bpl.n	800e0aa <_printf_i+0x162>
 800e092:	07ca      	lsls	r2, r1, #31
 800e094:	bf44      	itt	mi
 800e096:	f041 0120 	orrmi.w	r1, r1, #32
 800e09a:	6021      	strmi	r1, [r4, #0]
 800e09c:	b91b      	cbnz	r3, 800e0a6 <_printf_i+0x15e>
 800e09e:	6822      	ldr	r2, [r4, #0]
 800e0a0:	f022 0220 	bic.w	r2, r2, #32
 800e0a4:	6022      	str	r2, [r4, #0]
 800e0a6:	2210      	movs	r2, #16
 800e0a8:	e7b7      	b.n	800e01a <_printf_i+0xd2>
 800e0aa:	064d      	lsls	r5, r1, #25
 800e0ac:	bf48      	it	mi
 800e0ae:	b29b      	uxthmi	r3, r3
 800e0b0:	e7ef      	b.n	800e092 <_printf_i+0x14a>
 800e0b2:	4665      	mov	r5, ip
 800e0b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e0b8:	fb02 3311 	mls	r3, r2, r1, r3
 800e0bc:	5cc3      	ldrb	r3, [r0, r3]
 800e0be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e0c2:	460b      	mov	r3, r1
 800e0c4:	2900      	cmp	r1, #0
 800e0c6:	d1f5      	bne.n	800e0b4 <_printf_i+0x16c>
 800e0c8:	e7b9      	b.n	800e03e <_printf_i+0xf6>
 800e0ca:	6813      	ldr	r3, [r2, #0]
 800e0cc:	6825      	ldr	r5, [r4, #0]
 800e0ce:	6961      	ldr	r1, [r4, #20]
 800e0d0:	1d18      	adds	r0, r3, #4
 800e0d2:	6010      	str	r0, [r2, #0]
 800e0d4:	0628      	lsls	r0, r5, #24
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	d501      	bpl.n	800e0de <_printf_i+0x196>
 800e0da:	6019      	str	r1, [r3, #0]
 800e0dc:	e002      	b.n	800e0e4 <_printf_i+0x19c>
 800e0de:	066a      	lsls	r2, r5, #25
 800e0e0:	d5fb      	bpl.n	800e0da <_printf_i+0x192>
 800e0e2:	8019      	strh	r1, [r3, #0]
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	6123      	str	r3, [r4, #16]
 800e0e8:	4665      	mov	r5, ip
 800e0ea:	e7b9      	b.n	800e060 <_printf_i+0x118>
 800e0ec:	6813      	ldr	r3, [r2, #0]
 800e0ee:	1d19      	adds	r1, r3, #4
 800e0f0:	6011      	str	r1, [r2, #0]
 800e0f2:	681d      	ldr	r5, [r3, #0]
 800e0f4:	6862      	ldr	r2, [r4, #4]
 800e0f6:	2100      	movs	r1, #0
 800e0f8:	4628      	mov	r0, r5
 800e0fa:	f7f2 f889 	bl	8000210 <memchr>
 800e0fe:	b108      	cbz	r0, 800e104 <_printf_i+0x1bc>
 800e100:	1b40      	subs	r0, r0, r5
 800e102:	6060      	str	r0, [r4, #4]
 800e104:	6863      	ldr	r3, [r4, #4]
 800e106:	6123      	str	r3, [r4, #16]
 800e108:	2300      	movs	r3, #0
 800e10a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e10e:	e7a7      	b.n	800e060 <_printf_i+0x118>
 800e110:	6923      	ldr	r3, [r4, #16]
 800e112:	462a      	mov	r2, r5
 800e114:	4639      	mov	r1, r7
 800e116:	4630      	mov	r0, r6
 800e118:	47c0      	blx	r8
 800e11a:	3001      	adds	r0, #1
 800e11c:	d0aa      	beq.n	800e074 <_printf_i+0x12c>
 800e11e:	6823      	ldr	r3, [r4, #0]
 800e120:	079b      	lsls	r3, r3, #30
 800e122:	d413      	bmi.n	800e14c <_printf_i+0x204>
 800e124:	68e0      	ldr	r0, [r4, #12]
 800e126:	9b03      	ldr	r3, [sp, #12]
 800e128:	4298      	cmp	r0, r3
 800e12a:	bfb8      	it	lt
 800e12c:	4618      	movlt	r0, r3
 800e12e:	e7a3      	b.n	800e078 <_printf_i+0x130>
 800e130:	2301      	movs	r3, #1
 800e132:	464a      	mov	r2, r9
 800e134:	4639      	mov	r1, r7
 800e136:	4630      	mov	r0, r6
 800e138:	47c0      	blx	r8
 800e13a:	3001      	adds	r0, #1
 800e13c:	d09a      	beq.n	800e074 <_printf_i+0x12c>
 800e13e:	3501      	adds	r5, #1
 800e140:	68e3      	ldr	r3, [r4, #12]
 800e142:	9a03      	ldr	r2, [sp, #12]
 800e144:	1a9b      	subs	r3, r3, r2
 800e146:	42ab      	cmp	r3, r5
 800e148:	dcf2      	bgt.n	800e130 <_printf_i+0x1e8>
 800e14a:	e7eb      	b.n	800e124 <_printf_i+0x1dc>
 800e14c:	2500      	movs	r5, #0
 800e14e:	f104 0919 	add.w	r9, r4, #25
 800e152:	e7f5      	b.n	800e140 <_printf_i+0x1f8>
 800e154:	2b00      	cmp	r3, #0
 800e156:	d1ac      	bne.n	800e0b2 <_printf_i+0x16a>
 800e158:	7803      	ldrb	r3, [r0, #0]
 800e15a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e15e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e162:	e76c      	b.n	800e03e <_printf_i+0xf6>
 800e164:	080132f1 	.word	0x080132f1
 800e168:	08013302 	.word	0x08013302

0800e16c <_free_r>:
 800e16c:	b538      	push	{r3, r4, r5, lr}
 800e16e:	4605      	mov	r5, r0
 800e170:	2900      	cmp	r1, #0
 800e172:	d045      	beq.n	800e200 <_free_r+0x94>
 800e174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e178:	1f0c      	subs	r4, r1, #4
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	bfb8      	it	lt
 800e17e:	18e4      	addlt	r4, r4, r3
 800e180:	f000 f8d2 	bl	800e328 <__malloc_lock>
 800e184:	4a1f      	ldr	r2, [pc, #124]	; (800e204 <_free_r+0x98>)
 800e186:	6813      	ldr	r3, [r2, #0]
 800e188:	4610      	mov	r0, r2
 800e18a:	b933      	cbnz	r3, 800e19a <_free_r+0x2e>
 800e18c:	6063      	str	r3, [r4, #4]
 800e18e:	6014      	str	r4, [r2, #0]
 800e190:	4628      	mov	r0, r5
 800e192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e196:	f000 b8c8 	b.w	800e32a <__malloc_unlock>
 800e19a:	42a3      	cmp	r3, r4
 800e19c:	d90c      	bls.n	800e1b8 <_free_r+0x4c>
 800e19e:	6821      	ldr	r1, [r4, #0]
 800e1a0:	1862      	adds	r2, r4, r1
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	bf04      	itt	eq
 800e1a6:	681a      	ldreq	r2, [r3, #0]
 800e1a8:	685b      	ldreq	r3, [r3, #4]
 800e1aa:	6063      	str	r3, [r4, #4]
 800e1ac:	bf04      	itt	eq
 800e1ae:	1852      	addeq	r2, r2, r1
 800e1b0:	6022      	streq	r2, [r4, #0]
 800e1b2:	6004      	str	r4, [r0, #0]
 800e1b4:	e7ec      	b.n	800e190 <_free_r+0x24>
 800e1b6:	4613      	mov	r3, r2
 800e1b8:	685a      	ldr	r2, [r3, #4]
 800e1ba:	b10a      	cbz	r2, 800e1c0 <_free_r+0x54>
 800e1bc:	42a2      	cmp	r2, r4
 800e1be:	d9fa      	bls.n	800e1b6 <_free_r+0x4a>
 800e1c0:	6819      	ldr	r1, [r3, #0]
 800e1c2:	1858      	adds	r0, r3, r1
 800e1c4:	42a0      	cmp	r0, r4
 800e1c6:	d10b      	bne.n	800e1e0 <_free_r+0x74>
 800e1c8:	6820      	ldr	r0, [r4, #0]
 800e1ca:	4401      	add	r1, r0
 800e1cc:	1858      	adds	r0, r3, r1
 800e1ce:	4282      	cmp	r2, r0
 800e1d0:	6019      	str	r1, [r3, #0]
 800e1d2:	d1dd      	bne.n	800e190 <_free_r+0x24>
 800e1d4:	6810      	ldr	r0, [r2, #0]
 800e1d6:	6852      	ldr	r2, [r2, #4]
 800e1d8:	605a      	str	r2, [r3, #4]
 800e1da:	4401      	add	r1, r0
 800e1dc:	6019      	str	r1, [r3, #0]
 800e1de:	e7d7      	b.n	800e190 <_free_r+0x24>
 800e1e0:	d902      	bls.n	800e1e8 <_free_r+0x7c>
 800e1e2:	230c      	movs	r3, #12
 800e1e4:	602b      	str	r3, [r5, #0]
 800e1e6:	e7d3      	b.n	800e190 <_free_r+0x24>
 800e1e8:	6820      	ldr	r0, [r4, #0]
 800e1ea:	1821      	adds	r1, r4, r0
 800e1ec:	428a      	cmp	r2, r1
 800e1ee:	bf04      	itt	eq
 800e1f0:	6811      	ldreq	r1, [r2, #0]
 800e1f2:	6852      	ldreq	r2, [r2, #4]
 800e1f4:	6062      	str	r2, [r4, #4]
 800e1f6:	bf04      	itt	eq
 800e1f8:	1809      	addeq	r1, r1, r0
 800e1fa:	6021      	streq	r1, [r4, #0]
 800e1fc:	605c      	str	r4, [r3, #4]
 800e1fe:	e7c7      	b.n	800e190 <_free_r+0x24>
 800e200:	bd38      	pop	{r3, r4, r5, pc}
 800e202:	bf00      	nop
 800e204:	200192c0 	.word	0x200192c0

0800e208 <_malloc_r>:
 800e208:	b570      	push	{r4, r5, r6, lr}
 800e20a:	1ccd      	adds	r5, r1, #3
 800e20c:	f025 0503 	bic.w	r5, r5, #3
 800e210:	3508      	adds	r5, #8
 800e212:	2d0c      	cmp	r5, #12
 800e214:	bf38      	it	cc
 800e216:	250c      	movcc	r5, #12
 800e218:	2d00      	cmp	r5, #0
 800e21a:	4606      	mov	r6, r0
 800e21c:	db01      	blt.n	800e222 <_malloc_r+0x1a>
 800e21e:	42a9      	cmp	r1, r5
 800e220:	d903      	bls.n	800e22a <_malloc_r+0x22>
 800e222:	230c      	movs	r3, #12
 800e224:	6033      	str	r3, [r6, #0]
 800e226:	2000      	movs	r0, #0
 800e228:	bd70      	pop	{r4, r5, r6, pc}
 800e22a:	f000 f87d 	bl	800e328 <__malloc_lock>
 800e22e:	4a21      	ldr	r2, [pc, #132]	; (800e2b4 <_malloc_r+0xac>)
 800e230:	6814      	ldr	r4, [r2, #0]
 800e232:	4621      	mov	r1, r4
 800e234:	b991      	cbnz	r1, 800e25c <_malloc_r+0x54>
 800e236:	4c20      	ldr	r4, [pc, #128]	; (800e2b8 <_malloc_r+0xb0>)
 800e238:	6823      	ldr	r3, [r4, #0]
 800e23a:	b91b      	cbnz	r3, 800e244 <_malloc_r+0x3c>
 800e23c:	4630      	mov	r0, r6
 800e23e:	f000 f863 	bl	800e308 <_sbrk_r>
 800e242:	6020      	str	r0, [r4, #0]
 800e244:	4629      	mov	r1, r5
 800e246:	4630      	mov	r0, r6
 800e248:	f000 f85e 	bl	800e308 <_sbrk_r>
 800e24c:	1c43      	adds	r3, r0, #1
 800e24e:	d124      	bne.n	800e29a <_malloc_r+0x92>
 800e250:	230c      	movs	r3, #12
 800e252:	6033      	str	r3, [r6, #0]
 800e254:	4630      	mov	r0, r6
 800e256:	f000 f868 	bl	800e32a <__malloc_unlock>
 800e25a:	e7e4      	b.n	800e226 <_malloc_r+0x1e>
 800e25c:	680b      	ldr	r3, [r1, #0]
 800e25e:	1b5b      	subs	r3, r3, r5
 800e260:	d418      	bmi.n	800e294 <_malloc_r+0x8c>
 800e262:	2b0b      	cmp	r3, #11
 800e264:	d90f      	bls.n	800e286 <_malloc_r+0x7e>
 800e266:	600b      	str	r3, [r1, #0]
 800e268:	50cd      	str	r5, [r1, r3]
 800e26a:	18cc      	adds	r4, r1, r3
 800e26c:	4630      	mov	r0, r6
 800e26e:	f000 f85c 	bl	800e32a <__malloc_unlock>
 800e272:	f104 000b 	add.w	r0, r4, #11
 800e276:	1d23      	adds	r3, r4, #4
 800e278:	f020 0007 	bic.w	r0, r0, #7
 800e27c:	1ac3      	subs	r3, r0, r3
 800e27e:	d0d3      	beq.n	800e228 <_malloc_r+0x20>
 800e280:	425a      	negs	r2, r3
 800e282:	50e2      	str	r2, [r4, r3]
 800e284:	e7d0      	b.n	800e228 <_malloc_r+0x20>
 800e286:	428c      	cmp	r4, r1
 800e288:	684b      	ldr	r3, [r1, #4]
 800e28a:	bf16      	itet	ne
 800e28c:	6063      	strne	r3, [r4, #4]
 800e28e:	6013      	streq	r3, [r2, #0]
 800e290:	460c      	movne	r4, r1
 800e292:	e7eb      	b.n	800e26c <_malloc_r+0x64>
 800e294:	460c      	mov	r4, r1
 800e296:	6849      	ldr	r1, [r1, #4]
 800e298:	e7cc      	b.n	800e234 <_malloc_r+0x2c>
 800e29a:	1cc4      	adds	r4, r0, #3
 800e29c:	f024 0403 	bic.w	r4, r4, #3
 800e2a0:	42a0      	cmp	r0, r4
 800e2a2:	d005      	beq.n	800e2b0 <_malloc_r+0xa8>
 800e2a4:	1a21      	subs	r1, r4, r0
 800e2a6:	4630      	mov	r0, r6
 800e2a8:	f000 f82e 	bl	800e308 <_sbrk_r>
 800e2ac:	3001      	adds	r0, #1
 800e2ae:	d0cf      	beq.n	800e250 <_malloc_r+0x48>
 800e2b0:	6025      	str	r5, [r4, #0]
 800e2b2:	e7db      	b.n	800e26c <_malloc_r+0x64>
 800e2b4:	200192c0 	.word	0x200192c0
 800e2b8:	200192c4 	.word	0x200192c4

0800e2bc <_realloc_r>:
 800e2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2be:	4607      	mov	r7, r0
 800e2c0:	4614      	mov	r4, r2
 800e2c2:	460e      	mov	r6, r1
 800e2c4:	b921      	cbnz	r1, 800e2d0 <_realloc_r+0x14>
 800e2c6:	4611      	mov	r1, r2
 800e2c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e2cc:	f7ff bf9c 	b.w	800e208 <_malloc_r>
 800e2d0:	b922      	cbnz	r2, 800e2dc <_realloc_r+0x20>
 800e2d2:	f7ff ff4b 	bl	800e16c <_free_r>
 800e2d6:	4625      	mov	r5, r4
 800e2d8:	4628      	mov	r0, r5
 800e2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2dc:	f000 f826 	bl	800e32c <_malloc_usable_size_r>
 800e2e0:	42a0      	cmp	r0, r4
 800e2e2:	d20f      	bcs.n	800e304 <_realloc_r+0x48>
 800e2e4:	4621      	mov	r1, r4
 800e2e6:	4638      	mov	r0, r7
 800e2e8:	f7ff ff8e 	bl	800e208 <_malloc_r>
 800e2ec:	4605      	mov	r5, r0
 800e2ee:	2800      	cmp	r0, #0
 800e2f0:	d0f2      	beq.n	800e2d8 <_realloc_r+0x1c>
 800e2f2:	4631      	mov	r1, r6
 800e2f4:	4622      	mov	r2, r4
 800e2f6:	f7ff fc13 	bl	800db20 <memcpy>
 800e2fa:	4631      	mov	r1, r6
 800e2fc:	4638      	mov	r0, r7
 800e2fe:	f7ff ff35 	bl	800e16c <_free_r>
 800e302:	e7e9      	b.n	800e2d8 <_realloc_r+0x1c>
 800e304:	4635      	mov	r5, r6
 800e306:	e7e7      	b.n	800e2d8 <_realloc_r+0x1c>

0800e308 <_sbrk_r>:
 800e308:	b538      	push	{r3, r4, r5, lr}
 800e30a:	4c06      	ldr	r4, [pc, #24]	; (800e324 <_sbrk_r+0x1c>)
 800e30c:	2300      	movs	r3, #0
 800e30e:	4605      	mov	r5, r0
 800e310:	4608      	mov	r0, r1
 800e312:	6023      	str	r3, [r4, #0]
 800e314:	f7f6 fa9e 	bl	8004854 <_sbrk>
 800e318:	1c43      	adds	r3, r0, #1
 800e31a:	d102      	bne.n	800e322 <_sbrk_r+0x1a>
 800e31c:	6823      	ldr	r3, [r4, #0]
 800e31e:	b103      	cbz	r3, 800e322 <_sbrk_r+0x1a>
 800e320:	602b      	str	r3, [r5, #0]
 800e322:	bd38      	pop	{r3, r4, r5, pc}
 800e324:	200195cc 	.word	0x200195cc

0800e328 <__malloc_lock>:
 800e328:	4770      	bx	lr

0800e32a <__malloc_unlock>:
 800e32a:	4770      	bx	lr

0800e32c <_malloc_usable_size_r>:
 800e32c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e330:	1f18      	subs	r0, r3, #4
 800e332:	2b00      	cmp	r3, #0
 800e334:	bfbc      	itt	lt
 800e336:	580b      	ldrlt	r3, [r1, r0]
 800e338:	18c0      	addlt	r0, r0, r3
 800e33a:	4770      	bx	lr
 800e33c:	0000      	movs	r0, r0
	...

0800e340 <ceil>:
 800e340:	ec51 0b10 	vmov	r0, r1, d0
 800e344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e348:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e34c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e350:	2e13      	cmp	r6, #19
 800e352:	460c      	mov	r4, r1
 800e354:	ee10 5a10 	vmov	r5, s0
 800e358:	4680      	mov	r8, r0
 800e35a:	dc30      	bgt.n	800e3be <ceil+0x7e>
 800e35c:	2e00      	cmp	r6, #0
 800e35e:	da12      	bge.n	800e386 <ceil+0x46>
 800e360:	a333      	add	r3, pc, #204	; (adr r3, 800e430 <ceil+0xf0>)
 800e362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e366:	f7f1 ffa9 	bl	80002bc <__adddf3>
 800e36a:	2200      	movs	r2, #0
 800e36c:	2300      	movs	r3, #0
 800e36e:	f7f2 fbeb 	bl	8000b48 <__aeabi_dcmpgt>
 800e372:	b128      	cbz	r0, 800e380 <ceil+0x40>
 800e374:	2c00      	cmp	r4, #0
 800e376:	db55      	blt.n	800e424 <ceil+0xe4>
 800e378:	432c      	orrs	r4, r5
 800e37a:	d057      	beq.n	800e42c <ceil+0xec>
 800e37c:	4c2e      	ldr	r4, [pc, #184]	; (800e438 <ceil+0xf8>)
 800e37e:	2500      	movs	r5, #0
 800e380:	4621      	mov	r1, r4
 800e382:	4628      	mov	r0, r5
 800e384:	e025      	b.n	800e3d2 <ceil+0x92>
 800e386:	4f2d      	ldr	r7, [pc, #180]	; (800e43c <ceil+0xfc>)
 800e388:	4137      	asrs	r7, r6
 800e38a:	ea01 0307 	and.w	r3, r1, r7
 800e38e:	4303      	orrs	r3, r0
 800e390:	d01f      	beq.n	800e3d2 <ceil+0x92>
 800e392:	a327      	add	r3, pc, #156	; (adr r3, 800e430 <ceil+0xf0>)
 800e394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e398:	f7f1 ff90 	bl	80002bc <__adddf3>
 800e39c:	2200      	movs	r2, #0
 800e39e:	2300      	movs	r3, #0
 800e3a0:	f7f2 fbd2 	bl	8000b48 <__aeabi_dcmpgt>
 800e3a4:	2800      	cmp	r0, #0
 800e3a6:	d0eb      	beq.n	800e380 <ceil+0x40>
 800e3a8:	2c00      	cmp	r4, #0
 800e3aa:	bfc2      	ittt	gt
 800e3ac:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800e3b0:	fa43 f606 	asrgt.w	r6, r3, r6
 800e3b4:	19a4      	addgt	r4, r4, r6
 800e3b6:	ea24 0407 	bic.w	r4, r4, r7
 800e3ba:	2500      	movs	r5, #0
 800e3bc:	e7e0      	b.n	800e380 <ceil+0x40>
 800e3be:	2e33      	cmp	r6, #51	; 0x33
 800e3c0:	dd0b      	ble.n	800e3da <ceil+0x9a>
 800e3c2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e3c6:	d104      	bne.n	800e3d2 <ceil+0x92>
 800e3c8:	ee10 2a10 	vmov	r2, s0
 800e3cc:	460b      	mov	r3, r1
 800e3ce:	f7f1 ff75 	bl	80002bc <__adddf3>
 800e3d2:	ec41 0b10 	vmov	d0, r0, r1
 800e3d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3da:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e3de:	f04f 33ff 	mov.w	r3, #4294967295
 800e3e2:	fa23 f707 	lsr.w	r7, r3, r7
 800e3e6:	4207      	tst	r7, r0
 800e3e8:	d0f3      	beq.n	800e3d2 <ceil+0x92>
 800e3ea:	a311      	add	r3, pc, #68	; (adr r3, 800e430 <ceil+0xf0>)
 800e3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f0:	f7f1 ff64 	bl	80002bc <__adddf3>
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	f7f2 fba6 	bl	8000b48 <__aeabi_dcmpgt>
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	d0bf      	beq.n	800e380 <ceil+0x40>
 800e400:	2c00      	cmp	r4, #0
 800e402:	dd02      	ble.n	800e40a <ceil+0xca>
 800e404:	2e14      	cmp	r6, #20
 800e406:	d103      	bne.n	800e410 <ceil+0xd0>
 800e408:	3401      	adds	r4, #1
 800e40a:	ea25 0507 	bic.w	r5, r5, r7
 800e40e:	e7b7      	b.n	800e380 <ceil+0x40>
 800e410:	2301      	movs	r3, #1
 800e412:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e416:	fa03 f606 	lsl.w	r6, r3, r6
 800e41a:	4435      	add	r5, r6
 800e41c:	4545      	cmp	r5, r8
 800e41e:	bf38      	it	cc
 800e420:	18e4      	addcc	r4, r4, r3
 800e422:	e7f2      	b.n	800e40a <ceil+0xca>
 800e424:	2500      	movs	r5, #0
 800e426:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e42a:	e7a9      	b.n	800e380 <ceil+0x40>
 800e42c:	4625      	mov	r5, r4
 800e42e:	e7a7      	b.n	800e380 <ceil+0x40>
 800e430:	8800759c 	.word	0x8800759c
 800e434:	7e37e43c 	.word	0x7e37e43c
 800e438:	3ff00000 	.word	0x3ff00000
 800e43c:	000fffff 	.word	0x000fffff

0800e440 <cos>:
 800e440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e442:	ec51 0b10 	vmov	r0, r1, d0
 800e446:	4a1e      	ldr	r2, [pc, #120]	; (800e4c0 <cos+0x80>)
 800e448:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e44c:	4293      	cmp	r3, r2
 800e44e:	dc06      	bgt.n	800e45e <cos+0x1e>
 800e450:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800e4b8 <cos+0x78>
 800e454:	f000 faf8 	bl	800ea48 <__kernel_cos>
 800e458:	ec51 0b10 	vmov	r0, r1, d0
 800e45c:	e007      	b.n	800e46e <cos+0x2e>
 800e45e:	4a19      	ldr	r2, [pc, #100]	; (800e4c4 <cos+0x84>)
 800e460:	4293      	cmp	r3, r2
 800e462:	dd09      	ble.n	800e478 <cos+0x38>
 800e464:	ee10 2a10 	vmov	r2, s0
 800e468:	460b      	mov	r3, r1
 800e46a:	f7f1 ff25 	bl	80002b8 <__aeabi_dsub>
 800e46e:	ec41 0b10 	vmov	d0, r0, r1
 800e472:	b005      	add	sp, #20
 800e474:	f85d fb04 	ldr.w	pc, [sp], #4
 800e478:	4668      	mov	r0, sp
 800e47a:	f000 f8f1 	bl	800e660 <__ieee754_rem_pio2>
 800e47e:	f000 0003 	and.w	r0, r0, #3
 800e482:	2801      	cmp	r0, #1
 800e484:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e488:	ed9d 0b00 	vldr	d0, [sp]
 800e48c:	d007      	beq.n	800e49e <cos+0x5e>
 800e48e:	2802      	cmp	r0, #2
 800e490:	d00e      	beq.n	800e4b0 <cos+0x70>
 800e492:	2800      	cmp	r0, #0
 800e494:	d0de      	beq.n	800e454 <cos+0x14>
 800e496:	2001      	movs	r0, #1
 800e498:	f000 fede 	bl	800f258 <__kernel_sin>
 800e49c:	e7dc      	b.n	800e458 <cos+0x18>
 800e49e:	f000 fedb 	bl	800f258 <__kernel_sin>
 800e4a2:	ec53 2b10 	vmov	r2, r3, d0
 800e4a6:	ee10 0a10 	vmov	r0, s0
 800e4aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e4ae:	e7de      	b.n	800e46e <cos+0x2e>
 800e4b0:	f000 faca 	bl	800ea48 <__kernel_cos>
 800e4b4:	e7f5      	b.n	800e4a2 <cos+0x62>
 800e4b6:	bf00      	nop
	...
 800e4c0:	3fe921fb 	.word	0x3fe921fb
 800e4c4:	7fefffff 	.word	0x7fefffff

0800e4c8 <floor>:
 800e4c8:	ec51 0b10 	vmov	r0, r1, d0
 800e4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e4d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e4d8:	2e13      	cmp	r6, #19
 800e4da:	460c      	mov	r4, r1
 800e4dc:	ee10 5a10 	vmov	r5, s0
 800e4e0:	4680      	mov	r8, r0
 800e4e2:	dc34      	bgt.n	800e54e <floor+0x86>
 800e4e4:	2e00      	cmp	r6, #0
 800e4e6:	da16      	bge.n	800e516 <floor+0x4e>
 800e4e8:	a335      	add	r3, pc, #212	; (adr r3, 800e5c0 <floor+0xf8>)
 800e4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ee:	f7f1 fee5 	bl	80002bc <__adddf3>
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	f7f2 fb27 	bl	8000b48 <__aeabi_dcmpgt>
 800e4fa:	b148      	cbz	r0, 800e510 <floor+0x48>
 800e4fc:	2c00      	cmp	r4, #0
 800e4fe:	da59      	bge.n	800e5b4 <floor+0xec>
 800e500:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e504:	4a30      	ldr	r2, [pc, #192]	; (800e5c8 <floor+0x100>)
 800e506:	432b      	orrs	r3, r5
 800e508:	2500      	movs	r5, #0
 800e50a:	42ab      	cmp	r3, r5
 800e50c:	bf18      	it	ne
 800e50e:	4614      	movne	r4, r2
 800e510:	4621      	mov	r1, r4
 800e512:	4628      	mov	r0, r5
 800e514:	e025      	b.n	800e562 <floor+0x9a>
 800e516:	4f2d      	ldr	r7, [pc, #180]	; (800e5cc <floor+0x104>)
 800e518:	4137      	asrs	r7, r6
 800e51a:	ea01 0307 	and.w	r3, r1, r7
 800e51e:	4303      	orrs	r3, r0
 800e520:	d01f      	beq.n	800e562 <floor+0x9a>
 800e522:	a327      	add	r3, pc, #156	; (adr r3, 800e5c0 <floor+0xf8>)
 800e524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e528:	f7f1 fec8 	bl	80002bc <__adddf3>
 800e52c:	2200      	movs	r2, #0
 800e52e:	2300      	movs	r3, #0
 800e530:	f7f2 fb0a 	bl	8000b48 <__aeabi_dcmpgt>
 800e534:	2800      	cmp	r0, #0
 800e536:	d0eb      	beq.n	800e510 <floor+0x48>
 800e538:	2c00      	cmp	r4, #0
 800e53a:	bfbe      	ittt	lt
 800e53c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e540:	fa43 f606 	asrlt.w	r6, r3, r6
 800e544:	19a4      	addlt	r4, r4, r6
 800e546:	ea24 0407 	bic.w	r4, r4, r7
 800e54a:	2500      	movs	r5, #0
 800e54c:	e7e0      	b.n	800e510 <floor+0x48>
 800e54e:	2e33      	cmp	r6, #51	; 0x33
 800e550:	dd0b      	ble.n	800e56a <floor+0xa2>
 800e552:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e556:	d104      	bne.n	800e562 <floor+0x9a>
 800e558:	ee10 2a10 	vmov	r2, s0
 800e55c:	460b      	mov	r3, r1
 800e55e:	f7f1 fead 	bl	80002bc <__adddf3>
 800e562:	ec41 0b10 	vmov	d0, r0, r1
 800e566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e56a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e56e:	f04f 33ff 	mov.w	r3, #4294967295
 800e572:	fa23 f707 	lsr.w	r7, r3, r7
 800e576:	4207      	tst	r7, r0
 800e578:	d0f3      	beq.n	800e562 <floor+0x9a>
 800e57a:	a311      	add	r3, pc, #68	; (adr r3, 800e5c0 <floor+0xf8>)
 800e57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e580:	f7f1 fe9c 	bl	80002bc <__adddf3>
 800e584:	2200      	movs	r2, #0
 800e586:	2300      	movs	r3, #0
 800e588:	f7f2 fade 	bl	8000b48 <__aeabi_dcmpgt>
 800e58c:	2800      	cmp	r0, #0
 800e58e:	d0bf      	beq.n	800e510 <floor+0x48>
 800e590:	2c00      	cmp	r4, #0
 800e592:	da02      	bge.n	800e59a <floor+0xd2>
 800e594:	2e14      	cmp	r6, #20
 800e596:	d103      	bne.n	800e5a0 <floor+0xd8>
 800e598:	3401      	adds	r4, #1
 800e59a:	ea25 0507 	bic.w	r5, r5, r7
 800e59e:	e7b7      	b.n	800e510 <floor+0x48>
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e5a6:	fa03 f606 	lsl.w	r6, r3, r6
 800e5aa:	4435      	add	r5, r6
 800e5ac:	4545      	cmp	r5, r8
 800e5ae:	bf38      	it	cc
 800e5b0:	18e4      	addcc	r4, r4, r3
 800e5b2:	e7f2      	b.n	800e59a <floor+0xd2>
 800e5b4:	2500      	movs	r5, #0
 800e5b6:	462c      	mov	r4, r5
 800e5b8:	e7aa      	b.n	800e510 <floor+0x48>
 800e5ba:	bf00      	nop
 800e5bc:	f3af 8000 	nop.w
 800e5c0:	8800759c 	.word	0x8800759c
 800e5c4:	7e37e43c 	.word	0x7e37e43c
 800e5c8:	bff00000 	.word	0xbff00000
 800e5cc:	000fffff 	.word	0x000fffff

0800e5d0 <sin>:
 800e5d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5d2:	ec51 0b10 	vmov	r0, r1, d0
 800e5d6:	4a20      	ldr	r2, [pc, #128]	; (800e658 <sin+0x88>)
 800e5d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	dc07      	bgt.n	800e5f0 <sin+0x20>
 800e5e0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800e650 <sin+0x80>
 800e5e4:	2000      	movs	r0, #0
 800e5e6:	f000 fe37 	bl	800f258 <__kernel_sin>
 800e5ea:	ec51 0b10 	vmov	r0, r1, d0
 800e5ee:	e007      	b.n	800e600 <sin+0x30>
 800e5f0:	4a1a      	ldr	r2, [pc, #104]	; (800e65c <sin+0x8c>)
 800e5f2:	4293      	cmp	r3, r2
 800e5f4:	dd09      	ble.n	800e60a <sin+0x3a>
 800e5f6:	ee10 2a10 	vmov	r2, s0
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	f7f1 fe5c 	bl	80002b8 <__aeabi_dsub>
 800e600:	ec41 0b10 	vmov	d0, r0, r1
 800e604:	b005      	add	sp, #20
 800e606:	f85d fb04 	ldr.w	pc, [sp], #4
 800e60a:	4668      	mov	r0, sp
 800e60c:	f000 f828 	bl	800e660 <__ieee754_rem_pio2>
 800e610:	f000 0003 	and.w	r0, r0, #3
 800e614:	2801      	cmp	r0, #1
 800e616:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e61a:	ed9d 0b00 	vldr	d0, [sp]
 800e61e:	d004      	beq.n	800e62a <sin+0x5a>
 800e620:	2802      	cmp	r0, #2
 800e622:	d005      	beq.n	800e630 <sin+0x60>
 800e624:	b970      	cbnz	r0, 800e644 <sin+0x74>
 800e626:	2001      	movs	r0, #1
 800e628:	e7dd      	b.n	800e5e6 <sin+0x16>
 800e62a:	f000 fa0d 	bl	800ea48 <__kernel_cos>
 800e62e:	e7dc      	b.n	800e5ea <sin+0x1a>
 800e630:	2001      	movs	r0, #1
 800e632:	f000 fe11 	bl	800f258 <__kernel_sin>
 800e636:	ec53 2b10 	vmov	r2, r3, d0
 800e63a:	ee10 0a10 	vmov	r0, s0
 800e63e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e642:	e7dd      	b.n	800e600 <sin+0x30>
 800e644:	f000 fa00 	bl	800ea48 <__kernel_cos>
 800e648:	e7f5      	b.n	800e636 <sin+0x66>
 800e64a:	bf00      	nop
 800e64c:	f3af 8000 	nop.w
	...
 800e658:	3fe921fb 	.word	0x3fe921fb
 800e65c:	7fefffff 	.word	0x7fefffff

0800e660 <__ieee754_rem_pio2>:
 800e660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e664:	ec57 6b10 	vmov	r6, r7, d0
 800e668:	4bc3      	ldr	r3, [pc, #780]	; (800e978 <__ieee754_rem_pio2+0x318>)
 800e66a:	b08d      	sub	sp, #52	; 0x34
 800e66c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e670:	4598      	cmp	r8, r3
 800e672:	4604      	mov	r4, r0
 800e674:	9704      	str	r7, [sp, #16]
 800e676:	dc07      	bgt.n	800e688 <__ieee754_rem_pio2+0x28>
 800e678:	2200      	movs	r2, #0
 800e67a:	2300      	movs	r3, #0
 800e67c:	ed84 0b00 	vstr	d0, [r4]
 800e680:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e684:	2500      	movs	r5, #0
 800e686:	e027      	b.n	800e6d8 <__ieee754_rem_pio2+0x78>
 800e688:	4bbc      	ldr	r3, [pc, #752]	; (800e97c <__ieee754_rem_pio2+0x31c>)
 800e68a:	4598      	cmp	r8, r3
 800e68c:	dc75      	bgt.n	800e77a <__ieee754_rem_pio2+0x11a>
 800e68e:	9b04      	ldr	r3, [sp, #16]
 800e690:	4dbb      	ldr	r5, [pc, #748]	; (800e980 <__ieee754_rem_pio2+0x320>)
 800e692:	2b00      	cmp	r3, #0
 800e694:	ee10 0a10 	vmov	r0, s0
 800e698:	a3a9      	add	r3, pc, #676	; (adr r3, 800e940 <__ieee754_rem_pio2+0x2e0>)
 800e69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69e:	4639      	mov	r1, r7
 800e6a0:	dd36      	ble.n	800e710 <__ieee754_rem_pio2+0xb0>
 800e6a2:	f7f1 fe09 	bl	80002b8 <__aeabi_dsub>
 800e6a6:	45a8      	cmp	r8, r5
 800e6a8:	4606      	mov	r6, r0
 800e6aa:	460f      	mov	r7, r1
 800e6ac:	d018      	beq.n	800e6e0 <__ieee754_rem_pio2+0x80>
 800e6ae:	a3a6      	add	r3, pc, #664	; (adr r3, 800e948 <__ieee754_rem_pio2+0x2e8>)
 800e6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b4:	f7f1 fe00 	bl	80002b8 <__aeabi_dsub>
 800e6b8:	4602      	mov	r2, r0
 800e6ba:	460b      	mov	r3, r1
 800e6bc:	e9c4 2300 	strd	r2, r3, [r4]
 800e6c0:	4630      	mov	r0, r6
 800e6c2:	4639      	mov	r1, r7
 800e6c4:	f7f1 fdf8 	bl	80002b8 <__aeabi_dsub>
 800e6c8:	a39f      	add	r3, pc, #636	; (adr r3, 800e948 <__ieee754_rem_pio2+0x2e8>)
 800e6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ce:	f7f1 fdf3 	bl	80002b8 <__aeabi_dsub>
 800e6d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e6d6:	2501      	movs	r5, #1
 800e6d8:	4628      	mov	r0, r5
 800e6da:	b00d      	add	sp, #52	; 0x34
 800e6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6e0:	a39b      	add	r3, pc, #620	; (adr r3, 800e950 <__ieee754_rem_pio2+0x2f0>)
 800e6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e6:	f7f1 fde7 	bl	80002b8 <__aeabi_dsub>
 800e6ea:	a39b      	add	r3, pc, #620	; (adr r3, 800e958 <__ieee754_rem_pio2+0x2f8>)
 800e6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f0:	4606      	mov	r6, r0
 800e6f2:	460f      	mov	r7, r1
 800e6f4:	f7f1 fde0 	bl	80002b8 <__aeabi_dsub>
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	460b      	mov	r3, r1
 800e6fc:	e9c4 2300 	strd	r2, r3, [r4]
 800e700:	4630      	mov	r0, r6
 800e702:	4639      	mov	r1, r7
 800e704:	f7f1 fdd8 	bl	80002b8 <__aeabi_dsub>
 800e708:	a393      	add	r3, pc, #588	; (adr r3, 800e958 <__ieee754_rem_pio2+0x2f8>)
 800e70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70e:	e7de      	b.n	800e6ce <__ieee754_rem_pio2+0x6e>
 800e710:	f7f1 fdd4 	bl	80002bc <__adddf3>
 800e714:	45a8      	cmp	r8, r5
 800e716:	4606      	mov	r6, r0
 800e718:	460f      	mov	r7, r1
 800e71a:	d016      	beq.n	800e74a <__ieee754_rem_pio2+0xea>
 800e71c:	a38a      	add	r3, pc, #552	; (adr r3, 800e948 <__ieee754_rem_pio2+0x2e8>)
 800e71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e722:	f7f1 fdcb 	bl	80002bc <__adddf3>
 800e726:	4602      	mov	r2, r0
 800e728:	460b      	mov	r3, r1
 800e72a:	e9c4 2300 	strd	r2, r3, [r4]
 800e72e:	4630      	mov	r0, r6
 800e730:	4639      	mov	r1, r7
 800e732:	f7f1 fdc1 	bl	80002b8 <__aeabi_dsub>
 800e736:	a384      	add	r3, pc, #528	; (adr r3, 800e948 <__ieee754_rem_pio2+0x2e8>)
 800e738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73c:	f7f1 fdbe 	bl	80002bc <__adddf3>
 800e740:	f04f 35ff 	mov.w	r5, #4294967295
 800e744:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e748:	e7c6      	b.n	800e6d8 <__ieee754_rem_pio2+0x78>
 800e74a:	a381      	add	r3, pc, #516	; (adr r3, 800e950 <__ieee754_rem_pio2+0x2f0>)
 800e74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e750:	f7f1 fdb4 	bl	80002bc <__adddf3>
 800e754:	a380      	add	r3, pc, #512	; (adr r3, 800e958 <__ieee754_rem_pio2+0x2f8>)
 800e756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e75a:	4606      	mov	r6, r0
 800e75c:	460f      	mov	r7, r1
 800e75e:	f7f1 fdad 	bl	80002bc <__adddf3>
 800e762:	4602      	mov	r2, r0
 800e764:	460b      	mov	r3, r1
 800e766:	e9c4 2300 	strd	r2, r3, [r4]
 800e76a:	4630      	mov	r0, r6
 800e76c:	4639      	mov	r1, r7
 800e76e:	f7f1 fda3 	bl	80002b8 <__aeabi_dsub>
 800e772:	a379      	add	r3, pc, #484	; (adr r3, 800e958 <__ieee754_rem_pio2+0x2f8>)
 800e774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e778:	e7e0      	b.n	800e73c <__ieee754_rem_pio2+0xdc>
 800e77a:	4b82      	ldr	r3, [pc, #520]	; (800e984 <__ieee754_rem_pio2+0x324>)
 800e77c:	4598      	cmp	r8, r3
 800e77e:	f300 80d0 	bgt.w	800e922 <__ieee754_rem_pio2+0x2c2>
 800e782:	f000 fe23 	bl	800f3cc <fabs>
 800e786:	ec57 6b10 	vmov	r6, r7, d0
 800e78a:	ee10 0a10 	vmov	r0, s0
 800e78e:	a374      	add	r3, pc, #464	; (adr r3, 800e960 <__ieee754_rem_pio2+0x300>)
 800e790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e794:	4639      	mov	r1, r7
 800e796:	f7f1 ff47 	bl	8000628 <__aeabi_dmul>
 800e79a:	2200      	movs	r2, #0
 800e79c:	4b7a      	ldr	r3, [pc, #488]	; (800e988 <__ieee754_rem_pio2+0x328>)
 800e79e:	f7f1 fd8d 	bl	80002bc <__adddf3>
 800e7a2:	f7f2 f9db 	bl	8000b5c <__aeabi_d2iz>
 800e7a6:	4605      	mov	r5, r0
 800e7a8:	f7f1 fed4 	bl	8000554 <__aeabi_i2d>
 800e7ac:	a364      	add	r3, pc, #400	; (adr r3, 800e940 <__ieee754_rem_pio2+0x2e0>)
 800e7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7b6:	f7f1 ff37 	bl	8000628 <__aeabi_dmul>
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	460b      	mov	r3, r1
 800e7be:	4630      	mov	r0, r6
 800e7c0:	4639      	mov	r1, r7
 800e7c2:	f7f1 fd79 	bl	80002b8 <__aeabi_dsub>
 800e7c6:	a360      	add	r3, pc, #384	; (adr r3, 800e948 <__ieee754_rem_pio2+0x2e8>)
 800e7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7cc:	4682      	mov	sl, r0
 800e7ce:	468b      	mov	fp, r1
 800e7d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7d4:	f7f1 ff28 	bl	8000628 <__aeabi_dmul>
 800e7d8:	2d1f      	cmp	r5, #31
 800e7da:	4606      	mov	r6, r0
 800e7dc:	460f      	mov	r7, r1
 800e7de:	dc0c      	bgt.n	800e7fa <__ieee754_rem_pio2+0x19a>
 800e7e0:	1e6a      	subs	r2, r5, #1
 800e7e2:	4b6a      	ldr	r3, [pc, #424]	; (800e98c <__ieee754_rem_pio2+0x32c>)
 800e7e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7e8:	4543      	cmp	r3, r8
 800e7ea:	d006      	beq.n	800e7fa <__ieee754_rem_pio2+0x19a>
 800e7ec:	4632      	mov	r2, r6
 800e7ee:	463b      	mov	r3, r7
 800e7f0:	4650      	mov	r0, sl
 800e7f2:	4659      	mov	r1, fp
 800e7f4:	f7f1 fd60 	bl	80002b8 <__aeabi_dsub>
 800e7f8:	e00e      	b.n	800e818 <__ieee754_rem_pio2+0x1b8>
 800e7fa:	4632      	mov	r2, r6
 800e7fc:	463b      	mov	r3, r7
 800e7fe:	4650      	mov	r0, sl
 800e800:	4659      	mov	r1, fp
 800e802:	f7f1 fd59 	bl	80002b8 <__aeabi_dsub>
 800e806:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e80a:	9305      	str	r3, [sp, #20]
 800e80c:	9a05      	ldr	r2, [sp, #20]
 800e80e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e812:	1ad3      	subs	r3, r2, r3
 800e814:	2b10      	cmp	r3, #16
 800e816:	dc02      	bgt.n	800e81e <__ieee754_rem_pio2+0x1be>
 800e818:	e9c4 0100 	strd	r0, r1, [r4]
 800e81c:	e039      	b.n	800e892 <__ieee754_rem_pio2+0x232>
 800e81e:	a34c      	add	r3, pc, #304	; (adr r3, 800e950 <__ieee754_rem_pio2+0x2f0>)
 800e820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e824:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e828:	f7f1 fefe 	bl	8000628 <__aeabi_dmul>
 800e82c:	4606      	mov	r6, r0
 800e82e:	460f      	mov	r7, r1
 800e830:	4602      	mov	r2, r0
 800e832:	460b      	mov	r3, r1
 800e834:	4650      	mov	r0, sl
 800e836:	4659      	mov	r1, fp
 800e838:	f7f1 fd3e 	bl	80002b8 <__aeabi_dsub>
 800e83c:	4602      	mov	r2, r0
 800e83e:	460b      	mov	r3, r1
 800e840:	4680      	mov	r8, r0
 800e842:	4689      	mov	r9, r1
 800e844:	4650      	mov	r0, sl
 800e846:	4659      	mov	r1, fp
 800e848:	f7f1 fd36 	bl	80002b8 <__aeabi_dsub>
 800e84c:	4632      	mov	r2, r6
 800e84e:	463b      	mov	r3, r7
 800e850:	f7f1 fd32 	bl	80002b8 <__aeabi_dsub>
 800e854:	a340      	add	r3, pc, #256	; (adr r3, 800e958 <__ieee754_rem_pio2+0x2f8>)
 800e856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85a:	4606      	mov	r6, r0
 800e85c:	460f      	mov	r7, r1
 800e85e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e862:	f7f1 fee1 	bl	8000628 <__aeabi_dmul>
 800e866:	4632      	mov	r2, r6
 800e868:	463b      	mov	r3, r7
 800e86a:	f7f1 fd25 	bl	80002b8 <__aeabi_dsub>
 800e86e:	4602      	mov	r2, r0
 800e870:	460b      	mov	r3, r1
 800e872:	4606      	mov	r6, r0
 800e874:	460f      	mov	r7, r1
 800e876:	4640      	mov	r0, r8
 800e878:	4649      	mov	r1, r9
 800e87a:	f7f1 fd1d 	bl	80002b8 <__aeabi_dsub>
 800e87e:	9a05      	ldr	r2, [sp, #20]
 800e880:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e884:	1ad3      	subs	r3, r2, r3
 800e886:	2b31      	cmp	r3, #49	; 0x31
 800e888:	dc20      	bgt.n	800e8cc <__ieee754_rem_pio2+0x26c>
 800e88a:	e9c4 0100 	strd	r0, r1, [r4]
 800e88e:	46c2      	mov	sl, r8
 800e890:	46cb      	mov	fp, r9
 800e892:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e896:	4650      	mov	r0, sl
 800e898:	4642      	mov	r2, r8
 800e89a:	464b      	mov	r3, r9
 800e89c:	4659      	mov	r1, fp
 800e89e:	f7f1 fd0b 	bl	80002b8 <__aeabi_dsub>
 800e8a2:	463b      	mov	r3, r7
 800e8a4:	4632      	mov	r2, r6
 800e8a6:	f7f1 fd07 	bl	80002b8 <__aeabi_dsub>
 800e8aa:	9b04      	ldr	r3, [sp, #16]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e8b2:	f6bf af11 	bge.w	800e6d8 <__ieee754_rem_pio2+0x78>
 800e8b6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e8ba:	6063      	str	r3, [r4, #4]
 800e8bc:	f8c4 8000 	str.w	r8, [r4]
 800e8c0:	60a0      	str	r0, [r4, #8]
 800e8c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8c6:	60e3      	str	r3, [r4, #12]
 800e8c8:	426d      	negs	r5, r5
 800e8ca:	e705      	b.n	800e6d8 <__ieee754_rem_pio2+0x78>
 800e8cc:	a326      	add	r3, pc, #152	; (adr r3, 800e968 <__ieee754_rem_pio2+0x308>)
 800e8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8d6:	f7f1 fea7 	bl	8000628 <__aeabi_dmul>
 800e8da:	4606      	mov	r6, r0
 800e8dc:	460f      	mov	r7, r1
 800e8de:	4602      	mov	r2, r0
 800e8e0:	460b      	mov	r3, r1
 800e8e2:	4640      	mov	r0, r8
 800e8e4:	4649      	mov	r1, r9
 800e8e6:	f7f1 fce7 	bl	80002b8 <__aeabi_dsub>
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	460b      	mov	r3, r1
 800e8ee:	4682      	mov	sl, r0
 800e8f0:	468b      	mov	fp, r1
 800e8f2:	4640      	mov	r0, r8
 800e8f4:	4649      	mov	r1, r9
 800e8f6:	f7f1 fcdf 	bl	80002b8 <__aeabi_dsub>
 800e8fa:	4632      	mov	r2, r6
 800e8fc:	463b      	mov	r3, r7
 800e8fe:	f7f1 fcdb 	bl	80002b8 <__aeabi_dsub>
 800e902:	a31b      	add	r3, pc, #108	; (adr r3, 800e970 <__ieee754_rem_pio2+0x310>)
 800e904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e908:	4606      	mov	r6, r0
 800e90a:	460f      	mov	r7, r1
 800e90c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e910:	f7f1 fe8a 	bl	8000628 <__aeabi_dmul>
 800e914:	4632      	mov	r2, r6
 800e916:	463b      	mov	r3, r7
 800e918:	f7f1 fcce 	bl	80002b8 <__aeabi_dsub>
 800e91c:	4606      	mov	r6, r0
 800e91e:	460f      	mov	r7, r1
 800e920:	e764      	b.n	800e7ec <__ieee754_rem_pio2+0x18c>
 800e922:	4b1b      	ldr	r3, [pc, #108]	; (800e990 <__ieee754_rem_pio2+0x330>)
 800e924:	4598      	cmp	r8, r3
 800e926:	dd35      	ble.n	800e994 <__ieee754_rem_pio2+0x334>
 800e928:	ee10 2a10 	vmov	r2, s0
 800e92c:	463b      	mov	r3, r7
 800e92e:	4630      	mov	r0, r6
 800e930:	4639      	mov	r1, r7
 800e932:	f7f1 fcc1 	bl	80002b8 <__aeabi_dsub>
 800e936:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e93a:	e9c4 0100 	strd	r0, r1, [r4]
 800e93e:	e6a1      	b.n	800e684 <__ieee754_rem_pio2+0x24>
 800e940:	54400000 	.word	0x54400000
 800e944:	3ff921fb 	.word	0x3ff921fb
 800e948:	1a626331 	.word	0x1a626331
 800e94c:	3dd0b461 	.word	0x3dd0b461
 800e950:	1a600000 	.word	0x1a600000
 800e954:	3dd0b461 	.word	0x3dd0b461
 800e958:	2e037073 	.word	0x2e037073
 800e95c:	3ba3198a 	.word	0x3ba3198a
 800e960:	6dc9c883 	.word	0x6dc9c883
 800e964:	3fe45f30 	.word	0x3fe45f30
 800e968:	2e000000 	.word	0x2e000000
 800e96c:	3ba3198a 	.word	0x3ba3198a
 800e970:	252049c1 	.word	0x252049c1
 800e974:	397b839a 	.word	0x397b839a
 800e978:	3fe921fb 	.word	0x3fe921fb
 800e97c:	4002d97b 	.word	0x4002d97b
 800e980:	3ff921fb 	.word	0x3ff921fb
 800e984:	413921fb 	.word	0x413921fb
 800e988:	3fe00000 	.word	0x3fe00000
 800e98c:	08013314 	.word	0x08013314
 800e990:	7fefffff 	.word	0x7fefffff
 800e994:	ea4f 5528 	mov.w	r5, r8, asr #20
 800e998:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800e99c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800e9a0:	4630      	mov	r0, r6
 800e9a2:	460f      	mov	r7, r1
 800e9a4:	f7f2 f8da 	bl	8000b5c <__aeabi_d2iz>
 800e9a8:	f7f1 fdd4 	bl	8000554 <__aeabi_i2d>
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	460b      	mov	r3, r1
 800e9b0:	4630      	mov	r0, r6
 800e9b2:	4639      	mov	r1, r7
 800e9b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e9b8:	f7f1 fc7e 	bl	80002b8 <__aeabi_dsub>
 800e9bc:	2200      	movs	r2, #0
 800e9be:	4b1f      	ldr	r3, [pc, #124]	; (800ea3c <__ieee754_rem_pio2+0x3dc>)
 800e9c0:	f7f1 fe32 	bl	8000628 <__aeabi_dmul>
 800e9c4:	460f      	mov	r7, r1
 800e9c6:	4606      	mov	r6, r0
 800e9c8:	f7f2 f8c8 	bl	8000b5c <__aeabi_d2iz>
 800e9cc:	f7f1 fdc2 	bl	8000554 <__aeabi_i2d>
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	460b      	mov	r3, r1
 800e9d4:	4630      	mov	r0, r6
 800e9d6:	4639      	mov	r1, r7
 800e9d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e9dc:	f7f1 fc6c 	bl	80002b8 <__aeabi_dsub>
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	4b16      	ldr	r3, [pc, #88]	; (800ea3c <__ieee754_rem_pio2+0x3dc>)
 800e9e4:	f7f1 fe20 	bl	8000628 <__aeabi_dmul>
 800e9e8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e9ec:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800e9f0:	f04f 0803 	mov.w	r8, #3
 800e9f4:	2600      	movs	r6, #0
 800e9f6:	2700      	movs	r7, #0
 800e9f8:	4632      	mov	r2, r6
 800e9fa:	463b      	mov	r3, r7
 800e9fc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ea00:	f108 3aff 	add.w	sl, r8, #4294967295
 800ea04:	f7f2 f878 	bl	8000af8 <__aeabi_dcmpeq>
 800ea08:	b9b0      	cbnz	r0, 800ea38 <__ieee754_rem_pio2+0x3d8>
 800ea0a:	4b0d      	ldr	r3, [pc, #52]	; (800ea40 <__ieee754_rem_pio2+0x3e0>)
 800ea0c:	9301      	str	r3, [sp, #4]
 800ea0e:	2302      	movs	r3, #2
 800ea10:	9300      	str	r3, [sp, #0]
 800ea12:	462a      	mov	r2, r5
 800ea14:	4643      	mov	r3, r8
 800ea16:	4621      	mov	r1, r4
 800ea18:	a806      	add	r0, sp, #24
 800ea1a:	f000 f8dd 	bl	800ebd8 <__kernel_rem_pio2>
 800ea1e:	9b04      	ldr	r3, [sp, #16]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	4605      	mov	r5, r0
 800ea24:	f6bf ae58 	bge.w	800e6d8 <__ieee754_rem_pio2+0x78>
 800ea28:	6863      	ldr	r3, [r4, #4]
 800ea2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ea2e:	6063      	str	r3, [r4, #4]
 800ea30:	68e3      	ldr	r3, [r4, #12]
 800ea32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ea36:	e746      	b.n	800e8c6 <__ieee754_rem_pio2+0x266>
 800ea38:	46d0      	mov	r8, sl
 800ea3a:	e7dd      	b.n	800e9f8 <__ieee754_rem_pio2+0x398>
 800ea3c:	41700000 	.word	0x41700000
 800ea40:	08013394 	.word	0x08013394
 800ea44:	00000000 	.word	0x00000000

0800ea48 <__kernel_cos>:
 800ea48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea4c:	ec59 8b10 	vmov	r8, r9, d0
 800ea50:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800ea54:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800ea58:	ed2d 8b02 	vpush	{d8}
 800ea5c:	eeb0 8a41 	vmov.f32	s16, s2
 800ea60:	eef0 8a61 	vmov.f32	s17, s3
 800ea64:	da07      	bge.n	800ea76 <__kernel_cos+0x2e>
 800ea66:	ee10 0a10 	vmov	r0, s0
 800ea6a:	4649      	mov	r1, r9
 800ea6c:	f7f2 f876 	bl	8000b5c <__aeabi_d2iz>
 800ea70:	2800      	cmp	r0, #0
 800ea72:	f000 8089 	beq.w	800eb88 <__kernel_cos+0x140>
 800ea76:	4642      	mov	r2, r8
 800ea78:	464b      	mov	r3, r9
 800ea7a:	4640      	mov	r0, r8
 800ea7c:	4649      	mov	r1, r9
 800ea7e:	f7f1 fdd3 	bl	8000628 <__aeabi_dmul>
 800ea82:	2200      	movs	r2, #0
 800ea84:	4b4e      	ldr	r3, [pc, #312]	; (800ebc0 <__kernel_cos+0x178>)
 800ea86:	4604      	mov	r4, r0
 800ea88:	460d      	mov	r5, r1
 800ea8a:	f7f1 fdcd 	bl	8000628 <__aeabi_dmul>
 800ea8e:	a340      	add	r3, pc, #256	; (adr r3, 800eb90 <__kernel_cos+0x148>)
 800ea90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea94:	4682      	mov	sl, r0
 800ea96:	468b      	mov	fp, r1
 800ea98:	4620      	mov	r0, r4
 800ea9a:	4629      	mov	r1, r5
 800ea9c:	f7f1 fdc4 	bl	8000628 <__aeabi_dmul>
 800eaa0:	a33d      	add	r3, pc, #244	; (adr r3, 800eb98 <__kernel_cos+0x150>)
 800eaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa6:	f7f1 fc09 	bl	80002bc <__adddf3>
 800eaaa:	4622      	mov	r2, r4
 800eaac:	462b      	mov	r3, r5
 800eaae:	f7f1 fdbb 	bl	8000628 <__aeabi_dmul>
 800eab2:	a33b      	add	r3, pc, #236	; (adr r3, 800eba0 <__kernel_cos+0x158>)
 800eab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab8:	f7f1 fbfe 	bl	80002b8 <__aeabi_dsub>
 800eabc:	4622      	mov	r2, r4
 800eabe:	462b      	mov	r3, r5
 800eac0:	f7f1 fdb2 	bl	8000628 <__aeabi_dmul>
 800eac4:	a338      	add	r3, pc, #224	; (adr r3, 800eba8 <__kernel_cos+0x160>)
 800eac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaca:	f7f1 fbf7 	bl	80002bc <__adddf3>
 800eace:	4622      	mov	r2, r4
 800ead0:	462b      	mov	r3, r5
 800ead2:	f7f1 fda9 	bl	8000628 <__aeabi_dmul>
 800ead6:	a336      	add	r3, pc, #216	; (adr r3, 800ebb0 <__kernel_cos+0x168>)
 800ead8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eadc:	f7f1 fbec 	bl	80002b8 <__aeabi_dsub>
 800eae0:	4622      	mov	r2, r4
 800eae2:	462b      	mov	r3, r5
 800eae4:	f7f1 fda0 	bl	8000628 <__aeabi_dmul>
 800eae8:	a333      	add	r3, pc, #204	; (adr r3, 800ebb8 <__kernel_cos+0x170>)
 800eaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaee:	f7f1 fbe5 	bl	80002bc <__adddf3>
 800eaf2:	4622      	mov	r2, r4
 800eaf4:	462b      	mov	r3, r5
 800eaf6:	f7f1 fd97 	bl	8000628 <__aeabi_dmul>
 800eafa:	4622      	mov	r2, r4
 800eafc:	462b      	mov	r3, r5
 800eafe:	f7f1 fd93 	bl	8000628 <__aeabi_dmul>
 800eb02:	ec53 2b18 	vmov	r2, r3, d8
 800eb06:	4604      	mov	r4, r0
 800eb08:	460d      	mov	r5, r1
 800eb0a:	4640      	mov	r0, r8
 800eb0c:	4649      	mov	r1, r9
 800eb0e:	f7f1 fd8b 	bl	8000628 <__aeabi_dmul>
 800eb12:	460b      	mov	r3, r1
 800eb14:	4602      	mov	r2, r0
 800eb16:	4629      	mov	r1, r5
 800eb18:	4620      	mov	r0, r4
 800eb1a:	f7f1 fbcd 	bl	80002b8 <__aeabi_dsub>
 800eb1e:	4b29      	ldr	r3, [pc, #164]	; (800ebc4 <__kernel_cos+0x17c>)
 800eb20:	429e      	cmp	r6, r3
 800eb22:	4680      	mov	r8, r0
 800eb24:	4689      	mov	r9, r1
 800eb26:	dc11      	bgt.n	800eb4c <__kernel_cos+0x104>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	4650      	mov	r0, sl
 800eb2e:	4659      	mov	r1, fp
 800eb30:	f7f1 fbc2 	bl	80002b8 <__aeabi_dsub>
 800eb34:	460b      	mov	r3, r1
 800eb36:	4924      	ldr	r1, [pc, #144]	; (800ebc8 <__kernel_cos+0x180>)
 800eb38:	4602      	mov	r2, r0
 800eb3a:	2000      	movs	r0, #0
 800eb3c:	f7f1 fbbc 	bl	80002b8 <__aeabi_dsub>
 800eb40:	ecbd 8b02 	vpop	{d8}
 800eb44:	ec41 0b10 	vmov	d0, r0, r1
 800eb48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb4c:	4b1f      	ldr	r3, [pc, #124]	; (800ebcc <__kernel_cos+0x184>)
 800eb4e:	491e      	ldr	r1, [pc, #120]	; (800ebc8 <__kernel_cos+0x180>)
 800eb50:	429e      	cmp	r6, r3
 800eb52:	bfcc      	ite	gt
 800eb54:	4d1e      	ldrgt	r5, [pc, #120]	; (800ebd0 <__kernel_cos+0x188>)
 800eb56:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800eb5a:	2400      	movs	r4, #0
 800eb5c:	4622      	mov	r2, r4
 800eb5e:	462b      	mov	r3, r5
 800eb60:	2000      	movs	r0, #0
 800eb62:	f7f1 fba9 	bl	80002b8 <__aeabi_dsub>
 800eb66:	4622      	mov	r2, r4
 800eb68:	4606      	mov	r6, r0
 800eb6a:	460f      	mov	r7, r1
 800eb6c:	462b      	mov	r3, r5
 800eb6e:	4650      	mov	r0, sl
 800eb70:	4659      	mov	r1, fp
 800eb72:	f7f1 fba1 	bl	80002b8 <__aeabi_dsub>
 800eb76:	4642      	mov	r2, r8
 800eb78:	464b      	mov	r3, r9
 800eb7a:	f7f1 fb9d 	bl	80002b8 <__aeabi_dsub>
 800eb7e:	4602      	mov	r2, r0
 800eb80:	460b      	mov	r3, r1
 800eb82:	4630      	mov	r0, r6
 800eb84:	4639      	mov	r1, r7
 800eb86:	e7d9      	b.n	800eb3c <__kernel_cos+0xf4>
 800eb88:	2000      	movs	r0, #0
 800eb8a:	490f      	ldr	r1, [pc, #60]	; (800ebc8 <__kernel_cos+0x180>)
 800eb8c:	e7d8      	b.n	800eb40 <__kernel_cos+0xf8>
 800eb8e:	bf00      	nop
 800eb90:	be8838d4 	.word	0xbe8838d4
 800eb94:	bda8fae9 	.word	0xbda8fae9
 800eb98:	bdb4b1c4 	.word	0xbdb4b1c4
 800eb9c:	3e21ee9e 	.word	0x3e21ee9e
 800eba0:	809c52ad 	.word	0x809c52ad
 800eba4:	3e927e4f 	.word	0x3e927e4f
 800eba8:	19cb1590 	.word	0x19cb1590
 800ebac:	3efa01a0 	.word	0x3efa01a0
 800ebb0:	16c15177 	.word	0x16c15177
 800ebb4:	3f56c16c 	.word	0x3f56c16c
 800ebb8:	5555554c 	.word	0x5555554c
 800ebbc:	3fa55555 	.word	0x3fa55555
 800ebc0:	3fe00000 	.word	0x3fe00000
 800ebc4:	3fd33332 	.word	0x3fd33332
 800ebc8:	3ff00000 	.word	0x3ff00000
 800ebcc:	3fe90000 	.word	0x3fe90000
 800ebd0:	3fd20000 	.word	0x3fd20000
 800ebd4:	00000000 	.word	0x00000000

0800ebd8 <__kernel_rem_pio2>:
 800ebd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebdc:	ed2d 8b02 	vpush	{d8}
 800ebe0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ebe4:	1ed4      	subs	r4, r2, #3
 800ebe6:	9308      	str	r3, [sp, #32]
 800ebe8:	9101      	str	r1, [sp, #4]
 800ebea:	4bc5      	ldr	r3, [pc, #788]	; (800ef00 <__kernel_rem_pio2+0x328>)
 800ebec:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ebee:	9009      	str	r0, [sp, #36]	; 0x24
 800ebf0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ebf4:	9304      	str	r3, [sp, #16]
 800ebf6:	9b08      	ldr	r3, [sp, #32]
 800ebf8:	3b01      	subs	r3, #1
 800ebfa:	9307      	str	r3, [sp, #28]
 800ebfc:	2318      	movs	r3, #24
 800ebfe:	fb94 f4f3 	sdiv	r4, r4, r3
 800ec02:	f06f 0317 	mvn.w	r3, #23
 800ec06:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800ec0a:	fb04 3303 	mla	r3, r4, r3, r3
 800ec0e:	eb03 0a02 	add.w	sl, r3, r2
 800ec12:	9b04      	ldr	r3, [sp, #16]
 800ec14:	9a07      	ldr	r2, [sp, #28]
 800ec16:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800eef0 <__kernel_rem_pio2+0x318>
 800ec1a:	eb03 0802 	add.w	r8, r3, r2
 800ec1e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ec20:	1aa7      	subs	r7, r4, r2
 800ec22:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ec26:	ae22      	add	r6, sp, #136	; 0x88
 800ec28:	2500      	movs	r5, #0
 800ec2a:	4545      	cmp	r5, r8
 800ec2c:	dd13      	ble.n	800ec56 <__kernel_rem_pio2+0x7e>
 800ec2e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800eef0 <__kernel_rem_pio2+0x318>
 800ec32:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ec36:	2600      	movs	r6, #0
 800ec38:	9b04      	ldr	r3, [sp, #16]
 800ec3a:	429e      	cmp	r6, r3
 800ec3c:	dc32      	bgt.n	800eca4 <__kernel_rem_pio2+0xcc>
 800ec3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec40:	9302      	str	r3, [sp, #8]
 800ec42:	9b08      	ldr	r3, [sp, #32]
 800ec44:	199d      	adds	r5, r3, r6
 800ec46:	ab22      	add	r3, sp, #136	; 0x88
 800ec48:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ec4c:	9306      	str	r3, [sp, #24]
 800ec4e:	ec59 8b18 	vmov	r8, r9, d8
 800ec52:	2700      	movs	r7, #0
 800ec54:	e01f      	b.n	800ec96 <__kernel_rem_pio2+0xbe>
 800ec56:	42ef      	cmn	r7, r5
 800ec58:	d407      	bmi.n	800ec6a <__kernel_rem_pio2+0x92>
 800ec5a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ec5e:	f7f1 fc79 	bl	8000554 <__aeabi_i2d>
 800ec62:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ec66:	3501      	adds	r5, #1
 800ec68:	e7df      	b.n	800ec2a <__kernel_rem_pio2+0x52>
 800ec6a:	ec51 0b18 	vmov	r0, r1, d8
 800ec6e:	e7f8      	b.n	800ec62 <__kernel_rem_pio2+0x8a>
 800ec70:	9906      	ldr	r1, [sp, #24]
 800ec72:	9d02      	ldr	r5, [sp, #8]
 800ec74:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800ec78:	9106      	str	r1, [sp, #24]
 800ec7a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800ec7e:	9502      	str	r5, [sp, #8]
 800ec80:	f7f1 fcd2 	bl	8000628 <__aeabi_dmul>
 800ec84:	4602      	mov	r2, r0
 800ec86:	460b      	mov	r3, r1
 800ec88:	4640      	mov	r0, r8
 800ec8a:	4649      	mov	r1, r9
 800ec8c:	f7f1 fb16 	bl	80002bc <__adddf3>
 800ec90:	3701      	adds	r7, #1
 800ec92:	4680      	mov	r8, r0
 800ec94:	4689      	mov	r9, r1
 800ec96:	9b07      	ldr	r3, [sp, #28]
 800ec98:	429f      	cmp	r7, r3
 800ec9a:	dde9      	ble.n	800ec70 <__kernel_rem_pio2+0x98>
 800ec9c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800eca0:	3601      	adds	r6, #1
 800eca2:	e7c9      	b.n	800ec38 <__kernel_rem_pio2+0x60>
 800eca4:	9b04      	ldr	r3, [sp, #16]
 800eca6:	aa0e      	add	r2, sp, #56	; 0x38
 800eca8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ecac:	930c      	str	r3, [sp, #48]	; 0x30
 800ecae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ecb0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ecb4:	9c04      	ldr	r4, [sp, #16]
 800ecb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800ecb8:	ab9a      	add	r3, sp, #616	; 0x268
 800ecba:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800ecbe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ecc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ecc6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800ecca:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800ecce:	ab9a      	add	r3, sp, #616	; 0x268
 800ecd0:	445b      	add	r3, fp
 800ecd2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800ecd6:	2500      	movs	r5, #0
 800ecd8:	1b63      	subs	r3, r4, r5
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	dc78      	bgt.n	800edd0 <__kernel_rem_pio2+0x1f8>
 800ecde:	4650      	mov	r0, sl
 800ece0:	ec49 8b10 	vmov	d0, r8, r9
 800ece4:	f000 fb7c 	bl	800f3e0 <scalbn>
 800ece8:	ec57 6b10 	vmov	r6, r7, d0
 800ecec:	2200      	movs	r2, #0
 800ecee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ecf2:	ee10 0a10 	vmov	r0, s0
 800ecf6:	4639      	mov	r1, r7
 800ecf8:	f7f1 fc96 	bl	8000628 <__aeabi_dmul>
 800ecfc:	ec41 0b10 	vmov	d0, r0, r1
 800ed00:	f7ff fbe2 	bl	800e4c8 <floor>
 800ed04:	2200      	movs	r2, #0
 800ed06:	ec51 0b10 	vmov	r0, r1, d0
 800ed0a:	4b7e      	ldr	r3, [pc, #504]	; (800ef04 <__kernel_rem_pio2+0x32c>)
 800ed0c:	f7f1 fc8c 	bl	8000628 <__aeabi_dmul>
 800ed10:	4602      	mov	r2, r0
 800ed12:	460b      	mov	r3, r1
 800ed14:	4630      	mov	r0, r6
 800ed16:	4639      	mov	r1, r7
 800ed18:	f7f1 face 	bl	80002b8 <__aeabi_dsub>
 800ed1c:	460f      	mov	r7, r1
 800ed1e:	4606      	mov	r6, r0
 800ed20:	f7f1 ff1c 	bl	8000b5c <__aeabi_d2iz>
 800ed24:	9006      	str	r0, [sp, #24]
 800ed26:	f7f1 fc15 	bl	8000554 <__aeabi_i2d>
 800ed2a:	4602      	mov	r2, r0
 800ed2c:	460b      	mov	r3, r1
 800ed2e:	4630      	mov	r0, r6
 800ed30:	4639      	mov	r1, r7
 800ed32:	f7f1 fac1 	bl	80002b8 <__aeabi_dsub>
 800ed36:	f1ba 0f00 	cmp.w	sl, #0
 800ed3a:	4606      	mov	r6, r0
 800ed3c:	460f      	mov	r7, r1
 800ed3e:	dd6c      	ble.n	800ee1a <__kernel_rem_pio2+0x242>
 800ed40:	1e62      	subs	r2, r4, #1
 800ed42:	ab0e      	add	r3, sp, #56	; 0x38
 800ed44:	f1ca 0118 	rsb	r1, sl, #24
 800ed48:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ed4c:	9d06      	ldr	r5, [sp, #24]
 800ed4e:	fa40 f301 	asr.w	r3, r0, r1
 800ed52:	441d      	add	r5, r3
 800ed54:	408b      	lsls	r3, r1
 800ed56:	1ac0      	subs	r0, r0, r3
 800ed58:	ab0e      	add	r3, sp, #56	; 0x38
 800ed5a:	9506      	str	r5, [sp, #24]
 800ed5c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ed60:	f1ca 0317 	rsb	r3, sl, #23
 800ed64:	fa40 f303 	asr.w	r3, r0, r3
 800ed68:	9302      	str	r3, [sp, #8]
 800ed6a:	9b02      	ldr	r3, [sp, #8]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	dd62      	ble.n	800ee36 <__kernel_rem_pio2+0x25e>
 800ed70:	9b06      	ldr	r3, [sp, #24]
 800ed72:	2200      	movs	r2, #0
 800ed74:	3301      	adds	r3, #1
 800ed76:	9306      	str	r3, [sp, #24]
 800ed78:	4615      	mov	r5, r2
 800ed7a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ed7e:	4294      	cmp	r4, r2
 800ed80:	f300 8095 	bgt.w	800eeae <__kernel_rem_pio2+0x2d6>
 800ed84:	f1ba 0f00 	cmp.w	sl, #0
 800ed88:	dd07      	ble.n	800ed9a <__kernel_rem_pio2+0x1c2>
 800ed8a:	f1ba 0f01 	cmp.w	sl, #1
 800ed8e:	f000 80a2 	beq.w	800eed6 <__kernel_rem_pio2+0x2fe>
 800ed92:	f1ba 0f02 	cmp.w	sl, #2
 800ed96:	f000 80c1 	beq.w	800ef1c <__kernel_rem_pio2+0x344>
 800ed9a:	9b02      	ldr	r3, [sp, #8]
 800ed9c:	2b02      	cmp	r3, #2
 800ed9e:	d14a      	bne.n	800ee36 <__kernel_rem_pio2+0x25e>
 800eda0:	4632      	mov	r2, r6
 800eda2:	463b      	mov	r3, r7
 800eda4:	2000      	movs	r0, #0
 800eda6:	4958      	ldr	r1, [pc, #352]	; (800ef08 <__kernel_rem_pio2+0x330>)
 800eda8:	f7f1 fa86 	bl	80002b8 <__aeabi_dsub>
 800edac:	4606      	mov	r6, r0
 800edae:	460f      	mov	r7, r1
 800edb0:	2d00      	cmp	r5, #0
 800edb2:	d040      	beq.n	800ee36 <__kernel_rem_pio2+0x25e>
 800edb4:	4650      	mov	r0, sl
 800edb6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800eef8 <__kernel_rem_pio2+0x320>
 800edba:	f000 fb11 	bl	800f3e0 <scalbn>
 800edbe:	4630      	mov	r0, r6
 800edc0:	4639      	mov	r1, r7
 800edc2:	ec53 2b10 	vmov	r2, r3, d0
 800edc6:	f7f1 fa77 	bl	80002b8 <__aeabi_dsub>
 800edca:	4606      	mov	r6, r0
 800edcc:	460f      	mov	r7, r1
 800edce:	e032      	b.n	800ee36 <__kernel_rem_pio2+0x25e>
 800edd0:	2200      	movs	r2, #0
 800edd2:	4b4e      	ldr	r3, [pc, #312]	; (800ef0c <__kernel_rem_pio2+0x334>)
 800edd4:	4640      	mov	r0, r8
 800edd6:	4649      	mov	r1, r9
 800edd8:	f7f1 fc26 	bl	8000628 <__aeabi_dmul>
 800eddc:	f7f1 febe 	bl	8000b5c <__aeabi_d2iz>
 800ede0:	f7f1 fbb8 	bl	8000554 <__aeabi_i2d>
 800ede4:	2200      	movs	r2, #0
 800ede6:	4b4a      	ldr	r3, [pc, #296]	; (800ef10 <__kernel_rem_pio2+0x338>)
 800ede8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800edec:	f7f1 fc1c 	bl	8000628 <__aeabi_dmul>
 800edf0:	4602      	mov	r2, r0
 800edf2:	460b      	mov	r3, r1
 800edf4:	4640      	mov	r0, r8
 800edf6:	4649      	mov	r1, r9
 800edf8:	f7f1 fa5e 	bl	80002b8 <__aeabi_dsub>
 800edfc:	f7f1 feae 	bl	8000b5c <__aeabi_d2iz>
 800ee00:	ab0e      	add	r3, sp, #56	; 0x38
 800ee02:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800ee06:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800ee0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee0e:	f7f1 fa55 	bl	80002bc <__adddf3>
 800ee12:	3501      	adds	r5, #1
 800ee14:	4680      	mov	r8, r0
 800ee16:	4689      	mov	r9, r1
 800ee18:	e75e      	b.n	800ecd8 <__kernel_rem_pio2+0x100>
 800ee1a:	d105      	bne.n	800ee28 <__kernel_rem_pio2+0x250>
 800ee1c:	1e63      	subs	r3, r4, #1
 800ee1e:	aa0e      	add	r2, sp, #56	; 0x38
 800ee20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ee24:	15c3      	asrs	r3, r0, #23
 800ee26:	e79f      	b.n	800ed68 <__kernel_rem_pio2+0x190>
 800ee28:	2200      	movs	r2, #0
 800ee2a:	4b3a      	ldr	r3, [pc, #232]	; (800ef14 <__kernel_rem_pio2+0x33c>)
 800ee2c:	f7f1 fe82 	bl	8000b34 <__aeabi_dcmpge>
 800ee30:	2800      	cmp	r0, #0
 800ee32:	d139      	bne.n	800eea8 <__kernel_rem_pio2+0x2d0>
 800ee34:	9002      	str	r0, [sp, #8]
 800ee36:	2200      	movs	r2, #0
 800ee38:	2300      	movs	r3, #0
 800ee3a:	4630      	mov	r0, r6
 800ee3c:	4639      	mov	r1, r7
 800ee3e:	f7f1 fe5b 	bl	8000af8 <__aeabi_dcmpeq>
 800ee42:	2800      	cmp	r0, #0
 800ee44:	f000 80c7 	beq.w	800efd6 <__kernel_rem_pio2+0x3fe>
 800ee48:	1e65      	subs	r5, r4, #1
 800ee4a:	462b      	mov	r3, r5
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	9904      	ldr	r1, [sp, #16]
 800ee50:	428b      	cmp	r3, r1
 800ee52:	da6a      	bge.n	800ef2a <__kernel_rem_pio2+0x352>
 800ee54:	2a00      	cmp	r2, #0
 800ee56:	f000 8088 	beq.w	800ef6a <__kernel_rem_pio2+0x392>
 800ee5a:	ab0e      	add	r3, sp, #56	; 0x38
 800ee5c:	f1aa 0a18 	sub.w	sl, sl, #24
 800ee60:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	f000 80b4 	beq.w	800efd2 <__kernel_rem_pio2+0x3fa>
 800ee6a:	4650      	mov	r0, sl
 800ee6c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800eef8 <__kernel_rem_pio2+0x320>
 800ee70:	f000 fab6 	bl	800f3e0 <scalbn>
 800ee74:	00ec      	lsls	r4, r5, #3
 800ee76:	ab72      	add	r3, sp, #456	; 0x1c8
 800ee78:	191e      	adds	r6, r3, r4
 800ee7a:	ec59 8b10 	vmov	r8, r9, d0
 800ee7e:	f106 0a08 	add.w	sl, r6, #8
 800ee82:	462f      	mov	r7, r5
 800ee84:	2f00      	cmp	r7, #0
 800ee86:	f280 80df 	bge.w	800f048 <__kernel_rem_pio2+0x470>
 800ee8a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800eef0 <__kernel_rem_pio2+0x318>
 800ee8e:	f04f 0a00 	mov.w	sl, #0
 800ee92:	eba5 030a 	sub.w	r3, r5, sl
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	f2c0 810a 	blt.w	800f0b0 <__kernel_rem_pio2+0x4d8>
 800ee9c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800ef18 <__kernel_rem_pio2+0x340>
 800eea0:	ec59 8b18 	vmov	r8, r9, d8
 800eea4:	2700      	movs	r7, #0
 800eea6:	e0f5      	b.n	800f094 <__kernel_rem_pio2+0x4bc>
 800eea8:	2302      	movs	r3, #2
 800eeaa:	9302      	str	r3, [sp, #8]
 800eeac:	e760      	b.n	800ed70 <__kernel_rem_pio2+0x198>
 800eeae:	ab0e      	add	r3, sp, #56	; 0x38
 800eeb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeb4:	b94d      	cbnz	r5, 800eeca <__kernel_rem_pio2+0x2f2>
 800eeb6:	b12b      	cbz	r3, 800eec4 <__kernel_rem_pio2+0x2ec>
 800eeb8:	a80e      	add	r0, sp, #56	; 0x38
 800eeba:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800eebe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800eec2:	2301      	movs	r3, #1
 800eec4:	3201      	adds	r2, #1
 800eec6:	461d      	mov	r5, r3
 800eec8:	e759      	b.n	800ed7e <__kernel_rem_pio2+0x1a6>
 800eeca:	a80e      	add	r0, sp, #56	; 0x38
 800eecc:	1acb      	subs	r3, r1, r3
 800eece:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800eed2:	462b      	mov	r3, r5
 800eed4:	e7f6      	b.n	800eec4 <__kernel_rem_pio2+0x2ec>
 800eed6:	1e62      	subs	r2, r4, #1
 800eed8:	ab0e      	add	r3, sp, #56	; 0x38
 800eeda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eede:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800eee2:	a90e      	add	r1, sp, #56	; 0x38
 800eee4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800eee8:	e757      	b.n	800ed9a <__kernel_rem_pio2+0x1c2>
 800eeea:	bf00      	nop
 800eeec:	f3af 8000 	nop.w
	...
 800eefc:	3ff00000 	.word	0x3ff00000
 800ef00:	080134e0 	.word	0x080134e0
 800ef04:	40200000 	.word	0x40200000
 800ef08:	3ff00000 	.word	0x3ff00000
 800ef0c:	3e700000 	.word	0x3e700000
 800ef10:	41700000 	.word	0x41700000
 800ef14:	3fe00000 	.word	0x3fe00000
 800ef18:	080134a0 	.word	0x080134a0
 800ef1c:	1e62      	subs	r2, r4, #1
 800ef1e:	ab0e      	add	r3, sp, #56	; 0x38
 800ef20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef24:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ef28:	e7db      	b.n	800eee2 <__kernel_rem_pio2+0x30a>
 800ef2a:	a90e      	add	r1, sp, #56	; 0x38
 800ef2c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ef30:	3b01      	subs	r3, #1
 800ef32:	430a      	orrs	r2, r1
 800ef34:	e78b      	b.n	800ee4e <__kernel_rem_pio2+0x276>
 800ef36:	3301      	adds	r3, #1
 800ef38:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ef3c:	2900      	cmp	r1, #0
 800ef3e:	d0fa      	beq.n	800ef36 <__kernel_rem_pio2+0x35e>
 800ef40:	9a08      	ldr	r2, [sp, #32]
 800ef42:	4422      	add	r2, r4
 800ef44:	00d2      	lsls	r2, r2, #3
 800ef46:	a922      	add	r1, sp, #136	; 0x88
 800ef48:	18e3      	adds	r3, r4, r3
 800ef4a:	9206      	str	r2, [sp, #24]
 800ef4c:	440a      	add	r2, r1
 800ef4e:	9302      	str	r3, [sp, #8]
 800ef50:	f10b 0108 	add.w	r1, fp, #8
 800ef54:	f102 0308 	add.w	r3, r2, #8
 800ef58:	1c66      	adds	r6, r4, #1
 800ef5a:	910a      	str	r1, [sp, #40]	; 0x28
 800ef5c:	2500      	movs	r5, #0
 800ef5e:	930d      	str	r3, [sp, #52]	; 0x34
 800ef60:	9b02      	ldr	r3, [sp, #8]
 800ef62:	42b3      	cmp	r3, r6
 800ef64:	da04      	bge.n	800ef70 <__kernel_rem_pio2+0x398>
 800ef66:	461c      	mov	r4, r3
 800ef68:	e6a6      	b.n	800ecb8 <__kernel_rem_pio2+0xe0>
 800ef6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	e7e3      	b.n	800ef38 <__kernel_rem_pio2+0x360>
 800ef70:	9b06      	ldr	r3, [sp, #24]
 800ef72:	18ef      	adds	r7, r5, r3
 800ef74:	ab22      	add	r3, sp, #136	; 0x88
 800ef76:	441f      	add	r7, r3
 800ef78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef7a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ef7e:	f7f1 fae9 	bl	8000554 <__aeabi_i2d>
 800ef82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef84:	461c      	mov	r4, r3
 800ef86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef88:	e9c7 0100 	strd	r0, r1, [r7]
 800ef8c:	eb03 0b05 	add.w	fp, r3, r5
 800ef90:	2700      	movs	r7, #0
 800ef92:	f04f 0800 	mov.w	r8, #0
 800ef96:	f04f 0900 	mov.w	r9, #0
 800ef9a:	9b07      	ldr	r3, [sp, #28]
 800ef9c:	429f      	cmp	r7, r3
 800ef9e:	dd08      	ble.n	800efb2 <__kernel_rem_pio2+0x3da>
 800efa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efa2:	aa72      	add	r2, sp, #456	; 0x1c8
 800efa4:	18eb      	adds	r3, r5, r3
 800efa6:	4413      	add	r3, r2
 800efa8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800efac:	3601      	adds	r6, #1
 800efae:	3508      	adds	r5, #8
 800efb0:	e7d6      	b.n	800ef60 <__kernel_rem_pio2+0x388>
 800efb2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800efb6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800efba:	f7f1 fb35 	bl	8000628 <__aeabi_dmul>
 800efbe:	4602      	mov	r2, r0
 800efc0:	460b      	mov	r3, r1
 800efc2:	4640      	mov	r0, r8
 800efc4:	4649      	mov	r1, r9
 800efc6:	f7f1 f979 	bl	80002bc <__adddf3>
 800efca:	3701      	adds	r7, #1
 800efcc:	4680      	mov	r8, r0
 800efce:	4689      	mov	r9, r1
 800efd0:	e7e3      	b.n	800ef9a <__kernel_rem_pio2+0x3c2>
 800efd2:	3d01      	subs	r5, #1
 800efd4:	e741      	b.n	800ee5a <__kernel_rem_pio2+0x282>
 800efd6:	f1ca 0000 	rsb	r0, sl, #0
 800efda:	ec47 6b10 	vmov	d0, r6, r7
 800efde:	f000 f9ff 	bl	800f3e0 <scalbn>
 800efe2:	ec57 6b10 	vmov	r6, r7, d0
 800efe6:	2200      	movs	r2, #0
 800efe8:	4b99      	ldr	r3, [pc, #612]	; (800f250 <__kernel_rem_pio2+0x678>)
 800efea:	ee10 0a10 	vmov	r0, s0
 800efee:	4639      	mov	r1, r7
 800eff0:	f7f1 fda0 	bl	8000b34 <__aeabi_dcmpge>
 800eff4:	b1f8      	cbz	r0, 800f036 <__kernel_rem_pio2+0x45e>
 800eff6:	2200      	movs	r2, #0
 800eff8:	4b96      	ldr	r3, [pc, #600]	; (800f254 <__kernel_rem_pio2+0x67c>)
 800effa:	4630      	mov	r0, r6
 800effc:	4639      	mov	r1, r7
 800effe:	f7f1 fb13 	bl	8000628 <__aeabi_dmul>
 800f002:	f7f1 fdab 	bl	8000b5c <__aeabi_d2iz>
 800f006:	4680      	mov	r8, r0
 800f008:	f7f1 faa4 	bl	8000554 <__aeabi_i2d>
 800f00c:	2200      	movs	r2, #0
 800f00e:	4b90      	ldr	r3, [pc, #576]	; (800f250 <__kernel_rem_pio2+0x678>)
 800f010:	f7f1 fb0a 	bl	8000628 <__aeabi_dmul>
 800f014:	460b      	mov	r3, r1
 800f016:	4602      	mov	r2, r0
 800f018:	4639      	mov	r1, r7
 800f01a:	4630      	mov	r0, r6
 800f01c:	f7f1 f94c 	bl	80002b8 <__aeabi_dsub>
 800f020:	f7f1 fd9c 	bl	8000b5c <__aeabi_d2iz>
 800f024:	1c65      	adds	r5, r4, #1
 800f026:	ab0e      	add	r3, sp, #56	; 0x38
 800f028:	f10a 0a18 	add.w	sl, sl, #24
 800f02c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f030:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f034:	e719      	b.n	800ee6a <__kernel_rem_pio2+0x292>
 800f036:	4630      	mov	r0, r6
 800f038:	4639      	mov	r1, r7
 800f03a:	f7f1 fd8f 	bl	8000b5c <__aeabi_d2iz>
 800f03e:	ab0e      	add	r3, sp, #56	; 0x38
 800f040:	4625      	mov	r5, r4
 800f042:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f046:	e710      	b.n	800ee6a <__kernel_rem_pio2+0x292>
 800f048:	ab0e      	add	r3, sp, #56	; 0x38
 800f04a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800f04e:	f7f1 fa81 	bl	8000554 <__aeabi_i2d>
 800f052:	4642      	mov	r2, r8
 800f054:	464b      	mov	r3, r9
 800f056:	f7f1 fae7 	bl	8000628 <__aeabi_dmul>
 800f05a:	2200      	movs	r2, #0
 800f05c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800f060:	4b7c      	ldr	r3, [pc, #496]	; (800f254 <__kernel_rem_pio2+0x67c>)
 800f062:	4640      	mov	r0, r8
 800f064:	4649      	mov	r1, r9
 800f066:	f7f1 fadf 	bl	8000628 <__aeabi_dmul>
 800f06a:	3f01      	subs	r7, #1
 800f06c:	4680      	mov	r8, r0
 800f06e:	4689      	mov	r9, r1
 800f070:	e708      	b.n	800ee84 <__kernel_rem_pio2+0x2ac>
 800f072:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800f076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800f07e:	f7f1 fad3 	bl	8000628 <__aeabi_dmul>
 800f082:	4602      	mov	r2, r0
 800f084:	460b      	mov	r3, r1
 800f086:	4640      	mov	r0, r8
 800f088:	4649      	mov	r1, r9
 800f08a:	f7f1 f917 	bl	80002bc <__adddf3>
 800f08e:	3701      	adds	r7, #1
 800f090:	4680      	mov	r8, r0
 800f092:	4689      	mov	r9, r1
 800f094:	9b04      	ldr	r3, [sp, #16]
 800f096:	429f      	cmp	r7, r3
 800f098:	dc01      	bgt.n	800f09e <__kernel_rem_pio2+0x4c6>
 800f09a:	45ba      	cmp	sl, r7
 800f09c:	dae9      	bge.n	800f072 <__kernel_rem_pio2+0x49a>
 800f09e:	ab4a      	add	r3, sp, #296	; 0x128
 800f0a0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f0a4:	e9c3 8900 	strd	r8, r9, [r3]
 800f0a8:	f10a 0a01 	add.w	sl, sl, #1
 800f0ac:	3e08      	subs	r6, #8
 800f0ae:	e6f0      	b.n	800ee92 <__kernel_rem_pio2+0x2ba>
 800f0b0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f0b2:	2b03      	cmp	r3, #3
 800f0b4:	d85b      	bhi.n	800f16e <__kernel_rem_pio2+0x596>
 800f0b6:	e8df f003 	tbb	[pc, r3]
 800f0ba:	264a      	.short	0x264a
 800f0bc:	0226      	.short	0x0226
 800f0be:	ab9a      	add	r3, sp, #616	; 0x268
 800f0c0:	441c      	add	r4, r3
 800f0c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f0c6:	46a2      	mov	sl, r4
 800f0c8:	46ab      	mov	fp, r5
 800f0ca:	f1bb 0f00 	cmp.w	fp, #0
 800f0ce:	dc6c      	bgt.n	800f1aa <__kernel_rem_pio2+0x5d2>
 800f0d0:	46a2      	mov	sl, r4
 800f0d2:	46ab      	mov	fp, r5
 800f0d4:	f1bb 0f01 	cmp.w	fp, #1
 800f0d8:	f300 8086 	bgt.w	800f1e8 <__kernel_rem_pio2+0x610>
 800f0dc:	2000      	movs	r0, #0
 800f0de:	2100      	movs	r1, #0
 800f0e0:	2d01      	cmp	r5, #1
 800f0e2:	f300 80a0 	bgt.w	800f226 <__kernel_rem_pio2+0x64e>
 800f0e6:	9b02      	ldr	r3, [sp, #8]
 800f0e8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800f0ec:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	f040 809e 	bne.w	800f232 <__kernel_rem_pio2+0x65a>
 800f0f6:	9b01      	ldr	r3, [sp, #4]
 800f0f8:	e9c3 7800 	strd	r7, r8, [r3]
 800f0fc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f100:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f104:	e033      	b.n	800f16e <__kernel_rem_pio2+0x596>
 800f106:	3408      	adds	r4, #8
 800f108:	ab4a      	add	r3, sp, #296	; 0x128
 800f10a:	441c      	add	r4, r3
 800f10c:	462e      	mov	r6, r5
 800f10e:	2000      	movs	r0, #0
 800f110:	2100      	movs	r1, #0
 800f112:	2e00      	cmp	r6, #0
 800f114:	da3a      	bge.n	800f18c <__kernel_rem_pio2+0x5b4>
 800f116:	9b02      	ldr	r3, [sp, #8]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d03d      	beq.n	800f198 <__kernel_rem_pio2+0x5c0>
 800f11c:	4602      	mov	r2, r0
 800f11e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f122:	9c01      	ldr	r4, [sp, #4]
 800f124:	e9c4 2300 	strd	r2, r3, [r4]
 800f128:	4602      	mov	r2, r0
 800f12a:	460b      	mov	r3, r1
 800f12c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f130:	f7f1 f8c2 	bl	80002b8 <__aeabi_dsub>
 800f134:	ae4c      	add	r6, sp, #304	; 0x130
 800f136:	2401      	movs	r4, #1
 800f138:	42a5      	cmp	r5, r4
 800f13a:	da30      	bge.n	800f19e <__kernel_rem_pio2+0x5c6>
 800f13c:	9b02      	ldr	r3, [sp, #8]
 800f13e:	b113      	cbz	r3, 800f146 <__kernel_rem_pio2+0x56e>
 800f140:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f144:	4619      	mov	r1, r3
 800f146:	9b01      	ldr	r3, [sp, #4]
 800f148:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f14c:	e00f      	b.n	800f16e <__kernel_rem_pio2+0x596>
 800f14e:	ab9a      	add	r3, sp, #616	; 0x268
 800f150:	441c      	add	r4, r3
 800f152:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f156:	2000      	movs	r0, #0
 800f158:	2100      	movs	r1, #0
 800f15a:	2d00      	cmp	r5, #0
 800f15c:	da10      	bge.n	800f180 <__kernel_rem_pio2+0x5a8>
 800f15e:	9b02      	ldr	r3, [sp, #8]
 800f160:	b113      	cbz	r3, 800f168 <__kernel_rem_pio2+0x590>
 800f162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f166:	4619      	mov	r1, r3
 800f168:	9b01      	ldr	r3, [sp, #4]
 800f16a:	e9c3 0100 	strd	r0, r1, [r3]
 800f16e:	9b06      	ldr	r3, [sp, #24]
 800f170:	f003 0007 	and.w	r0, r3, #7
 800f174:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f178:	ecbd 8b02 	vpop	{d8}
 800f17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f180:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f184:	f7f1 f89a 	bl	80002bc <__adddf3>
 800f188:	3d01      	subs	r5, #1
 800f18a:	e7e6      	b.n	800f15a <__kernel_rem_pio2+0x582>
 800f18c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f190:	f7f1 f894 	bl	80002bc <__adddf3>
 800f194:	3e01      	subs	r6, #1
 800f196:	e7bc      	b.n	800f112 <__kernel_rem_pio2+0x53a>
 800f198:	4602      	mov	r2, r0
 800f19a:	460b      	mov	r3, r1
 800f19c:	e7c1      	b.n	800f122 <__kernel_rem_pio2+0x54a>
 800f19e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f1a2:	f7f1 f88b 	bl	80002bc <__adddf3>
 800f1a6:	3401      	adds	r4, #1
 800f1a8:	e7c6      	b.n	800f138 <__kernel_rem_pio2+0x560>
 800f1aa:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800f1ae:	ed3a 7b02 	vldmdb	sl!, {d7}
 800f1b2:	4640      	mov	r0, r8
 800f1b4:	ec53 2b17 	vmov	r2, r3, d7
 800f1b8:	4649      	mov	r1, r9
 800f1ba:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f1be:	f7f1 f87d 	bl	80002bc <__adddf3>
 800f1c2:	4602      	mov	r2, r0
 800f1c4:	460b      	mov	r3, r1
 800f1c6:	4606      	mov	r6, r0
 800f1c8:	460f      	mov	r7, r1
 800f1ca:	4640      	mov	r0, r8
 800f1cc:	4649      	mov	r1, r9
 800f1ce:	f7f1 f873 	bl	80002b8 <__aeabi_dsub>
 800f1d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1d6:	f7f1 f871 	bl	80002bc <__adddf3>
 800f1da:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f1de:	e9ca 0100 	strd	r0, r1, [sl]
 800f1e2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800f1e6:	e770      	b.n	800f0ca <__kernel_rem_pio2+0x4f2>
 800f1e8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800f1ec:	ed3a 7b02 	vldmdb	sl!, {d7}
 800f1f0:	4630      	mov	r0, r6
 800f1f2:	ec53 2b17 	vmov	r2, r3, d7
 800f1f6:	4639      	mov	r1, r7
 800f1f8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f1fc:	f7f1 f85e 	bl	80002bc <__adddf3>
 800f200:	4602      	mov	r2, r0
 800f202:	460b      	mov	r3, r1
 800f204:	4680      	mov	r8, r0
 800f206:	4689      	mov	r9, r1
 800f208:	4630      	mov	r0, r6
 800f20a:	4639      	mov	r1, r7
 800f20c:	f7f1 f854 	bl	80002b8 <__aeabi_dsub>
 800f210:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f214:	f7f1 f852 	bl	80002bc <__adddf3>
 800f218:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f21c:	e9ca 0100 	strd	r0, r1, [sl]
 800f220:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800f224:	e756      	b.n	800f0d4 <__kernel_rem_pio2+0x4fc>
 800f226:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f22a:	f7f1 f847 	bl	80002bc <__adddf3>
 800f22e:	3d01      	subs	r5, #1
 800f230:	e756      	b.n	800f0e0 <__kernel_rem_pio2+0x508>
 800f232:	9b01      	ldr	r3, [sp, #4]
 800f234:	9a01      	ldr	r2, [sp, #4]
 800f236:	601f      	str	r7, [r3, #0]
 800f238:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800f23c:	605c      	str	r4, [r3, #4]
 800f23e:	609d      	str	r5, [r3, #8]
 800f240:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f244:	60d3      	str	r3, [r2, #12]
 800f246:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f24a:	6110      	str	r0, [r2, #16]
 800f24c:	6153      	str	r3, [r2, #20]
 800f24e:	e78e      	b.n	800f16e <__kernel_rem_pio2+0x596>
 800f250:	41700000 	.word	0x41700000
 800f254:	3e700000 	.word	0x3e700000

0800f258 <__kernel_sin>:
 800f258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f25c:	ec55 4b10 	vmov	r4, r5, d0
 800f260:	b085      	sub	sp, #20
 800f262:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f266:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f26a:	ed8d 1b00 	vstr	d1, [sp]
 800f26e:	9002      	str	r0, [sp, #8]
 800f270:	da06      	bge.n	800f280 <__kernel_sin+0x28>
 800f272:	ee10 0a10 	vmov	r0, s0
 800f276:	4629      	mov	r1, r5
 800f278:	f7f1 fc70 	bl	8000b5c <__aeabi_d2iz>
 800f27c:	2800      	cmp	r0, #0
 800f27e:	d051      	beq.n	800f324 <__kernel_sin+0xcc>
 800f280:	4622      	mov	r2, r4
 800f282:	462b      	mov	r3, r5
 800f284:	4620      	mov	r0, r4
 800f286:	4629      	mov	r1, r5
 800f288:	f7f1 f9ce 	bl	8000628 <__aeabi_dmul>
 800f28c:	4682      	mov	sl, r0
 800f28e:	468b      	mov	fp, r1
 800f290:	4602      	mov	r2, r0
 800f292:	460b      	mov	r3, r1
 800f294:	4620      	mov	r0, r4
 800f296:	4629      	mov	r1, r5
 800f298:	f7f1 f9c6 	bl	8000628 <__aeabi_dmul>
 800f29c:	a341      	add	r3, pc, #260	; (adr r3, 800f3a4 <__kernel_sin+0x14c>)
 800f29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a2:	4680      	mov	r8, r0
 800f2a4:	4689      	mov	r9, r1
 800f2a6:	4650      	mov	r0, sl
 800f2a8:	4659      	mov	r1, fp
 800f2aa:	f7f1 f9bd 	bl	8000628 <__aeabi_dmul>
 800f2ae:	a33f      	add	r3, pc, #252	; (adr r3, 800f3ac <__kernel_sin+0x154>)
 800f2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b4:	f7f1 f800 	bl	80002b8 <__aeabi_dsub>
 800f2b8:	4652      	mov	r2, sl
 800f2ba:	465b      	mov	r3, fp
 800f2bc:	f7f1 f9b4 	bl	8000628 <__aeabi_dmul>
 800f2c0:	a33c      	add	r3, pc, #240	; (adr r3, 800f3b4 <__kernel_sin+0x15c>)
 800f2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c6:	f7f0 fff9 	bl	80002bc <__adddf3>
 800f2ca:	4652      	mov	r2, sl
 800f2cc:	465b      	mov	r3, fp
 800f2ce:	f7f1 f9ab 	bl	8000628 <__aeabi_dmul>
 800f2d2:	a33a      	add	r3, pc, #232	; (adr r3, 800f3bc <__kernel_sin+0x164>)
 800f2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d8:	f7f0 ffee 	bl	80002b8 <__aeabi_dsub>
 800f2dc:	4652      	mov	r2, sl
 800f2de:	465b      	mov	r3, fp
 800f2e0:	f7f1 f9a2 	bl	8000628 <__aeabi_dmul>
 800f2e4:	a337      	add	r3, pc, #220	; (adr r3, 800f3c4 <__kernel_sin+0x16c>)
 800f2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ea:	f7f0 ffe7 	bl	80002bc <__adddf3>
 800f2ee:	9b02      	ldr	r3, [sp, #8]
 800f2f0:	4606      	mov	r6, r0
 800f2f2:	460f      	mov	r7, r1
 800f2f4:	b9db      	cbnz	r3, 800f32e <__kernel_sin+0xd6>
 800f2f6:	4602      	mov	r2, r0
 800f2f8:	460b      	mov	r3, r1
 800f2fa:	4650      	mov	r0, sl
 800f2fc:	4659      	mov	r1, fp
 800f2fe:	f7f1 f993 	bl	8000628 <__aeabi_dmul>
 800f302:	a325      	add	r3, pc, #148	; (adr r3, 800f398 <__kernel_sin+0x140>)
 800f304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f308:	f7f0 ffd6 	bl	80002b8 <__aeabi_dsub>
 800f30c:	4642      	mov	r2, r8
 800f30e:	464b      	mov	r3, r9
 800f310:	f7f1 f98a 	bl	8000628 <__aeabi_dmul>
 800f314:	4602      	mov	r2, r0
 800f316:	460b      	mov	r3, r1
 800f318:	4620      	mov	r0, r4
 800f31a:	4629      	mov	r1, r5
 800f31c:	f7f0 ffce 	bl	80002bc <__adddf3>
 800f320:	4604      	mov	r4, r0
 800f322:	460d      	mov	r5, r1
 800f324:	ec45 4b10 	vmov	d0, r4, r5
 800f328:	b005      	add	sp, #20
 800f32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f32e:	2200      	movs	r2, #0
 800f330:	4b1b      	ldr	r3, [pc, #108]	; (800f3a0 <__kernel_sin+0x148>)
 800f332:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f336:	f7f1 f977 	bl	8000628 <__aeabi_dmul>
 800f33a:	4632      	mov	r2, r6
 800f33c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f340:	463b      	mov	r3, r7
 800f342:	4640      	mov	r0, r8
 800f344:	4649      	mov	r1, r9
 800f346:	f7f1 f96f 	bl	8000628 <__aeabi_dmul>
 800f34a:	4602      	mov	r2, r0
 800f34c:	460b      	mov	r3, r1
 800f34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f352:	f7f0 ffb1 	bl	80002b8 <__aeabi_dsub>
 800f356:	4652      	mov	r2, sl
 800f358:	465b      	mov	r3, fp
 800f35a:	f7f1 f965 	bl	8000628 <__aeabi_dmul>
 800f35e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f362:	f7f0 ffa9 	bl	80002b8 <__aeabi_dsub>
 800f366:	a30c      	add	r3, pc, #48	; (adr r3, 800f398 <__kernel_sin+0x140>)
 800f368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f36c:	4606      	mov	r6, r0
 800f36e:	460f      	mov	r7, r1
 800f370:	4640      	mov	r0, r8
 800f372:	4649      	mov	r1, r9
 800f374:	f7f1 f958 	bl	8000628 <__aeabi_dmul>
 800f378:	4602      	mov	r2, r0
 800f37a:	460b      	mov	r3, r1
 800f37c:	4630      	mov	r0, r6
 800f37e:	4639      	mov	r1, r7
 800f380:	f7f0 ff9c 	bl	80002bc <__adddf3>
 800f384:	4602      	mov	r2, r0
 800f386:	460b      	mov	r3, r1
 800f388:	4620      	mov	r0, r4
 800f38a:	4629      	mov	r1, r5
 800f38c:	f7f0 ff94 	bl	80002b8 <__aeabi_dsub>
 800f390:	e7c6      	b.n	800f320 <__kernel_sin+0xc8>
 800f392:	bf00      	nop
 800f394:	f3af 8000 	nop.w
 800f398:	55555549 	.word	0x55555549
 800f39c:	3fc55555 	.word	0x3fc55555
 800f3a0:	3fe00000 	.word	0x3fe00000
 800f3a4:	5acfd57c 	.word	0x5acfd57c
 800f3a8:	3de5d93a 	.word	0x3de5d93a
 800f3ac:	8a2b9ceb 	.word	0x8a2b9ceb
 800f3b0:	3e5ae5e6 	.word	0x3e5ae5e6
 800f3b4:	57b1fe7d 	.word	0x57b1fe7d
 800f3b8:	3ec71de3 	.word	0x3ec71de3
 800f3bc:	19c161d5 	.word	0x19c161d5
 800f3c0:	3f2a01a0 	.word	0x3f2a01a0
 800f3c4:	1110f8a6 	.word	0x1110f8a6
 800f3c8:	3f811111 	.word	0x3f811111

0800f3cc <fabs>:
 800f3cc:	ec51 0b10 	vmov	r0, r1, d0
 800f3d0:	ee10 2a10 	vmov	r2, s0
 800f3d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f3d8:	ec43 2b10 	vmov	d0, r2, r3
 800f3dc:	4770      	bx	lr
	...

0800f3e0 <scalbn>:
 800f3e0:	b570      	push	{r4, r5, r6, lr}
 800f3e2:	ec55 4b10 	vmov	r4, r5, d0
 800f3e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f3ea:	4606      	mov	r6, r0
 800f3ec:	462b      	mov	r3, r5
 800f3ee:	b9aa      	cbnz	r2, 800f41c <scalbn+0x3c>
 800f3f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f3f4:	4323      	orrs	r3, r4
 800f3f6:	d03b      	beq.n	800f470 <scalbn+0x90>
 800f3f8:	4b31      	ldr	r3, [pc, #196]	; (800f4c0 <scalbn+0xe0>)
 800f3fa:	4629      	mov	r1, r5
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	ee10 0a10 	vmov	r0, s0
 800f402:	f7f1 f911 	bl	8000628 <__aeabi_dmul>
 800f406:	4b2f      	ldr	r3, [pc, #188]	; (800f4c4 <scalbn+0xe4>)
 800f408:	429e      	cmp	r6, r3
 800f40a:	4604      	mov	r4, r0
 800f40c:	460d      	mov	r5, r1
 800f40e:	da12      	bge.n	800f436 <scalbn+0x56>
 800f410:	a327      	add	r3, pc, #156	; (adr r3, 800f4b0 <scalbn+0xd0>)
 800f412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f416:	f7f1 f907 	bl	8000628 <__aeabi_dmul>
 800f41a:	e009      	b.n	800f430 <scalbn+0x50>
 800f41c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f420:	428a      	cmp	r2, r1
 800f422:	d10c      	bne.n	800f43e <scalbn+0x5e>
 800f424:	ee10 2a10 	vmov	r2, s0
 800f428:	4620      	mov	r0, r4
 800f42a:	4629      	mov	r1, r5
 800f42c:	f7f0 ff46 	bl	80002bc <__adddf3>
 800f430:	4604      	mov	r4, r0
 800f432:	460d      	mov	r5, r1
 800f434:	e01c      	b.n	800f470 <scalbn+0x90>
 800f436:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f43a:	460b      	mov	r3, r1
 800f43c:	3a36      	subs	r2, #54	; 0x36
 800f43e:	4432      	add	r2, r6
 800f440:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f444:	428a      	cmp	r2, r1
 800f446:	dd0b      	ble.n	800f460 <scalbn+0x80>
 800f448:	ec45 4b11 	vmov	d1, r4, r5
 800f44c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800f4b8 <scalbn+0xd8>
 800f450:	f000 f83c 	bl	800f4cc <copysign>
 800f454:	a318      	add	r3, pc, #96	; (adr r3, 800f4b8 <scalbn+0xd8>)
 800f456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f45a:	ec51 0b10 	vmov	r0, r1, d0
 800f45e:	e7da      	b.n	800f416 <scalbn+0x36>
 800f460:	2a00      	cmp	r2, #0
 800f462:	dd08      	ble.n	800f476 <scalbn+0x96>
 800f464:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f468:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f46c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f470:	ec45 4b10 	vmov	d0, r4, r5
 800f474:	bd70      	pop	{r4, r5, r6, pc}
 800f476:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f47a:	da0d      	bge.n	800f498 <scalbn+0xb8>
 800f47c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f480:	429e      	cmp	r6, r3
 800f482:	ec45 4b11 	vmov	d1, r4, r5
 800f486:	dce1      	bgt.n	800f44c <scalbn+0x6c>
 800f488:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800f4b0 <scalbn+0xd0>
 800f48c:	f000 f81e 	bl	800f4cc <copysign>
 800f490:	a307      	add	r3, pc, #28	; (adr r3, 800f4b0 <scalbn+0xd0>)
 800f492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f496:	e7e0      	b.n	800f45a <scalbn+0x7a>
 800f498:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f49c:	3236      	adds	r2, #54	; 0x36
 800f49e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f4a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	4629      	mov	r1, r5
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	4b06      	ldr	r3, [pc, #24]	; (800f4c8 <scalbn+0xe8>)
 800f4ae:	e7b2      	b.n	800f416 <scalbn+0x36>
 800f4b0:	c2f8f359 	.word	0xc2f8f359
 800f4b4:	01a56e1f 	.word	0x01a56e1f
 800f4b8:	8800759c 	.word	0x8800759c
 800f4bc:	7e37e43c 	.word	0x7e37e43c
 800f4c0:	43500000 	.word	0x43500000
 800f4c4:	ffff3cb0 	.word	0xffff3cb0
 800f4c8:	3c900000 	.word	0x3c900000

0800f4cc <copysign>:
 800f4cc:	ec51 0b10 	vmov	r0, r1, d0
 800f4d0:	ee11 0a90 	vmov	r0, s3
 800f4d4:	ee10 2a10 	vmov	r2, s0
 800f4d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f4dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800f4e0:	ea41 0300 	orr.w	r3, r1, r0
 800f4e4:	ec43 2b10 	vmov	d0, r2, r3
 800f4e8:	4770      	bx	lr
	...

0800f4ec <_init>:
 800f4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ee:	bf00      	nop
 800f4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4f2:	bc08      	pop	{r3}
 800f4f4:	469e      	mov	lr, r3
 800f4f6:	4770      	bx	lr

0800f4f8 <_fini>:
 800f4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4fa:	bf00      	nop
 800f4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4fe:	bc08      	pop	{r3}
 800f500:	469e      	mov	lr, r3
 800f502:	4770      	bx	lr
